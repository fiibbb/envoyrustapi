// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/service/tap/v4alpha/tap.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct StreamTapsRequest {
    // message fields
    pub identifier: ::protobuf::SingularPtrField<StreamTapsRequest_Identifier>,
    pub trace_id: u64,
    pub trace: ::protobuf::SingularPtrField<super::wrapper::TraceWrapper>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StreamTapsRequest {
    fn default() -> &'a StreamTapsRequest {
        <StreamTapsRequest as ::protobuf::Message>::default_instance()
    }
}

impl StreamTapsRequest {
    pub fn new() -> StreamTapsRequest {
        ::std::default::Default::default()
    }

    // .envoy.service.tap.v4alpha.StreamTapsRequest.Identifier identifier = 1;


    pub fn get_identifier(&self) -> &StreamTapsRequest_Identifier {
        self.identifier.as_ref().unwrap_or_else(|| <StreamTapsRequest_Identifier as ::protobuf::Message>::default_instance())
    }
    pub fn clear_identifier(&mut self) {
        self.identifier.clear();
    }

    pub fn has_identifier(&self) -> bool {
        self.identifier.is_some()
    }

    // Param is passed by value, moved
    pub fn set_identifier(&mut self, v: StreamTapsRequest_Identifier) {
        self.identifier = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_identifier(&mut self) -> &mut StreamTapsRequest_Identifier {
        if self.identifier.is_none() {
            self.identifier.set_default();
        }
        self.identifier.as_mut().unwrap()
    }

    // Take field
    pub fn take_identifier(&mut self) -> StreamTapsRequest_Identifier {
        self.identifier.take().unwrap_or_else(|| StreamTapsRequest_Identifier::new())
    }

    // uint64 trace_id = 2;


    pub fn get_trace_id(&self) -> u64 {
        self.trace_id
    }
    pub fn clear_trace_id(&mut self) {
        self.trace_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_trace_id(&mut self, v: u64) {
        self.trace_id = v;
    }

    // .envoy.data.tap.v3.TraceWrapper trace = 3;


    pub fn get_trace(&self) -> &super::wrapper::TraceWrapper {
        self.trace.as_ref().unwrap_or_else(|| <super::wrapper::TraceWrapper as ::protobuf::Message>::default_instance())
    }
    pub fn clear_trace(&mut self) {
        self.trace.clear();
    }

    pub fn has_trace(&self) -> bool {
        self.trace.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trace(&mut self, v: super::wrapper::TraceWrapper) {
        self.trace = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trace(&mut self) -> &mut super::wrapper::TraceWrapper {
        if self.trace.is_none() {
            self.trace.set_default();
        }
        self.trace.as_mut().unwrap()
    }

    // Take field
    pub fn take_trace(&mut self) -> super::wrapper::TraceWrapper {
        self.trace.take().unwrap_or_else(|| super::wrapper::TraceWrapper::new())
    }
}

impl ::protobuf::Message for StreamTapsRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.identifier {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.trace {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.identifier)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.trace_id = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.trace)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.identifier.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.trace_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.trace_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.trace.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.identifier.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.trace_id != 0 {
            os.write_uint64(2, self.trace_id)?;
        }
        if let Some(ref v) = self.trace.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StreamTapsRequest {
        StreamTapsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<StreamTapsRequest_Identifier>>(
                "identifier",
                |m: &StreamTapsRequest| { &m.identifier },
                |m: &mut StreamTapsRequest| { &mut m.identifier },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "trace_id",
                |m: &StreamTapsRequest| { &m.trace_id },
                |m: &mut StreamTapsRequest| { &mut m.trace_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::wrapper::TraceWrapper>>(
                "trace",
                |m: &StreamTapsRequest| { &m.trace },
                |m: &mut StreamTapsRequest| { &mut m.trace },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StreamTapsRequest>(
                "StreamTapsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StreamTapsRequest {
        static instance: ::protobuf::rt::LazyV2<StreamTapsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StreamTapsRequest::new)
    }
}

impl ::protobuf::Clear for StreamTapsRequest {
    fn clear(&mut self) {
        self.identifier.clear();
        self.trace_id = 0;
        self.trace.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StreamTapsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamTapsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StreamTapsRequest_Identifier {
    // message fields
    pub node: ::protobuf::SingularPtrField<super::base::Node>,
    pub tap_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StreamTapsRequest_Identifier {
    fn default() -> &'a StreamTapsRequest_Identifier {
        <StreamTapsRequest_Identifier as ::protobuf::Message>::default_instance()
    }
}

impl StreamTapsRequest_Identifier {
    pub fn new() -> StreamTapsRequest_Identifier {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v4alpha.Node node = 1;


    pub fn get_node(&self) -> &super::base::Node {
        self.node.as_ref().unwrap_or_else(|| <super::base::Node as ::protobuf::Message>::default_instance())
    }
    pub fn clear_node(&mut self) {
        self.node.clear();
    }

    pub fn has_node(&self) -> bool {
        self.node.is_some()
    }

    // Param is passed by value, moved
    pub fn set_node(&mut self, v: super::base::Node) {
        self.node = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node(&mut self) -> &mut super::base::Node {
        if self.node.is_none() {
            self.node.set_default();
        }
        self.node.as_mut().unwrap()
    }

    // Take field
    pub fn take_node(&mut self) -> super::base::Node {
        self.node.take().unwrap_or_else(|| super::base::Node::new())
    }

    // string tap_id = 2;


    pub fn get_tap_id(&self) -> &str {
        &self.tap_id
    }
    pub fn clear_tap_id(&mut self) {
        self.tap_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_tap_id(&mut self, v: ::std::string::String) {
        self.tap_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tap_id(&mut self) -> &mut ::std::string::String {
        &mut self.tap_id
    }

    // Take field
    pub fn take_tap_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tap_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for StreamTapsRequest_Identifier {
    fn is_initialized(&self) -> bool {
        for v in &self.node {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.node)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tap_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.node.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.tap_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.tap_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.node.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.tap_id.is_empty() {
            os.write_string(2, &self.tap_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StreamTapsRequest_Identifier {
        StreamTapsRequest_Identifier::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Node>>(
                "node",
                |m: &StreamTapsRequest_Identifier| { &m.node },
                |m: &mut StreamTapsRequest_Identifier| { &mut m.node },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tap_id",
                |m: &StreamTapsRequest_Identifier| { &m.tap_id },
                |m: &mut StreamTapsRequest_Identifier| { &mut m.tap_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StreamTapsRequest_Identifier>(
                "StreamTapsRequest.Identifier",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StreamTapsRequest_Identifier {
        static instance: ::protobuf::rt::LazyV2<StreamTapsRequest_Identifier> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StreamTapsRequest_Identifier::new)
    }
}

impl ::protobuf::Clear for StreamTapsRequest_Identifier {
    fn clear(&mut self) {
        self.node.clear();
        self.tap_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StreamTapsRequest_Identifier {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamTapsRequest_Identifier {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StreamTapsResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StreamTapsResponse {
    fn default() -> &'a StreamTapsResponse {
        <StreamTapsResponse as ::protobuf::Message>::default_instance()
    }
}

impl StreamTapsResponse {
    pub fn new() -> StreamTapsResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for StreamTapsResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StreamTapsResponse {
        StreamTapsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StreamTapsResponse>(
                "StreamTapsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StreamTapsResponse {
        static instance: ::protobuf::rt::LazyV2<StreamTapsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StreamTapsResponse::new)
    }
}

impl ::protobuf::Clear for StreamTapsResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StreamTapsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamTapsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#envoy/service/tap/v4alpha/tap.proto\x12\x19envoy.service.tap.v4alpha\
    \x1a$envoy/config/core/v4alpha/base.proto\x1a\x1fenvoy/data/tap/v3/wrapp\
    er.proto\x1a\x1dudpa/annotations/status.proto\x1a!udpa/annotations/versi\
    oning.proto\x1a\x17validate/validate.proto\"\x8c\x03\n\x11StreamTapsRequ\
    est\x12W\n\nidentifier\x18\x01\x20\x01(\x0b27.envoy.service.tap.v4alpha.\
    StreamTapsRequest.IdentifierR\nidentifier\x12\x19\n\x08trace_id\x18\x02\
    \x20\x01(\x04R\x07traceId\x125\n\x05trace\x18\x03\x20\x01(\x0b2\x1f.envo\
    y.data.tap.v3.TraceWrapperR\x05trace\x1a\x9c\x01\n\nIdentifier\x12=\n\
    \x04node\x18\x01\x20\x01(\x0b2\x1f.envoy.config.core.v4alpha.NodeR\x04no\
    deB\x08\xfaB\x05\x8a\x01\x02\x10\x01\x12\x15\n\x06tap_id\x18\x02\x20\x01\
    (\tR\x05tapId:8\x9a\xc5\x88\x1e3\n1envoy.service.tap.v3.StreamTapsReques\
    t.Identifier:-\x9a\xc5\x88\x1e(\n&envoy.service.tap.v3.StreamTapsRequest\
    \"D\n\x12StreamTapsResponse:.\x9a\xc5\x88\x1e)\n'envoy.service.tap.v3.St\
    reamTapsResponse2\x7f\n\x0eTapSinkService\x12m\n\nStreamTaps\x12,.envoy.\
    service.tap.v4alpha.StreamTapsRequest\x1a-.envoy.service.tap.v4alpha.Str\
    eamTapsResponse\"\0(\x01B@\n'io.envoyproxy.envoy.service.tap.v4alphaB\
    \x08TapProtoP\x01\x88\x01\x01\xba\x80\xc8\xd1\x06\x02\x10\x03b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
