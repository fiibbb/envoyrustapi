// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/extensions/wasm/v3/wasm.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct VmConfig {
    // message fields
    pub vm_id: ::std::string::String,
    pub runtime: ::std::string::String,
    pub code: ::protobuf::SingularPtrField<super::base::AsyncDataSource>,
    pub configuration: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    pub allow_precompiled: bool,
    pub nack_on_code_cache_miss: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VmConfig {
    fn default() -> &'a VmConfig {
        <VmConfig as ::protobuf::Message>::default_instance()
    }
}

impl VmConfig {
    pub fn new() -> VmConfig {
        ::std::default::Default::default()
    }

    // string vm_id = 1;


    pub fn get_vm_id(&self) -> &str {
        &self.vm_id
    }
    pub fn clear_vm_id(&mut self) {
        self.vm_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_vm_id(&mut self, v: ::std::string::String) {
        self.vm_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vm_id(&mut self) -> &mut ::std::string::String {
        &mut self.vm_id
    }

    // Take field
    pub fn take_vm_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.vm_id, ::std::string::String::new())
    }

    // string runtime = 2;


    pub fn get_runtime(&self) -> &str {
        &self.runtime
    }
    pub fn clear_runtime(&mut self) {
        self.runtime.clear();
    }

    // Param is passed by value, moved
    pub fn set_runtime(&mut self, v: ::std::string::String) {
        self.runtime = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_runtime(&mut self) -> &mut ::std::string::String {
        &mut self.runtime
    }

    // Take field
    pub fn take_runtime(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.runtime, ::std::string::String::new())
    }

    // .envoy.config.core.v3.AsyncDataSource code = 3;


    pub fn get_code(&self) -> &super::base::AsyncDataSource {
        self.code.as_ref().unwrap_or_else(|| <super::base::AsyncDataSource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_code(&mut self) {
        self.code.clear();
    }

    pub fn has_code(&self) -> bool {
        self.code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: super::base::AsyncDataSource) {
        self.code = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_code(&mut self) -> &mut super::base::AsyncDataSource {
        if self.code.is_none() {
            self.code.set_default();
        }
        self.code.as_mut().unwrap()
    }

    // Take field
    pub fn take_code(&mut self) -> super::base::AsyncDataSource {
        self.code.take().unwrap_or_else(|| super::base::AsyncDataSource::new())
    }

    // .google.protobuf.Any configuration = 4;


    pub fn get_configuration(&self) -> &::protobuf::well_known_types::Any {
        self.configuration.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_configuration(&mut self) {
        self.configuration.clear();
    }

    pub fn has_configuration(&self) -> bool {
        self.configuration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_configuration(&mut self, v: ::protobuf::well_known_types::Any) {
        self.configuration = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_configuration(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.configuration.is_none() {
            self.configuration.set_default();
        }
        self.configuration.as_mut().unwrap()
    }

    // Take field
    pub fn take_configuration(&mut self) -> ::protobuf::well_known_types::Any {
        self.configuration.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }

    // bool allow_precompiled = 5;


    pub fn get_allow_precompiled(&self) -> bool {
        self.allow_precompiled
    }
    pub fn clear_allow_precompiled(&mut self) {
        self.allow_precompiled = false;
    }

    // Param is passed by value, moved
    pub fn set_allow_precompiled(&mut self, v: bool) {
        self.allow_precompiled = v;
    }

    // bool nack_on_code_cache_miss = 6;


    pub fn get_nack_on_code_cache_miss(&self) -> bool {
        self.nack_on_code_cache_miss
    }
    pub fn clear_nack_on_code_cache_miss(&mut self) {
        self.nack_on_code_cache_miss = false;
    }

    // Param is passed by value, moved
    pub fn set_nack_on_code_cache_miss(&mut self, v: bool) {
        self.nack_on_code_cache_miss = v;
    }
}

impl ::protobuf::Message for VmConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.code {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.configuration {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.vm_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.runtime)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.code)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.configuration)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.allow_precompiled = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.nack_on_code_cache_miss = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.vm_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.vm_id);
        }
        if !self.runtime.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.runtime);
        }
        if let Some(ref v) = self.code.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.configuration.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.allow_precompiled != false {
            my_size += 2;
        }
        if self.nack_on_code_cache_miss != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.vm_id.is_empty() {
            os.write_string(1, &self.vm_id)?;
        }
        if !self.runtime.is_empty() {
            os.write_string(2, &self.runtime)?;
        }
        if let Some(ref v) = self.code.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.configuration.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.allow_precompiled != false {
            os.write_bool(5, self.allow_precompiled)?;
        }
        if self.nack_on_code_cache_miss != false {
            os.write_bool(6, self.nack_on_code_cache_miss)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VmConfig {
        VmConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "vm_id",
                |m: &VmConfig| { &m.vm_id },
                |m: &mut VmConfig| { &mut m.vm_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "runtime",
                |m: &VmConfig| { &m.runtime },
                |m: &mut VmConfig| { &mut m.runtime },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::AsyncDataSource>>(
                "code",
                |m: &VmConfig| { &m.code },
                |m: &mut VmConfig| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "configuration",
                |m: &VmConfig| { &m.configuration },
                |m: &mut VmConfig| { &mut m.configuration },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "allow_precompiled",
                |m: &VmConfig| { &m.allow_precompiled },
                |m: &mut VmConfig| { &mut m.allow_precompiled },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "nack_on_code_cache_miss",
                |m: &VmConfig| { &m.nack_on_code_cache_miss },
                |m: &mut VmConfig| { &mut m.nack_on_code_cache_miss },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<VmConfig>(
                "VmConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static VmConfig {
        static instance: ::protobuf::rt::LazyV2<VmConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(VmConfig::new)
    }
}

impl ::protobuf::Clear for VmConfig {
    fn clear(&mut self) {
        self.vm_id.clear();
        self.runtime.clear();
        self.code.clear();
        self.configuration.clear();
        self.allow_precompiled = false;
        self.nack_on_code_cache_miss = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VmConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VmConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PluginConfig {
    // message fields
    pub name: ::std::string::String,
    pub root_id: ::std::string::String,
    pub configuration: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    pub fail_open: bool,
    // message oneof groups
    pub vm: ::std::option::Option<PluginConfig_oneof_vm>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PluginConfig {
    fn default() -> &'a PluginConfig {
        <PluginConfig as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum PluginConfig_oneof_vm {
    vm_config(VmConfig),
}

impl PluginConfig {
    pub fn new() -> PluginConfig {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string root_id = 2;


    pub fn get_root_id(&self) -> &str {
        &self.root_id
    }
    pub fn clear_root_id(&mut self) {
        self.root_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_root_id(&mut self, v: ::std::string::String) {
        self.root_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_root_id(&mut self) -> &mut ::std::string::String {
        &mut self.root_id
    }

    // Take field
    pub fn take_root_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.root_id, ::std::string::String::new())
    }

    // .envoy.extensions.wasm.v3.VmConfig vm_config = 3;


    pub fn get_vm_config(&self) -> &VmConfig {
        match self.vm {
            ::std::option::Option::Some(PluginConfig_oneof_vm::vm_config(ref v)) => v,
            _ => <VmConfig as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_vm_config(&mut self) {
        self.vm = ::std::option::Option::None;
    }

    pub fn has_vm_config(&self) -> bool {
        match self.vm {
            ::std::option::Option::Some(PluginConfig_oneof_vm::vm_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_vm_config(&mut self, v: VmConfig) {
        self.vm = ::std::option::Option::Some(PluginConfig_oneof_vm::vm_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_vm_config(&mut self) -> &mut VmConfig {
        if let ::std::option::Option::Some(PluginConfig_oneof_vm::vm_config(_)) = self.vm {
        } else {
            self.vm = ::std::option::Option::Some(PluginConfig_oneof_vm::vm_config(VmConfig::new()));
        }
        match self.vm {
            ::std::option::Option::Some(PluginConfig_oneof_vm::vm_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_vm_config(&mut self) -> VmConfig {
        if self.has_vm_config() {
            match self.vm.take() {
                ::std::option::Option::Some(PluginConfig_oneof_vm::vm_config(v)) => v,
                _ => panic!(),
            }
        } else {
            VmConfig::new()
        }
    }

    // .google.protobuf.Any configuration = 4;


    pub fn get_configuration(&self) -> &::protobuf::well_known_types::Any {
        self.configuration.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_configuration(&mut self) {
        self.configuration.clear();
    }

    pub fn has_configuration(&self) -> bool {
        self.configuration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_configuration(&mut self, v: ::protobuf::well_known_types::Any) {
        self.configuration = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_configuration(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.configuration.is_none() {
            self.configuration.set_default();
        }
        self.configuration.as_mut().unwrap()
    }

    // Take field
    pub fn take_configuration(&mut self) -> ::protobuf::well_known_types::Any {
        self.configuration.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }

    // bool fail_open = 5;


    pub fn get_fail_open(&self) -> bool {
        self.fail_open
    }
    pub fn clear_fail_open(&mut self) {
        self.fail_open = false;
    }

    // Param is passed by value, moved
    pub fn set_fail_open(&mut self, v: bool) {
        self.fail_open = v;
    }
}

impl ::protobuf::Message for PluginConfig {
    fn is_initialized(&self) -> bool {
        if let Some(PluginConfig_oneof_vm::vm_config(ref v)) = self.vm {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.configuration {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.root_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.vm = ::std::option::Option::Some(PluginConfig_oneof_vm::vm_config(is.read_message()?));
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.configuration)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.fail_open = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.root_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.root_id);
        }
        if let Some(ref v) = self.configuration.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.fail_open != false {
            my_size += 2;
        }
        if let ::std::option::Option::Some(ref v) = self.vm {
            match v {
                &PluginConfig_oneof_vm::vm_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.root_id.is_empty() {
            os.write_string(2, &self.root_id)?;
        }
        if let Some(ref v) = self.configuration.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.fail_open != false {
            os.write_bool(5, self.fail_open)?;
        }
        if let ::std::option::Option::Some(ref v) = self.vm {
            match v {
                &PluginConfig_oneof_vm::vm_config(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PluginConfig {
        PluginConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &PluginConfig| { &m.name },
                |m: &mut PluginConfig| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "root_id",
                |m: &PluginConfig| { &m.root_id },
                |m: &mut PluginConfig| { &mut m.root_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, VmConfig>(
                "vm_config",
                PluginConfig::has_vm_config,
                PluginConfig::get_vm_config,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "configuration",
                |m: &PluginConfig| { &m.configuration },
                |m: &mut PluginConfig| { &mut m.configuration },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "fail_open",
                |m: &PluginConfig| { &m.fail_open },
                |m: &mut PluginConfig| { &mut m.fail_open },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PluginConfig>(
                "PluginConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PluginConfig {
        static instance: ::protobuf::rt::LazyV2<PluginConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PluginConfig::new)
    }
}

impl ::protobuf::Clear for PluginConfig {
    fn clear(&mut self) {
        self.name.clear();
        self.root_id.clear();
        self.vm = ::std::option::Option::None;
        self.configuration.clear();
        self.fail_open = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PluginConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PluginConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WasmService {
    // message fields
    pub config: ::protobuf::SingularPtrField<PluginConfig>,
    pub singleton: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WasmService {
    fn default() -> &'a WasmService {
        <WasmService as ::protobuf::Message>::default_instance()
    }
}

impl WasmService {
    pub fn new() -> WasmService {
        ::std::default::Default::default()
    }

    // .envoy.extensions.wasm.v3.PluginConfig config = 1;


    pub fn get_config(&self) -> &PluginConfig {
        self.config.as_ref().unwrap_or_else(|| <PluginConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_config(&mut self) {
        self.config.clear();
    }

    pub fn has_config(&self) -> bool {
        self.config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_config(&mut self, v: PluginConfig) {
        self.config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_config(&mut self) -> &mut PluginConfig {
        if self.config.is_none() {
            self.config.set_default();
        }
        self.config.as_mut().unwrap()
    }

    // Take field
    pub fn take_config(&mut self) -> PluginConfig {
        self.config.take().unwrap_or_else(|| PluginConfig::new())
    }

    // bool singleton = 2;


    pub fn get_singleton(&self) -> bool {
        self.singleton
    }
    pub fn clear_singleton(&mut self) {
        self.singleton = false;
    }

    // Param is passed by value, moved
    pub fn set_singleton(&mut self, v: bool) {
        self.singleton = v;
    }
}

impl ::protobuf::Message for WasmService {
    fn is_initialized(&self) -> bool {
        for v in &self.config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.config)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.singleton = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.singleton != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.config.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.singleton != false {
            os.write_bool(2, self.singleton)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WasmService {
        WasmService::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PluginConfig>>(
                "config",
                |m: &WasmService| { &m.config },
                |m: &mut WasmService| { &mut m.config },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "singleton",
                |m: &WasmService| { &m.singleton },
                |m: &mut WasmService| { &mut m.singleton },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WasmService>(
                "WasmService",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WasmService {
        static instance: ::protobuf::rt::LazyV2<WasmService> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WasmService::new)
    }
}

impl ::protobuf::Clear for WasmService {
    fn clear(&mut self) {
        self.config.clear();
        self.singleton = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WasmService {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WasmService {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#envoy/extensions/wasm/v3/wasm.proto\x12\x18envoy.extensions.wasm.v3\
    \x1a\x1fenvoy/config/core/v3/base.proto\x1a\x19google/protobuf/any.proto\
    \x1a\x1dudpa/annotations/status.proto\x1a!udpa/annotations/versioning.pr\
    oto\x1a\x17validate/validate.proto\"\x9c\x02\n\x08VmConfig\x12\x13\n\x05\
    vm_id\x18\x01\x20\x01(\tR\x04vmId\x12!\n\x07runtime\x18\x02\x20\x01(\tR\
    \x07runtimeB\x07\xfaB\x04r\x02\x10\x01\x129\n\x04code\x18\x03\x20\x01(\
    \x0b2%.envoy.config.core.v3.AsyncDataSourceR\x04code\x12:\n\rconfigurati\
    on\x18\x04\x20\x01(\x0b2\x14.google.protobuf.AnyR\rconfiguration\x12+\n\
    \x11allow_precompiled\x18\x05\x20\x01(\x08R\x10allowPrecompiled\x124\n\
    \x17nack_on_code_cache_miss\x18\x06\x20\x01(\x08R\x13nackOnCodeCacheMiss\
    \"\xdd\x01\n\x0cPluginConfig\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04na\
    me\x12\x17\n\x07root_id\x18\x02\x20\x01(\tR\x06rootId\x12A\n\tvm_config\
    \x18\x03\x20\x01(\x0b2\".envoy.extensions.wasm.v3.VmConfigH\0R\x08vmConf\
    ig\x12:\n\rconfiguration\x18\x04\x20\x01(\x0b2\x14.google.protobuf.AnyR\
    \rconfiguration\x12\x1b\n\tfail_open\x18\x05\x20\x01(\x08R\x08failOpenB\
    \x04\n\x02vm\"k\n\x0bWasmService\x12>\n\x06config\x18\x01\x20\x01(\x0b2&\
    .envoy.extensions.wasm.v3.PluginConfigR\x06config\x12\x1c\n\tsingleton\
    \x18\x02\x20\x01(\x08R\tsingletonB=\n&io.envoyproxy.envoy.extensions.was\
    m.v3B\tWasmProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
