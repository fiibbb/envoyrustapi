// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/endpoint/v3/load_report.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct UpstreamLocalityStats {
    // message fields
    pub locality: ::protobuf::SingularPtrField<super::base::Locality>,
    pub total_successful_requests: u64,
    pub total_requests_in_progress: u64,
    pub total_error_requests: u64,
    pub total_issued_requests: u64,
    pub load_metric_stats: ::protobuf::RepeatedField<EndpointLoadMetricStats>,
    pub upstream_endpoint_stats: ::protobuf::RepeatedField<UpstreamEndpointStats>,
    pub priority: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpstreamLocalityStats {
    fn default() -> &'a UpstreamLocalityStats {
        <UpstreamLocalityStats as ::protobuf::Message>::default_instance()
    }
}

impl UpstreamLocalityStats {
    pub fn new() -> UpstreamLocalityStats {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.Locality locality = 1;


    pub fn get_locality(&self) -> &super::base::Locality {
        self.locality.as_ref().unwrap_or_else(|| <super::base::Locality as ::protobuf::Message>::default_instance())
    }
    pub fn clear_locality(&mut self) {
        self.locality.clear();
    }

    pub fn has_locality(&self) -> bool {
        self.locality.is_some()
    }

    // Param is passed by value, moved
    pub fn set_locality(&mut self, v: super::base::Locality) {
        self.locality = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_locality(&mut self) -> &mut super::base::Locality {
        if self.locality.is_none() {
            self.locality.set_default();
        }
        self.locality.as_mut().unwrap()
    }

    // Take field
    pub fn take_locality(&mut self) -> super::base::Locality {
        self.locality.take().unwrap_or_else(|| super::base::Locality::new())
    }

    // uint64 total_successful_requests = 2;


    pub fn get_total_successful_requests(&self) -> u64 {
        self.total_successful_requests
    }
    pub fn clear_total_successful_requests(&mut self) {
        self.total_successful_requests = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_successful_requests(&mut self, v: u64) {
        self.total_successful_requests = v;
    }

    // uint64 total_requests_in_progress = 3;


    pub fn get_total_requests_in_progress(&self) -> u64 {
        self.total_requests_in_progress
    }
    pub fn clear_total_requests_in_progress(&mut self) {
        self.total_requests_in_progress = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_requests_in_progress(&mut self, v: u64) {
        self.total_requests_in_progress = v;
    }

    // uint64 total_error_requests = 4;


    pub fn get_total_error_requests(&self) -> u64 {
        self.total_error_requests
    }
    pub fn clear_total_error_requests(&mut self) {
        self.total_error_requests = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_error_requests(&mut self, v: u64) {
        self.total_error_requests = v;
    }

    // uint64 total_issued_requests = 8;


    pub fn get_total_issued_requests(&self) -> u64 {
        self.total_issued_requests
    }
    pub fn clear_total_issued_requests(&mut self) {
        self.total_issued_requests = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_issued_requests(&mut self, v: u64) {
        self.total_issued_requests = v;
    }

    // repeated .envoy.config.endpoint.v3.EndpointLoadMetricStats load_metric_stats = 5;


    pub fn get_load_metric_stats(&self) -> &[EndpointLoadMetricStats] {
        &self.load_metric_stats
    }
    pub fn clear_load_metric_stats(&mut self) {
        self.load_metric_stats.clear();
    }

    // Param is passed by value, moved
    pub fn set_load_metric_stats(&mut self, v: ::protobuf::RepeatedField<EndpointLoadMetricStats>) {
        self.load_metric_stats = v;
    }

    // Mutable pointer to the field.
    pub fn mut_load_metric_stats(&mut self) -> &mut ::protobuf::RepeatedField<EndpointLoadMetricStats> {
        &mut self.load_metric_stats
    }

    // Take field
    pub fn take_load_metric_stats(&mut self) -> ::protobuf::RepeatedField<EndpointLoadMetricStats> {
        ::std::mem::replace(&mut self.load_metric_stats, ::protobuf::RepeatedField::new())
    }

    // repeated .envoy.config.endpoint.v3.UpstreamEndpointStats upstream_endpoint_stats = 7;


    pub fn get_upstream_endpoint_stats(&self) -> &[UpstreamEndpointStats] {
        &self.upstream_endpoint_stats
    }
    pub fn clear_upstream_endpoint_stats(&mut self) {
        self.upstream_endpoint_stats.clear();
    }

    // Param is passed by value, moved
    pub fn set_upstream_endpoint_stats(&mut self, v: ::protobuf::RepeatedField<UpstreamEndpointStats>) {
        self.upstream_endpoint_stats = v;
    }

    // Mutable pointer to the field.
    pub fn mut_upstream_endpoint_stats(&mut self) -> &mut ::protobuf::RepeatedField<UpstreamEndpointStats> {
        &mut self.upstream_endpoint_stats
    }

    // Take field
    pub fn take_upstream_endpoint_stats(&mut self) -> ::protobuf::RepeatedField<UpstreamEndpointStats> {
        ::std::mem::replace(&mut self.upstream_endpoint_stats, ::protobuf::RepeatedField::new())
    }

    // uint32 priority = 6;


    pub fn get_priority(&self) -> u32 {
        self.priority
    }
    pub fn clear_priority(&mut self) {
        self.priority = 0;
    }

    // Param is passed by value, moved
    pub fn set_priority(&mut self, v: u32) {
        self.priority = v;
    }
}

impl ::protobuf::Message for UpstreamLocalityStats {
    fn is_initialized(&self) -> bool {
        for v in &self.locality {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.load_metric_stats {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.upstream_endpoint_stats {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.locality)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.total_successful_requests = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.total_requests_in_progress = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.total_error_requests = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.total_issued_requests = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.load_metric_stats)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.upstream_endpoint_stats)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.priority = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.locality.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.total_successful_requests != 0 {
            my_size += ::protobuf::rt::value_size(2, self.total_successful_requests, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.total_requests_in_progress != 0 {
            my_size += ::protobuf::rt::value_size(3, self.total_requests_in_progress, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.total_error_requests != 0 {
            my_size += ::protobuf::rt::value_size(4, self.total_error_requests, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.total_issued_requests != 0 {
            my_size += ::protobuf::rt::value_size(8, self.total_issued_requests, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.load_metric_stats {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.upstream_endpoint_stats {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.priority != 0 {
            my_size += ::protobuf::rt::value_size(6, self.priority, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.locality.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.total_successful_requests != 0 {
            os.write_uint64(2, self.total_successful_requests)?;
        }
        if self.total_requests_in_progress != 0 {
            os.write_uint64(3, self.total_requests_in_progress)?;
        }
        if self.total_error_requests != 0 {
            os.write_uint64(4, self.total_error_requests)?;
        }
        if self.total_issued_requests != 0 {
            os.write_uint64(8, self.total_issued_requests)?;
        }
        for v in &self.load_metric_stats {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.upstream_endpoint_stats {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.priority != 0 {
            os.write_uint32(6, self.priority)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpstreamLocalityStats {
        UpstreamLocalityStats::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Locality>>(
                "locality",
                |m: &UpstreamLocalityStats| { &m.locality },
                |m: &mut UpstreamLocalityStats| { &mut m.locality },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "total_successful_requests",
                |m: &UpstreamLocalityStats| { &m.total_successful_requests },
                |m: &mut UpstreamLocalityStats| { &mut m.total_successful_requests },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "total_requests_in_progress",
                |m: &UpstreamLocalityStats| { &m.total_requests_in_progress },
                |m: &mut UpstreamLocalityStats| { &mut m.total_requests_in_progress },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "total_error_requests",
                |m: &UpstreamLocalityStats| { &m.total_error_requests },
                |m: &mut UpstreamLocalityStats| { &mut m.total_error_requests },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "total_issued_requests",
                |m: &UpstreamLocalityStats| { &m.total_issued_requests },
                |m: &mut UpstreamLocalityStats| { &mut m.total_issued_requests },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EndpointLoadMetricStats>>(
                "load_metric_stats",
                |m: &UpstreamLocalityStats| { &m.load_metric_stats },
                |m: &mut UpstreamLocalityStats| { &mut m.load_metric_stats },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<UpstreamEndpointStats>>(
                "upstream_endpoint_stats",
                |m: &UpstreamLocalityStats| { &m.upstream_endpoint_stats },
                |m: &mut UpstreamLocalityStats| { &mut m.upstream_endpoint_stats },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "priority",
                |m: &UpstreamLocalityStats| { &m.priority },
                |m: &mut UpstreamLocalityStats| { &mut m.priority },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpstreamLocalityStats>(
                "UpstreamLocalityStats",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpstreamLocalityStats {
        static instance: ::protobuf::rt::LazyV2<UpstreamLocalityStats> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpstreamLocalityStats::new)
    }
}

impl ::protobuf::Clear for UpstreamLocalityStats {
    fn clear(&mut self) {
        self.locality.clear();
        self.total_successful_requests = 0;
        self.total_requests_in_progress = 0;
        self.total_error_requests = 0;
        self.total_issued_requests = 0;
        self.load_metric_stats.clear();
        self.upstream_endpoint_stats.clear();
        self.priority = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpstreamLocalityStats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpstreamLocalityStats {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpstreamEndpointStats {
    // message fields
    pub address: ::protobuf::SingularPtrField<super::address::Address>,
    pub metadata: ::protobuf::SingularPtrField<::protobuf::well_known_types::Struct>,
    pub total_successful_requests: u64,
    pub total_requests_in_progress: u64,
    pub total_error_requests: u64,
    pub total_issued_requests: u64,
    pub load_metric_stats: ::protobuf::RepeatedField<EndpointLoadMetricStats>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpstreamEndpointStats {
    fn default() -> &'a UpstreamEndpointStats {
        <UpstreamEndpointStats as ::protobuf::Message>::default_instance()
    }
}

impl UpstreamEndpointStats {
    pub fn new() -> UpstreamEndpointStats {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.Address address = 1;


    pub fn get_address(&self) -> &super::address::Address {
        self.address.as_ref().unwrap_or_else(|| <super::address::Address as ::protobuf::Message>::default_instance())
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: super::address::Address) {
        self.address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut super::address::Address {
        if self.address.is_none() {
            self.address.set_default();
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> super::address::Address {
        self.address.take().unwrap_or_else(|| super::address::Address::new())
    }

    // .google.protobuf.Struct metadata = 6;


    pub fn get_metadata(&self) -> &::protobuf::well_known_types::Struct {
        self.metadata.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Struct as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: ::protobuf::well_known_types::Struct) {
        self.metadata = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut ::protobuf::well_known_types::Struct {
        if self.metadata.is_none() {
            self.metadata.set_default();
        }
        self.metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata(&mut self) -> ::protobuf::well_known_types::Struct {
        self.metadata.take().unwrap_or_else(|| ::protobuf::well_known_types::Struct::new())
    }

    // uint64 total_successful_requests = 2;


    pub fn get_total_successful_requests(&self) -> u64 {
        self.total_successful_requests
    }
    pub fn clear_total_successful_requests(&mut self) {
        self.total_successful_requests = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_successful_requests(&mut self, v: u64) {
        self.total_successful_requests = v;
    }

    // uint64 total_requests_in_progress = 3;


    pub fn get_total_requests_in_progress(&self) -> u64 {
        self.total_requests_in_progress
    }
    pub fn clear_total_requests_in_progress(&mut self) {
        self.total_requests_in_progress = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_requests_in_progress(&mut self, v: u64) {
        self.total_requests_in_progress = v;
    }

    // uint64 total_error_requests = 4;


    pub fn get_total_error_requests(&self) -> u64 {
        self.total_error_requests
    }
    pub fn clear_total_error_requests(&mut self) {
        self.total_error_requests = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_error_requests(&mut self, v: u64) {
        self.total_error_requests = v;
    }

    // uint64 total_issued_requests = 7;


    pub fn get_total_issued_requests(&self) -> u64 {
        self.total_issued_requests
    }
    pub fn clear_total_issued_requests(&mut self) {
        self.total_issued_requests = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_issued_requests(&mut self, v: u64) {
        self.total_issued_requests = v;
    }

    // repeated .envoy.config.endpoint.v3.EndpointLoadMetricStats load_metric_stats = 5;


    pub fn get_load_metric_stats(&self) -> &[EndpointLoadMetricStats] {
        &self.load_metric_stats
    }
    pub fn clear_load_metric_stats(&mut self) {
        self.load_metric_stats.clear();
    }

    // Param is passed by value, moved
    pub fn set_load_metric_stats(&mut self, v: ::protobuf::RepeatedField<EndpointLoadMetricStats>) {
        self.load_metric_stats = v;
    }

    // Mutable pointer to the field.
    pub fn mut_load_metric_stats(&mut self) -> &mut ::protobuf::RepeatedField<EndpointLoadMetricStats> {
        &mut self.load_metric_stats
    }

    // Take field
    pub fn take_load_metric_stats(&mut self) -> ::protobuf::RepeatedField<EndpointLoadMetricStats> {
        ::std::mem::replace(&mut self.load_metric_stats, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for UpstreamEndpointStats {
    fn is_initialized(&self) -> bool {
        for v in &self.address {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.load_metric_stats {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.address)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.total_successful_requests = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.total_requests_in_progress = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.total_error_requests = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.total_issued_requests = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.load_metric_stats)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.total_successful_requests != 0 {
            my_size += ::protobuf::rt::value_size(2, self.total_successful_requests, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.total_requests_in_progress != 0 {
            my_size += ::protobuf::rt::value_size(3, self.total_requests_in_progress, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.total_error_requests != 0 {
            my_size += ::protobuf::rt::value_size(4, self.total_error_requests, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.total_issued_requests != 0 {
            my_size += ::protobuf::rt::value_size(7, self.total_issued_requests, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.load_metric_stats {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.address.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.metadata.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.total_successful_requests != 0 {
            os.write_uint64(2, self.total_successful_requests)?;
        }
        if self.total_requests_in_progress != 0 {
            os.write_uint64(3, self.total_requests_in_progress)?;
        }
        if self.total_error_requests != 0 {
            os.write_uint64(4, self.total_error_requests)?;
        }
        if self.total_issued_requests != 0 {
            os.write_uint64(7, self.total_issued_requests)?;
        }
        for v in &self.load_metric_stats {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpstreamEndpointStats {
        UpstreamEndpointStats::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::address::Address>>(
                "address",
                |m: &UpstreamEndpointStats| { &m.address },
                |m: &mut UpstreamEndpointStats| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Struct>>(
                "metadata",
                |m: &UpstreamEndpointStats| { &m.metadata },
                |m: &mut UpstreamEndpointStats| { &mut m.metadata },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "total_successful_requests",
                |m: &UpstreamEndpointStats| { &m.total_successful_requests },
                |m: &mut UpstreamEndpointStats| { &mut m.total_successful_requests },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "total_requests_in_progress",
                |m: &UpstreamEndpointStats| { &m.total_requests_in_progress },
                |m: &mut UpstreamEndpointStats| { &mut m.total_requests_in_progress },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "total_error_requests",
                |m: &UpstreamEndpointStats| { &m.total_error_requests },
                |m: &mut UpstreamEndpointStats| { &mut m.total_error_requests },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "total_issued_requests",
                |m: &UpstreamEndpointStats| { &m.total_issued_requests },
                |m: &mut UpstreamEndpointStats| { &mut m.total_issued_requests },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EndpointLoadMetricStats>>(
                "load_metric_stats",
                |m: &UpstreamEndpointStats| { &m.load_metric_stats },
                |m: &mut UpstreamEndpointStats| { &mut m.load_metric_stats },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpstreamEndpointStats>(
                "UpstreamEndpointStats",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpstreamEndpointStats {
        static instance: ::protobuf::rt::LazyV2<UpstreamEndpointStats> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpstreamEndpointStats::new)
    }
}

impl ::protobuf::Clear for UpstreamEndpointStats {
    fn clear(&mut self) {
        self.address.clear();
        self.metadata.clear();
        self.total_successful_requests = 0;
        self.total_requests_in_progress = 0;
        self.total_error_requests = 0;
        self.total_issued_requests = 0;
        self.load_metric_stats.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpstreamEndpointStats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpstreamEndpointStats {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EndpointLoadMetricStats {
    // message fields
    pub metric_name: ::std::string::String,
    pub num_requests_finished_with_metric: u64,
    pub total_metric_value: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EndpointLoadMetricStats {
    fn default() -> &'a EndpointLoadMetricStats {
        <EndpointLoadMetricStats as ::protobuf::Message>::default_instance()
    }
}

impl EndpointLoadMetricStats {
    pub fn new() -> EndpointLoadMetricStats {
        ::std::default::Default::default()
    }

    // string metric_name = 1;


    pub fn get_metric_name(&self) -> &str {
        &self.metric_name
    }
    pub fn clear_metric_name(&mut self) {
        self.metric_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_metric_name(&mut self, v: ::std::string::String) {
        self.metric_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metric_name(&mut self) -> &mut ::std::string::String {
        &mut self.metric_name
    }

    // Take field
    pub fn take_metric_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.metric_name, ::std::string::String::new())
    }

    // uint64 num_requests_finished_with_metric = 2;


    pub fn get_num_requests_finished_with_metric(&self) -> u64 {
        self.num_requests_finished_with_metric
    }
    pub fn clear_num_requests_finished_with_metric(&mut self) {
        self.num_requests_finished_with_metric = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_requests_finished_with_metric(&mut self, v: u64) {
        self.num_requests_finished_with_metric = v;
    }

    // double total_metric_value = 3;


    pub fn get_total_metric_value(&self) -> f64 {
        self.total_metric_value
    }
    pub fn clear_total_metric_value(&mut self) {
        self.total_metric_value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_total_metric_value(&mut self, v: f64) {
        self.total_metric_value = v;
    }
}

impl ::protobuf::Message for EndpointLoadMetricStats {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.metric_name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.num_requests_finished_with_metric = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.total_metric_value = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.metric_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.metric_name);
        }
        if self.num_requests_finished_with_metric != 0 {
            my_size += ::protobuf::rt::value_size(2, self.num_requests_finished_with_metric, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.total_metric_value != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.metric_name.is_empty() {
            os.write_string(1, &self.metric_name)?;
        }
        if self.num_requests_finished_with_metric != 0 {
            os.write_uint64(2, self.num_requests_finished_with_metric)?;
        }
        if self.total_metric_value != 0. {
            os.write_double(3, self.total_metric_value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EndpointLoadMetricStats {
        EndpointLoadMetricStats::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "metric_name",
                |m: &EndpointLoadMetricStats| { &m.metric_name },
                |m: &mut EndpointLoadMetricStats| { &mut m.metric_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "num_requests_finished_with_metric",
                |m: &EndpointLoadMetricStats| { &m.num_requests_finished_with_metric },
                |m: &mut EndpointLoadMetricStats| { &mut m.num_requests_finished_with_metric },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "total_metric_value",
                |m: &EndpointLoadMetricStats| { &m.total_metric_value },
                |m: &mut EndpointLoadMetricStats| { &mut m.total_metric_value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EndpointLoadMetricStats>(
                "EndpointLoadMetricStats",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EndpointLoadMetricStats {
        static instance: ::protobuf::rt::LazyV2<EndpointLoadMetricStats> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EndpointLoadMetricStats::new)
    }
}

impl ::protobuf::Clear for EndpointLoadMetricStats {
    fn clear(&mut self) {
        self.metric_name.clear();
        self.num_requests_finished_with_metric = 0;
        self.total_metric_value = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EndpointLoadMetricStats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EndpointLoadMetricStats {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClusterStats {
    // message fields
    pub cluster_name: ::std::string::String,
    pub cluster_service_name: ::std::string::String,
    pub upstream_locality_stats: ::protobuf::RepeatedField<UpstreamLocalityStats>,
    pub total_dropped_requests: u64,
    pub dropped_requests: ::protobuf::RepeatedField<ClusterStats_DroppedRequests>,
    pub load_report_interval: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClusterStats {
    fn default() -> &'a ClusterStats {
        <ClusterStats as ::protobuf::Message>::default_instance()
    }
}

impl ClusterStats {
    pub fn new() -> ClusterStats {
        ::std::default::Default::default()
    }

    // string cluster_name = 1;


    pub fn get_cluster_name(&self) -> &str {
        &self.cluster_name
    }
    pub fn clear_cluster_name(&mut self) {
        self.cluster_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cluster_name(&mut self, v: ::std::string::String) {
        self.cluster_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cluster_name(&mut self) -> &mut ::std::string::String {
        &mut self.cluster_name
    }

    // Take field
    pub fn take_cluster_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cluster_name, ::std::string::String::new())
    }

    // string cluster_service_name = 6;


    pub fn get_cluster_service_name(&self) -> &str {
        &self.cluster_service_name
    }
    pub fn clear_cluster_service_name(&mut self) {
        self.cluster_service_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cluster_service_name(&mut self, v: ::std::string::String) {
        self.cluster_service_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cluster_service_name(&mut self) -> &mut ::std::string::String {
        &mut self.cluster_service_name
    }

    // Take field
    pub fn take_cluster_service_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cluster_service_name, ::std::string::String::new())
    }

    // repeated .envoy.config.endpoint.v3.UpstreamLocalityStats upstream_locality_stats = 2;


    pub fn get_upstream_locality_stats(&self) -> &[UpstreamLocalityStats] {
        &self.upstream_locality_stats
    }
    pub fn clear_upstream_locality_stats(&mut self) {
        self.upstream_locality_stats.clear();
    }

    // Param is passed by value, moved
    pub fn set_upstream_locality_stats(&mut self, v: ::protobuf::RepeatedField<UpstreamLocalityStats>) {
        self.upstream_locality_stats = v;
    }

    // Mutable pointer to the field.
    pub fn mut_upstream_locality_stats(&mut self) -> &mut ::protobuf::RepeatedField<UpstreamLocalityStats> {
        &mut self.upstream_locality_stats
    }

    // Take field
    pub fn take_upstream_locality_stats(&mut self) -> ::protobuf::RepeatedField<UpstreamLocalityStats> {
        ::std::mem::replace(&mut self.upstream_locality_stats, ::protobuf::RepeatedField::new())
    }

    // uint64 total_dropped_requests = 3;


    pub fn get_total_dropped_requests(&self) -> u64 {
        self.total_dropped_requests
    }
    pub fn clear_total_dropped_requests(&mut self) {
        self.total_dropped_requests = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_dropped_requests(&mut self, v: u64) {
        self.total_dropped_requests = v;
    }

    // repeated .envoy.config.endpoint.v3.ClusterStats.DroppedRequests dropped_requests = 5;


    pub fn get_dropped_requests(&self) -> &[ClusterStats_DroppedRequests] {
        &self.dropped_requests
    }
    pub fn clear_dropped_requests(&mut self) {
        self.dropped_requests.clear();
    }

    // Param is passed by value, moved
    pub fn set_dropped_requests(&mut self, v: ::protobuf::RepeatedField<ClusterStats_DroppedRequests>) {
        self.dropped_requests = v;
    }

    // Mutable pointer to the field.
    pub fn mut_dropped_requests(&mut self) -> &mut ::protobuf::RepeatedField<ClusterStats_DroppedRequests> {
        &mut self.dropped_requests
    }

    // Take field
    pub fn take_dropped_requests(&mut self) -> ::protobuf::RepeatedField<ClusterStats_DroppedRequests> {
        ::std::mem::replace(&mut self.dropped_requests, ::protobuf::RepeatedField::new())
    }

    // .google.protobuf.Duration load_report_interval = 4;


    pub fn get_load_report_interval(&self) -> &::protobuf::well_known_types::Duration {
        self.load_report_interval.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_load_report_interval(&mut self) {
        self.load_report_interval.clear();
    }

    pub fn has_load_report_interval(&self) -> bool {
        self.load_report_interval.is_some()
    }

    // Param is passed by value, moved
    pub fn set_load_report_interval(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.load_report_interval = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_load_report_interval(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.load_report_interval.is_none() {
            self.load_report_interval.set_default();
        }
        self.load_report_interval.as_mut().unwrap()
    }

    // Take field
    pub fn take_load_report_interval(&mut self) -> ::protobuf::well_known_types::Duration {
        self.load_report_interval.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }
}

impl ::protobuf::Message for ClusterStats {
    fn is_initialized(&self) -> bool {
        for v in &self.upstream_locality_stats {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.dropped_requests {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.load_report_interval {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cluster_name)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cluster_service_name)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.upstream_locality_stats)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.total_dropped_requests = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.dropped_requests)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.load_report_interval)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.cluster_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.cluster_name);
        }
        if !self.cluster_service_name.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.cluster_service_name);
        }
        for value in &self.upstream_locality_stats {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.total_dropped_requests != 0 {
            my_size += ::protobuf::rt::value_size(3, self.total_dropped_requests, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.dropped_requests {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.load_report_interval.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.cluster_name.is_empty() {
            os.write_string(1, &self.cluster_name)?;
        }
        if !self.cluster_service_name.is_empty() {
            os.write_string(6, &self.cluster_service_name)?;
        }
        for v in &self.upstream_locality_stats {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.total_dropped_requests != 0 {
            os.write_uint64(3, self.total_dropped_requests)?;
        }
        for v in &self.dropped_requests {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.load_report_interval.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClusterStats {
        ClusterStats::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cluster_name",
                |m: &ClusterStats| { &m.cluster_name },
                |m: &mut ClusterStats| { &mut m.cluster_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cluster_service_name",
                |m: &ClusterStats| { &m.cluster_service_name },
                |m: &mut ClusterStats| { &mut m.cluster_service_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<UpstreamLocalityStats>>(
                "upstream_locality_stats",
                |m: &ClusterStats| { &m.upstream_locality_stats },
                |m: &mut ClusterStats| { &mut m.upstream_locality_stats },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "total_dropped_requests",
                |m: &ClusterStats| { &m.total_dropped_requests },
                |m: &mut ClusterStats| { &mut m.total_dropped_requests },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ClusterStats_DroppedRequests>>(
                "dropped_requests",
                |m: &ClusterStats| { &m.dropped_requests },
                |m: &mut ClusterStats| { &mut m.dropped_requests },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "load_report_interval",
                |m: &ClusterStats| { &m.load_report_interval },
                |m: &mut ClusterStats| { &mut m.load_report_interval },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClusterStats>(
                "ClusterStats",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClusterStats {
        static instance: ::protobuf::rt::LazyV2<ClusterStats> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClusterStats::new)
    }
}

impl ::protobuf::Clear for ClusterStats {
    fn clear(&mut self) {
        self.cluster_name.clear();
        self.cluster_service_name.clear();
        self.upstream_locality_stats.clear();
        self.total_dropped_requests = 0;
        self.dropped_requests.clear();
        self.load_report_interval.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClusterStats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClusterStats {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClusterStats_DroppedRequests {
    // message fields
    pub category: ::std::string::String,
    pub dropped_count: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClusterStats_DroppedRequests {
    fn default() -> &'a ClusterStats_DroppedRequests {
        <ClusterStats_DroppedRequests as ::protobuf::Message>::default_instance()
    }
}

impl ClusterStats_DroppedRequests {
    pub fn new() -> ClusterStats_DroppedRequests {
        ::std::default::Default::default()
    }

    // string category = 1;


    pub fn get_category(&self) -> &str {
        &self.category
    }
    pub fn clear_category(&mut self) {
        self.category.clear();
    }

    // Param is passed by value, moved
    pub fn set_category(&mut self, v: ::std::string::String) {
        self.category = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_category(&mut self) -> &mut ::std::string::String {
        &mut self.category
    }

    // Take field
    pub fn take_category(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.category, ::std::string::String::new())
    }

    // uint64 dropped_count = 2;


    pub fn get_dropped_count(&self) -> u64 {
        self.dropped_count
    }
    pub fn clear_dropped_count(&mut self) {
        self.dropped_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_dropped_count(&mut self, v: u64) {
        self.dropped_count = v;
    }
}

impl ::protobuf::Message for ClusterStats_DroppedRequests {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.category)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.dropped_count = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.category.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.category);
        }
        if self.dropped_count != 0 {
            my_size += ::protobuf::rt::value_size(2, self.dropped_count, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.category.is_empty() {
            os.write_string(1, &self.category)?;
        }
        if self.dropped_count != 0 {
            os.write_uint64(2, self.dropped_count)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClusterStats_DroppedRequests {
        ClusterStats_DroppedRequests::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "category",
                |m: &ClusterStats_DroppedRequests| { &m.category },
                |m: &mut ClusterStats_DroppedRequests| { &mut m.category },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "dropped_count",
                |m: &ClusterStats_DroppedRequests| { &m.dropped_count },
                |m: &mut ClusterStats_DroppedRequests| { &mut m.dropped_count },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClusterStats_DroppedRequests>(
                "ClusterStats.DroppedRequests",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClusterStats_DroppedRequests {
        static instance: ::protobuf::rt::LazyV2<ClusterStats_DroppedRequests> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClusterStats_DroppedRequests::new)
    }
}

impl ::protobuf::Clear for ClusterStats_DroppedRequests {
    fn clear(&mut self) {
        self.category.clear();
        self.dropped_count = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClusterStats_DroppedRequests {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClusterStats_DroppedRequests {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n*envoy/config/endpoint/v3/load_report.proto\x12\x18envoy.config.endpoi\
    nt.v3\x1a\"envoy/config/core/v3/address.proto\x1a\x1fenvoy/config/core/v\
    3/base.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1cgoogle/protobu\
    f/struct.proto\x1a\x1dudpa/annotations/status.proto\x1a!udpa/annotations\
    /versioning.proto\x1a\x17validate/validate.proto\"\xca\x04\n\x15Upstream\
    LocalityStats\x12:\n\x08locality\x18\x01\x20\x01(\x0b2\x1e.envoy.config.\
    core.v3.LocalityR\x08locality\x12:\n\x19total_successful_requests\x18\
    \x02\x20\x01(\x04R\x17totalSuccessfulRequests\x12;\n\x1atotal_requests_i\
    n_progress\x18\x03\x20\x01(\x04R\x17totalRequestsInProgress\x120\n\x14to\
    tal_error_requests\x18\x04\x20\x01(\x04R\x12totalErrorRequests\x122\n\
    \x15total_issued_requests\x18\x08\x20\x01(\x04R\x13totalIssuedRequests\
    \x12]\n\x11load_metric_stats\x18\x05\x20\x03(\x0b21.envoy.config.endpoin\
    t.v3.EndpointLoadMetricStatsR\x0floadMetricStats\x12g\n\x17upstream_endp\
    oint_stats\x18\x07\x20\x03(\x0b2/.envoy.config.endpoint.v3.UpstreamEndpo\
    intStatsR\x15upstreamEndpointStats\x12\x1a\n\x08priority\x18\x06\x20\x01\
    (\rR\x08priority:2\x9a\xc5\x88\x1e-\n+envoy.api.v2.endpoint.UpstreamLoca\
    lityStats\"\xf7\x03\n\x15UpstreamEndpointStats\x127\n\x07address\x18\x01\
    \x20\x01(\x0b2\x1d.envoy.config.core.v3.AddressR\x07address\x123\n\x08me\
    tadata\x18\x06\x20\x01(\x0b2\x17.google.protobuf.StructR\x08metadata\x12\
    :\n\x19total_successful_requests\x18\x02\x20\x01(\x04R\x17totalSuccessfu\
    lRequests\x12;\n\x1atotal_requests_in_progress\x18\x03\x20\x01(\x04R\x17\
    totalRequestsInProgress\x120\n\x14total_error_requests\x18\x04\x20\x01(\
    \x04R\x12totalErrorRequests\x122\n\x15total_issued_requests\x18\x07\x20\
    \x01(\x04R\x13totalIssuedRequests\x12]\n\x11load_metric_stats\x18\x05\
    \x20\x03(\x0b21.envoy.config.endpoint.v3.EndpointLoadMetricStatsR\x0floa\
    dMetricStats:2\x9a\xc5\x88\x1e-\n+envoy.api.v2.endpoint.UpstreamEndpoint\
    Stats\"\xe8\x01\n\x17EndpointLoadMetricStats\x12\x1f\n\x0bmetric_name\
    \x18\x01\x20\x01(\tR\nmetricName\x12H\n!num_requests_finished_with_metri\
    c\x18\x02\x20\x01(\x04R\x1dnumRequestsFinishedWithMetric\x12,\n\x12total\
    _metric_value\x18\x03\x20\x01(\x01R\x10totalMetricValue:4\x9a\xc5\x88\
    \x1e/\n-envoy.api.v2.endpoint.EndpointLoadMetricStats\"\x89\x05\n\x0cClu\
    sterStats\x12*\n\x0ccluster_name\x18\x01\x20\x01(\tR\x0bclusterNameB\x07\
    \xfaB\x04r\x02\x10\x01\x120\n\x14cluster_service_name\x18\x06\x20\x01(\t\
    R\x12clusterServiceName\x12q\n\x17upstream_locality_stats\x18\x02\x20\
    \x03(\x0b2/.envoy.config.endpoint.v3.UpstreamLocalityStatsR\x15upstreamL\
    ocalityStatsB\x08\xfaB\x05\x92\x01\x02\x08\x01\x124\n\x16total_dropped_r\
    equests\x18\x03\x20\x01(\x04R\x14totalDroppedRequests\x12a\n\x10dropped_\
    requests\x18\x05\x20\x03(\x0b26.envoy.config.endpoint.v3.ClusterStats.Dr\
    oppedRequestsR\x0fdroppedRequests\x12K\n\x14load_report_interval\x18\x04\
    \x20\x01(\x0b2\x19.google.protobuf.DurationR\x12loadReportInterval\x1a\
    \x96\x01\n\x0fDroppedRequests\x12#\n\x08category\x18\x01\x20\x01(\tR\x08\
    categoryB\x07\xfaB\x04r\x02\x10\x01\x12#\n\rdropped_count\x18\x02\x20\
    \x01(\x04R\x0cdroppedCount:9\x9a\xc5\x88\x1e4\n2envoy.api.v2.endpoint.Cl\
    usterStats.DroppedRequests:)\x9a\xc5\x88\x1e$\n\"envoy.api.v2.endpoint.C\
    lusterStatsBC\n&io.envoyproxy.envoy.config.endpoint.v3B\x0fLoadReportPro\
    toP\x01\xba\x80\xc8\xd1\x06\x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
