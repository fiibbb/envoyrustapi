// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/endpoint/v3/endpoint.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct ClusterLoadAssignment {
    // message fields
    pub cluster_name: ::std::string::String,
    pub endpoints: ::protobuf::RepeatedField<super::endpoint_components::LocalityLbEndpoints>,
    pub named_endpoints: ::std::collections::HashMap<::std::string::String, super::endpoint_components::Endpoint>,
    pub policy: ::protobuf::SingularPtrField<ClusterLoadAssignment_Policy>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClusterLoadAssignment {
    fn default() -> &'a ClusterLoadAssignment {
        <ClusterLoadAssignment as ::protobuf::Message>::default_instance()
    }
}

impl ClusterLoadAssignment {
    pub fn new() -> ClusterLoadAssignment {
        ::std::default::Default::default()
    }

    // string cluster_name = 1;


    pub fn get_cluster_name(&self) -> &str {
        &self.cluster_name
    }
    pub fn clear_cluster_name(&mut self) {
        self.cluster_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cluster_name(&mut self, v: ::std::string::String) {
        self.cluster_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cluster_name(&mut self) -> &mut ::std::string::String {
        &mut self.cluster_name
    }

    // Take field
    pub fn take_cluster_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cluster_name, ::std::string::String::new())
    }

    // repeated .envoy.config.endpoint.v3.LocalityLbEndpoints endpoints = 2;


    pub fn get_endpoints(&self) -> &[super::endpoint_components::LocalityLbEndpoints] {
        &self.endpoints
    }
    pub fn clear_endpoints(&mut self) {
        self.endpoints.clear();
    }

    // Param is passed by value, moved
    pub fn set_endpoints(&mut self, v: ::protobuf::RepeatedField<super::endpoint_components::LocalityLbEndpoints>) {
        self.endpoints = v;
    }

    // Mutable pointer to the field.
    pub fn mut_endpoints(&mut self) -> &mut ::protobuf::RepeatedField<super::endpoint_components::LocalityLbEndpoints> {
        &mut self.endpoints
    }

    // Take field
    pub fn take_endpoints(&mut self) -> ::protobuf::RepeatedField<super::endpoint_components::LocalityLbEndpoints> {
        ::std::mem::replace(&mut self.endpoints, ::protobuf::RepeatedField::new())
    }

    // repeated .envoy.config.endpoint.v3.ClusterLoadAssignment.NamedEndpointsEntry named_endpoints = 5;


    pub fn get_named_endpoints(&self) -> &::std::collections::HashMap<::std::string::String, super::endpoint_components::Endpoint> {
        &self.named_endpoints
    }
    pub fn clear_named_endpoints(&mut self) {
        self.named_endpoints.clear();
    }

    // Param is passed by value, moved
    pub fn set_named_endpoints(&mut self, v: ::std::collections::HashMap<::std::string::String, super::endpoint_components::Endpoint>) {
        self.named_endpoints = v;
    }

    // Mutable pointer to the field.
    pub fn mut_named_endpoints(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, super::endpoint_components::Endpoint> {
        &mut self.named_endpoints
    }

    // Take field
    pub fn take_named_endpoints(&mut self) -> ::std::collections::HashMap<::std::string::String, super::endpoint_components::Endpoint> {
        ::std::mem::replace(&mut self.named_endpoints, ::std::collections::HashMap::new())
    }

    // .envoy.config.endpoint.v3.ClusterLoadAssignment.Policy policy = 4;


    pub fn get_policy(&self) -> &ClusterLoadAssignment_Policy {
        self.policy.as_ref().unwrap_or_else(|| <ClusterLoadAssignment_Policy as ::protobuf::Message>::default_instance())
    }
    pub fn clear_policy(&mut self) {
        self.policy.clear();
    }

    pub fn has_policy(&self) -> bool {
        self.policy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_policy(&mut self, v: ClusterLoadAssignment_Policy) {
        self.policy = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_policy(&mut self) -> &mut ClusterLoadAssignment_Policy {
        if self.policy.is_none() {
            self.policy.set_default();
        }
        self.policy.as_mut().unwrap()
    }

    // Take field
    pub fn take_policy(&mut self) -> ClusterLoadAssignment_Policy {
        self.policy.take().unwrap_or_else(|| ClusterLoadAssignment_Policy::new())
    }
}

impl ::protobuf::Message for ClusterLoadAssignment {
    fn is_initialized(&self) -> bool {
        for v in &self.endpoints {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.policy {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cluster_name)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.endpoints)?;
                },
                5 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::endpoint_components::Endpoint>>(wire_type, is, &mut self.named_endpoints)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.policy)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.cluster_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.cluster_name);
        }
        for value in &self.endpoints {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::endpoint_components::Endpoint>>(5, &self.named_endpoints);
        if let Some(ref v) = self.policy.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.cluster_name.is_empty() {
            os.write_string(1, &self.cluster_name)?;
        }
        for v in &self.endpoints {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::endpoint_components::Endpoint>>(5, &self.named_endpoints, os)?;
        if let Some(ref v) = self.policy.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClusterLoadAssignment {
        ClusterLoadAssignment::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cluster_name",
                |m: &ClusterLoadAssignment| { &m.cluster_name },
                |m: &mut ClusterLoadAssignment| { &mut m.cluster_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::endpoint_components::LocalityLbEndpoints>>(
                "endpoints",
                |m: &ClusterLoadAssignment| { &m.endpoints },
                |m: &mut ClusterLoadAssignment| { &mut m.endpoints },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::endpoint_components::Endpoint>>(
                "named_endpoints",
                |m: &ClusterLoadAssignment| { &m.named_endpoints },
                |m: &mut ClusterLoadAssignment| { &mut m.named_endpoints },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ClusterLoadAssignment_Policy>>(
                "policy",
                |m: &ClusterLoadAssignment| { &m.policy },
                |m: &mut ClusterLoadAssignment| { &mut m.policy },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClusterLoadAssignment>(
                "ClusterLoadAssignment",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClusterLoadAssignment {
        static instance: ::protobuf::rt::LazyV2<ClusterLoadAssignment> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClusterLoadAssignment::new)
    }
}

impl ::protobuf::Clear for ClusterLoadAssignment {
    fn clear(&mut self) {
        self.cluster_name.clear();
        self.endpoints.clear();
        self.named_endpoints.clear();
        self.policy.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClusterLoadAssignment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClusterLoadAssignment {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClusterLoadAssignment_Policy {
    // message fields
    pub drop_overloads: ::protobuf::RepeatedField<ClusterLoadAssignment_Policy_DropOverload>,
    pub overprovisioning_factor: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub endpoint_stale_after: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClusterLoadAssignment_Policy {
    fn default() -> &'a ClusterLoadAssignment_Policy {
        <ClusterLoadAssignment_Policy as ::protobuf::Message>::default_instance()
    }
}

impl ClusterLoadAssignment_Policy {
    pub fn new() -> ClusterLoadAssignment_Policy {
        ::std::default::Default::default()
    }

    // repeated .envoy.config.endpoint.v3.ClusterLoadAssignment.Policy.DropOverload drop_overloads = 2;


    pub fn get_drop_overloads(&self) -> &[ClusterLoadAssignment_Policy_DropOverload] {
        &self.drop_overloads
    }
    pub fn clear_drop_overloads(&mut self) {
        self.drop_overloads.clear();
    }

    // Param is passed by value, moved
    pub fn set_drop_overloads(&mut self, v: ::protobuf::RepeatedField<ClusterLoadAssignment_Policy_DropOverload>) {
        self.drop_overloads = v;
    }

    // Mutable pointer to the field.
    pub fn mut_drop_overloads(&mut self) -> &mut ::protobuf::RepeatedField<ClusterLoadAssignment_Policy_DropOverload> {
        &mut self.drop_overloads
    }

    // Take field
    pub fn take_drop_overloads(&mut self) -> ::protobuf::RepeatedField<ClusterLoadAssignment_Policy_DropOverload> {
        ::std::mem::replace(&mut self.drop_overloads, ::protobuf::RepeatedField::new())
    }

    // .google.protobuf.UInt32Value overprovisioning_factor = 3;


    pub fn get_overprovisioning_factor(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.overprovisioning_factor.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_overprovisioning_factor(&mut self) {
        self.overprovisioning_factor.clear();
    }

    pub fn has_overprovisioning_factor(&self) -> bool {
        self.overprovisioning_factor.is_some()
    }

    // Param is passed by value, moved
    pub fn set_overprovisioning_factor(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.overprovisioning_factor = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_overprovisioning_factor(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.overprovisioning_factor.is_none() {
            self.overprovisioning_factor.set_default();
        }
        self.overprovisioning_factor.as_mut().unwrap()
    }

    // Take field
    pub fn take_overprovisioning_factor(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.overprovisioning_factor.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.Duration endpoint_stale_after = 4;


    pub fn get_endpoint_stale_after(&self) -> &::protobuf::well_known_types::Duration {
        self.endpoint_stale_after.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_endpoint_stale_after(&mut self) {
        self.endpoint_stale_after.clear();
    }

    pub fn has_endpoint_stale_after(&self) -> bool {
        self.endpoint_stale_after.is_some()
    }

    // Param is passed by value, moved
    pub fn set_endpoint_stale_after(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.endpoint_stale_after = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_endpoint_stale_after(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.endpoint_stale_after.is_none() {
            self.endpoint_stale_after.set_default();
        }
        self.endpoint_stale_after.as_mut().unwrap()
    }

    // Take field
    pub fn take_endpoint_stale_after(&mut self) -> ::protobuf::well_known_types::Duration {
        self.endpoint_stale_after.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }
}

impl ::protobuf::Message for ClusterLoadAssignment_Policy {
    fn is_initialized(&self) -> bool {
        for v in &self.drop_overloads {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.overprovisioning_factor {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.endpoint_stale_after {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.drop_overloads)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.overprovisioning_factor)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.endpoint_stale_after)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.drop_overloads {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.overprovisioning_factor.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.endpoint_stale_after.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.drop_overloads {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.overprovisioning_factor.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.endpoint_stale_after.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClusterLoadAssignment_Policy {
        ClusterLoadAssignment_Policy::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ClusterLoadAssignment_Policy_DropOverload>>(
                "drop_overloads",
                |m: &ClusterLoadAssignment_Policy| { &m.drop_overloads },
                |m: &mut ClusterLoadAssignment_Policy| { &mut m.drop_overloads },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "overprovisioning_factor",
                |m: &ClusterLoadAssignment_Policy| { &m.overprovisioning_factor },
                |m: &mut ClusterLoadAssignment_Policy| { &mut m.overprovisioning_factor },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "endpoint_stale_after",
                |m: &ClusterLoadAssignment_Policy| { &m.endpoint_stale_after },
                |m: &mut ClusterLoadAssignment_Policy| { &mut m.endpoint_stale_after },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClusterLoadAssignment_Policy>(
                "ClusterLoadAssignment.Policy",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClusterLoadAssignment_Policy {
        static instance: ::protobuf::rt::LazyV2<ClusterLoadAssignment_Policy> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClusterLoadAssignment_Policy::new)
    }
}

impl ::protobuf::Clear for ClusterLoadAssignment_Policy {
    fn clear(&mut self) {
        self.drop_overloads.clear();
        self.overprovisioning_factor.clear();
        self.endpoint_stale_after.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClusterLoadAssignment_Policy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClusterLoadAssignment_Policy {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClusterLoadAssignment_Policy_DropOverload {
    // message fields
    pub category: ::std::string::String,
    pub drop_percentage: ::protobuf::SingularPtrField<super::percent::FractionalPercent>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClusterLoadAssignment_Policy_DropOverload {
    fn default() -> &'a ClusterLoadAssignment_Policy_DropOverload {
        <ClusterLoadAssignment_Policy_DropOverload as ::protobuf::Message>::default_instance()
    }
}

impl ClusterLoadAssignment_Policy_DropOverload {
    pub fn new() -> ClusterLoadAssignment_Policy_DropOverload {
        ::std::default::Default::default()
    }

    // string category = 1;


    pub fn get_category(&self) -> &str {
        &self.category
    }
    pub fn clear_category(&mut self) {
        self.category.clear();
    }

    // Param is passed by value, moved
    pub fn set_category(&mut self, v: ::std::string::String) {
        self.category = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_category(&mut self) -> &mut ::std::string::String {
        &mut self.category
    }

    // Take field
    pub fn take_category(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.category, ::std::string::String::new())
    }

    // .envoy.type.v3.FractionalPercent drop_percentage = 2;


    pub fn get_drop_percentage(&self) -> &super::percent::FractionalPercent {
        self.drop_percentage.as_ref().unwrap_or_else(|| <super::percent::FractionalPercent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_drop_percentage(&mut self) {
        self.drop_percentage.clear();
    }

    pub fn has_drop_percentage(&self) -> bool {
        self.drop_percentage.is_some()
    }

    // Param is passed by value, moved
    pub fn set_drop_percentage(&mut self, v: super::percent::FractionalPercent) {
        self.drop_percentage = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_drop_percentage(&mut self) -> &mut super::percent::FractionalPercent {
        if self.drop_percentage.is_none() {
            self.drop_percentage.set_default();
        }
        self.drop_percentage.as_mut().unwrap()
    }

    // Take field
    pub fn take_drop_percentage(&mut self) -> super::percent::FractionalPercent {
        self.drop_percentage.take().unwrap_or_else(|| super::percent::FractionalPercent::new())
    }
}

impl ::protobuf::Message for ClusterLoadAssignment_Policy_DropOverload {
    fn is_initialized(&self) -> bool {
        for v in &self.drop_percentage {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.category)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.drop_percentage)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.category.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.category);
        }
        if let Some(ref v) = self.drop_percentage.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.category.is_empty() {
            os.write_string(1, &self.category)?;
        }
        if let Some(ref v) = self.drop_percentage.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClusterLoadAssignment_Policy_DropOverload {
        ClusterLoadAssignment_Policy_DropOverload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "category",
                |m: &ClusterLoadAssignment_Policy_DropOverload| { &m.category },
                |m: &mut ClusterLoadAssignment_Policy_DropOverload| { &mut m.category },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::percent::FractionalPercent>>(
                "drop_percentage",
                |m: &ClusterLoadAssignment_Policy_DropOverload| { &m.drop_percentage },
                |m: &mut ClusterLoadAssignment_Policy_DropOverload| { &mut m.drop_percentage },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClusterLoadAssignment_Policy_DropOverload>(
                "ClusterLoadAssignment.Policy.DropOverload",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClusterLoadAssignment_Policy_DropOverload {
        static instance: ::protobuf::rt::LazyV2<ClusterLoadAssignment_Policy_DropOverload> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClusterLoadAssignment_Policy_DropOverload::new)
    }
}

impl ::protobuf::Clear for ClusterLoadAssignment_Policy_DropOverload {
    fn clear(&mut self) {
        self.category.clear();
        self.drop_percentage.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClusterLoadAssignment_Policy_DropOverload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClusterLoadAssignment_Policy_DropOverload {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'envoy/config/endpoint/v3/endpoint.proto\x12\x18envoy.config.endpoint.\
    v3\x1a2envoy/config/endpoint/v3/endpoint_components.proto\x1a\x1benvoy/t\
    ype/v3/percent.proto\x1a\x1cgoogle/api/annotations.proto\x1a\x1egoogle/p\
    rotobuf/duration.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1dudpa\
    /annotations/status.proto\x1a!udpa/annotations/versioning.proto\x1a\x17v\
    alidate/validate.proto\"\xa6\x08\n\x15ClusterLoadAssignment\x12*\n\x0ccl\
    uster_name\x18\x01\x20\x01(\tR\x0bclusterNameB\x07\xfaB\x04r\x02\x10\x01\
    \x12K\n\tendpoints\x18\x02\x20\x03(\x0b2-.envoy.config.endpoint.v3.Local\
    ityLbEndpointsR\tendpoints\x12l\n\x0fnamed_endpoints\x18\x05\x20\x03(\
    \x0b2C.envoy.config.endpoint.v3.ClusterLoadAssignment.NamedEndpointsEntr\
    yR\x0enamedEndpoints\x12N\n\x06policy\x18\x04\x20\x01(\x0b26.envoy.confi\
    g.endpoint.v3.ClusterLoadAssignment.PolicyR\x06policy\x1a\xc3\x04\n\x06P\
    olicy\x12j\n\x0edrop_overloads\x18\x02\x20\x03(\x0b2C.envoy.config.endpo\
    int.v3.ClusterLoadAssignment.Policy.DropOverloadR\rdropOverloads\x12^\n\
    \x17overprovisioning_factor\x18\x03\x20\x01(\x0b2\x1c.google.protobuf.UI\
    nt32ValueR\x16overprovisioningFactorB\x07\xfaB\x04*\x02\x20\0\x12U\n\x14\
    endpoint_stale_after\x18\x04\x20\x01(\x0b2\x19.google.protobuf.DurationR\
    \x12endpointStaleAfterB\x08\xfaB\x05\xaa\x01\x02*\0\x1a\xbd\x01\n\x0cDro\
    pOverload\x12#\n\x08category\x18\x01\x20\x01(\tR\x08categoryB\x07\xfaB\
    \x04r\x02\x10\x01\x12I\n\x0fdrop_percentage\x18\x02\x20\x01(\x0b2\x20.en\
    voy.type.v3.FractionalPercentR\x0edropPercentage:=\x9a\xc5\x88\x1e8\n6en\
    voy.api.v2.ClusterLoadAssignment.Policy.DropOverload:0\x9a\xc5\x88\x1e+\
    \n)envoy.api.v2.ClusterLoadAssignment.PolicyJ\x04\x08\x01\x10\x02J\x04\
    \x08\x05\x10\x06R\x18disable_overprovisioning\x1ae\n\x13NamedEndpointsEn\
    try\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x128\n\x05value\x18\x02\
    \x20\x01(\x0b2\".envoy.config.endpoint.v3.EndpointR\x05value:\x028\x01:)\
    \x9a\xc5\x88\x1e$\n\"envoy.api.v2.ClusterLoadAssignmentBA\n&io.envoyprox\
    y.envoy.config.endpoint.v3B\rEndpointProtoP\x01\xba\x80\xc8\xd1\x06\x02\
    \x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
