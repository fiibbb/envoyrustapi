// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/overload/v3/overload.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct ResourceMonitor {
    // message fields
    pub name: ::std::string::String,
    // message oneof groups
    pub config_type: ::std::option::Option<ResourceMonitor_oneof_config_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ResourceMonitor {
    fn default() -> &'a ResourceMonitor {
        <ResourceMonitor as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ResourceMonitor_oneof_config_type {
    typed_config(::protobuf::well_known_types::Any),
}

impl ResourceMonitor {
    pub fn new() -> ResourceMonitor {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .google.protobuf.Any typed_config = 3;


    pub fn get_typed_config(&self) -> &::protobuf::well_known_types::Any {
        match self.config_type {
            ::std::option::Option::Some(ResourceMonitor_oneof_config_type::typed_config(ref v)) => v,
            _ => <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_typed_config(&mut self) {
        self.config_type = ::std::option::Option::None;
    }

    pub fn has_typed_config(&self) -> bool {
        match self.config_type {
            ::std::option::Option::Some(ResourceMonitor_oneof_config_type::typed_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_typed_config(&mut self, v: ::protobuf::well_known_types::Any) {
        self.config_type = ::std::option::Option::Some(ResourceMonitor_oneof_config_type::typed_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_typed_config(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if let ::std::option::Option::Some(ResourceMonitor_oneof_config_type::typed_config(_)) = self.config_type {
        } else {
            self.config_type = ::std::option::Option::Some(ResourceMonitor_oneof_config_type::typed_config(::protobuf::well_known_types::Any::new()));
        }
        match self.config_type {
            ::std::option::Option::Some(ResourceMonitor_oneof_config_type::typed_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_typed_config(&mut self) -> ::protobuf::well_known_types::Any {
        if self.has_typed_config() {
            match self.config_type.take() {
                ::std::option::Option::Some(ResourceMonitor_oneof_config_type::typed_config(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Any::new()
        }
    }
}

impl ::protobuf::Message for ResourceMonitor {
    fn is_initialized(&self) -> bool {
        if let Some(ResourceMonitor_oneof_config_type::typed_config(ref v)) = self.config_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config_type = ::std::option::Option::Some(ResourceMonitor_oneof_config_type::typed_config(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let ::std::option::Option::Some(ref v) = self.config_type {
            match v {
                &ResourceMonitor_oneof_config_type::typed_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let ::std::option::Option::Some(ref v) = self.config_type {
            match v {
                &ResourceMonitor_oneof_config_type::typed_config(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResourceMonitor {
        ResourceMonitor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &ResourceMonitor| { &m.name },
                |m: &mut ResourceMonitor| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Any>(
                "typed_config",
                ResourceMonitor::has_typed_config,
                ResourceMonitor::get_typed_config,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ResourceMonitor>(
                "ResourceMonitor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ResourceMonitor {
        static instance: ::protobuf::rt::LazyV2<ResourceMonitor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ResourceMonitor::new)
    }
}

impl ::protobuf::Clear for ResourceMonitor {
    fn clear(&mut self) {
        self.name.clear();
        self.config_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResourceMonitor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResourceMonitor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ThresholdTrigger {
    // message fields
    pub value: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ThresholdTrigger {
    fn default() -> &'a ThresholdTrigger {
        <ThresholdTrigger as ::protobuf::Message>::default_instance()
    }
}

impl ThresholdTrigger {
    pub fn new() -> ThresholdTrigger {
        ::std::default::Default::default()
    }

    // double value = 1;


    pub fn get_value(&self) -> f64 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: f64) {
        self.value = v;
    }
}

impl ::protobuf::Message for ThresholdTrigger {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.value = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.value != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.value != 0. {
            os.write_double(1, self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ThresholdTrigger {
        ThresholdTrigger::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "value",
                |m: &ThresholdTrigger| { &m.value },
                |m: &mut ThresholdTrigger| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ThresholdTrigger>(
                "ThresholdTrigger",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ThresholdTrigger {
        static instance: ::protobuf::rt::LazyV2<ThresholdTrigger> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ThresholdTrigger::new)
    }
}

impl ::protobuf::Clear for ThresholdTrigger {
    fn clear(&mut self) {
        self.value = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ThresholdTrigger {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ThresholdTrigger {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ScaledTrigger {
    // message fields
    pub scaling_threshold: f64,
    pub saturation_threshold: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ScaledTrigger {
    fn default() -> &'a ScaledTrigger {
        <ScaledTrigger as ::protobuf::Message>::default_instance()
    }
}

impl ScaledTrigger {
    pub fn new() -> ScaledTrigger {
        ::std::default::Default::default()
    }

    // double scaling_threshold = 1;


    pub fn get_scaling_threshold(&self) -> f64 {
        self.scaling_threshold
    }
    pub fn clear_scaling_threshold(&mut self) {
        self.scaling_threshold = 0.;
    }

    // Param is passed by value, moved
    pub fn set_scaling_threshold(&mut self, v: f64) {
        self.scaling_threshold = v;
    }

    // double saturation_threshold = 2;


    pub fn get_saturation_threshold(&self) -> f64 {
        self.saturation_threshold
    }
    pub fn clear_saturation_threshold(&mut self) {
        self.saturation_threshold = 0.;
    }

    // Param is passed by value, moved
    pub fn set_saturation_threshold(&mut self, v: f64) {
        self.saturation_threshold = v;
    }
}

impl ::protobuf::Message for ScaledTrigger {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.scaling_threshold = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.saturation_threshold = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.scaling_threshold != 0. {
            my_size += 9;
        }
        if self.saturation_threshold != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.scaling_threshold != 0. {
            os.write_double(1, self.scaling_threshold)?;
        }
        if self.saturation_threshold != 0. {
            os.write_double(2, self.saturation_threshold)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ScaledTrigger {
        ScaledTrigger::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "scaling_threshold",
                |m: &ScaledTrigger| { &m.scaling_threshold },
                |m: &mut ScaledTrigger| { &mut m.scaling_threshold },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "saturation_threshold",
                |m: &ScaledTrigger| { &m.saturation_threshold },
                |m: &mut ScaledTrigger| { &mut m.saturation_threshold },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ScaledTrigger>(
                "ScaledTrigger",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ScaledTrigger {
        static instance: ::protobuf::rt::LazyV2<ScaledTrigger> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ScaledTrigger::new)
    }
}

impl ::protobuf::Clear for ScaledTrigger {
    fn clear(&mut self) {
        self.scaling_threshold = 0.;
        self.saturation_threshold = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ScaledTrigger {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ScaledTrigger {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Trigger {
    // message fields
    pub name: ::std::string::String,
    // message oneof groups
    pub trigger_oneof: ::std::option::Option<Trigger_oneof_trigger_oneof>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Trigger {
    fn default() -> &'a Trigger {
        <Trigger as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Trigger_oneof_trigger_oneof {
    threshold(ThresholdTrigger),
    scaled(ScaledTrigger),
}

impl Trigger {
    pub fn new() -> Trigger {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .envoy.config.overload.v3.ThresholdTrigger threshold = 2;


    pub fn get_threshold(&self) -> &ThresholdTrigger {
        match self.trigger_oneof {
            ::std::option::Option::Some(Trigger_oneof_trigger_oneof::threshold(ref v)) => v,
            _ => <ThresholdTrigger as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_threshold(&mut self) {
        self.trigger_oneof = ::std::option::Option::None;
    }

    pub fn has_threshold(&self) -> bool {
        match self.trigger_oneof {
            ::std::option::Option::Some(Trigger_oneof_trigger_oneof::threshold(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_threshold(&mut self, v: ThresholdTrigger) {
        self.trigger_oneof = ::std::option::Option::Some(Trigger_oneof_trigger_oneof::threshold(v))
    }

    // Mutable pointer to the field.
    pub fn mut_threshold(&mut self) -> &mut ThresholdTrigger {
        if let ::std::option::Option::Some(Trigger_oneof_trigger_oneof::threshold(_)) = self.trigger_oneof {
        } else {
            self.trigger_oneof = ::std::option::Option::Some(Trigger_oneof_trigger_oneof::threshold(ThresholdTrigger::new()));
        }
        match self.trigger_oneof {
            ::std::option::Option::Some(Trigger_oneof_trigger_oneof::threshold(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_threshold(&mut self) -> ThresholdTrigger {
        if self.has_threshold() {
            match self.trigger_oneof.take() {
                ::std::option::Option::Some(Trigger_oneof_trigger_oneof::threshold(v)) => v,
                _ => panic!(),
            }
        } else {
            ThresholdTrigger::new()
        }
    }

    // .envoy.config.overload.v3.ScaledTrigger scaled = 3;


    pub fn get_scaled(&self) -> &ScaledTrigger {
        match self.trigger_oneof {
            ::std::option::Option::Some(Trigger_oneof_trigger_oneof::scaled(ref v)) => v,
            _ => <ScaledTrigger as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_scaled(&mut self) {
        self.trigger_oneof = ::std::option::Option::None;
    }

    pub fn has_scaled(&self) -> bool {
        match self.trigger_oneof {
            ::std::option::Option::Some(Trigger_oneof_trigger_oneof::scaled(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_scaled(&mut self, v: ScaledTrigger) {
        self.trigger_oneof = ::std::option::Option::Some(Trigger_oneof_trigger_oneof::scaled(v))
    }

    // Mutable pointer to the field.
    pub fn mut_scaled(&mut self) -> &mut ScaledTrigger {
        if let ::std::option::Option::Some(Trigger_oneof_trigger_oneof::scaled(_)) = self.trigger_oneof {
        } else {
            self.trigger_oneof = ::std::option::Option::Some(Trigger_oneof_trigger_oneof::scaled(ScaledTrigger::new()));
        }
        match self.trigger_oneof {
            ::std::option::Option::Some(Trigger_oneof_trigger_oneof::scaled(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_scaled(&mut self) -> ScaledTrigger {
        if self.has_scaled() {
            match self.trigger_oneof.take() {
                ::std::option::Option::Some(Trigger_oneof_trigger_oneof::scaled(v)) => v,
                _ => panic!(),
            }
        } else {
            ScaledTrigger::new()
        }
    }
}

impl ::protobuf::Message for Trigger {
    fn is_initialized(&self) -> bool {
        if let Some(Trigger_oneof_trigger_oneof::threshold(ref v)) = self.trigger_oneof {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Trigger_oneof_trigger_oneof::scaled(ref v)) = self.trigger_oneof {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.trigger_oneof = ::std::option::Option::Some(Trigger_oneof_trigger_oneof::threshold(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.trigger_oneof = ::std::option::Option::Some(Trigger_oneof_trigger_oneof::scaled(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let ::std::option::Option::Some(ref v) = self.trigger_oneof {
            match v {
                &Trigger_oneof_trigger_oneof::threshold(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Trigger_oneof_trigger_oneof::scaled(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let ::std::option::Option::Some(ref v) = self.trigger_oneof {
            match v {
                &Trigger_oneof_trigger_oneof::threshold(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Trigger_oneof_trigger_oneof::scaled(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Trigger {
        Trigger::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Trigger| { &m.name },
                |m: &mut Trigger| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ThresholdTrigger>(
                "threshold",
                Trigger::has_threshold,
                Trigger::get_threshold,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ScaledTrigger>(
                "scaled",
                Trigger::has_scaled,
                Trigger::get_scaled,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Trigger>(
                "Trigger",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Trigger {
        static instance: ::protobuf::rt::LazyV2<Trigger> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Trigger::new)
    }
}

impl ::protobuf::Clear for Trigger {
    fn clear(&mut self) {
        self.name.clear();
        self.trigger_oneof = ::std::option::Option::None;
        self.trigger_oneof = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Trigger {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Trigger {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ScaleTimersOverloadActionConfig {
    // message fields
    pub timer_scale_factors: ::protobuf::RepeatedField<ScaleTimersOverloadActionConfig_ScaleTimer>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ScaleTimersOverloadActionConfig {
    fn default() -> &'a ScaleTimersOverloadActionConfig {
        <ScaleTimersOverloadActionConfig as ::protobuf::Message>::default_instance()
    }
}

impl ScaleTimersOverloadActionConfig {
    pub fn new() -> ScaleTimersOverloadActionConfig {
        ::std::default::Default::default()
    }

    // repeated .envoy.config.overload.v3.ScaleTimersOverloadActionConfig.ScaleTimer timer_scale_factors = 1;


    pub fn get_timer_scale_factors(&self) -> &[ScaleTimersOverloadActionConfig_ScaleTimer] {
        &self.timer_scale_factors
    }
    pub fn clear_timer_scale_factors(&mut self) {
        self.timer_scale_factors.clear();
    }

    // Param is passed by value, moved
    pub fn set_timer_scale_factors(&mut self, v: ::protobuf::RepeatedField<ScaleTimersOverloadActionConfig_ScaleTimer>) {
        self.timer_scale_factors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_timer_scale_factors(&mut self) -> &mut ::protobuf::RepeatedField<ScaleTimersOverloadActionConfig_ScaleTimer> {
        &mut self.timer_scale_factors
    }

    // Take field
    pub fn take_timer_scale_factors(&mut self) -> ::protobuf::RepeatedField<ScaleTimersOverloadActionConfig_ScaleTimer> {
        ::std::mem::replace(&mut self.timer_scale_factors, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ScaleTimersOverloadActionConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.timer_scale_factors {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.timer_scale_factors)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.timer_scale_factors {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.timer_scale_factors {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ScaleTimersOverloadActionConfig {
        ScaleTimersOverloadActionConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ScaleTimersOverloadActionConfig_ScaleTimer>>(
                "timer_scale_factors",
                |m: &ScaleTimersOverloadActionConfig| { &m.timer_scale_factors },
                |m: &mut ScaleTimersOverloadActionConfig| { &mut m.timer_scale_factors },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ScaleTimersOverloadActionConfig>(
                "ScaleTimersOverloadActionConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ScaleTimersOverloadActionConfig {
        static instance: ::protobuf::rt::LazyV2<ScaleTimersOverloadActionConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ScaleTimersOverloadActionConfig::new)
    }
}

impl ::protobuf::Clear for ScaleTimersOverloadActionConfig {
    fn clear(&mut self) {
        self.timer_scale_factors.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ScaleTimersOverloadActionConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ScaleTimersOverloadActionConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ScaleTimersOverloadActionConfig_ScaleTimer {
    // message fields
    pub timer: ScaleTimersOverloadActionConfig_TimerType,
    // message oneof groups
    pub overload_adjust: ::std::option::Option<ScaleTimersOverloadActionConfig_ScaleTimer_oneof_overload_adjust>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ScaleTimersOverloadActionConfig_ScaleTimer {
    fn default() -> &'a ScaleTimersOverloadActionConfig_ScaleTimer {
        <ScaleTimersOverloadActionConfig_ScaleTimer as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ScaleTimersOverloadActionConfig_ScaleTimer_oneof_overload_adjust {
    min_timeout(::protobuf::well_known_types::Duration),
    min_scale(super::percent::Percent),
}

impl ScaleTimersOverloadActionConfig_ScaleTimer {
    pub fn new() -> ScaleTimersOverloadActionConfig_ScaleTimer {
        ::std::default::Default::default()
    }

    // .envoy.config.overload.v3.ScaleTimersOverloadActionConfig.TimerType timer = 1;


    pub fn get_timer(&self) -> ScaleTimersOverloadActionConfig_TimerType {
        self.timer
    }
    pub fn clear_timer(&mut self) {
        self.timer = ScaleTimersOverloadActionConfig_TimerType::UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_timer(&mut self, v: ScaleTimersOverloadActionConfig_TimerType) {
        self.timer = v;
    }

    // .google.protobuf.Duration min_timeout = 2;


    pub fn get_min_timeout(&self) -> &::protobuf::well_known_types::Duration {
        match self.overload_adjust {
            ::std::option::Option::Some(ScaleTimersOverloadActionConfig_ScaleTimer_oneof_overload_adjust::min_timeout(ref v)) => v,
            _ => <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_min_timeout(&mut self) {
        self.overload_adjust = ::std::option::Option::None;
    }

    pub fn has_min_timeout(&self) -> bool {
        match self.overload_adjust {
            ::std::option::Option::Some(ScaleTimersOverloadActionConfig_ScaleTimer_oneof_overload_adjust::min_timeout(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_min_timeout(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.overload_adjust = ::std::option::Option::Some(ScaleTimersOverloadActionConfig_ScaleTimer_oneof_overload_adjust::min_timeout(v))
    }

    // Mutable pointer to the field.
    pub fn mut_min_timeout(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if let ::std::option::Option::Some(ScaleTimersOverloadActionConfig_ScaleTimer_oneof_overload_adjust::min_timeout(_)) = self.overload_adjust {
        } else {
            self.overload_adjust = ::std::option::Option::Some(ScaleTimersOverloadActionConfig_ScaleTimer_oneof_overload_adjust::min_timeout(::protobuf::well_known_types::Duration::new()));
        }
        match self.overload_adjust {
            ::std::option::Option::Some(ScaleTimersOverloadActionConfig_ScaleTimer_oneof_overload_adjust::min_timeout(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_min_timeout(&mut self) -> ::protobuf::well_known_types::Duration {
        if self.has_min_timeout() {
            match self.overload_adjust.take() {
                ::std::option::Option::Some(ScaleTimersOverloadActionConfig_ScaleTimer_oneof_overload_adjust::min_timeout(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Duration::new()
        }
    }

    // .envoy.type.v3.Percent min_scale = 3;


    pub fn get_min_scale(&self) -> &super::percent::Percent {
        match self.overload_adjust {
            ::std::option::Option::Some(ScaleTimersOverloadActionConfig_ScaleTimer_oneof_overload_adjust::min_scale(ref v)) => v,
            _ => <super::percent::Percent as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_min_scale(&mut self) {
        self.overload_adjust = ::std::option::Option::None;
    }

    pub fn has_min_scale(&self) -> bool {
        match self.overload_adjust {
            ::std::option::Option::Some(ScaleTimersOverloadActionConfig_ScaleTimer_oneof_overload_adjust::min_scale(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_min_scale(&mut self, v: super::percent::Percent) {
        self.overload_adjust = ::std::option::Option::Some(ScaleTimersOverloadActionConfig_ScaleTimer_oneof_overload_adjust::min_scale(v))
    }

    // Mutable pointer to the field.
    pub fn mut_min_scale(&mut self) -> &mut super::percent::Percent {
        if let ::std::option::Option::Some(ScaleTimersOverloadActionConfig_ScaleTimer_oneof_overload_adjust::min_scale(_)) = self.overload_adjust {
        } else {
            self.overload_adjust = ::std::option::Option::Some(ScaleTimersOverloadActionConfig_ScaleTimer_oneof_overload_adjust::min_scale(super::percent::Percent::new()));
        }
        match self.overload_adjust {
            ::std::option::Option::Some(ScaleTimersOverloadActionConfig_ScaleTimer_oneof_overload_adjust::min_scale(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_min_scale(&mut self) -> super::percent::Percent {
        if self.has_min_scale() {
            match self.overload_adjust.take() {
                ::std::option::Option::Some(ScaleTimersOverloadActionConfig_ScaleTimer_oneof_overload_adjust::min_scale(v)) => v,
                _ => panic!(),
            }
        } else {
            super::percent::Percent::new()
        }
    }
}

impl ::protobuf::Message for ScaleTimersOverloadActionConfig_ScaleTimer {
    fn is_initialized(&self) -> bool {
        if let Some(ScaleTimersOverloadActionConfig_ScaleTimer_oneof_overload_adjust::min_timeout(ref v)) = self.overload_adjust {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ScaleTimersOverloadActionConfig_ScaleTimer_oneof_overload_adjust::min_scale(ref v)) = self.overload_adjust {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.timer, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.overload_adjust = ::std::option::Option::Some(ScaleTimersOverloadActionConfig_ScaleTimer_oneof_overload_adjust::min_timeout(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.overload_adjust = ::std::option::Option::Some(ScaleTimersOverloadActionConfig_ScaleTimer_oneof_overload_adjust::min_scale(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.timer != ScaleTimersOverloadActionConfig_TimerType::UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.timer);
        }
        if let ::std::option::Option::Some(ref v) = self.overload_adjust {
            match v {
                &ScaleTimersOverloadActionConfig_ScaleTimer_oneof_overload_adjust::min_timeout(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ScaleTimersOverloadActionConfig_ScaleTimer_oneof_overload_adjust::min_scale(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.timer != ScaleTimersOverloadActionConfig_TimerType::UNSPECIFIED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.timer))?;
        }
        if let ::std::option::Option::Some(ref v) = self.overload_adjust {
            match v {
                &ScaleTimersOverloadActionConfig_ScaleTimer_oneof_overload_adjust::min_timeout(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ScaleTimersOverloadActionConfig_ScaleTimer_oneof_overload_adjust::min_scale(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ScaleTimersOverloadActionConfig_ScaleTimer {
        ScaleTimersOverloadActionConfig_ScaleTimer::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ScaleTimersOverloadActionConfig_TimerType>>(
                "timer",
                |m: &ScaleTimersOverloadActionConfig_ScaleTimer| { &m.timer },
                |m: &mut ScaleTimersOverloadActionConfig_ScaleTimer| { &mut m.timer },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Duration>(
                "min_timeout",
                ScaleTimersOverloadActionConfig_ScaleTimer::has_min_timeout,
                ScaleTimersOverloadActionConfig_ScaleTimer::get_min_timeout,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::percent::Percent>(
                "min_scale",
                ScaleTimersOverloadActionConfig_ScaleTimer::has_min_scale,
                ScaleTimersOverloadActionConfig_ScaleTimer::get_min_scale,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ScaleTimersOverloadActionConfig_ScaleTimer>(
                "ScaleTimersOverloadActionConfig.ScaleTimer",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ScaleTimersOverloadActionConfig_ScaleTimer {
        static instance: ::protobuf::rt::LazyV2<ScaleTimersOverloadActionConfig_ScaleTimer> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ScaleTimersOverloadActionConfig_ScaleTimer::new)
    }
}

impl ::protobuf::Clear for ScaleTimersOverloadActionConfig_ScaleTimer {
    fn clear(&mut self) {
        self.timer = ScaleTimersOverloadActionConfig_TimerType::UNSPECIFIED;
        self.overload_adjust = ::std::option::Option::None;
        self.overload_adjust = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ScaleTimersOverloadActionConfig_ScaleTimer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ScaleTimersOverloadActionConfig_ScaleTimer {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ScaleTimersOverloadActionConfig_TimerType {
    UNSPECIFIED = 0,
    HTTP_DOWNSTREAM_CONNECTION_IDLE = 1,
    HTTP_DOWNSTREAM_STREAM_IDLE = 2,
}

impl ::protobuf::ProtobufEnum for ScaleTimersOverloadActionConfig_TimerType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ScaleTimersOverloadActionConfig_TimerType> {
        match value {
            0 => ::std::option::Option::Some(ScaleTimersOverloadActionConfig_TimerType::UNSPECIFIED),
            1 => ::std::option::Option::Some(ScaleTimersOverloadActionConfig_TimerType::HTTP_DOWNSTREAM_CONNECTION_IDLE),
            2 => ::std::option::Option::Some(ScaleTimersOverloadActionConfig_TimerType::HTTP_DOWNSTREAM_STREAM_IDLE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ScaleTimersOverloadActionConfig_TimerType] = &[
            ScaleTimersOverloadActionConfig_TimerType::UNSPECIFIED,
            ScaleTimersOverloadActionConfig_TimerType::HTTP_DOWNSTREAM_CONNECTION_IDLE,
            ScaleTimersOverloadActionConfig_TimerType::HTTP_DOWNSTREAM_STREAM_IDLE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ScaleTimersOverloadActionConfig_TimerType>("ScaleTimersOverloadActionConfig.TimerType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ScaleTimersOverloadActionConfig_TimerType {
}

impl ::std::default::Default for ScaleTimersOverloadActionConfig_TimerType {
    fn default() -> Self {
        ScaleTimersOverloadActionConfig_TimerType::UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for ScaleTimersOverloadActionConfig_TimerType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OverloadAction {
    // message fields
    pub name: ::std::string::String,
    pub triggers: ::protobuf::RepeatedField<Trigger>,
    pub typed_config: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OverloadAction {
    fn default() -> &'a OverloadAction {
        <OverloadAction as ::protobuf::Message>::default_instance()
    }
}

impl OverloadAction {
    pub fn new() -> OverloadAction {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // repeated .envoy.config.overload.v3.Trigger triggers = 2;


    pub fn get_triggers(&self) -> &[Trigger] {
        &self.triggers
    }
    pub fn clear_triggers(&mut self) {
        self.triggers.clear();
    }

    // Param is passed by value, moved
    pub fn set_triggers(&mut self, v: ::protobuf::RepeatedField<Trigger>) {
        self.triggers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_triggers(&mut self) -> &mut ::protobuf::RepeatedField<Trigger> {
        &mut self.triggers
    }

    // Take field
    pub fn take_triggers(&mut self) -> ::protobuf::RepeatedField<Trigger> {
        ::std::mem::replace(&mut self.triggers, ::protobuf::RepeatedField::new())
    }

    // .google.protobuf.Any typed_config = 3;


    pub fn get_typed_config(&self) -> &::protobuf::well_known_types::Any {
        self.typed_config.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_typed_config(&mut self) {
        self.typed_config.clear();
    }

    pub fn has_typed_config(&self) -> bool {
        self.typed_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_typed_config(&mut self, v: ::protobuf::well_known_types::Any) {
        self.typed_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_typed_config(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.typed_config.is_none() {
            self.typed_config.set_default();
        }
        self.typed_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_typed_config(&mut self) -> ::protobuf::well_known_types::Any {
        self.typed_config.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }
}

impl ::protobuf::Message for OverloadAction {
    fn is_initialized(&self) -> bool {
        for v in &self.triggers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.typed_config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.triggers)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.typed_config)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        for value in &self.triggers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.typed_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        for v in &self.triggers {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.typed_config.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OverloadAction {
        OverloadAction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &OverloadAction| { &m.name },
                |m: &mut OverloadAction| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Trigger>>(
                "triggers",
                |m: &OverloadAction| { &m.triggers },
                |m: &mut OverloadAction| { &mut m.triggers },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "typed_config",
                |m: &OverloadAction| { &m.typed_config },
                |m: &mut OverloadAction| { &mut m.typed_config },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OverloadAction>(
                "OverloadAction",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OverloadAction {
        static instance: ::protobuf::rt::LazyV2<OverloadAction> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OverloadAction::new)
    }
}

impl ::protobuf::Clear for OverloadAction {
    fn clear(&mut self) {
        self.name.clear();
        self.triggers.clear();
        self.typed_config.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OverloadAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OverloadAction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OverloadManager {
    // message fields
    pub refresh_interval: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub resource_monitors: ::protobuf::RepeatedField<ResourceMonitor>,
    pub actions: ::protobuf::RepeatedField<OverloadAction>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OverloadManager {
    fn default() -> &'a OverloadManager {
        <OverloadManager as ::protobuf::Message>::default_instance()
    }
}

impl OverloadManager {
    pub fn new() -> OverloadManager {
        ::std::default::Default::default()
    }

    // .google.protobuf.Duration refresh_interval = 1;


    pub fn get_refresh_interval(&self) -> &::protobuf::well_known_types::Duration {
        self.refresh_interval.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_refresh_interval(&mut self) {
        self.refresh_interval.clear();
    }

    pub fn has_refresh_interval(&self) -> bool {
        self.refresh_interval.is_some()
    }

    // Param is passed by value, moved
    pub fn set_refresh_interval(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.refresh_interval = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_refresh_interval(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.refresh_interval.is_none() {
            self.refresh_interval.set_default();
        }
        self.refresh_interval.as_mut().unwrap()
    }

    // Take field
    pub fn take_refresh_interval(&mut self) -> ::protobuf::well_known_types::Duration {
        self.refresh_interval.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // repeated .envoy.config.overload.v3.ResourceMonitor resource_monitors = 2;


    pub fn get_resource_monitors(&self) -> &[ResourceMonitor] {
        &self.resource_monitors
    }
    pub fn clear_resource_monitors(&mut self) {
        self.resource_monitors.clear();
    }

    // Param is passed by value, moved
    pub fn set_resource_monitors(&mut self, v: ::protobuf::RepeatedField<ResourceMonitor>) {
        self.resource_monitors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_resource_monitors(&mut self) -> &mut ::protobuf::RepeatedField<ResourceMonitor> {
        &mut self.resource_monitors
    }

    // Take field
    pub fn take_resource_monitors(&mut self) -> ::protobuf::RepeatedField<ResourceMonitor> {
        ::std::mem::replace(&mut self.resource_monitors, ::protobuf::RepeatedField::new())
    }

    // repeated .envoy.config.overload.v3.OverloadAction actions = 3;


    pub fn get_actions(&self) -> &[OverloadAction] {
        &self.actions
    }
    pub fn clear_actions(&mut self) {
        self.actions.clear();
    }

    // Param is passed by value, moved
    pub fn set_actions(&mut self, v: ::protobuf::RepeatedField<OverloadAction>) {
        self.actions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_actions(&mut self) -> &mut ::protobuf::RepeatedField<OverloadAction> {
        &mut self.actions
    }

    // Take field
    pub fn take_actions(&mut self) -> ::protobuf::RepeatedField<OverloadAction> {
        ::std::mem::replace(&mut self.actions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for OverloadManager {
    fn is_initialized(&self) -> bool {
        for v in &self.refresh_interval {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.resource_monitors {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.actions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.refresh_interval)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.resource_monitors)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.actions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.refresh_interval.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.resource_monitors {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.actions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.refresh_interval.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.resource_monitors {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.actions {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OverloadManager {
        OverloadManager::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "refresh_interval",
                |m: &OverloadManager| { &m.refresh_interval },
                |m: &mut OverloadManager| { &mut m.refresh_interval },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ResourceMonitor>>(
                "resource_monitors",
                |m: &OverloadManager| { &m.resource_monitors },
                |m: &mut OverloadManager| { &mut m.resource_monitors },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OverloadAction>>(
                "actions",
                |m: &OverloadManager| { &m.actions },
                |m: &mut OverloadManager| { &mut m.actions },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OverloadManager>(
                "OverloadManager",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OverloadManager {
        static instance: ::protobuf::rt::LazyV2<OverloadManager> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OverloadManager::new)
    }
}

impl ::protobuf::Clear for OverloadManager {
    fn clear(&mut self) {
        self.refresh_interval.clear();
        self.resource_monitors.clear();
        self.actions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OverloadManager {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OverloadManager {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'envoy/config/overload/v3/overload.proto\x12\x18envoy.config.overload.\
    v3\x1a\x1benvoy/type/v3/percent.proto\x1a\x19google/protobuf/any.proto\
    \x1a\x1egoogle/protobuf/duration.proto\x1a\x1cgoogle/protobuf/struct.pro\
    to\x1a\x1dudpa/annotations/status.proto\x1a!udpa/annotations/versioning.\
    proto\x1a\x17validate/validate.proto\"\xbc\x01\n\x0fResourceMonitor\x12\
    \x1b\n\x04name\x18\x01\x20\x01(\tR\x04nameB\x07\xfaB\x04r\x02\x10\x01\
    \x129\n\x0ctyped_config\x18\x03\x20\x01(\x0b2\x14.google.protobuf.AnyH\0\
    R\x0btypedConfigB\r\n\x0bconfig_type:4\x9a\xc5\x88\x1e/\n-envoy.config.o\
    verload.v2alpha.ResourceMonitorJ\x04\x08\x02\x10\x03R\x06config\"x\n\x10\
    ThresholdTrigger\x12-\n\x05value\x18\x01\x20\x01(\x01R\x05valueB\x17\xfa\
    B\x14\x12\x12\x19\0\0\0\0\0\0\xf0?)\0\0\0\0\0\0\0\0:5\x9a\xc5\x88\x1e0\n\
    .envoy.config.overload.v2alpha.ThresholdTrigger\"\xa1\x01\n\rScaledTrigg\
    er\x12D\n\x11scaling_threshold\x18\x01\x20\x01(\x01R\x10scalingThreshold\
    B\x17\xfaB\x14\x12\x12\x19\0\0\0\0\0\0\xf0?)\0\0\0\0\0\0\0\0\x12J\n\x14s\
    aturation_threshold\x18\x02\x20\x01(\x01R\x13saturationThresholdB\x17\
    \xfaB\x14\x12\x12\x19\0\0\0\0\0\0\xf0?)\0\0\0\0\0\0\0\0\"\xf9\x01\n\x07T\
    rigger\x12\x1b\n\x04name\x18\x01\x20\x01(\tR\x04nameB\x07\xfaB\x04r\x02\
    \x10\x01\x12J\n\tthreshold\x18\x02\x20\x01(\x0b2*.envoy.config.overload.\
    v3.ThresholdTriggerH\0R\tthreshold\x12A\n\x06scaled\x18\x03\x20\x01(\x0b\
    2'.envoy.config.overload.v3.ScaledTriggerH\0R\x06scaledB\x14\n\rtrigger_\
    oneof\x12\x03\xf8B\x01:,\x9a\xc5\x88\x1e'\n%envoy.config.overload.v2alph\
    a.Trigger\"\x88\x04\n\x1fScaleTimersOverloadActionConfig\x12~\n\x13timer\
    _scale_factors\x18\x01\x20\x03(\x0b2D.envoy.config.overload.v3.ScaleTime\
    rsOverloadActionConfig.ScaleTimerR\x11timerScaleFactorsB\x08\xfaB\x05\
    \x92\x01\x02\x08\x01\x1a\x80\x02\n\nScaleTimer\x12e\n\x05timer\x18\x01\
    \x20\x01(\x0e2C.envoy.config.overload.v3.ScaleTimersOverloadActionConfig\
    .TimerTypeR\x05timerB\n\xfaB\x07\x82\x01\x04\x10\x01\x20\0\x12<\n\x0bmin\
    _timeout\x18\x02\x20\x01(\x0b2\x19.google.protobuf.DurationH\0R\nminTime\
    out\x125\n\tmin_scale\x18\x03\x20\x01(\x0b2\x16.envoy.type.v3.PercentH\0\
    R\x08minScaleB\x16\n\x0foverload_adjust\x12\x03\xf8B\x01\"b\n\tTimerType\
    \x12\x0f\n\x0bUNSPECIFIED\x10\0\x12#\n\x1fHTTP_DOWNSTREAM_CONNECTION_IDL\
    E\x10\x01\x12\x1f\n\x1bHTTP_DOWNSTREAM_STREAM_IDLE\x10\x02\"\xe4\x01\n\
    \x0eOverloadAction\x12\x1b\n\x04name\x18\x01\x20\x01(\tR\x04nameB\x07\
    \xfaB\x04r\x02\x10\x01\x12G\n\x08triggers\x18\x02\x20\x03(\x0b2!.envoy.c\
    onfig.overload.v3.TriggerR\x08triggersB\x08\xfaB\x05\x92\x01\x02\x08\x01\
    \x127\n\x0ctyped_config\x18\x03\x20\x01(\x0b2\x14.google.protobuf.AnyR\
    \x0btypedConfig:3\x9a\xc5\x88\x1e.\n,envoy.config.overload.v2alpha.Overl\
    oadAction\"\xb3\x02\n\x0fOverloadManager\x12D\n\x10refresh_interval\x18\
    \x01\x20\x01(\x0b2\x19.google.protobuf.DurationR\x0frefreshInterval\x12`\
    \n\x11resource_monitors\x18\x02\x20\x03(\x0b2).envoy.config.overload.v3.\
    ResourceMonitorR\x10resourceMonitorsB\x08\xfaB\x05\x92\x01\x02\x08\x01\
    \x12B\n\x07actions\x18\x03\x20\x03(\x0b2(.envoy.config.overload.v3.Overl\
    oadActionR\x07actions:4\x9a\xc5\x88\x1e/\n-envoy.config.overload.v2alpha\
    .OverloadManagerBA\n&io.envoyproxy.envoy.config.overload.v3B\rOverloadPr\
    otoP\x01\xba\x80\xc8\xd1\x06\x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
