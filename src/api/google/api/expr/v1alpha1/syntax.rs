// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `google/api/expr/v1alpha1/syntax.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct ParsedExpr {
    // message fields
    pub expr: ::protobuf::SingularPtrField<Expr>,
    pub source_info: ::protobuf::SingularPtrField<SourceInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ParsedExpr {
    fn default() -> &'a ParsedExpr {
        <ParsedExpr as ::protobuf::Message>::default_instance()
    }
}

impl ParsedExpr {
    pub fn new() -> ParsedExpr {
        ::std::default::Default::default()
    }

    // .google.api.expr.v1alpha1.Expr expr = 2;


    pub fn get_expr(&self) -> &Expr {
        self.expr.as_ref().unwrap_or_else(|| <Expr as ::protobuf::Message>::default_instance())
    }
    pub fn clear_expr(&mut self) {
        self.expr.clear();
    }

    pub fn has_expr(&self) -> bool {
        self.expr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expr(&mut self, v: Expr) {
        self.expr = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_expr(&mut self) -> &mut Expr {
        if self.expr.is_none() {
            self.expr.set_default();
        }
        self.expr.as_mut().unwrap()
    }

    // Take field
    pub fn take_expr(&mut self) -> Expr {
        self.expr.take().unwrap_or_else(|| Expr::new())
    }

    // .google.api.expr.v1alpha1.SourceInfo source_info = 3;


    pub fn get_source_info(&self) -> &SourceInfo {
        self.source_info.as_ref().unwrap_or_else(|| <SourceInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_source_info(&mut self) {
        self.source_info.clear();
    }

    pub fn has_source_info(&self) -> bool {
        self.source_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_info(&mut self, v: SourceInfo) {
        self.source_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_info(&mut self) -> &mut SourceInfo {
        if self.source_info.is_none() {
            self.source_info.set_default();
        }
        self.source_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_info(&mut self) -> SourceInfo {
        self.source_info.take().unwrap_or_else(|| SourceInfo::new())
    }
}

impl ::protobuf::Message for ParsedExpr {
    fn is_initialized(&self) -> bool {
        for v in &self.expr {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.source_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.expr)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.source_info)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.expr.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.source_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.expr.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.source_info.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ParsedExpr {
        ParsedExpr::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Expr>>(
                "expr",
                |m: &ParsedExpr| { &m.expr },
                |m: &mut ParsedExpr| { &mut m.expr },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SourceInfo>>(
                "source_info",
                |m: &ParsedExpr| { &m.source_info },
                |m: &mut ParsedExpr| { &mut m.source_info },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ParsedExpr>(
                "ParsedExpr",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ParsedExpr {
        static instance: ::protobuf::rt::LazyV2<ParsedExpr> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ParsedExpr::new)
    }
}

impl ::protobuf::Clear for ParsedExpr {
    fn clear(&mut self) {
        self.expr.clear();
        self.source_info.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ParsedExpr {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ParsedExpr {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Expr {
    // message fields
    pub id: i64,
    // message oneof groups
    pub expr_kind: ::std::option::Option<Expr_oneof_expr_kind>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Expr {
    fn default() -> &'a Expr {
        <Expr as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Expr_oneof_expr_kind {
    const_expr(Constant),
    ident_expr(Expr_Ident),
    select_expr(Expr_Select),
    call_expr(Expr_Call),
    list_expr(Expr_CreateList),
    struct_expr(Expr_CreateStruct),
    comprehension_expr(Expr_Comprehension),
}

impl Expr {
    pub fn new() -> Expr {
        ::std::default::Default::default()
    }

    // int64 id = 2;


    pub fn get_id(&self) -> i64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i64) {
        self.id = v;
    }

    // .google.api.expr.v1alpha1.Constant const_expr = 3;


    pub fn get_const_expr(&self) -> &Constant {
        match self.expr_kind {
            ::std::option::Option::Some(Expr_oneof_expr_kind::const_expr(ref v)) => v,
            _ => <Constant as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_const_expr(&mut self) {
        self.expr_kind = ::std::option::Option::None;
    }

    pub fn has_const_expr(&self) -> bool {
        match self.expr_kind {
            ::std::option::Option::Some(Expr_oneof_expr_kind::const_expr(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_const_expr(&mut self, v: Constant) {
        self.expr_kind = ::std::option::Option::Some(Expr_oneof_expr_kind::const_expr(v))
    }

    // Mutable pointer to the field.
    pub fn mut_const_expr(&mut self) -> &mut Constant {
        if let ::std::option::Option::Some(Expr_oneof_expr_kind::const_expr(_)) = self.expr_kind {
        } else {
            self.expr_kind = ::std::option::Option::Some(Expr_oneof_expr_kind::const_expr(Constant::new()));
        }
        match self.expr_kind {
            ::std::option::Option::Some(Expr_oneof_expr_kind::const_expr(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_const_expr(&mut self) -> Constant {
        if self.has_const_expr() {
            match self.expr_kind.take() {
                ::std::option::Option::Some(Expr_oneof_expr_kind::const_expr(v)) => v,
                _ => panic!(),
            }
        } else {
            Constant::new()
        }
    }

    // .google.api.expr.v1alpha1.Expr.Ident ident_expr = 4;


    pub fn get_ident_expr(&self) -> &Expr_Ident {
        match self.expr_kind {
            ::std::option::Option::Some(Expr_oneof_expr_kind::ident_expr(ref v)) => v,
            _ => <Expr_Ident as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_ident_expr(&mut self) {
        self.expr_kind = ::std::option::Option::None;
    }

    pub fn has_ident_expr(&self) -> bool {
        match self.expr_kind {
            ::std::option::Option::Some(Expr_oneof_expr_kind::ident_expr(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ident_expr(&mut self, v: Expr_Ident) {
        self.expr_kind = ::std::option::Option::Some(Expr_oneof_expr_kind::ident_expr(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ident_expr(&mut self) -> &mut Expr_Ident {
        if let ::std::option::Option::Some(Expr_oneof_expr_kind::ident_expr(_)) = self.expr_kind {
        } else {
            self.expr_kind = ::std::option::Option::Some(Expr_oneof_expr_kind::ident_expr(Expr_Ident::new()));
        }
        match self.expr_kind {
            ::std::option::Option::Some(Expr_oneof_expr_kind::ident_expr(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ident_expr(&mut self) -> Expr_Ident {
        if self.has_ident_expr() {
            match self.expr_kind.take() {
                ::std::option::Option::Some(Expr_oneof_expr_kind::ident_expr(v)) => v,
                _ => panic!(),
            }
        } else {
            Expr_Ident::new()
        }
    }

    // .google.api.expr.v1alpha1.Expr.Select select_expr = 5;


    pub fn get_select_expr(&self) -> &Expr_Select {
        match self.expr_kind {
            ::std::option::Option::Some(Expr_oneof_expr_kind::select_expr(ref v)) => v,
            _ => <Expr_Select as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_select_expr(&mut self) {
        self.expr_kind = ::std::option::Option::None;
    }

    pub fn has_select_expr(&self) -> bool {
        match self.expr_kind {
            ::std::option::Option::Some(Expr_oneof_expr_kind::select_expr(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_select_expr(&mut self, v: Expr_Select) {
        self.expr_kind = ::std::option::Option::Some(Expr_oneof_expr_kind::select_expr(v))
    }

    // Mutable pointer to the field.
    pub fn mut_select_expr(&mut self) -> &mut Expr_Select {
        if let ::std::option::Option::Some(Expr_oneof_expr_kind::select_expr(_)) = self.expr_kind {
        } else {
            self.expr_kind = ::std::option::Option::Some(Expr_oneof_expr_kind::select_expr(Expr_Select::new()));
        }
        match self.expr_kind {
            ::std::option::Option::Some(Expr_oneof_expr_kind::select_expr(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_select_expr(&mut self) -> Expr_Select {
        if self.has_select_expr() {
            match self.expr_kind.take() {
                ::std::option::Option::Some(Expr_oneof_expr_kind::select_expr(v)) => v,
                _ => panic!(),
            }
        } else {
            Expr_Select::new()
        }
    }

    // .google.api.expr.v1alpha1.Expr.Call call_expr = 6;


    pub fn get_call_expr(&self) -> &Expr_Call {
        match self.expr_kind {
            ::std::option::Option::Some(Expr_oneof_expr_kind::call_expr(ref v)) => v,
            _ => <Expr_Call as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_call_expr(&mut self) {
        self.expr_kind = ::std::option::Option::None;
    }

    pub fn has_call_expr(&self) -> bool {
        match self.expr_kind {
            ::std::option::Option::Some(Expr_oneof_expr_kind::call_expr(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_call_expr(&mut self, v: Expr_Call) {
        self.expr_kind = ::std::option::Option::Some(Expr_oneof_expr_kind::call_expr(v))
    }

    // Mutable pointer to the field.
    pub fn mut_call_expr(&mut self) -> &mut Expr_Call {
        if let ::std::option::Option::Some(Expr_oneof_expr_kind::call_expr(_)) = self.expr_kind {
        } else {
            self.expr_kind = ::std::option::Option::Some(Expr_oneof_expr_kind::call_expr(Expr_Call::new()));
        }
        match self.expr_kind {
            ::std::option::Option::Some(Expr_oneof_expr_kind::call_expr(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_call_expr(&mut self) -> Expr_Call {
        if self.has_call_expr() {
            match self.expr_kind.take() {
                ::std::option::Option::Some(Expr_oneof_expr_kind::call_expr(v)) => v,
                _ => panic!(),
            }
        } else {
            Expr_Call::new()
        }
    }

    // .google.api.expr.v1alpha1.Expr.CreateList list_expr = 7;


    pub fn get_list_expr(&self) -> &Expr_CreateList {
        match self.expr_kind {
            ::std::option::Option::Some(Expr_oneof_expr_kind::list_expr(ref v)) => v,
            _ => <Expr_CreateList as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_list_expr(&mut self) {
        self.expr_kind = ::std::option::Option::None;
    }

    pub fn has_list_expr(&self) -> bool {
        match self.expr_kind {
            ::std::option::Option::Some(Expr_oneof_expr_kind::list_expr(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_list_expr(&mut self, v: Expr_CreateList) {
        self.expr_kind = ::std::option::Option::Some(Expr_oneof_expr_kind::list_expr(v))
    }

    // Mutable pointer to the field.
    pub fn mut_list_expr(&mut self) -> &mut Expr_CreateList {
        if let ::std::option::Option::Some(Expr_oneof_expr_kind::list_expr(_)) = self.expr_kind {
        } else {
            self.expr_kind = ::std::option::Option::Some(Expr_oneof_expr_kind::list_expr(Expr_CreateList::new()));
        }
        match self.expr_kind {
            ::std::option::Option::Some(Expr_oneof_expr_kind::list_expr(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_list_expr(&mut self) -> Expr_CreateList {
        if self.has_list_expr() {
            match self.expr_kind.take() {
                ::std::option::Option::Some(Expr_oneof_expr_kind::list_expr(v)) => v,
                _ => panic!(),
            }
        } else {
            Expr_CreateList::new()
        }
    }

    // .google.api.expr.v1alpha1.Expr.CreateStruct struct_expr = 8;


    pub fn get_struct_expr(&self) -> &Expr_CreateStruct {
        match self.expr_kind {
            ::std::option::Option::Some(Expr_oneof_expr_kind::struct_expr(ref v)) => v,
            _ => <Expr_CreateStruct as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_struct_expr(&mut self) {
        self.expr_kind = ::std::option::Option::None;
    }

    pub fn has_struct_expr(&self) -> bool {
        match self.expr_kind {
            ::std::option::Option::Some(Expr_oneof_expr_kind::struct_expr(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_struct_expr(&mut self, v: Expr_CreateStruct) {
        self.expr_kind = ::std::option::Option::Some(Expr_oneof_expr_kind::struct_expr(v))
    }

    // Mutable pointer to the field.
    pub fn mut_struct_expr(&mut self) -> &mut Expr_CreateStruct {
        if let ::std::option::Option::Some(Expr_oneof_expr_kind::struct_expr(_)) = self.expr_kind {
        } else {
            self.expr_kind = ::std::option::Option::Some(Expr_oneof_expr_kind::struct_expr(Expr_CreateStruct::new()));
        }
        match self.expr_kind {
            ::std::option::Option::Some(Expr_oneof_expr_kind::struct_expr(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_struct_expr(&mut self) -> Expr_CreateStruct {
        if self.has_struct_expr() {
            match self.expr_kind.take() {
                ::std::option::Option::Some(Expr_oneof_expr_kind::struct_expr(v)) => v,
                _ => panic!(),
            }
        } else {
            Expr_CreateStruct::new()
        }
    }

    // .google.api.expr.v1alpha1.Expr.Comprehension comprehension_expr = 9;


    pub fn get_comprehension_expr(&self) -> &Expr_Comprehension {
        match self.expr_kind {
            ::std::option::Option::Some(Expr_oneof_expr_kind::comprehension_expr(ref v)) => v,
            _ => <Expr_Comprehension as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_comprehension_expr(&mut self) {
        self.expr_kind = ::std::option::Option::None;
    }

    pub fn has_comprehension_expr(&self) -> bool {
        match self.expr_kind {
            ::std::option::Option::Some(Expr_oneof_expr_kind::comprehension_expr(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_comprehension_expr(&mut self, v: Expr_Comprehension) {
        self.expr_kind = ::std::option::Option::Some(Expr_oneof_expr_kind::comprehension_expr(v))
    }

    // Mutable pointer to the field.
    pub fn mut_comprehension_expr(&mut self) -> &mut Expr_Comprehension {
        if let ::std::option::Option::Some(Expr_oneof_expr_kind::comprehension_expr(_)) = self.expr_kind {
        } else {
            self.expr_kind = ::std::option::Option::Some(Expr_oneof_expr_kind::comprehension_expr(Expr_Comprehension::new()));
        }
        match self.expr_kind {
            ::std::option::Option::Some(Expr_oneof_expr_kind::comprehension_expr(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_comprehension_expr(&mut self) -> Expr_Comprehension {
        if self.has_comprehension_expr() {
            match self.expr_kind.take() {
                ::std::option::Option::Some(Expr_oneof_expr_kind::comprehension_expr(v)) => v,
                _ => panic!(),
            }
        } else {
            Expr_Comprehension::new()
        }
    }
}

impl ::protobuf::Message for Expr {
    fn is_initialized(&self) -> bool {
        if let Some(Expr_oneof_expr_kind::const_expr(ref v)) = self.expr_kind {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Expr_oneof_expr_kind::ident_expr(ref v)) = self.expr_kind {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Expr_oneof_expr_kind::select_expr(ref v)) = self.expr_kind {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Expr_oneof_expr_kind::call_expr(ref v)) = self.expr_kind {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Expr_oneof_expr_kind::list_expr(ref v)) = self.expr_kind {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Expr_oneof_expr_kind::struct_expr(ref v)) = self.expr_kind {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Expr_oneof_expr_kind::comprehension_expr(ref v)) = self.expr_kind {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.expr_kind = ::std::option::Option::Some(Expr_oneof_expr_kind::const_expr(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.expr_kind = ::std::option::Option::Some(Expr_oneof_expr_kind::ident_expr(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.expr_kind = ::std::option::Option::Some(Expr_oneof_expr_kind::select_expr(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.expr_kind = ::std::option::Option::Some(Expr_oneof_expr_kind::call_expr(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.expr_kind = ::std::option::Option::Some(Expr_oneof_expr_kind::list_expr(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.expr_kind = ::std::option::Option::Some(Expr_oneof_expr_kind::struct_expr(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.expr_kind = ::std::option::Option::Some(Expr_oneof_expr_kind::comprehension_expr(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.expr_kind {
            match v {
                &Expr_oneof_expr_kind::const_expr(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Expr_oneof_expr_kind::ident_expr(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Expr_oneof_expr_kind::select_expr(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Expr_oneof_expr_kind::call_expr(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Expr_oneof_expr_kind::list_expr(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Expr_oneof_expr_kind::struct_expr(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Expr_oneof_expr_kind::comprehension_expr(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int64(2, self.id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.expr_kind {
            match v {
                &Expr_oneof_expr_kind::const_expr(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Expr_oneof_expr_kind::ident_expr(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Expr_oneof_expr_kind::select_expr(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Expr_oneof_expr_kind::call_expr(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Expr_oneof_expr_kind::list_expr(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Expr_oneof_expr_kind::struct_expr(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Expr_oneof_expr_kind::comprehension_expr(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Expr {
        Expr::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "id",
                |m: &Expr| { &m.id },
                |m: &mut Expr| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Constant>(
                "const_expr",
                Expr::has_const_expr,
                Expr::get_const_expr,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Expr_Ident>(
                "ident_expr",
                Expr::has_ident_expr,
                Expr::get_ident_expr,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Expr_Select>(
                "select_expr",
                Expr::has_select_expr,
                Expr::get_select_expr,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Expr_Call>(
                "call_expr",
                Expr::has_call_expr,
                Expr::get_call_expr,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Expr_CreateList>(
                "list_expr",
                Expr::has_list_expr,
                Expr::get_list_expr,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Expr_CreateStruct>(
                "struct_expr",
                Expr::has_struct_expr,
                Expr::get_struct_expr,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Expr_Comprehension>(
                "comprehension_expr",
                Expr::has_comprehension_expr,
                Expr::get_comprehension_expr,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Expr>(
                "Expr",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Expr {
        static instance: ::protobuf::rt::LazyV2<Expr> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Expr::new)
    }
}

impl ::protobuf::Clear for Expr {
    fn clear(&mut self) {
        self.id = 0;
        self.expr_kind = ::std::option::Option::None;
        self.expr_kind = ::std::option::Option::None;
        self.expr_kind = ::std::option::Option::None;
        self.expr_kind = ::std::option::Option::None;
        self.expr_kind = ::std::option::Option::None;
        self.expr_kind = ::std::option::Option::None;
        self.expr_kind = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Expr {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Expr {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Expr_Ident {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Expr_Ident {
    fn default() -> &'a Expr_Ident {
        <Expr_Ident as ::protobuf::Message>::default_instance()
    }
}

impl Expr_Ident {
    pub fn new() -> Expr_Ident {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Expr_Ident {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Expr_Ident {
        Expr_Ident::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Expr_Ident| { &m.name },
                |m: &mut Expr_Ident| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Expr_Ident>(
                "Expr.Ident",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Expr_Ident {
        static instance: ::protobuf::rt::LazyV2<Expr_Ident> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Expr_Ident::new)
    }
}

impl ::protobuf::Clear for Expr_Ident {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Expr_Ident {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Expr_Ident {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Expr_Select {
    // message fields
    pub operand: ::protobuf::SingularPtrField<Expr>,
    pub field: ::std::string::String,
    pub test_only: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Expr_Select {
    fn default() -> &'a Expr_Select {
        <Expr_Select as ::protobuf::Message>::default_instance()
    }
}

impl Expr_Select {
    pub fn new() -> Expr_Select {
        ::std::default::Default::default()
    }

    // .google.api.expr.v1alpha1.Expr operand = 1;


    pub fn get_operand(&self) -> &Expr {
        self.operand.as_ref().unwrap_or_else(|| <Expr as ::protobuf::Message>::default_instance())
    }
    pub fn clear_operand(&mut self) {
        self.operand.clear();
    }

    pub fn has_operand(&self) -> bool {
        self.operand.is_some()
    }

    // Param is passed by value, moved
    pub fn set_operand(&mut self, v: Expr) {
        self.operand = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_operand(&mut self) -> &mut Expr {
        if self.operand.is_none() {
            self.operand.set_default();
        }
        self.operand.as_mut().unwrap()
    }

    // Take field
    pub fn take_operand(&mut self) -> Expr {
        self.operand.take().unwrap_or_else(|| Expr::new())
    }

    // string field = 2;


    pub fn get_field(&self) -> &str {
        &self.field
    }
    pub fn clear_field(&mut self) {
        self.field.clear();
    }

    // Param is passed by value, moved
    pub fn set_field(&mut self, v: ::std::string::String) {
        self.field = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field(&mut self) -> &mut ::std::string::String {
        &mut self.field
    }

    // Take field
    pub fn take_field(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field, ::std::string::String::new())
    }

    // bool test_only = 3;


    pub fn get_test_only(&self) -> bool {
        self.test_only
    }
    pub fn clear_test_only(&mut self) {
        self.test_only = false;
    }

    // Param is passed by value, moved
    pub fn set_test_only(&mut self, v: bool) {
        self.test_only = v;
    }
}

impl ::protobuf::Message for Expr_Select {
    fn is_initialized(&self) -> bool {
        for v in &self.operand {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.operand)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.test_only = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.operand.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.field.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.field);
        }
        if self.test_only != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.operand.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.field.is_empty() {
            os.write_string(2, &self.field)?;
        }
        if self.test_only != false {
            os.write_bool(3, self.test_only)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Expr_Select {
        Expr_Select::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Expr>>(
                "operand",
                |m: &Expr_Select| { &m.operand },
                |m: &mut Expr_Select| { &mut m.operand },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "field",
                |m: &Expr_Select| { &m.field },
                |m: &mut Expr_Select| { &mut m.field },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "test_only",
                |m: &Expr_Select| { &m.test_only },
                |m: &mut Expr_Select| { &mut m.test_only },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Expr_Select>(
                "Expr.Select",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Expr_Select {
        static instance: ::protobuf::rt::LazyV2<Expr_Select> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Expr_Select::new)
    }
}

impl ::protobuf::Clear for Expr_Select {
    fn clear(&mut self) {
        self.operand.clear();
        self.field.clear();
        self.test_only = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Expr_Select {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Expr_Select {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Expr_Call {
    // message fields
    pub target: ::protobuf::SingularPtrField<Expr>,
    pub function: ::std::string::String,
    pub args: ::protobuf::RepeatedField<Expr>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Expr_Call {
    fn default() -> &'a Expr_Call {
        <Expr_Call as ::protobuf::Message>::default_instance()
    }
}

impl Expr_Call {
    pub fn new() -> Expr_Call {
        ::std::default::Default::default()
    }

    // .google.api.expr.v1alpha1.Expr target = 1;


    pub fn get_target(&self) -> &Expr {
        self.target.as_ref().unwrap_or_else(|| <Expr as ::protobuf::Message>::default_instance())
    }
    pub fn clear_target(&mut self) {
        self.target.clear();
    }

    pub fn has_target(&self) -> bool {
        self.target.is_some()
    }

    // Param is passed by value, moved
    pub fn set_target(&mut self, v: Expr) {
        self.target = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_target(&mut self) -> &mut Expr {
        if self.target.is_none() {
            self.target.set_default();
        }
        self.target.as_mut().unwrap()
    }

    // Take field
    pub fn take_target(&mut self) -> Expr {
        self.target.take().unwrap_or_else(|| Expr::new())
    }

    // string function = 2;


    pub fn get_function(&self) -> &str {
        &self.function
    }
    pub fn clear_function(&mut self) {
        self.function.clear();
    }

    // Param is passed by value, moved
    pub fn set_function(&mut self, v: ::std::string::String) {
        self.function = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_function(&mut self) -> &mut ::std::string::String {
        &mut self.function
    }

    // Take field
    pub fn take_function(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.function, ::std::string::String::new())
    }

    // repeated .google.api.expr.v1alpha1.Expr args = 3;


    pub fn get_args(&self) -> &[Expr] {
        &self.args
    }
    pub fn clear_args(&mut self) {
        self.args.clear();
    }

    // Param is passed by value, moved
    pub fn set_args(&mut self, v: ::protobuf::RepeatedField<Expr>) {
        self.args = v;
    }

    // Mutable pointer to the field.
    pub fn mut_args(&mut self) -> &mut ::protobuf::RepeatedField<Expr> {
        &mut self.args
    }

    // Take field
    pub fn take_args(&mut self) -> ::protobuf::RepeatedField<Expr> {
        ::std::mem::replace(&mut self.args, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Expr_Call {
    fn is_initialized(&self) -> bool {
        for v in &self.target {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.args {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.target)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.function)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.args)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.target.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.function.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.function);
        }
        for value in &self.args {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.target.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.function.is_empty() {
            os.write_string(2, &self.function)?;
        }
        for v in &self.args {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Expr_Call {
        Expr_Call::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Expr>>(
                "target",
                |m: &Expr_Call| { &m.target },
                |m: &mut Expr_Call| { &mut m.target },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "function",
                |m: &Expr_Call| { &m.function },
                |m: &mut Expr_Call| { &mut m.function },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Expr>>(
                "args",
                |m: &Expr_Call| { &m.args },
                |m: &mut Expr_Call| { &mut m.args },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Expr_Call>(
                "Expr.Call",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Expr_Call {
        static instance: ::protobuf::rt::LazyV2<Expr_Call> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Expr_Call::new)
    }
}

impl ::protobuf::Clear for Expr_Call {
    fn clear(&mut self) {
        self.target.clear();
        self.function.clear();
        self.args.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Expr_Call {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Expr_Call {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Expr_CreateList {
    // message fields
    pub elements: ::protobuf::RepeatedField<Expr>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Expr_CreateList {
    fn default() -> &'a Expr_CreateList {
        <Expr_CreateList as ::protobuf::Message>::default_instance()
    }
}

impl Expr_CreateList {
    pub fn new() -> Expr_CreateList {
        ::std::default::Default::default()
    }

    // repeated .google.api.expr.v1alpha1.Expr elements = 1;


    pub fn get_elements(&self) -> &[Expr] {
        &self.elements
    }
    pub fn clear_elements(&mut self) {
        self.elements.clear();
    }

    // Param is passed by value, moved
    pub fn set_elements(&mut self, v: ::protobuf::RepeatedField<Expr>) {
        self.elements = v;
    }

    // Mutable pointer to the field.
    pub fn mut_elements(&mut self) -> &mut ::protobuf::RepeatedField<Expr> {
        &mut self.elements
    }

    // Take field
    pub fn take_elements(&mut self) -> ::protobuf::RepeatedField<Expr> {
        ::std::mem::replace(&mut self.elements, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Expr_CreateList {
    fn is_initialized(&self) -> bool {
        for v in &self.elements {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.elements)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.elements {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.elements {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Expr_CreateList {
        Expr_CreateList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Expr>>(
                "elements",
                |m: &Expr_CreateList| { &m.elements },
                |m: &mut Expr_CreateList| { &mut m.elements },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Expr_CreateList>(
                "Expr.CreateList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Expr_CreateList {
        static instance: ::protobuf::rt::LazyV2<Expr_CreateList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Expr_CreateList::new)
    }
}

impl ::protobuf::Clear for Expr_CreateList {
    fn clear(&mut self) {
        self.elements.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Expr_CreateList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Expr_CreateList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Expr_CreateStruct {
    // message fields
    pub message_name: ::std::string::String,
    pub entries: ::protobuf::RepeatedField<Expr_CreateStruct_Entry>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Expr_CreateStruct {
    fn default() -> &'a Expr_CreateStruct {
        <Expr_CreateStruct as ::protobuf::Message>::default_instance()
    }
}

impl Expr_CreateStruct {
    pub fn new() -> Expr_CreateStruct {
        ::std::default::Default::default()
    }

    // string message_name = 1;


    pub fn get_message_name(&self) -> &str {
        &self.message_name
    }
    pub fn clear_message_name(&mut self) {
        self.message_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_message_name(&mut self, v: ::std::string::String) {
        self.message_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message_name(&mut self) -> &mut ::std::string::String {
        &mut self.message_name
    }

    // Take field
    pub fn take_message_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message_name, ::std::string::String::new())
    }

    // repeated .google.api.expr.v1alpha1.Expr.CreateStruct.Entry entries = 2;


    pub fn get_entries(&self) -> &[Expr_CreateStruct_Entry] {
        &self.entries
    }
    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<Expr_CreateStruct_Entry>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<Expr_CreateStruct_Entry> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<Expr_CreateStruct_Entry> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Expr_CreateStruct {
    fn is_initialized(&self) -> bool {
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message_name)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.message_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.message_name);
        }
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.message_name.is_empty() {
            os.write_string(1, &self.message_name)?;
        }
        for v in &self.entries {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Expr_CreateStruct {
        Expr_CreateStruct::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message_name",
                |m: &Expr_CreateStruct| { &m.message_name },
                |m: &mut Expr_CreateStruct| { &mut m.message_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Expr_CreateStruct_Entry>>(
                "entries",
                |m: &Expr_CreateStruct| { &m.entries },
                |m: &mut Expr_CreateStruct| { &mut m.entries },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Expr_CreateStruct>(
                "Expr.CreateStruct",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Expr_CreateStruct {
        static instance: ::protobuf::rt::LazyV2<Expr_CreateStruct> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Expr_CreateStruct::new)
    }
}

impl ::protobuf::Clear for Expr_CreateStruct {
    fn clear(&mut self) {
        self.message_name.clear();
        self.entries.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Expr_CreateStruct {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Expr_CreateStruct {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Expr_CreateStruct_Entry {
    // message fields
    pub id: i64,
    pub value: ::protobuf::SingularPtrField<Expr>,
    // message oneof groups
    pub key_kind: ::std::option::Option<Expr_CreateStruct_Entry_oneof_key_kind>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Expr_CreateStruct_Entry {
    fn default() -> &'a Expr_CreateStruct_Entry {
        <Expr_CreateStruct_Entry as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Expr_CreateStruct_Entry_oneof_key_kind {
    field_key(::std::string::String),
    map_key(Expr),
}

impl Expr_CreateStruct_Entry {
    pub fn new() -> Expr_CreateStruct_Entry {
        ::std::default::Default::default()
    }

    // int64 id = 1;


    pub fn get_id(&self) -> i64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i64) {
        self.id = v;
    }

    // string field_key = 2;


    pub fn get_field_key(&self) -> &str {
        match self.key_kind {
            ::std::option::Option::Some(Expr_CreateStruct_Entry_oneof_key_kind::field_key(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_field_key(&mut self) {
        self.key_kind = ::std::option::Option::None;
    }

    pub fn has_field_key(&self) -> bool {
        match self.key_kind {
            ::std::option::Option::Some(Expr_CreateStruct_Entry_oneof_key_kind::field_key(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_field_key(&mut self, v: ::std::string::String) {
        self.key_kind = ::std::option::Option::Some(Expr_CreateStruct_Entry_oneof_key_kind::field_key(v))
    }

    // Mutable pointer to the field.
    pub fn mut_field_key(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(Expr_CreateStruct_Entry_oneof_key_kind::field_key(_)) = self.key_kind {
        } else {
            self.key_kind = ::std::option::Option::Some(Expr_CreateStruct_Entry_oneof_key_kind::field_key(::std::string::String::new()));
        }
        match self.key_kind {
            ::std::option::Option::Some(Expr_CreateStruct_Entry_oneof_key_kind::field_key(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_field_key(&mut self) -> ::std::string::String {
        if self.has_field_key() {
            match self.key_kind.take() {
                ::std::option::Option::Some(Expr_CreateStruct_Entry_oneof_key_kind::field_key(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .google.api.expr.v1alpha1.Expr map_key = 3;


    pub fn get_map_key(&self) -> &Expr {
        match self.key_kind {
            ::std::option::Option::Some(Expr_CreateStruct_Entry_oneof_key_kind::map_key(ref v)) => v,
            _ => <Expr as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_map_key(&mut self) {
        self.key_kind = ::std::option::Option::None;
    }

    pub fn has_map_key(&self) -> bool {
        match self.key_kind {
            ::std::option::Option::Some(Expr_CreateStruct_Entry_oneof_key_kind::map_key(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_map_key(&mut self, v: Expr) {
        self.key_kind = ::std::option::Option::Some(Expr_CreateStruct_Entry_oneof_key_kind::map_key(v))
    }

    // Mutable pointer to the field.
    pub fn mut_map_key(&mut self) -> &mut Expr {
        if let ::std::option::Option::Some(Expr_CreateStruct_Entry_oneof_key_kind::map_key(_)) = self.key_kind {
        } else {
            self.key_kind = ::std::option::Option::Some(Expr_CreateStruct_Entry_oneof_key_kind::map_key(Expr::new()));
        }
        match self.key_kind {
            ::std::option::Option::Some(Expr_CreateStruct_Entry_oneof_key_kind::map_key(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_map_key(&mut self) -> Expr {
        if self.has_map_key() {
            match self.key_kind.take() {
                ::std::option::Option::Some(Expr_CreateStruct_Entry_oneof_key_kind::map_key(v)) => v,
                _ => panic!(),
            }
        } else {
            Expr::new()
        }
    }

    // .google.api.expr.v1alpha1.Expr value = 4;


    pub fn get_value(&self) -> &Expr {
        self.value.as_ref().unwrap_or_else(|| <Expr as ::protobuf::Message>::default_instance())
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: Expr) {
        self.value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut Expr {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> Expr {
        self.value.take().unwrap_or_else(|| Expr::new())
    }
}

impl ::protobuf::Message for Expr_CreateStruct_Entry {
    fn is_initialized(&self) -> bool {
        if let Some(Expr_CreateStruct_Entry_oneof_key_kind::map_key(ref v)) = self.key_kind {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.value {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.key_kind = ::std::option::Option::Some(Expr_CreateStruct_Entry_oneof_key_kind::field_key(is.read_string()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.key_kind = ::std::option::Option::Some(Expr_CreateStruct_Entry_oneof_key_kind::map_key(is.read_message()?));
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.key_kind {
            match v {
                &Expr_CreateStruct_Entry_oneof_key_kind::field_key(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
                &Expr_CreateStruct_Entry_oneof_key_kind::map_key(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int64(1, self.id)?;
        }
        if let Some(ref v) = self.value.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.key_kind {
            match v {
                &Expr_CreateStruct_Entry_oneof_key_kind::field_key(ref v) => {
                    os.write_string(2, v)?;
                },
                &Expr_CreateStruct_Entry_oneof_key_kind::map_key(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Expr_CreateStruct_Entry {
        Expr_CreateStruct_Entry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "id",
                |m: &Expr_CreateStruct_Entry| { &m.id },
                |m: &mut Expr_CreateStruct_Entry| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "field_key",
                Expr_CreateStruct_Entry::has_field_key,
                Expr_CreateStruct_Entry::get_field_key,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Expr>(
                "map_key",
                Expr_CreateStruct_Entry::has_map_key,
                Expr_CreateStruct_Entry::get_map_key,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Expr>>(
                "value",
                |m: &Expr_CreateStruct_Entry| { &m.value },
                |m: &mut Expr_CreateStruct_Entry| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Expr_CreateStruct_Entry>(
                "Expr.CreateStruct.Entry",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Expr_CreateStruct_Entry {
        static instance: ::protobuf::rt::LazyV2<Expr_CreateStruct_Entry> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Expr_CreateStruct_Entry::new)
    }
}

impl ::protobuf::Clear for Expr_CreateStruct_Entry {
    fn clear(&mut self) {
        self.id = 0;
        self.key_kind = ::std::option::Option::None;
        self.key_kind = ::std::option::Option::None;
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Expr_CreateStruct_Entry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Expr_CreateStruct_Entry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Expr_Comprehension {
    // message fields
    pub iter_var: ::std::string::String,
    pub iter_range: ::protobuf::SingularPtrField<Expr>,
    pub accu_var: ::std::string::String,
    pub accu_init: ::protobuf::SingularPtrField<Expr>,
    pub loop_condition: ::protobuf::SingularPtrField<Expr>,
    pub loop_step: ::protobuf::SingularPtrField<Expr>,
    pub result: ::protobuf::SingularPtrField<Expr>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Expr_Comprehension {
    fn default() -> &'a Expr_Comprehension {
        <Expr_Comprehension as ::protobuf::Message>::default_instance()
    }
}

impl Expr_Comprehension {
    pub fn new() -> Expr_Comprehension {
        ::std::default::Default::default()
    }

    // string iter_var = 1;


    pub fn get_iter_var(&self) -> &str {
        &self.iter_var
    }
    pub fn clear_iter_var(&mut self) {
        self.iter_var.clear();
    }

    // Param is passed by value, moved
    pub fn set_iter_var(&mut self, v: ::std::string::String) {
        self.iter_var = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_iter_var(&mut self) -> &mut ::std::string::String {
        &mut self.iter_var
    }

    // Take field
    pub fn take_iter_var(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.iter_var, ::std::string::String::new())
    }

    // .google.api.expr.v1alpha1.Expr iter_range = 2;


    pub fn get_iter_range(&self) -> &Expr {
        self.iter_range.as_ref().unwrap_or_else(|| <Expr as ::protobuf::Message>::default_instance())
    }
    pub fn clear_iter_range(&mut self) {
        self.iter_range.clear();
    }

    pub fn has_iter_range(&self) -> bool {
        self.iter_range.is_some()
    }

    // Param is passed by value, moved
    pub fn set_iter_range(&mut self, v: Expr) {
        self.iter_range = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_iter_range(&mut self) -> &mut Expr {
        if self.iter_range.is_none() {
            self.iter_range.set_default();
        }
        self.iter_range.as_mut().unwrap()
    }

    // Take field
    pub fn take_iter_range(&mut self) -> Expr {
        self.iter_range.take().unwrap_or_else(|| Expr::new())
    }

    // string accu_var = 3;


    pub fn get_accu_var(&self) -> &str {
        &self.accu_var
    }
    pub fn clear_accu_var(&mut self) {
        self.accu_var.clear();
    }

    // Param is passed by value, moved
    pub fn set_accu_var(&mut self, v: ::std::string::String) {
        self.accu_var = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_accu_var(&mut self) -> &mut ::std::string::String {
        &mut self.accu_var
    }

    // Take field
    pub fn take_accu_var(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.accu_var, ::std::string::String::new())
    }

    // .google.api.expr.v1alpha1.Expr accu_init = 4;


    pub fn get_accu_init(&self) -> &Expr {
        self.accu_init.as_ref().unwrap_or_else(|| <Expr as ::protobuf::Message>::default_instance())
    }
    pub fn clear_accu_init(&mut self) {
        self.accu_init.clear();
    }

    pub fn has_accu_init(&self) -> bool {
        self.accu_init.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accu_init(&mut self, v: Expr) {
        self.accu_init = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_accu_init(&mut self) -> &mut Expr {
        if self.accu_init.is_none() {
            self.accu_init.set_default();
        }
        self.accu_init.as_mut().unwrap()
    }

    // Take field
    pub fn take_accu_init(&mut self) -> Expr {
        self.accu_init.take().unwrap_or_else(|| Expr::new())
    }

    // .google.api.expr.v1alpha1.Expr loop_condition = 5;


    pub fn get_loop_condition(&self) -> &Expr {
        self.loop_condition.as_ref().unwrap_or_else(|| <Expr as ::protobuf::Message>::default_instance())
    }
    pub fn clear_loop_condition(&mut self) {
        self.loop_condition.clear();
    }

    pub fn has_loop_condition(&self) -> bool {
        self.loop_condition.is_some()
    }

    // Param is passed by value, moved
    pub fn set_loop_condition(&mut self, v: Expr) {
        self.loop_condition = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_loop_condition(&mut self) -> &mut Expr {
        if self.loop_condition.is_none() {
            self.loop_condition.set_default();
        }
        self.loop_condition.as_mut().unwrap()
    }

    // Take field
    pub fn take_loop_condition(&mut self) -> Expr {
        self.loop_condition.take().unwrap_or_else(|| Expr::new())
    }

    // .google.api.expr.v1alpha1.Expr loop_step = 6;


    pub fn get_loop_step(&self) -> &Expr {
        self.loop_step.as_ref().unwrap_or_else(|| <Expr as ::protobuf::Message>::default_instance())
    }
    pub fn clear_loop_step(&mut self) {
        self.loop_step.clear();
    }

    pub fn has_loop_step(&self) -> bool {
        self.loop_step.is_some()
    }

    // Param is passed by value, moved
    pub fn set_loop_step(&mut self, v: Expr) {
        self.loop_step = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_loop_step(&mut self) -> &mut Expr {
        if self.loop_step.is_none() {
            self.loop_step.set_default();
        }
        self.loop_step.as_mut().unwrap()
    }

    // Take field
    pub fn take_loop_step(&mut self) -> Expr {
        self.loop_step.take().unwrap_or_else(|| Expr::new())
    }

    // .google.api.expr.v1alpha1.Expr result = 7;


    pub fn get_result(&self) -> &Expr {
        self.result.as_ref().unwrap_or_else(|| <Expr as ::protobuf::Message>::default_instance())
    }
    pub fn clear_result(&mut self) {
        self.result.clear();
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: Expr) {
        self.result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_result(&mut self) -> &mut Expr {
        if self.result.is_none() {
            self.result.set_default();
        }
        self.result.as_mut().unwrap()
    }

    // Take field
    pub fn take_result(&mut self) -> Expr {
        self.result.take().unwrap_or_else(|| Expr::new())
    }
}

impl ::protobuf::Message for Expr_Comprehension {
    fn is_initialized(&self) -> bool {
        for v in &self.iter_range {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.accu_init {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.loop_condition {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.loop_step {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.iter_var)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.iter_range)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.accu_var)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.accu_init)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.loop_condition)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.loop_step)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.iter_var.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.iter_var);
        }
        if let Some(ref v) = self.iter_range.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.accu_var.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.accu_var);
        }
        if let Some(ref v) = self.accu_init.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.loop_condition.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.loop_step.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.iter_var.is_empty() {
            os.write_string(1, &self.iter_var)?;
        }
        if let Some(ref v) = self.iter_range.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.accu_var.is_empty() {
            os.write_string(3, &self.accu_var)?;
        }
        if let Some(ref v) = self.accu_init.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.loop_condition.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.loop_step.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.result.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Expr_Comprehension {
        Expr_Comprehension::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "iter_var",
                |m: &Expr_Comprehension| { &m.iter_var },
                |m: &mut Expr_Comprehension| { &mut m.iter_var },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Expr>>(
                "iter_range",
                |m: &Expr_Comprehension| { &m.iter_range },
                |m: &mut Expr_Comprehension| { &mut m.iter_range },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "accu_var",
                |m: &Expr_Comprehension| { &m.accu_var },
                |m: &mut Expr_Comprehension| { &mut m.accu_var },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Expr>>(
                "accu_init",
                |m: &Expr_Comprehension| { &m.accu_init },
                |m: &mut Expr_Comprehension| { &mut m.accu_init },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Expr>>(
                "loop_condition",
                |m: &Expr_Comprehension| { &m.loop_condition },
                |m: &mut Expr_Comprehension| { &mut m.loop_condition },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Expr>>(
                "loop_step",
                |m: &Expr_Comprehension| { &m.loop_step },
                |m: &mut Expr_Comprehension| { &mut m.loop_step },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Expr>>(
                "result",
                |m: &Expr_Comprehension| { &m.result },
                |m: &mut Expr_Comprehension| { &mut m.result },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Expr_Comprehension>(
                "Expr.Comprehension",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Expr_Comprehension {
        static instance: ::protobuf::rt::LazyV2<Expr_Comprehension> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Expr_Comprehension::new)
    }
}

impl ::protobuf::Clear for Expr_Comprehension {
    fn clear(&mut self) {
        self.iter_var.clear();
        self.iter_range.clear();
        self.accu_var.clear();
        self.accu_init.clear();
        self.loop_condition.clear();
        self.loop_step.clear();
        self.result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Expr_Comprehension {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Expr_Comprehension {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Constant {
    // message oneof groups
    pub constant_kind: ::std::option::Option<Constant_oneof_constant_kind>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Constant {
    fn default() -> &'a Constant {
        <Constant as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Constant_oneof_constant_kind {
    null_value(::protobuf::well_known_types::NullValue),
    bool_value(bool),
    int64_value(i64),
    uint64_value(u64),
    double_value(f64),
    string_value(::std::string::String),
    bytes_value(::std::vec::Vec<u8>),
    duration_value(::protobuf::well_known_types::Duration),
    timestamp_value(::protobuf::well_known_types::Timestamp),
}

impl Constant {
    pub fn new() -> Constant {
        ::std::default::Default::default()
    }

    // .google.protobuf.NullValue null_value = 1;


    pub fn get_null_value(&self) -> ::protobuf::well_known_types::NullValue {
        match self.constant_kind {
            ::std::option::Option::Some(Constant_oneof_constant_kind::null_value(v)) => v,
            _ => ::protobuf::well_known_types::NullValue::NULL_VALUE,
        }
    }
    pub fn clear_null_value(&mut self) {
        self.constant_kind = ::std::option::Option::None;
    }

    pub fn has_null_value(&self) -> bool {
        match self.constant_kind {
            ::std::option::Option::Some(Constant_oneof_constant_kind::null_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_null_value(&mut self, v: ::protobuf::well_known_types::NullValue) {
        self.constant_kind = ::std::option::Option::Some(Constant_oneof_constant_kind::null_value(v))
    }

    // bool bool_value = 2;


    pub fn get_bool_value(&self) -> bool {
        match self.constant_kind {
            ::std::option::Option::Some(Constant_oneof_constant_kind::bool_value(v)) => v,
            _ => false,
        }
    }
    pub fn clear_bool_value(&mut self) {
        self.constant_kind = ::std::option::Option::None;
    }

    pub fn has_bool_value(&self) -> bool {
        match self.constant_kind {
            ::std::option::Option::Some(Constant_oneof_constant_kind::bool_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bool_value(&mut self, v: bool) {
        self.constant_kind = ::std::option::Option::Some(Constant_oneof_constant_kind::bool_value(v))
    }

    // int64 int64_value = 3;


    pub fn get_int64_value(&self) -> i64 {
        match self.constant_kind {
            ::std::option::Option::Some(Constant_oneof_constant_kind::int64_value(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_int64_value(&mut self) {
        self.constant_kind = ::std::option::Option::None;
    }

    pub fn has_int64_value(&self) -> bool {
        match self.constant_kind {
            ::std::option::Option::Some(Constant_oneof_constant_kind::int64_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_int64_value(&mut self, v: i64) {
        self.constant_kind = ::std::option::Option::Some(Constant_oneof_constant_kind::int64_value(v))
    }

    // uint64 uint64_value = 4;


    pub fn get_uint64_value(&self) -> u64 {
        match self.constant_kind {
            ::std::option::Option::Some(Constant_oneof_constant_kind::uint64_value(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_uint64_value(&mut self) {
        self.constant_kind = ::std::option::Option::None;
    }

    pub fn has_uint64_value(&self) -> bool {
        match self.constant_kind {
            ::std::option::Option::Some(Constant_oneof_constant_kind::uint64_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_uint64_value(&mut self, v: u64) {
        self.constant_kind = ::std::option::Option::Some(Constant_oneof_constant_kind::uint64_value(v))
    }

    // double double_value = 5;


    pub fn get_double_value(&self) -> f64 {
        match self.constant_kind {
            ::std::option::Option::Some(Constant_oneof_constant_kind::double_value(v)) => v,
            _ => 0.,
        }
    }
    pub fn clear_double_value(&mut self) {
        self.constant_kind = ::std::option::Option::None;
    }

    pub fn has_double_value(&self) -> bool {
        match self.constant_kind {
            ::std::option::Option::Some(Constant_oneof_constant_kind::double_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_double_value(&mut self, v: f64) {
        self.constant_kind = ::std::option::Option::Some(Constant_oneof_constant_kind::double_value(v))
    }

    // string string_value = 6;


    pub fn get_string_value(&self) -> &str {
        match self.constant_kind {
            ::std::option::Option::Some(Constant_oneof_constant_kind::string_value(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_string_value(&mut self) {
        self.constant_kind = ::std::option::Option::None;
    }

    pub fn has_string_value(&self) -> bool {
        match self.constant_kind {
            ::std::option::Option::Some(Constant_oneof_constant_kind::string_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_string_value(&mut self, v: ::std::string::String) {
        self.constant_kind = ::std::option::Option::Some(Constant_oneof_constant_kind::string_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_string_value(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(Constant_oneof_constant_kind::string_value(_)) = self.constant_kind {
        } else {
            self.constant_kind = ::std::option::Option::Some(Constant_oneof_constant_kind::string_value(::std::string::String::new()));
        }
        match self.constant_kind {
            ::std::option::Option::Some(Constant_oneof_constant_kind::string_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_string_value(&mut self) -> ::std::string::String {
        if self.has_string_value() {
            match self.constant_kind.take() {
                ::std::option::Option::Some(Constant_oneof_constant_kind::string_value(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // bytes bytes_value = 7;


    pub fn get_bytes_value(&self) -> &[u8] {
        match self.constant_kind {
            ::std::option::Option::Some(Constant_oneof_constant_kind::bytes_value(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_bytes_value(&mut self) {
        self.constant_kind = ::std::option::Option::None;
    }

    pub fn has_bytes_value(&self) -> bool {
        match self.constant_kind {
            ::std::option::Option::Some(Constant_oneof_constant_kind::bytes_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bytes_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.constant_kind = ::std::option::Option::Some(Constant_oneof_constant_kind::bytes_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_bytes_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(Constant_oneof_constant_kind::bytes_value(_)) = self.constant_kind {
        } else {
            self.constant_kind = ::std::option::Option::Some(Constant_oneof_constant_kind::bytes_value(::std::vec::Vec::new()));
        }
        match self.constant_kind {
            ::std::option::Option::Some(Constant_oneof_constant_kind::bytes_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_bytes_value(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_bytes_value() {
            match self.constant_kind.take() {
                ::std::option::Option::Some(Constant_oneof_constant_kind::bytes_value(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // .google.protobuf.Duration duration_value = 8;


    pub fn get_duration_value(&self) -> &::protobuf::well_known_types::Duration {
        match self.constant_kind {
            ::std::option::Option::Some(Constant_oneof_constant_kind::duration_value(ref v)) => v,
            _ => <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_duration_value(&mut self) {
        self.constant_kind = ::std::option::Option::None;
    }

    pub fn has_duration_value(&self) -> bool {
        match self.constant_kind {
            ::std::option::Option::Some(Constant_oneof_constant_kind::duration_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_duration_value(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.constant_kind = ::std::option::Option::Some(Constant_oneof_constant_kind::duration_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_duration_value(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if let ::std::option::Option::Some(Constant_oneof_constant_kind::duration_value(_)) = self.constant_kind {
        } else {
            self.constant_kind = ::std::option::Option::Some(Constant_oneof_constant_kind::duration_value(::protobuf::well_known_types::Duration::new()));
        }
        match self.constant_kind {
            ::std::option::Option::Some(Constant_oneof_constant_kind::duration_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_duration_value(&mut self) -> ::protobuf::well_known_types::Duration {
        if self.has_duration_value() {
            match self.constant_kind.take() {
                ::std::option::Option::Some(Constant_oneof_constant_kind::duration_value(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Duration::new()
        }
    }

    // .google.protobuf.Timestamp timestamp_value = 9;


    pub fn get_timestamp_value(&self) -> &::protobuf::well_known_types::Timestamp {
        match self.constant_kind {
            ::std::option::Option::Some(Constant_oneof_constant_kind::timestamp_value(ref v)) => v,
            _ => <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_timestamp_value(&mut self) {
        self.constant_kind = ::std::option::Option::None;
    }

    pub fn has_timestamp_value(&self) -> bool {
        match self.constant_kind {
            ::std::option::Option::Some(Constant_oneof_constant_kind::timestamp_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_timestamp_value(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.constant_kind = ::std::option::Option::Some(Constant_oneof_constant_kind::timestamp_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_timestamp_value(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if let ::std::option::Option::Some(Constant_oneof_constant_kind::timestamp_value(_)) = self.constant_kind {
        } else {
            self.constant_kind = ::std::option::Option::Some(Constant_oneof_constant_kind::timestamp_value(::protobuf::well_known_types::Timestamp::new()));
        }
        match self.constant_kind {
            ::std::option::Option::Some(Constant_oneof_constant_kind::timestamp_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_timestamp_value(&mut self) -> ::protobuf::well_known_types::Timestamp {
        if self.has_timestamp_value() {
            match self.constant_kind.take() {
                ::std::option::Option::Some(Constant_oneof_constant_kind::timestamp_value(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Timestamp::new()
        }
    }
}

impl ::protobuf::Message for Constant {
    fn is_initialized(&self) -> bool {
        if let Some(Constant_oneof_constant_kind::duration_value(ref v)) = self.constant_kind {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Constant_oneof_constant_kind::timestamp_value(ref v)) = self.constant_kind {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.constant_kind = ::std::option::Option::Some(Constant_oneof_constant_kind::null_value(is.read_enum()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.constant_kind = ::std::option::Option::Some(Constant_oneof_constant_kind::bool_value(is.read_bool()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.constant_kind = ::std::option::Option::Some(Constant_oneof_constant_kind::int64_value(is.read_int64()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.constant_kind = ::std::option::Option::Some(Constant_oneof_constant_kind::uint64_value(is.read_uint64()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.constant_kind = ::std::option::Option::Some(Constant_oneof_constant_kind::double_value(is.read_double()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.constant_kind = ::std::option::Option::Some(Constant_oneof_constant_kind::string_value(is.read_string()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.constant_kind = ::std::option::Option::Some(Constant_oneof_constant_kind::bytes_value(is.read_bytes()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.constant_kind = ::std::option::Option::Some(Constant_oneof_constant_kind::duration_value(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.constant_kind = ::std::option::Option::Some(Constant_oneof_constant_kind::timestamp_value(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.constant_kind {
            match v {
                &Constant_oneof_constant_kind::null_value(v) => {
                    my_size += ::protobuf::rt::enum_size(1, v);
                },
                &Constant_oneof_constant_kind::bool_value(v) => {
                    my_size += 2;
                },
                &Constant_oneof_constant_kind::int64_value(v) => {
                    my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &Constant_oneof_constant_kind::uint64_value(v) => {
                    my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &Constant_oneof_constant_kind::double_value(v) => {
                    my_size += 9;
                },
                &Constant_oneof_constant_kind::string_value(ref v) => {
                    my_size += ::protobuf::rt::string_size(6, &v);
                },
                &Constant_oneof_constant_kind::bytes_value(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(7, &v);
                },
                &Constant_oneof_constant_kind::duration_value(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Constant_oneof_constant_kind::timestamp_value(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.constant_kind {
            match v {
                &Constant_oneof_constant_kind::null_value(v) => {
                    os.write_enum(1, ::protobuf::ProtobufEnum::value(&v))?;
                },
                &Constant_oneof_constant_kind::bool_value(v) => {
                    os.write_bool(2, v)?;
                },
                &Constant_oneof_constant_kind::int64_value(v) => {
                    os.write_int64(3, v)?;
                },
                &Constant_oneof_constant_kind::uint64_value(v) => {
                    os.write_uint64(4, v)?;
                },
                &Constant_oneof_constant_kind::double_value(v) => {
                    os.write_double(5, v)?;
                },
                &Constant_oneof_constant_kind::string_value(ref v) => {
                    os.write_string(6, v)?;
                },
                &Constant_oneof_constant_kind::bytes_value(ref v) => {
                    os.write_bytes(7, v)?;
                },
                &Constant_oneof_constant_kind::duration_value(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Constant_oneof_constant_kind::timestamp_value(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Constant {
        Constant::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor::<_, ::protobuf::well_known_types::NullValue>(
                "null_value",
                Constant::has_null_value,
                Constant::get_null_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "bool_value",
                Constant::has_bool_value,
                Constant::get_bool_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor::<_>(
                "int64_value",
                Constant::has_int64_value,
                Constant::get_int64_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_u64_accessor::<_>(
                "uint64_value",
                Constant::has_uint64_value,
                Constant::get_uint64_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_f64_accessor::<_>(
                "double_value",
                Constant::has_double_value,
                Constant::get_double_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "string_value",
                Constant::has_string_value,
                Constant::get_string_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                "bytes_value",
                Constant::has_bytes_value,
                Constant::get_bytes_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Duration>(
                "duration_value",
                Constant::has_duration_value,
                Constant::get_duration_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Timestamp>(
                "timestamp_value",
                Constant::has_timestamp_value,
                Constant::get_timestamp_value,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Constant>(
                "Constant",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Constant {
        static instance: ::protobuf::rt::LazyV2<Constant> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Constant::new)
    }
}

impl ::protobuf::Clear for Constant {
    fn clear(&mut self) {
        self.constant_kind = ::std::option::Option::None;
        self.constant_kind = ::std::option::Option::None;
        self.constant_kind = ::std::option::Option::None;
        self.constant_kind = ::std::option::Option::None;
        self.constant_kind = ::std::option::Option::None;
        self.constant_kind = ::std::option::Option::None;
        self.constant_kind = ::std::option::Option::None;
        self.constant_kind = ::std::option::Option::None;
        self.constant_kind = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Constant {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Constant {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SourceInfo {
    // message fields
    pub syntax_version: ::std::string::String,
    pub location: ::std::string::String,
    pub line_offsets: ::std::vec::Vec<i32>,
    pub positions: ::std::collections::HashMap<i64, i32>,
    pub macro_calls: ::std::collections::HashMap<i64, Expr>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SourceInfo {
    fn default() -> &'a SourceInfo {
        <SourceInfo as ::protobuf::Message>::default_instance()
    }
}

impl SourceInfo {
    pub fn new() -> SourceInfo {
        ::std::default::Default::default()
    }

    // string syntax_version = 1;


    pub fn get_syntax_version(&self) -> &str {
        &self.syntax_version
    }
    pub fn clear_syntax_version(&mut self) {
        self.syntax_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_syntax_version(&mut self, v: ::std::string::String) {
        self.syntax_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_syntax_version(&mut self) -> &mut ::std::string::String {
        &mut self.syntax_version
    }

    // Take field
    pub fn take_syntax_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.syntax_version, ::std::string::String::new())
    }

    // string location = 2;


    pub fn get_location(&self) -> &str {
        &self.location
    }
    pub fn clear_location(&mut self) {
        self.location.clear();
    }

    // Param is passed by value, moved
    pub fn set_location(&mut self, v: ::std::string::String) {
        self.location = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_location(&mut self) -> &mut ::std::string::String {
        &mut self.location
    }

    // Take field
    pub fn take_location(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.location, ::std::string::String::new())
    }

    // repeated int32 line_offsets = 3;


    pub fn get_line_offsets(&self) -> &[i32] {
        &self.line_offsets
    }
    pub fn clear_line_offsets(&mut self) {
        self.line_offsets.clear();
    }

    // Param is passed by value, moved
    pub fn set_line_offsets(&mut self, v: ::std::vec::Vec<i32>) {
        self.line_offsets = v;
    }

    // Mutable pointer to the field.
    pub fn mut_line_offsets(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.line_offsets
    }

    // Take field
    pub fn take_line_offsets(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.line_offsets, ::std::vec::Vec::new())
    }

    // repeated .google.api.expr.v1alpha1.SourceInfo.PositionsEntry positions = 4;


    pub fn get_positions(&self) -> &::std::collections::HashMap<i64, i32> {
        &self.positions
    }
    pub fn clear_positions(&mut self) {
        self.positions.clear();
    }

    // Param is passed by value, moved
    pub fn set_positions(&mut self, v: ::std::collections::HashMap<i64, i32>) {
        self.positions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_positions(&mut self) -> &mut ::std::collections::HashMap<i64, i32> {
        &mut self.positions
    }

    // Take field
    pub fn take_positions(&mut self) -> ::std::collections::HashMap<i64, i32> {
        ::std::mem::replace(&mut self.positions, ::std::collections::HashMap::new())
    }

    // repeated .google.api.expr.v1alpha1.SourceInfo.MacroCallsEntry macro_calls = 5;


    pub fn get_macro_calls(&self) -> &::std::collections::HashMap<i64, Expr> {
        &self.macro_calls
    }
    pub fn clear_macro_calls(&mut self) {
        self.macro_calls.clear();
    }

    // Param is passed by value, moved
    pub fn set_macro_calls(&mut self, v: ::std::collections::HashMap<i64, Expr>) {
        self.macro_calls = v;
    }

    // Mutable pointer to the field.
    pub fn mut_macro_calls(&mut self) -> &mut ::std::collections::HashMap<i64, Expr> {
        &mut self.macro_calls
    }

    // Take field
    pub fn take_macro_calls(&mut self) -> ::std::collections::HashMap<i64, Expr> {
        ::std::mem::replace(&mut self.macro_calls, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for SourceInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.syntax_version)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.location)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.line_offsets)?;
                },
                4 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeInt64, ::protobuf::types::ProtobufTypeInt32>(wire_type, is, &mut self.positions)?;
                },
                5 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeInt64, ::protobuf::types::ProtobufTypeMessage<Expr>>(wire_type, is, &mut self.macro_calls)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.syntax_version.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.syntax_version);
        }
        if !self.location.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.location);
        }
        for value in &self.line_offsets {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeInt64, ::protobuf::types::ProtobufTypeInt32>(4, &self.positions);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeInt64, ::protobuf::types::ProtobufTypeMessage<Expr>>(5, &self.macro_calls);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.syntax_version.is_empty() {
            os.write_string(1, &self.syntax_version)?;
        }
        if !self.location.is_empty() {
            os.write_string(2, &self.location)?;
        }
        for v in &self.line_offsets {
            os.write_int32(3, *v)?;
        };
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeInt64, ::protobuf::types::ProtobufTypeInt32>(4, &self.positions, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeInt64, ::protobuf::types::ProtobufTypeMessage<Expr>>(5, &self.macro_calls, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SourceInfo {
        SourceInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "syntax_version",
                |m: &SourceInfo| { &m.syntax_version },
                |m: &mut SourceInfo| { &mut m.syntax_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "location",
                |m: &SourceInfo| { &m.location },
                |m: &mut SourceInfo| { &mut m.location },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "line_offsets",
                |m: &SourceInfo| { &m.line_offsets },
                |m: &mut SourceInfo| { &mut m.line_offsets },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeInt64, ::protobuf::types::ProtobufTypeInt32>(
                "positions",
                |m: &SourceInfo| { &m.positions },
                |m: &mut SourceInfo| { &mut m.positions },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeInt64, ::protobuf::types::ProtobufTypeMessage<Expr>>(
                "macro_calls",
                |m: &SourceInfo| { &m.macro_calls },
                |m: &mut SourceInfo| { &mut m.macro_calls },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SourceInfo>(
                "SourceInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SourceInfo {
        static instance: ::protobuf::rt::LazyV2<SourceInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SourceInfo::new)
    }
}

impl ::protobuf::Clear for SourceInfo {
    fn clear(&mut self) {
        self.syntax_version.clear();
        self.location.clear();
        self.line_offsets.clear();
        self.positions.clear();
        self.macro_calls.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SourceInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SourceInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SourcePosition {
    // message fields
    pub location: ::std::string::String,
    pub offset: i32,
    pub line: i32,
    pub column: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SourcePosition {
    fn default() -> &'a SourcePosition {
        <SourcePosition as ::protobuf::Message>::default_instance()
    }
}

impl SourcePosition {
    pub fn new() -> SourcePosition {
        ::std::default::Default::default()
    }

    // string location = 1;


    pub fn get_location(&self) -> &str {
        &self.location
    }
    pub fn clear_location(&mut self) {
        self.location.clear();
    }

    // Param is passed by value, moved
    pub fn set_location(&mut self, v: ::std::string::String) {
        self.location = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_location(&mut self) -> &mut ::std::string::String {
        &mut self.location
    }

    // Take field
    pub fn take_location(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.location, ::std::string::String::new())
    }

    // int32 offset = 2;


    pub fn get_offset(&self) -> i32 {
        self.offset
    }
    pub fn clear_offset(&mut self) {
        self.offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: i32) {
        self.offset = v;
    }

    // int32 line = 3;


    pub fn get_line(&self) -> i32 {
        self.line
    }
    pub fn clear_line(&mut self) {
        self.line = 0;
    }

    // Param is passed by value, moved
    pub fn set_line(&mut self, v: i32) {
        self.line = v;
    }

    // int32 column = 4;


    pub fn get_column(&self) -> i32 {
        self.column
    }
    pub fn clear_column(&mut self) {
        self.column = 0;
    }

    // Param is passed by value, moved
    pub fn set_column(&mut self, v: i32) {
        self.column = v;
    }
}

impl ::protobuf::Message for SourcePosition {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.location)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.offset = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.line = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.column = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.location.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.location);
        }
        if self.offset != 0 {
            my_size += ::protobuf::rt::value_size(2, self.offset, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.line != 0 {
            my_size += ::protobuf::rt::value_size(3, self.line, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.column != 0 {
            my_size += ::protobuf::rt::value_size(4, self.column, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.location.is_empty() {
            os.write_string(1, &self.location)?;
        }
        if self.offset != 0 {
            os.write_int32(2, self.offset)?;
        }
        if self.line != 0 {
            os.write_int32(3, self.line)?;
        }
        if self.column != 0 {
            os.write_int32(4, self.column)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SourcePosition {
        SourcePosition::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "location",
                |m: &SourcePosition| { &m.location },
                |m: &mut SourcePosition| { &mut m.location },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "offset",
                |m: &SourcePosition| { &m.offset },
                |m: &mut SourcePosition| { &mut m.offset },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "line",
                |m: &SourcePosition| { &m.line },
                |m: &mut SourcePosition| { &mut m.line },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "column",
                |m: &SourcePosition| { &m.column },
                |m: &mut SourcePosition| { &mut m.column },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SourcePosition>(
                "SourcePosition",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SourcePosition {
        static instance: ::protobuf::rt::LazyV2<SourcePosition> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SourcePosition::new)
    }
}

impl ::protobuf::Clear for SourcePosition {
    fn clear(&mut self) {
        self.location.clear();
        self.offset = 0;
        self.line = 0;
        self.column = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SourcePosition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SourcePosition {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%google/api/expr/v1alpha1/syntax.proto\x12\x18google.api.expr.v1alpha1\
    \x1a\x1egoogle/protobuf/duration.proto\x1a\x1cgoogle/protobuf/struct.pro\
    to\x1a\x1fgoogle/protobuf/timestamp.proto\"\x87\x01\n\nParsedExpr\x122\n\
    \x04expr\x18\x02\x20\x01(\x0b2\x1e.google.api.expr.v1alpha1.ExprR\x04exp\
    r\x12E\n\x0bsource_info\x18\x03\x20\x01(\x0b2$.google.api.expr.v1alpha1.\
    SourceInfoR\nsourceInfo\"\xdc\x0c\n\x04Expr\x12\x0e\n\x02id\x18\x02\x20\
    \x01(\x03R\x02id\x12C\n\nconst_expr\x18\x03\x20\x01(\x0b2\".google.api.e\
    xpr.v1alpha1.ConstantH\0R\tconstExpr\x12E\n\nident_expr\x18\x04\x20\x01(\
    \x0b2$.google.api.expr.v1alpha1.Expr.IdentH\0R\tidentExpr\x12H\n\x0bsele\
    ct_expr\x18\x05\x20\x01(\x0b2%.google.api.expr.v1alpha1.Expr.SelectH\0R\
    \nselectExpr\x12B\n\tcall_expr\x18\x06\x20\x01(\x0b2#.google.api.expr.v1\
    alpha1.Expr.CallH\0R\x08callExpr\x12H\n\tlist_expr\x18\x07\x20\x01(\x0b2\
    ).google.api.expr.v1alpha1.Expr.CreateListH\0R\x08listExpr\x12N\n\x0bstr\
    uct_expr\x18\x08\x20\x01(\x0b2+.google.api.expr.v1alpha1.Expr.CreateStru\
    ctH\0R\nstructExpr\x12]\n\x12comprehension_expr\x18\t\x20\x01(\x0b2,.goo\
    gle.api.expr.v1alpha1.Expr.ComprehensionH\0R\x11comprehensionExpr\x1a\
    \x1b\n\x05Ident\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x1au\n\x06\
    Select\x128\n\x07operand\x18\x01\x20\x01(\x0b2\x1e.google.api.expr.v1alp\
    ha1.ExprR\x07operand\x12\x14\n\x05field\x18\x02\x20\x01(\tR\x05field\x12\
    \x1b\n\ttest_only\x18\x03\x20\x01(\x08R\x08testOnly\x1a\x8e\x01\n\x04Cal\
    l\x126\n\x06target\x18\x01\x20\x01(\x0b2\x1e.google.api.expr.v1alpha1.Ex\
    prR\x06target\x12\x1a\n\x08function\x18\x02\x20\x01(\tR\x08function\x122\
    \n\x04args\x18\x03\x20\x03(\x0b2\x1e.google.api.expr.v1alpha1.ExprR\x04a\
    rgs\x1aH\n\nCreateList\x12:\n\x08elements\x18\x01\x20\x03(\x0b2\x1e.goog\
    le.api.expr.v1alpha1.ExprR\x08elements\x1a\xb4\x02\n\x0cCreateStruct\x12\
    !\n\x0cmessage_name\x18\x01\x20\x01(\tR\x0bmessageName\x12K\n\x07entries\
    \x18\x02\x20\x03(\x0b21.google.api.expr.v1alpha1.Expr.CreateStruct.Entry\
    R\x07entries\x1a\xb3\x01\n\x05Entry\x12\x0e\n\x02id\x18\x01\x20\x01(\x03\
    R\x02id\x12\x1d\n\tfield_key\x18\x02\x20\x01(\tH\0R\x08fieldKey\x129\n\
    \x07map_key\x18\x03\x20\x01(\x0b2\x1e.google.api.expr.v1alpha1.ExprH\0R\
    \x06mapKey\x124\n\x05value\x18\x04\x20\x01(\x0b2\x1e.google.api.expr.v1a\
    lpha1.ExprR\x05valueB\n\n\x08key_kind\x1a\xfd\x02\n\rComprehension\x12\
    \x19\n\x08iter_var\x18\x01\x20\x01(\tR\x07iterVar\x12=\n\niter_range\x18\
    \x02\x20\x01(\x0b2\x1e.google.api.expr.v1alpha1.ExprR\titerRange\x12\x19\
    \n\x08accu_var\x18\x03\x20\x01(\tR\x07accuVar\x12;\n\taccu_init\x18\x04\
    \x20\x01(\x0b2\x1e.google.api.expr.v1alpha1.ExprR\x08accuInit\x12E\n\x0e\
    loop_condition\x18\x05\x20\x01(\x0b2\x1e.google.api.expr.v1alpha1.ExprR\
    \rloopCondition\x12;\n\tloop_step\x18\x06\x20\x01(\x0b2\x1e.google.api.e\
    xpr.v1alpha1.ExprR\x08loopStep\x126\n\x06result\x18\x07\x20\x01(\x0b2\
    \x1e.google.api.expr.v1alpha1.ExprR\x06resultB\x0b\n\texpr_kind\"\xc1\
    \x03\n\x08Constant\x12;\n\nnull_value\x18\x01\x20\x01(\x0e2\x1a.google.p\
    rotobuf.NullValueH\0R\tnullValue\x12\x1f\n\nbool_value\x18\x02\x20\x01(\
    \x08H\0R\tboolValue\x12!\n\x0bint64_value\x18\x03\x20\x01(\x03H\0R\nint6\
    4Value\x12#\n\x0cuint64_value\x18\x04\x20\x01(\x04H\0R\x0buint64Value\
    \x12#\n\x0cdouble_value\x18\x05\x20\x01(\x01H\0R\x0bdoubleValue\x12#\n\
    \x0cstring_value\x18\x06\x20\x01(\tH\0R\x0bstringValue\x12!\n\x0bbytes_v\
    alue\x18\x07\x20\x01(\x0cH\0R\nbytesValue\x12F\n\x0eduration_value\x18\
    \x08\x20\x01(\x0b2\x19.google.protobuf.DurationH\0R\rdurationValueB\x02\
    \x18\x01\x12I\n\x0ftimestamp_value\x18\t\x20\x01(\x0b2\x1a.google.protob\
    uf.TimestampH\0R\x0etimestampValueB\x02\x18\x01B\x0f\n\rconstant_kind\"\
    \xb9\x03\n\nSourceInfo\x12%\n\x0esyntax_version\x18\x01\x20\x01(\tR\rsyn\
    taxVersion\x12\x1a\n\x08location\x18\x02\x20\x01(\tR\x08location\x12!\n\
    \x0cline_offsets\x18\x03\x20\x03(\x05R\x0blineOffsets\x12Q\n\tpositions\
    \x18\x04\x20\x03(\x0b23.google.api.expr.v1alpha1.SourceInfo.PositionsEnt\
    ryR\tpositions\x12U\n\x0bmacro_calls\x18\x05\x20\x03(\x0b24.google.api.e\
    xpr.v1alpha1.SourceInfo.MacroCallsEntryR\nmacroCalls\x1a<\n\x0ePositions\
    Entry\x12\x10\n\x03key\x18\x01\x20\x01(\x03R\x03key\x12\x14\n\x05value\
    \x18\x02\x20\x01(\x05R\x05value:\x028\x01\x1a]\n\x0fMacroCallsEntry\x12\
    \x10\n\x03key\x18\x01\x20\x01(\x03R\x03key\x124\n\x05value\x18\x02\x20\
    \x01(\x0b2\x1e.google.api.expr.v1alpha1.ExprR\x05value:\x028\x01\"p\n\
    \x0eSourcePosition\x12\x1a\n\x08location\x18\x01\x20\x01(\tR\x08location\
    \x12\x16\n\x06offset\x18\x02\x20\x01(\x05R\x06offset\x12\x12\n\x04line\
    \x18\x03\x20\x01(\x05R\x04line\x12\x16\n\x06column\x18\x04\x20\x01(\x05R\
    \x06columnBn\n\x1ccom.google.api.expr.v1alpha1B\x0bSyntaxProtoP\x01Z<goo\
    gle.golang.org/genproto/googleapis/api/expr/v1alpha1;expr\xf8\x01\x01b\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
