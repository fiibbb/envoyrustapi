// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/extensions/filters/http/ext_proc/v3alpha/ext_proc.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct ExternalProcessor {
    // message fields
    pub grpc_service: ::protobuf::SingularPtrField<super::grpc_service::GrpcService>,
    pub failure_mode_allow: bool,
    pub processing_mode: ::protobuf::SingularPtrField<super::processing_mode::ProcessingMode>,
    pub async_mode: bool,
    pub request_attributes: ::protobuf::RepeatedField<::std::string::String>,
    pub response_attributes: ::protobuf::RepeatedField<::std::string::String>,
    pub message_timeout: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub stat_prefix: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExternalProcessor {
    fn default() -> &'a ExternalProcessor {
        <ExternalProcessor as ::protobuf::Message>::default_instance()
    }
}

impl ExternalProcessor {
    pub fn new() -> ExternalProcessor {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.GrpcService grpc_service = 1;


    pub fn get_grpc_service(&self) -> &super::grpc_service::GrpcService {
        self.grpc_service.as_ref().unwrap_or_else(|| <super::grpc_service::GrpcService as ::protobuf::Message>::default_instance())
    }
    pub fn clear_grpc_service(&mut self) {
        self.grpc_service.clear();
    }

    pub fn has_grpc_service(&self) -> bool {
        self.grpc_service.is_some()
    }

    // Param is passed by value, moved
    pub fn set_grpc_service(&mut self, v: super::grpc_service::GrpcService) {
        self.grpc_service = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_grpc_service(&mut self) -> &mut super::grpc_service::GrpcService {
        if self.grpc_service.is_none() {
            self.grpc_service.set_default();
        }
        self.grpc_service.as_mut().unwrap()
    }

    // Take field
    pub fn take_grpc_service(&mut self) -> super::grpc_service::GrpcService {
        self.grpc_service.take().unwrap_or_else(|| super::grpc_service::GrpcService::new())
    }

    // bool failure_mode_allow = 2;


    pub fn get_failure_mode_allow(&self) -> bool {
        self.failure_mode_allow
    }
    pub fn clear_failure_mode_allow(&mut self) {
        self.failure_mode_allow = false;
    }

    // Param is passed by value, moved
    pub fn set_failure_mode_allow(&mut self, v: bool) {
        self.failure_mode_allow = v;
    }

    // .envoy.extensions.filters.http.ext_proc.v3alpha.ProcessingMode processing_mode = 3;


    pub fn get_processing_mode(&self) -> &super::processing_mode::ProcessingMode {
        self.processing_mode.as_ref().unwrap_or_else(|| <super::processing_mode::ProcessingMode as ::protobuf::Message>::default_instance())
    }
    pub fn clear_processing_mode(&mut self) {
        self.processing_mode.clear();
    }

    pub fn has_processing_mode(&self) -> bool {
        self.processing_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_processing_mode(&mut self, v: super::processing_mode::ProcessingMode) {
        self.processing_mode = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_processing_mode(&mut self) -> &mut super::processing_mode::ProcessingMode {
        if self.processing_mode.is_none() {
            self.processing_mode.set_default();
        }
        self.processing_mode.as_mut().unwrap()
    }

    // Take field
    pub fn take_processing_mode(&mut self) -> super::processing_mode::ProcessingMode {
        self.processing_mode.take().unwrap_or_else(|| super::processing_mode::ProcessingMode::new())
    }

    // bool async_mode = 4;


    pub fn get_async_mode(&self) -> bool {
        self.async_mode
    }
    pub fn clear_async_mode(&mut self) {
        self.async_mode = false;
    }

    // Param is passed by value, moved
    pub fn set_async_mode(&mut self, v: bool) {
        self.async_mode = v;
    }

    // repeated string request_attributes = 5;


    pub fn get_request_attributes(&self) -> &[::std::string::String] {
        &self.request_attributes
    }
    pub fn clear_request_attributes(&mut self) {
        self.request_attributes.clear();
    }

    // Param is passed by value, moved
    pub fn set_request_attributes(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.request_attributes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_request_attributes(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.request_attributes
    }

    // Take field
    pub fn take_request_attributes(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.request_attributes, ::protobuf::RepeatedField::new())
    }

    // repeated string response_attributes = 6;


    pub fn get_response_attributes(&self) -> &[::std::string::String] {
        &self.response_attributes
    }
    pub fn clear_response_attributes(&mut self) {
        self.response_attributes.clear();
    }

    // Param is passed by value, moved
    pub fn set_response_attributes(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.response_attributes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_response_attributes(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.response_attributes
    }

    // Take field
    pub fn take_response_attributes(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.response_attributes, ::protobuf::RepeatedField::new())
    }

    // .google.protobuf.Duration message_timeout = 7;


    pub fn get_message_timeout(&self) -> &::protobuf::well_known_types::Duration {
        self.message_timeout.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_message_timeout(&mut self) {
        self.message_timeout.clear();
    }

    pub fn has_message_timeout(&self) -> bool {
        self.message_timeout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message_timeout(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.message_timeout = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message_timeout(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.message_timeout.is_none() {
            self.message_timeout.set_default();
        }
        self.message_timeout.as_mut().unwrap()
    }

    // Take field
    pub fn take_message_timeout(&mut self) -> ::protobuf::well_known_types::Duration {
        self.message_timeout.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // string stat_prefix = 8;


    pub fn get_stat_prefix(&self) -> &str {
        &self.stat_prefix
    }
    pub fn clear_stat_prefix(&mut self) {
        self.stat_prefix.clear();
    }

    // Param is passed by value, moved
    pub fn set_stat_prefix(&mut self, v: ::std::string::String) {
        self.stat_prefix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stat_prefix(&mut self) -> &mut ::std::string::String {
        &mut self.stat_prefix
    }

    // Take field
    pub fn take_stat_prefix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.stat_prefix, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ExternalProcessor {
    fn is_initialized(&self) -> bool {
        for v in &self.grpc_service {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.processing_mode {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.message_timeout {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.grpc_service)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.failure_mode_allow = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.processing_mode)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.async_mode = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.request_attributes)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.response_attributes)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.message_timeout)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.stat_prefix)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.grpc_service.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.failure_mode_allow != false {
            my_size += 2;
        }
        if let Some(ref v) = self.processing_mode.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.async_mode != false {
            my_size += 2;
        }
        for value in &self.request_attributes {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        for value in &self.response_attributes {
            my_size += ::protobuf::rt::string_size(6, &value);
        };
        if let Some(ref v) = self.message_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.stat_prefix.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.stat_prefix);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.grpc_service.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.failure_mode_allow != false {
            os.write_bool(2, self.failure_mode_allow)?;
        }
        if let Some(ref v) = self.processing_mode.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.async_mode != false {
            os.write_bool(4, self.async_mode)?;
        }
        for v in &self.request_attributes {
            os.write_string(5, &v)?;
        };
        for v in &self.response_attributes {
            os.write_string(6, &v)?;
        };
        if let Some(ref v) = self.message_timeout.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.stat_prefix.is_empty() {
            os.write_string(8, &self.stat_prefix)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExternalProcessor {
        ExternalProcessor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::grpc_service::GrpcService>>(
                "grpc_service",
                |m: &ExternalProcessor| { &m.grpc_service },
                |m: &mut ExternalProcessor| { &mut m.grpc_service },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "failure_mode_allow",
                |m: &ExternalProcessor| { &m.failure_mode_allow },
                |m: &mut ExternalProcessor| { &mut m.failure_mode_allow },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::processing_mode::ProcessingMode>>(
                "processing_mode",
                |m: &ExternalProcessor| { &m.processing_mode },
                |m: &mut ExternalProcessor| { &mut m.processing_mode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "async_mode",
                |m: &ExternalProcessor| { &m.async_mode },
                |m: &mut ExternalProcessor| { &mut m.async_mode },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "request_attributes",
                |m: &ExternalProcessor| { &m.request_attributes },
                |m: &mut ExternalProcessor| { &mut m.request_attributes },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "response_attributes",
                |m: &ExternalProcessor| { &m.response_attributes },
                |m: &mut ExternalProcessor| { &mut m.response_attributes },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "message_timeout",
                |m: &ExternalProcessor| { &m.message_timeout },
                |m: &mut ExternalProcessor| { &mut m.message_timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "stat_prefix",
                |m: &ExternalProcessor| { &m.stat_prefix },
                |m: &mut ExternalProcessor| { &mut m.stat_prefix },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ExternalProcessor>(
                "ExternalProcessor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ExternalProcessor {
        static instance: ::protobuf::rt::LazyV2<ExternalProcessor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ExternalProcessor::new)
    }
}

impl ::protobuf::Clear for ExternalProcessor {
    fn clear(&mut self) {
        self.grpc_service.clear();
        self.failure_mode_allow = false;
        self.processing_mode.clear();
        self.async_mode = false;
        self.request_attributes.clear();
        self.response_attributes.clear();
        self.message_timeout.clear();
        self.stat_prefix.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExternalProcessor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExternalProcessor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExtProcPerRoute {
    // message oneof groups
    pub field_override: ::std::option::Option<ExtProcPerRoute_oneof_override>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExtProcPerRoute {
    fn default() -> &'a ExtProcPerRoute {
        <ExtProcPerRoute as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ExtProcPerRoute_oneof_override {
    disabled(bool),
    overrides(ExtProcOverrides),
}

impl ExtProcPerRoute {
    pub fn new() -> ExtProcPerRoute {
        ::std::default::Default::default()
    }

    // bool disabled = 1;


    pub fn get_disabled(&self) -> bool {
        match self.field_override {
            ::std::option::Option::Some(ExtProcPerRoute_oneof_override::disabled(v)) => v,
            _ => false,
        }
    }
    pub fn clear_disabled(&mut self) {
        self.field_override = ::std::option::Option::None;
    }

    pub fn has_disabled(&self) -> bool {
        match self.field_override {
            ::std::option::Option::Some(ExtProcPerRoute_oneof_override::disabled(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_disabled(&mut self, v: bool) {
        self.field_override = ::std::option::Option::Some(ExtProcPerRoute_oneof_override::disabled(v))
    }

    // .envoy.extensions.filters.http.ext_proc.v3alpha.ExtProcOverrides overrides = 2;


    pub fn get_overrides(&self) -> &ExtProcOverrides {
        match self.field_override {
            ::std::option::Option::Some(ExtProcPerRoute_oneof_override::overrides(ref v)) => v,
            _ => <ExtProcOverrides as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_overrides(&mut self) {
        self.field_override = ::std::option::Option::None;
    }

    pub fn has_overrides(&self) -> bool {
        match self.field_override {
            ::std::option::Option::Some(ExtProcPerRoute_oneof_override::overrides(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_overrides(&mut self, v: ExtProcOverrides) {
        self.field_override = ::std::option::Option::Some(ExtProcPerRoute_oneof_override::overrides(v))
    }

    // Mutable pointer to the field.
    pub fn mut_overrides(&mut self) -> &mut ExtProcOverrides {
        if let ::std::option::Option::Some(ExtProcPerRoute_oneof_override::overrides(_)) = self.field_override {
        } else {
            self.field_override = ::std::option::Option::Some(ExtProcPerRoute_oneof_override::overrides(ExtProcOverrides::new()));
        }
        match self.field_override {
            ::std::option::Option::Some(ExtProcPerRoute_oneof_override::overrides(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_overrides(&mut self) -> ExtProcOverrides {
        if self.has_overrides() {
            match self.field_override.take() {
                ::std::option::Option::Some(ExtProcPerRoute_oneof_override::overrides(v)) => v,
                _ => panic!(),
            }
        } else {
            ExtProcOverrides::new()
        }
    }
}

impl ::protobuf::Message for ExtProcPerRoute {
    fn is_initialized(&self) -> bool {
        if let Some(ExtProcPerRoute_oneof_override::overrides(ref v)) = self.field_override {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_override = ::std::option::Option::Some(ExtProcPerRoute_oneof_override::disabled(is.read_bool()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_override = ::std::option::Option::Some(ExtProcPerRoute_oneof_override::overrides(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.field_override {
            match v {
                &ExtProcPerRoute_oneof_override::disabled(v) => {
                    my_size += 2;
                },
                &ExtProcPerRoute_oneof_override::overrides(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.field_override {
            match v {
                &ExtProcPerRoute_oneof_override::disabled(v) => {
                    os.write_bool(1, v)?;
                },
                &ExtProcPerRoute_oneof_override::overrides(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExtProcPerRoute {
        ExtProcPerRoute::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "disabled",
                ExtProcPerRoute::has_disabled,
                ExtProcPerRoute::get_disabled,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ExtProcOverrides>(
                "overrides",
                ExtProcPerRoute::has_overrides,
                ExtProcPerRoute::get_overrides,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ExtProcPerRoute>(
                "ExtProcPerRoute",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ExtProcPerRoute {
        static instance: ::protobuf::rt::LazyV2<ExtProcPerRoute> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ExtProcPerRoute::new)
    }
}

impl ::protobuf::Clear for ExtProcPerRoute {
    fn clear(&mut self) {
        self.field_override = ::std::option::Option::None;
        self.field_override = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExtProcPerRoute {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExtProcPerRoute {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExtProcOverrides {
    // message fields
    pub processing_mode: ::protobuf::SingularPtrField<super::processing_mode::ProcessingMode>,
    pub async_mode: bool,
    pub request_properties: ::protobuf::RepeatedField<::std::string::String>,
    pub response_properties: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExtProcOverrides {
    fn default() -> &'a ExtProcOverrides {
        <ExtProcOverrides as ::protobuf::Message>::default_instance()
    }
}

impl ExtProcOverrides {
    pub fn new() -> ExtProcOverrides {
        ::std::default::Default::default()
    }

    // .envoy.extensions.filters.http.ext_proc.v3alpha.ProcessingMode processing_mode = 1;


    pub fn get_processing_mode(&self) -> &super::processing_mode::ProcessingMode {
        self.processing_mode.as_ref().unwrap_or_else(|| <super::processing_mode::ProcessingMode as ::protobuf::Message>::default_instance())
    }
    pub fn clear_processing_mode(&mut self) {
        self.processing_mode.clear();
    }

    pub fn has_processing_mode(&self) -> bool {
        self.processing_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_processing_mode(&mut self, v: super::processing_mode::ProcessingMode) {
        self.processing_mode = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_processing_mode(&mut self) -> &mut super::processing_mode::ProcessingMode {
        if self.processing_mode.is_none() {
            self.processing_mode.set_default();
        }
        self.processing_mode.as_mut().unwrap()
    }

    // Take field
    pub fn take_processing_mode(&mut self) -> super::processing_mode::ProcessingMode {
        self.processing_mode.take().unwrap_or_else(|| super::processing_mode::ProcessingMode::new())
    }

    // bool async_mode = 2;


    pub fn get_async_mode(&self) -> bool {
        self.async_mode
    }
    pub fn clear_async_mode(&mut self) {
        self.async_mode = false;
    }

    // Param is passed by value, moved
    pub fn set_async_mode(&mut self, v: bool) {
        self.async_mode = v;
    }

    // repeated string request_properties = 3;


    pub fn get_request_properties(&self) -> &[::std::string::String] {
        &self.request_properties
    }
    pub fn clear_request_properties(&mut self) {
        self.request_properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_request_properties(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.request_properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_request_properties(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.request_properties
    }

    // Take field
    pub fn take_request_properties(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.request_properties, ::protobuf::RepeatedField::new())
    }

    // repeated string response_properties = 4;


    pub fn get_response_properties(&self) -> &[::std::string::String] {
        &self.response_properties
    }
    pub fn clear_response_properties(&mut self) {
        self.response_properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_response_properties(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.response_properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_response_properties(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.response_properties
    }

    // Take field
    pub fn take_response_properties(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.response_properties, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ExtProcOverrides {
    fn is_initialized(&self) -> bool {
        for v in &self.processing_mode {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.processing_mode)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.async_mode = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.request_properties)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.response_properties)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.processing_mode.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.async_mode != false {
            my_size += 2;
        }
        for value in &self.request_properties {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        for value in &self.response_properties {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.processing_mode.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.async_mode != false {
            os.write_bool(2, self.async_mode)?;
        }
        for v in &self.request_properties {
            os.write_string(3, &v)?;
        };
        for v in &self.response_properties {
            os.write_string(4, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExtProcOverrides {
        ExtProcOverrides::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::processing_mode::ProcessingMode>>(
                "processing_mode",
                |m: &ExtProcOverrides| { &m.processing_mode },
                |m: &mut ExtProcOverrides| { &mut m.processing_mode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "async_mode",
                |m: &ExtProcOverrides| { &m.async_mode },
                |m: &mut ExtProcOverrides| { &mut m.async_mode },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "request_properties",
                |m: &ExtProcOverrides| { &m.request_properties },
                |m: &mut ExtProcOverrides| { &mut m.request_properties },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "response_properties",
                |m: &ExtProcOverrides| { &m.response_properties },
                |m: &mut ExtProcOverrides| { &mut m.response_properties },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ExtProcOverrides>(
                "ExtProcOverrides",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ExtProcOverrides {
        static instance: ::protobuf::rt::LazyV2<ExtProcOverrides> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ExtProcOverrides::new)
    }
}

impl ::protobuf::Clear for ExtProcOverrides {
    fn clear(&mut self) {
        self.processing_mode.clear();
        self.async_mode = false;
        self.request_properties.clear();
        self.response_properties.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExtProcOverrides {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExtProcOverrides {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n=envoy/extensions/filters/http/ext_proc/v3alpha/ext_proc.proto\x12.env\
    oy.extensions.filters.http.ext_proc.v3alpha\x1a'envoy/config/core/v3/grp\
    c_service.proto\x1aDenvoy/extensions/filters/http/ext_proc/v3alpha/proce\
    ssing_mode.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1dudpa/annot\
    ations/status.proto\x1a\x17validate/validate.proto\"\xd4\x03\n\x11Extern\
    alProcessor\x12D\n\x0cgrpc_service\x18\x01\x20\x01(\x0b2!.envoy.config.c\
    ore.v3.GrpcServiceR\x0bgrpcService\x12,\n\x12failure_mode_allow\x18\x02\
    \x20\x01(\x08R\x10failureModeAllow\x12g\n\x0fprocessing_mode\x18\x03\x20\
    \x01(\x0b2>.envoy.extensions.filters.http.ext_proc.v3alpha.ProcessingMod\
    eR\x0eprocessingMode\x12\x1d\n\nasync_mode\x18\x04\x20\x01(\x08R\tasyncM\
    ode\x12-\n\x12request_attributes\x18\x05\x20\x03(\tR\x11requestAttribute\
    s\x12/\n\x13response_attributes\x18\x06\x20\x03(\tR\x12responseAttribute\
    s\x12B\n\x0fmessage_timeout\x18\x07\x20\x01(\x0b2\x19.google.protobuf.Du\
    rationR\x0emessageTimeout\x12\x1f\n\x0bstat_prefix\x18\x08\x20\x01(\tR\n\
    statPrefix\"\xab\x01\n\x0fExtProcPerRoute\x12%\n\x08disabled\x18\x01\x20\
    \x01(\x08H\0R\x08disabledB\x07\xfaB\x04j\x02\x08\x01\x12`\n\toverrides\
    \x18\x02\x20\x01(\x0b2@.envoy.extensions.filters.http.ext_proc.v3alpha.E\
    xtProcOverridesH\0R\toverridesB\x0f\n\x08override\x12\x03\xf8B\x01\"\xfa\
    \x01\n\x10ExtProcOverrides\x12g\n\x0fprocessing_mode\x18\x01\x20\x01(\
    \x0b2>.envoy.extensions.filters.http.ext_proc.v3alpha.ProcessingModeR\
    \x0eprocessingMode\x12\x1d\n\nasync_mode\x18\x02\x20\x01(\x08R\tasyncMod\
    e\x12-\n\x12request_properties\x18\x03\x20\x03(\tR\x11requestProperties\
    \x12/\n\x13response_properties\x18\x04\x20\x03(\tR\x12responseProperties\
    B^\n<io.envoyproxy.envoy.extensions.filters.http.ext_proc.v3alphaB\x0cEx\
    tProcProtoP\x01\xba\x80\xc8\xd1\x06\x02\x08\x01\xba\x80\xc8\xd1\x06\x02\
    \x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
