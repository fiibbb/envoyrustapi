// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/extensions/filters/listener/proxy_protocol/v3/proxy_protocol.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct ProxyProtocol {
    // message fields
    pub rules: ::protobuf::RepeatedField<ProxyProtocol_Rule>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProxyProtocol {
    fn default() -> &'a ProxyProtocol {
        <ProxyProtocol as ::protobuf::Message>::default_instance()
    }
}

impl ProxyProtocol {
    pub fn new() -> ProxyProtocol {
        ::std::default::Default::default()
    }

    // repeated .envoy.extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.Rule rules = 1;


    pub fn get_rules(&self) -> &[ProxyProtocol_Rule] {
        &self.rules
    }
    pub fn clear_rules(&mut self) {
        self.rules.clear();
    }

    // Param is passed by value, moved
    pub fn set_rules(&mut self, v: ::protobuf::RepeatedField<ProxyProtocol_Rule>) {
        self.rules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rules(&mut self) -> &mut ::protobuf::RepeatedField<ProxyProtocol_Rule> {
        &mut self.rules
    }

    // Take field
    pub fn take_rules(&mut self) -> ::protobuf::RepeatedField<ProxyProtocol_Rule> {
        ::std::mem::replace(&mut self.rules, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ProxyProtocol {
    fn is_initialized(&self) -> bool {
        for v in &self.rules {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rules)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.rules {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProxyProtocol {
        ProxyProtocol::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ProxyProtocol_Rule>>(
                "rules",
                |m: &ProxyProtocol| { &m.rules },
                |m: &mut ProxyProtocol| { &mut m.rules },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProxyProtocol>(
                "ProxyProtocol",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProxyProtocol {
        static instance: ::protobuf::rt::LazyV2<ProxyProtocol> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProxyProtocol::new)
    }
}

impl ::protobuf::Clear for ProxyProtocol {
    fn clear(&mut self) {
        self.rules.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProxyProtocol {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProxyProtocol {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProxyProtocol_KeyValuePair {
    // message fields
    pub metadata_namespace: ::std::string::String,
    pub key: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProxyProtocol_KeyValuePair {
    fn default() -> &'a ProxyProtocol_KeyValuePair {
        <ProxyProtocol_KeyValuePair as ::protobuf::Message>::default_instance()
    }
}

impl ProxyProtocol_KeyValuePair {
    pub fn new() -> ProxyProtocol_KeyValuePair {
        ::std::default::Default::default()
    }

    // string metadata_namespace = 1;


    pub fn get_metadata_namespace(&self) -> &str {
        &self.metadata_namespace
    }
    pub fn clear_metadata_namespace(&mut self) {
        self.metadata_namespace.clear();
    }

    // Param is passed by value, moved
    pub fn set_metadata_namespace(&mut self, v: ::std::string::String) {
        self.metadata_namespace = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata_namespace(&mut self) -> &mut ::std::string::String {
        &mut self.metadata_namespace
    }

    // Take field
    pub fn take_metadata_namespace(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.metadata_namespace, ::std::string::String::new())
    }

    // string key = 2;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ProxyProtocol_KeyValuePair {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.metadata_namespace)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.metadata_namespace.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.metadata_namespace);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.metadata_namespace.is_empty() {
            os.write_string(1, &self.metadata_namespace)?;
        }
        if !self.key.is_empty() {
            os.write_string(2, &self.key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProxyProtocol_KeyValuePair {
        ProxyProtocol_KeyValuePair::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "metadata_namespace",
                |m: &ProxyProtocol_KeyValuePair| { &m.metadata_namespace },
                |m: &mut ProxyProtocol_KeyValuePair| { &mut m.metadata_namespace },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &ProxyProtocol_KeyValuePair| { &m.key },
                |m: &mut ProxyProtocol_KeyValuePair| { &mut m.key },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProxyProtocol_KeyValuePair>(
                "ProxyProtocol.KeyValuePair",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProxyProtocol_KeyValuePair {
        static instance: ::protobuf::rt::LazyV2<ProxyProtocol_KeyValuePair> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProxyProtocol_KeyValuePair::new)
    }
}

impl ::protobuf::Clear for ProxyProtocol_KeyValuePair {
    fn clear(&mut self) {
        self.metadata_namespace.clear();
        self.key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProxyProtocol_KeyValuePair {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProxyProtocol_KeyValuePair {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProxyProtocol_Rule {
    // message fields
    pub tlv_type: u32,
    pub on_tlv_present: ::protobuf::SingularPtrField<ProxyProtocol_KeyValuePair>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProxyProtocol_Rule {
    fn default() -> &'a ProxyProtocol_Rule {
        <ProxyProtocol_Rule as ::protobuf::Message>::default_instance()
    }
}

impl ProxyProtocol_Rule {
    pub fn new() -> ProxyProtocol_Rule {
        ::std::default::Default::default()
    }

    // uint32 tlv_type = 1;


    pub fn get_tlv_type(&self) -> u32 {
        self.tlv_type
    }
    pub fn clear_tlv_type(&mut self) {
        self.tlv_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_tlv_type(&mut self, v: u32) {
        self.tlv_type = v;
    }

    // .envoy.extensions.filters.listener.proxy_protocol.v3.ProxyProtocol.KeyValuePair on_tlv_present = 2;


    pub fn get_on_tlv_present(&self) -> &ProxyProtocol_KeyValuePair {
        self.on_tlv_present.as_ref().unwrap_or_else(|| <ProxyProtocol_KeyValuePair as ::protobuf::Message>::default_instance())
    }
    pub fn clear_on_tlv_present(&mut self) {
        self.on_tlv_present.clear();
    }

    pub fn has_on_tlv_present(&self) -> bool {
        self.on_tlv_present.is_some()
    }

    // Param is passed by value, moved
    pub fn set_on_tlv_present(&mut self, v: ProxyProtocol_KeyValuePair) {
        self.on_tlv_present = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_on_tlv_present(&mut self) -> &mut ProxyProtocol_KeyValuePair {
        if self.on_tlv_present.is_none() {
            self.on_tlv_present.set_default();
        }
        self.on_tlv_present.as_mut().unwrap()
    }

    // Take field
    pub fn take_on_tlv_present(&mut self) -> ProxyProtocol_KeyValuePair {
        self.on_tlv_present.take().unwrap_or_else(|| ProxyProtocol_KeyValuePair::new())
    }
}

impl ::protobuf::Message for ProxyProtocol_Rule {
    fn is_initialized(&self) -> bool {
        for v in &self.on_tlv_present {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.tlv_type = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.on_tlv_present)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.tlv_type != 0 {
            my_size += ::protobuf::rt::value_size(1, self.tlv_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.on_tlv_present.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.tlv_type != 0 {
            os.write_uint32(1, self.tlv_type)?;
        }
        if let Some(ref v) = self.on_tlv_present.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProxyProtocol_Rule {
        ProxyProtocol_Rule::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "tlv_type",
                |m: &ProxyProtocol_Rule| { &m.tlv_type },
                |m: &mut ProxyProtocol_Rule| { &mut m.tlv_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ProxyProtocol_KeyValuePair>>(
                "on_tlv_present",
                |m: &ProxyProtocol_Rule| { &m.on_tlv_present },
                |m: &mut ProxyProtocol_Rule| { &mut m.on_tlv_present },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProxyProtocol_Rule>(
                "ProxyProtocol.Rule",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProxyProtocol_Rule {
        static instance: ::protobuf::rt::LazyV2<ProxyProtocol_Rule> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProxyProtocol_Rule::new)
    }
}

impl ::protobuf::Clear for ProxyProtocol_Rule {
    fn clear(&mut self) {
        self.tlv_type = 0;
        self.on_tlv_present.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProxyProtocol_Rule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProxyProtocol_Rule {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \nHenvoy/extensions/filters/listener/proxy_protocol/v3/proxy_protocol.pr\
    oto\x123envoy.extensions.filters.listener.proxy_protocol.v3\x1a\x1dudpa/\
    annotations/status.proto\x1a!udpa/annotations/versioning.proto\x1a\x17va\
    lidate/validate.proto\"\xb2\x03\n\rProxyProtocol\x12]\n\x05rules\x18\x01\
    \x20\x03(\x0b2G.envoy.extensions.filters.listener.proxy_protocol.v3.Prox\
    yProtocol.RuleR\x05rules\x1aX\n\x0cKeyValuePair\x12-\n\x12metadata_names\
    pace\x18\x01\x20\x01(\tR\x11metadataNamespace\x12\x19\n\x03key\x18\x02\
    \x20\x01(\tR\x03keyB\x07\xfaB\x04r\x02\x10\x01\x1a\xa2\x01\n\x04Rule\x12\
    #\n\x08tlv_type\x18\x01\x20\x01(\rR\x07tlvTypeB\x08\xfaB\x05*\x03\x10\
    \x80\x02\x12u\n\x0eon_tlv_present\x18\x02\x20\x01(\x0b2O.envoy.extension\
    s.filters.listener.proxy_protocol.v3.ProxyProtocol.KeyValuePairR\x0conTl\
    vPresent:C\x9a\xc5\x88\x1e>\n<envoy.config.filter.listener.proxy_protoco\
    l.v2.ProxyProtocolBa\nAio.envoyproxy.envoy.extensions.filters.listener.p\
    roxy_protocol.v3B\x12ProxyProtocolProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\
    \x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
