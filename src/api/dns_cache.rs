// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/extensions/common/dynamic_forward_proxy/v3/dns_cache.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct DnsCacheCircuitBreakers {
    // message fields
    pub max_pending_requests: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DnsCacheCircuitBreakers {
    fn default() -> &'a DnsCacheCircuitBreakers {
        <DnsCacheCircuitBreakers as ::protobuf::Message>::default_instance()
    }
}

impl DnsCacheCircuitBreakers {
    pub fn new() -> DnsCacheCircuitBreakers {
        ::std::default::Default::default()
    }

    // .google.protobuf.UInt32Value max_pending_requests = 1;


    pub fn get_max_pending_requests(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.max_pending_requests.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_max_pending_requests(&mut self) {
        self.max_pending_requests.clear();
    }

    pub fn has_max_pending_requests(&self) -> bool {
        self.max_pending_requests.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_pending_requests(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.max_pending_requests = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_pending_requests(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.max_pending_requests.is_none() {
            self.max_pending_requests.set_default();
        }
        self.max_pending_requests.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_pending_requests(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.max_pending_requests.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }
}

impl ::protobuf::Message for DnsCacheCircuitBreakers {
    fn is_initialized(&self) -> bool {
        for v in &self.max_pending_requests {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_pending_requests)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.max_pending_requests.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.max_pending_requests.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DnsCacheCircuitBreakers {
        DnsCacheCircuitBreakers::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "max_pending_requests",
                |m: &DnsCacheCircuitBreakers| { &m.max_pending_requests },
                |m: &mut DnsCacheCircuitBreakers| { &mut m.max_pending_requests },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DnsCacheCircuitBreakers>(
                "DnsCacheCircuitBreakers",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DnsCacheCircuitBreakers {
        static instance: ::protobuf::rt::LazyV2<DnsCacheCircuitBreakers> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DnsCacheCircuitBreakers::new)
    }
}

impl ::protobuf::Clear for DnsCacheCircuitBreakers {
    fn clear(&mut self) {
        self.max_pending_requests.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DnsCacheCircuitBreakers {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DnsCacheCircuitBreakers {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DnsCacheConfig {
    // message fields
    pub name: ::std::string::String,
    pub dns_lookup_family: super::cluster::Cluster_DnsLookupFamily,
    pub dns_refresh_rate: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub host_ttl: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub max_hosts: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub dns_failure_refresh_rate: ::protobuf::SingularPtrField<super::cluster::Cluster_RefreshRate>,
    pub dns_cache_circuit_breaker: ::protobuf::SingularPtrField<DnsCacheCircuitBreakers>,
    pub use_tcp_for_dns_lookups: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DnsCacheConfig {
    fn default() -> &'a DnsCacheConfig {
        <DnsCacheConfig as ::protobuf::Message>::default_instance()
    }
}

impl DnsCacheConfig {
    pub fn new() -> DnsCacheConfig {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .envoy.config.cluster.v3.Cluster.DnsLookupFamily dns_lookup_family = 2;


    pub fn get_dns_lookup_family(&self) -> super::cluster::Cluster_DnsLookupFamily {
        self.dns_lookup_family
    }
    pub fn clear_dns_lookup_family(&mut self) {
        self.dns_lookup_family = super::cluster::Cluster_DnsLookupFamily::AUTO;
    }

    // Param is passed by value, moved
    pub fn set_dns_lookup_family(&mut self, v: super::cluster::Cluster_DnsLookupFamily) {
        self.dns_lookup_family = v;
    }

    // .google.protobuf.Duration dns_refresh_rate = 3;


    pub fn get_dns_refresh_rate(&self) -> &::protobuf::well_known_types::Duration {
        self.dns_refresh_rate.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_dns_refresh_rate(&mut self) {
        self.dns_refresh_rate.clear();
    }

    pub fn has_dns_refresh_rate(&self) -> bool {
        self.dns_refresh_rate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dns_refresh_rate(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.dns_refresh_rate = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dns_refresh_rate(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.dns_refresh_rate.is_none() {
            self.dns_refresh_rate.set_default();
        }
        self.dns_refresh_rate.as_mut().unwrap()
    }

    // Take field
    pub fn take_dns_refresh_rate(&mut self) -> ::protobuf::well_known_types::Duration {
        self.dns_refresh_rate.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.Duration host_ttl = 4;


    pub fn get_host_ttl(&self) -> &::protobuf::well_known_types::Duration {
        self.host_ttl.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_host_ttl(&mut self) {
        self.host_ttl.clear();
    }

    pub fn has_host_ttl(&self) -> bool {
        self.host_ttl.is_some()
    }

    // Param is passed by value, moved
    pub fn set_host_ttl(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.host_ttl = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host_ttl(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.host_ttl.is_none() {
            self.host_ttl.set_default();
        }
        self.host_ttl.as_mut().unwrap()
    }

    // Take field
    pub fn take_host_ttl(&mut self) -> ::protobuf::well_known_types::Duration {
        self.host_ttl.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.UInt32Value max_hosts = 5;


    pub fn get_max_hosts(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.max_hosts.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_max_hosts(&mut self) {
        self.max_hosts.clear();
    }

    pub fn has_max_hosts(&self) -> bool {
        self.max_hosts.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_hosts(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.max_hosts = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_hosts(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.max_hosts.is_none() {
            self.max_hosts.set_default();
        }
        self.max_hosts.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_hosts(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.max_hosts.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .envoy.config.cluster.v3.Cluster.RefreshRate dns_failure_refresh_rate = 6;


    pub fn get_dns_failure_refresh_rate(&self) -> &super::cluster::Cluster_RefreshRate {
        self.dns_failure_refresh_rate.as_ref().unwrap_or_else(|| <super::cluster::Cluster_RefreshRate as ::protobuf::Message>::default_instance())
    }
    pub fn clear_dns_failure_refresh_rate(&mut self) {
        self.dns_failure_refresh_rate.clear();
    }

    pub fn has_dns_failure_refresh_rate(&self) -> bool {
        self.dns_failure_refresh_rate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dns_failure_refresh_rate(&mut self, v: super::cluster::Cluster_RefreshRate) {
        self.dns_failure_refresh_rate = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dns_failure_refresh_rate(&mut self) -> &mut super::cluster::Cluster_RefreshRate {
        if self.dns_failure_refresh_rate.is_none() {
            self.dns_failure_refresh_rate.set_default();
        }
        self.dns_failure_refresh_rate.as_mut().unwrap()
    }

    // Take field
    pub fn take_dns_failure_refresh_rate(&mut self) -> super::cluster::Cluster_RefreshRate {
        self.dns_failure_refresh_rate.take().unwrap_or_else(|| super::cluster::Cluster_RefreshRate::new())
    }

    // .envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCircuitBreakers dns_cache_circuit_breaker = 7;


    pub fn get_dns_cache_circuit_breaker(&self) -> &DnsCacheCircuitBreakers {
        self.dns_cache_circuit_breaker.as_ref().unwrap_or_else(|| <DnsCacheCircuitBreakers as ::protobuf::Message>::default_instance())
    }
    pub fn clear_dns_cache_circuit_breaker(&mut self) {
        self.dns_cache_circuit_breaker.clear();
    }

    pub fn has_dns_cache_circuit_breaker(&self) -> bool {
        self.dns_cache_circuit_breaker.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dns_cache_circuit_breaker(&mut self, v: DnsCacheCircuitBreakers) {
        self.dns_cache_circuit_breaker = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dns_cache_circuit_breaker(&mut self) -> &mut DnsCacheCircuitBreakers {
        if self.dns_cache_circuit_breaker.is_none() {
            self.dns_cache_circuit_breaker.set_default();
        }
        self.dns_cache_circuit_breaker.as_mut().unwrap()
    }

    // Take field
    pub fn take_dns_cache_circuit_breaker(&mut self) -> DnsCacheCircuitBreakers {
        self.dns_cache_circuit_breaker.take().unwrap_or_else(|| DnsCacheCircuitBreakers::new())
    }

    // bool use_tcp_for_dns_lookups = 8;


    pub fn get_use_tcp_for_dns_lookups(&self) -> bool {
        self.use_tcp_for_dns_lookups
    }
    pub fn clear_use_tcp_for_dns_lookups(&mut self) {
        self.use_tcp_for_dns_lookups = false;
    }

    // Param is passed by value, moved
    pub fn set_use_tcp_for_dns_lookups(&mut self, v: bool) {
        self.use_tcp_for_dns_lookups = v;
    }
}

impl ::protobuf::Message for DnsCacheConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.dns_refresh_rate {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.host_ttl {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.max_hosts {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.dns_failure_refresh_rate {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.dns_cache_circuit_breaker {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.dns_lookup_family, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.dns_refresh_rate)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.host_ttl)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_hosts)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.dns_failure_refresh_rate)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.dns_cache_circuit_breaker)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.use_tcp_for_dns_lookups = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.dns_lookup_family != super::cluster::Cluster_DnsLookupFamily::AUTO {
            my_size += ::protobuf::rt::enum_size(2, self.dns_lookup_family);
        }
        if let Some(ref v) = self.dns_refresh_rate.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.host_ttl.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.max_hosts.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.dns_failure_refresh_rate.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.dns_cache_circuit_breaker.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.use_tcp_for_dns_lookups != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.dns_lookup_family != super::cluster::Cluster_DnsLookupFamily::AUTO {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.dns_lookup_family))?;
        }
        if let Some(ref v) = self.dns_refresh_rate.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.host_ttl.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.max_hosts.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.dns_failure_refresh_rate.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.dns_cache_circuit_breaker.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.use_tcp_for_dns_lookups != false {
            os.write_bool(8, self.use_tcp_for_dns_lookups)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DnsCacheConfig {
        DnsCacheConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &DnsCacheConfig| { &m.name },
                |m: &mut DnsCacheConfig| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::cluster::Cluster_DnsLookupFamily>>(
                "dns_lookup_family",
                |m: &DnsCacheConfig| { &m.dns_lookup_family },
                |m: &mut DnsCacheConfig| { &mut m.dns_lookup_family },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "dns_refresh_rate",
                |m: &DnsCacheConfig| { &m.dns_refresh_rate },
                |m: &mut DnsCacheConfig| { &mut m.dns_refresh_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "host_ttl",
                |m: &DnsCacheConfig| { &m.host_ttl },
                |m: &mut DnsCacheConfig| { &mut m.host_ttl },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "max_hosts",
                |m: &DnsCacheConfig| { &m.max_hosts },
                |m: &mut DnsCacheConfig| { &mut m.max_hosts },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::cluster::Cluster_RefreshRate>>(
                "dns_failure_refresh_rate",
                |m: &DnsCacheConfig| { &m.dns_failure_refresh_rate },
                |m: &mut DnsCacheConfig| { &mut m.dns_failure_refresh_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DnsCacheCircuitBreakers>>(
                "dns_cache_circuit_breaker",
                |m: &DnsCacheConfig| { &m.dns_cache_circuit_breaker },
                |m: &mut DnsCacheConfig| { &mut m.dns_cache_circuit_breaker },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "use_tcp_for_dns_lookups",
                |m: &DnsCacheConfig| { &m.use_tcp_for_dns_lookups },
                |m: &mut DnsCacheConfig| { &mut m.use_tcp_for_dns_lookups },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DnsCacheConfig>(
                "DnsCacheConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DnsCacheConfig {
        static instance: ::protobuf::rt::LazyV2<DnsCacheConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DnsCacheConfig::new)
    }
}

impl ::protobuf::Clear for DnsCacheConfig {
    fn clear(&mut self) {
        self.name.clear();
        self.dns_lookup_family = super::cluster::Cluster_DnsLookupFamily::AUTO;
        self.dns_refresh_rate.clear();
        self.host_ttl.clear();
        self.max_hosts.clear();
        self.dns_failure_refresh_rate.clear();
        self.dns_cache_circuit_breaker.clear();
        self.use_tcp_for_dns_lookups = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DnsCacheConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DnsCacheConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n@envoy/extensions/common/dynamic_forward_proxy/v3/dns_cache.proto\x120\
    envoy.extensions.common.dynamic_forward_proxy.v3\x1a%envoy/config/cluste\
    r/v3/cluster.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1egoogle/p\
    rotobuf/wrappers.proto\x1a\x1dudpa/annotations/status.proto\x1a!udpa/ann\
    otations/versioning.proto\x1a\x17validate/validate.proto\"i\n\x17DnsCach\
    eCircuitBreakers\x12N\n\x14max_pending_requests\x18\x01\x20\x01(\x0b2\
    \x1c.google.protobuf.UInt32ValueR\x12maxPendingRequests\"\xd9\x05\n\x0eD\
    nsCacheConfig\x12\x1b\n\x04name\x18\x01\x20\x01(\tR\x04nameB\x07\xfaB\
    \x04r\x02\x10\x01\x12f\n\x11dns_lookup_family\x18\x02\x20\x01(\x0e20.env\
    oy.config.cluster.v3.Cluster.DnsLookupFamilyR\x0fdnsLookupFamilyB\x08\
    \xfaB\x05\x82\x01\x02\x10\x01\x12Q\n\x10dns_refresh_rate\x18\x03\x20\x01\
    (\x0b2\x19.google.protobuf.DurationR\x0ednsRefreshRateB\x0c\xfaB\t\xaa\
    \x01\x062\x04\x10\xc0\x84=\x12>\n\x08host_ttl\x18\x04\x20\x01(\x0b2\x19.\
    google.protobuf.DurationR\x07hostTtlB\x08\xfaB\x05\xaa\x01\x02*\0\x12B\n\
    \tmax_hosts\x18\x05\x20\x01(\x0b2\x1c.google.protobuf.UInt32ValueR\x08ma\
    xHostsB\x07\xfaB\x04*\x02\x20\0\x12e\n\x18dns_failure_refresh_rate\x18\
    \x06\x20\x01(\x0b2,.envoy.config.cluster.v3.Cluster.RefreshRateR\x15dnsF\
    ailureRefreshRate\x12\x84\x01\n\x19dns_cache_circuit_breaker\x18\x07\x20\
    \x01(\x0b2I.envoy.extensions.common.dynamic_forward_proxy.v3.DnsCacheCir\
    cuitBreakersR\x16dnsCacheCircuitBreaker\x124\n\x17use_tcp_for_dns_lookup\
    s\x18\x08\x20\x01(\x08R\x13useTcpForDnsLookups:G\x9a\xc5\x88\x1eB\n@envo\
    y.config.common.dynamic_forward_proxy.v2alpha.DnsCacheConfigBY\n>io.envo\
    yproxy.envoy.extensions.common.dynamic_forward_proxy.v3B\rDnsCacheProtoP\
    \x01\xba\x80\xc8\xd1\x06\x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
