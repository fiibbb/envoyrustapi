// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/extensions/filters/http/fault/v4alpha/fault.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct FaultAbort {
    // message fields
    pub percentage: ::protobuf::SingularPtrField<super::percent::FractionalPercent>,
    // message oneof groups
    pub error_type: ::std::option::Option<FaultAbort_oneof_error_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FaultAbort {
    fn default() -> &'a FaultAbort {
        <FaultAbort as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum FaultAbort_oneof_error_type {
    http_status(u32),
    grpc_status(u32),
    header_abort(FaultAbort_HeaderAbort),
}

impl FaultAbort {
    pub fn new() -> FaultAbort {
        ::std::default::Default::default()
    }

    // uint32 http_status = 2;


    pub fn get_http_status(&self) -> u32 {
        match self.error_type {
            ::std::option::Option::Some(FaultAbort_oneof_error_type::http_status(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_http_status(&mut self) {
        self.error_type = ::std::option::Option::None;
    }

    pub fn has_http_status(&self) -> bool {
        match self.error_type {
            ::std::option::Option::Some(FaultAbort_oneof_error_type::http_status(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_http_status(&mut self, v: u32) {
        self.error_type = ::std::option::Option::Some(FaultAbort_oneof_error_type::http_status(v))
    }

    // uint32 grpc_status = 5;


    pub fn get_grpc_status(&self) -> u32 {
        match self.error_type {
            ::std::option::Option::Some(FaultAbort_oneof_error_type::grpc_status(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_grpc_status(&mut self) {
        self.error_type = ::std::option::Option::None;
    }

    pub fn has_grpc_status(&self) -> bool {
        match self.error_type {
            ::std::option::Option::Some(FaultAbort_oneof_error_type::grpc_status(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_grpc_status(&mut self, v: u32) {
        self.error_type = ::std::option::Option::Some(FaultAbort_oneof_error_type::grpc_status(v))
    }

    // .envoy.extensions.filters.http.fault.v4alpha.FaultAbort.HeaderAbort header_abort = 4;


    pub fn get_header_abort(&self) -> &FaultAbort_HeaderAbort {
        match self.error_type {
            ::std::option::Option::Some(FaultAbort_oneof_error_type::header_abort(ref v)) => v,
            _ => <FaultAbort_HeaderAbort as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_header_abort(&mut self) {
        self.error_type = ::std::option::Option::None;
    }

    pub fn has_header_abort(&self) -> bool {
        match self.error_type {
            ::std::option::Option::Some(FaultAbort_oneof_error_type::header_abort(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_header_abort(&mut self, v: FaultAbort_HeaderAbort) {
        self.error_type = ::std::option::Option::Some(FaultAbort_oneof_error_type::header_abort(v))
    }

    // Mutable pointer to the field.
    pub fn mut_header_abort(&mut self) -> &mut FaultAbort_HeaderAbort {
        if let ::std::option::Option::Some(FaultAbort_oneof_error_type::header_abort(_)) = self.error_type {
        } else {
            self.error_type = ::std::option::Option::Some(FaultAbort_oneof_error_type::header_abort(FaultAbort_HeaderAbort::new()));
        }
        match self.error_type {
            ::std::option::Option::Some(FaultAbort_oneof_error_type::header_abort(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_header_abort(&mut self) -> FaultAbort_HeaderAbort {
        if self.has_header_abort() {
            match self.error_type.take() {
                ::std::option::Option::Some(FaultAbort_oneof_error_type::header_abort(v)) => v,
                _ => panic!(),
            }
        } else {
            FaultAbort_HeaderAbort::new()
        }
    }

    // .envoy.type.v3.FractionalPercent percentage = 3;


    pub fn get_percentage(&self) -> &super::percent::FractionalPercent {
        self.percentage.as_ref().unwrap_or_else(|| <super::percent::FractionalPercent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_percentage(&mut self) {
        self.percentage.clear();
    }

    pub fn has_percentage(&self) -> bool {
        self.percentage.is_some()
    }

    // Param is passed by value, moved
    pub fn set_percentage(&mut self, v: super::percent::FractionalPercent) {
        self.percentage = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_percentage(&mut self) -> &mut super::percent::FractionalPercent {
        if self.percentage.is_none() {
            self.percentage.set_default();
        }
        self.percentage.as_mut().unwrap()
    }

    // Take field
    pub fn take_percentage(&mut self) -> super::percent::FractionalPercent {
        self.percentage.take().unwrap_or_else(|| super::percent::FractionalPercent::new())
    }
}

impl ::protobuf::Message for FaultAbort {
    fn is_initialized(&self) -> bool {
        if let Some(FaultAbort_oneof_error_type::header_abort(ref v)) = self.error_type {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.percentage {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.error_type = ::std::option::Option::Some(FaultAbort_oneof_error_type::http_status(is.read_uint32()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.error_type = ::std::option::Option::Some(FaultAbort_oneof_error_type::grpc_status(is.read_uint32()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.error_type = ::std::option::Option::Some(FaultAbort_oneof_error_type::header_abort(is.read_message()?));
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.percentage)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.percentage.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.error_type {
            match v {
                &FaultAbort_oneof_error_type::http_status(v) => {
                    my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &FaultAbort_oneof_error_type::grpc_status(v) => {
                    my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &FaultAbort_oneof_error_type::header_abort(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.percentage.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.error_type {
            match v {
                &FaultAbort_oneof_error_type::http_status(v) => {
                    os.write_uint32(2, v)?;
                },
                &FaultAbort_oneof_error_type::grpc_status(v) => {
                    os.write_uint32(5, v)?;
                },
                &FaultAbort_oneof_error_type::header_abort(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FaultAbort {
        FaultAbort::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor::<_>(
                "http_status",
                FaultAbort::has_http_status,
                FaultAbort::get_http_status,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor::<_>(
                "grpc_status",
                FaultAbort::has_grpc_status,
                FaultAbort::get_grpc_status,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, FaultAbort_HeaderAbort>(
                "header_abort",
                FaultAbort::has_header_abort,
                FaultAbort::get_header_abort,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::percent::FractionalPercent>>(
                "percentage",
                |m: &FaultAbort| { &m.percentage },
                |m: &mut FaultAbort| { &mut m.percentage },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FaultAbort>(
                "FaultAbort",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FaultAbort {
        static instance: ::protobuf::rt::LazyV2<FaultAbort> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FaultAbort::new)
    }
}

impl ::protobuf::Clear for FaultAbort {
    fn clear(&mut self) {
        self.error_type = ::std::option::Option::None;
        self.error_type = ::std::option::Option::None;
        self.error_type = ::std::option::Option::None;
        self.percentage.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FaultAbort {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FaultAbort {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FaultAbort_HeaderAbort {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FaultAbort_HeaderAbort {
    fn default() -> &'a FaultAbort_HeaderAbort {
        <FaultAbort_HeaderAbort as ::protobuf::Message>::default_instance()
    }
}

impl FaultAbort_HeaderAbort {
    pub fn new() -> FaultAbort_HeaderAbort {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for FaultAbort_HeaderAbort {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FaultAbort_HeaderAbort {
        FaultAbort_HeaderAbort::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FaultAbort_HeaderAbort>(
                "FaultAbort.HeaderAbort",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FaultAbort_HeaderAbort {
        static instance: ::protobuf::rt::LazyV2<FaultAbort_HeaderAbort> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FaultAbort_HeaderAbort::new)
    }
}

impl ::protobuf::Clear for FaultAbort_HeaderAbort {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FaultAbort_HeaderAbort {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FaultAbort_HeaderAbort {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HTTPFault {
    // message fields
    pub delay: ::protobuf::SingularPtrField<super::fault::FaultDelay>,
    pub abort: ::protobuf::SingularPtrField<FaultAbort>,
    pub upstream_cluster: ::std::string::String,
    pub headers: ::protobuf::RepeatedField<super::route_components::HeaderMatcher>,
    pub downstream_nodes: ::protobuf::RepeatedField<::std::string::String>,
    pub max_active_faults: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub response_rate_limit: ::protobuf::SingularPtrField<super::fault::FaultRateLimit>,
    pub delay_percent_runtime: ::std::string::String,
    pub abort_percent_runtime: ::std::string::String,
    pub delay_duration_runtime: ::std::string::String,
    pub abort_http_status_runtime: ::std::string::String,
    pub max_active_faults_runtime: ::std::string::String,
    pub response_rate_limit_percent_runtime: ::std::string::String,
    pub abort_grpc_status_runtime: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HTTPFault {
    fn default() -> &'a HTTPFault {
        <HTTPFault as ::protobuf::Message>::default_instance()
    }
}

impl HTTPFault {
    pub fn new() -> HTTPFault {
        ::std::default::Default::default()
    }

    // .envoy.extensions.filters.common.fault.v3.FaultDelay delay = 1;


    pub fn get_delay(&self) -> &super::fault::FaultDelay {
        self.delay.as_ref().unwrap_or_else(|| <super::fault::FaultDelay as ::protobuf::Message>::default_instance())
    }
    pub fn clear_delay(&mut self) {
        self.delay.clear();
    }

    pub fn has_delay(&self) -> bool {
        self.delay.is_some()
    }

    // Param is passed by value, moved
    pub fn set_delay(&mut self, v: super::fault::FaultDelay) {
        self.delay = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_delay(&mut self) -> &mut super::fault::FaultDelay {
        if self.delay.is_none() {
            self.delay.set_default();
        }
        self.delay.as_mut().unwrap()
    }

    // Take field
    pub fn take_delay(&mut self) -> super::fault::FaultDelay {
        self.delay.take().unwrap_or_else(|| super::fault::FaultDelay::new())
    }

    // .envoy.extensions.filters.http.fault.v4alpha.FaultAbort abort = 2;


    pub fn get_abort(&self) -> &FaultAbort {
        self.abort.as_ref().unwrap_or_else(|| <FaultAbort as ::protobuf::Message>::default_instance())
    }
    pub fn clear_abort(&mut self) {
        self.abort.clear();
    }

    pub fn has_abort(&self) -> bool {
        self.abort.is_some()
    }

    // Param is passed by value, moved
    pub fn set_abort(&mut self, v: FaultAbort) {
        self.abort = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_abort(&mut self) -> &mut FaultAbort {
        if self.abort.is_none() {
            self.abort.set_default();
        }
        self.abort.as_mut().unwrap()
    }

    // Take field
    pub fn take_abort(&mut self) -> FaultAbort {
        self.abort.take().unwrap_or_else(|| FaultAbort::new())
    }

    // string upstream_cluster = 3;


    pub fn get_upstream_cluster(&self) -> &str {
        &self.upstream_cluster
    }
    pub fn clear_upstream_cluster(&mut self) {
        self.upstream_cluster.clear();
    }

    // Param is passed by value, moved
    pub fn set_upstream_cluster(&mut self, v: ::std::string::String) {
        self.upstream_cluster = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_upstream_cluster(&mut self) -> &mut ::std::string::String {
        &mut self.upstream_cluster
    }

    // Take field
    pub fn take_upstream_cluster(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.upstream_cluster, ::std::string::String::new())
    }

    // repeated .envoy.config.route.v4alpha.HeaderMatcher headers = 4;


    pub fn get_headers(&self) -> &[super::route_components::HeaderMatcher] {
        &self.headers
    }
    pub fn clear_headers(&mut self) {
        self.headers.clear();
    }

    // Param is passed by value, moved
    pub fn set_headers(&mut self, v: ::protobuf::RepeatedField<super::route_components::HeaderMatcher>) {
        self.headers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_headers(&mut self) -> &mut ::protobuf::RepeatedField<super::route_components::HeaderMatcher> {
        &mut self.headers
    }

    // Take field
    pub fn take_headers(&mut self) -> ::protobuf::RepeatedField<super::route_components::HeaderMatcher> {
        ::std::mem::replace(&mut self.headers, ::protobuf::RepeatedField::new())
    }

    // repeated string downstream_nodes = 5;


    pub fn get_downstream_nodes(&self) -> &[::std::string::String] {
        &self.downstream_nodes
    }
    pub fn clear_downstream_nodes(&mut self) {
        self.downstream_nodes.clear();
    }

    // Param is passed by value, moved
    pub fn set_downstream_nodes(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.downstream_nodes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_downstream_nodes(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.downstream_nodes
    }

    // Take field
    pub fn take_downstream_nodes(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.downstream_nodes, ::protobuf::RepeatedField::new())
    }

    // .google.protobuf.UInt32Value max_active_faults = 6;


    pub fn get_max_active_faults(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.max_active_faults.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_max_active_faults(&mut self) {
        self.max_active_faults.clear();
    }

    pub fn has_max_active_faults(&self) -> bool {
        self.max_active_faults.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_active_faults(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.max_active_faults = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_active_faults(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.max_active_faults.is_none() {
            self.max_active_faults.set_default();
        }
        self.max_active_faults.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_active_faults(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.max_active_faults.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .envoy.extensions.filters.common.fault.v3.FaultRateLimit response_rate_limit = 7;


    pub fn get_response_rate_limit(&self) -> &super::fault::FaultRateLimit {
        self.response_rate_limit.as_ref().unwrap_or_else(|| <super::fault::FaultRateLimit as ::protobuf::Message>::default_instance())
    }
    pub fn clear_response_rate_limit(&mut self) {
        self.response_rate_limit.clear();
    }

    pub fn has_response_rate_limit(&self) -> bool {
        self.response_rate_limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response_rate_limit(&mut self, v: super::fault::FaultRateLimit) {
        self.response_rate_limit = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response_rate_limit(&mut self) -> &mut super::fault::FaultRateLimit {
        if self.response_rate_limit.is_none() {
            self.response_rate_limit.set_default();
        }
        self.response_rate_limit.as_mut().unwrap()
    }

    // Take field
    pub fn take_response_rate_limit(&mut self) -> super::fault::FaultRateLimit {
        self.response_rate_limit.take().unwrap_or_else(|| super::fault::FaultRateLimit::new())
    }

    // string delay_percent_runtime = 8;


    pub fn get_delay_percent_runtime(&self) -> &str {
        &self.delay_percent_runtime
    }
    pub fn clear_delay_percent_runtime(&mut self) {
        self.delay_percent_runtime.clear();
    }

    // Param is passed by value, moved
    pub fn set_delay_percent_runtime(&mut self, v: ::std::string::String) {
        self.delay_percent_runtime = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_delay_percent_runtime(&mut self) -> &mut ::std::string::String {
        &mut self.delay_percent_runtime
    }

    // Take field
    pub fn take_delay_percent_runtime(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.delay_percent_runtime, ::std::string::String::new())
    }

    // string abort_percent_runtime = 9;


    pub fn get_abort_percent_runtime(&self) -> &str {
        &self.abort_percent_runtime
    }
    pub fn clear_abort_percent_runtime(&mut self) {
        self.abort_percent_runtime.clear();
    }

    // Param is passed by value, moved
    pub fn set_abort_percent_runtime(&mut self, v: ::std::string::String) {
        self.abort_percent_runtime = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_abort_percent_runtime(&mut self) -> &mut ::std::string::String {
        &mut self.abort_percent_runtime
    }

    // Take field
    pub fn take_abort_percent_runtime(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.abort_percent_runtime, ::std::string::String::new())
    }

    // string delay_duration_runtime = 10;


    pub fn get_delay_duration_runtime(&self) -> &str {
        &self.delay_duration_runtime
    }
    pub fn clear_delay_duration_runtime(&mut self) {
        self.delay_duration_runtime.clear();
    }

    // Param is passed by value, moved
    pub fn set_delay_duration_runtime(&mut self, v: ::std::string::String) {
        self.delay_duration_runtime = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_delay_duration_runtime(&mut self) -> &mut ::std::string::String {
        &mut self.delay_duration_runtime
    }

    // Take field
    pub fn take_delay_duration_runtime(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.delay_duration_runtime, ::std::string::String::new())
    }

    // string abort_http_status_runtime = 11;


    pub fn get_abort_http_status_runtime(&self) -> &str {
        &self.abort_http_status_runtime
    }
    pub fn clear_abort_http_status_runtime(&mut self) {
        self.abort_http_status_runtime.clear();
    }

    // Param is passed by value, moved
    pub fn set_abort_http_status_runtime(&mut self, v: ::std::string::String) {
        self.abort_http_status_runtime = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_abort_http_status_runtime(&mut self) -> &mut ::std::string::String {
        &mut self.abort_http_status_runtime
    }

    // Take field
    pub fn take_abort_http_status_runtime(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.abort_http_status_runtime, ::std::string::String::new())
    }

    // string max_active_faults_runtime = 12;


    pub fn get_max_active_faults_runtime(&self) -> &str {
        &self.max_active_faults_runtime
    }
    pub fn clear_max_active_faults_runtime(&mut self) {
        self.max_active_faults_runtime.clear();
    }

    // Param is passed by value, moved
    pub fn set_max_active_faults_runtime(&mut self, v: ::std::string::String) {
        self.max_active_faults_runtime = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_active_faults_runtime(&mut self) -> &mut ::std::string::String {
        &mut self.max_active_faults_runtime
    }

    // Take field
    pub fn take_max_active_faults_runtime(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.max_active_faults_runtime, ::std::string::String::new())
    }

    // string response_rate_limit_percent_runtime = 13;


    pub fn get_response_rate_limit_percent_runtime(&self) -> &str {
        &self.response_rate_limit_percent_runtime
    }
    pub fn clear_response_rate_limit_percent_runtime(&mut self) {
        self.response_rate_limit_percent_runtime.clear();
    }

    // Param is passed by value, moved
    pub fn set_response_rate_limit_percent_runtime(&mut self, v: ::std::string::String) {
        self.response_rate_limit_percent_runtime = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response_rate_limit_percent_runtime(&mut self) -> &mut ::std::string::String {
        &mut self.response_rate_limit_percent_runtime
    }

    // Take field
    pub fn take_response_rate_limit_percent_runtime(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.response_rate_limit_percent_runtime, ::std::string::String::new())
    }

    // string abort_grpc_status_runtime = 14;


    pub fn get_abort_grpc_status_runtime(&self) -> &str {
        &self.abort_grpc_status_runtime
    }
    pub fn clear_abort_grpc_status_runtime(&mut self) {
        self.abort_grpc_status_runtime.clear();
    }

    // Param is passed by value, moved
    pub fn set_abort_grpc_status_runtime(&mut self, v: ::std::string::String) {
        self.abort_grpc_status_runtime = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_abort_grpc_status_runtime(&mut self) -> &mut ::std::string::String {
        &mut self.abort_grpc_status_runtime
    }

    // Take field
    pub fn take_abort_grpc_status_runtime(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.abort_grpc_status_runtime, ::std::string::String::new())
    }
}

impl ::protobuf::Message for HTTPFault {
    fn is_initialized(&self) -> bool {
        for v in &self.delay {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.abort {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.headers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.max_active_faults {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.response_rate_limit {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.delay)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.abort)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.upstream_cluster)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.headers)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.downstream_nodes)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_active_faults)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response_rate_limit)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.delay_percent_runtime)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.abort_percent_runtime)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.delay_duration_runtime)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.abort_http_status_runtime)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.max_active_faults_runtime)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.response_rate_limit_percent_runtime)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.abort_grpc_status_runtime)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.delay.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.abort.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.upstream_cluster.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.upstream_cluster);
        }
        for value in &self.headers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.downstream_nodes {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        if let Some(ref v) = self.max_active_faults.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.response_rate_limit.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.delay_percent_runtime.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.delay_percent_runtime);
        }
        if !self.abort_percent_runtime.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.abort_percent_runtime);
        }
        if !self.delay_duration_runtime.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.delay_duration_runtime);
        }
        if !self.abort_http_status_runtime.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.abort_http_status_runtime);
        }
        if !self.max_active_faults_runtime.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.max_active_faults_runtime);
        }
        if !self.response_rate_limit_percent_runtime.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.response_rate_limit_percent_runtime);
        }
        if !self.abort_grpc_status_runtime.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.abort_grpc_status_runtime);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.delay.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.abort.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.upstream_cluster.is_empty() {
            os.write_string(3, &self.upstream_cluster)?;
        }
        for v in &self.headers {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.downstream_nodes {
            os.write_string(5, &v)?;
        };
        if let Some(ref v) = self.max_active_faults.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.response_rate_limit.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.delay_percent_runtime.is_empty() {
            os.write_string(8, &self.delay_percent_runtime)?;
        }
        if !self.abort_percent_runtime.is_empty() {
            os.write_string(9, &self.abort_percent_runtime)?;
        }
        if !self.delay_duration_runtime.is_empty() {
            os.write_string(10, &self.delay_duration_runtime)?;
        }
        if !self.abort_http_status_runtime.is_empty() {
            os.write_string(11, &self.abort_http_status_runtime)?;
        }
        if !self.max_active_faults_runtime.is_empty() {
            os.write_string(12, &self.max_active_faults_runtime)?;
        }
        if !self.response_rate_limit_percent_runtime.is_empty() {
            os.write_string(13, &self.response_rate_limit_percent_runtime)?;
        }
        if !self.abort_grpc_status_runtime.is_empty() {
            os.write_string(14, &self.abort_grpc_status_runtime)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HTTPFault {
        HTTPFault::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::fault::FaultDelay>>(
                "delay",
                |m: &HTTPFault| { &m.delay },
                |m: &mut HTTPFault| { &mut m.delay },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FaultAbort>>(
                "abort",
                |m: &HTTPFault| { &m.abort },
                |m: &mut HTTPFault| { &mut m.abort },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "upstream_cluster",
                |m: &HTTPFault| { &m.upstream_cluster },
                |m: &mut HTTPFault| { &mut m.upstream_cluster },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::route_components::HeaderMatcher>>(
                "headers",
                |m: &HTTPFault| { &m.headers },
                |m: &mut HTTPFault| { &mut m.headers },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "downstream_nodes",
                |m: &HTTPFault| { &m.downstream_nodes },
                |m: &mut HTTPFault| { &mut m.downstream_nodes },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "max_active_faults",
                |m: &HTTPFault| { &m.max_active_faults },
                |m: &mut HTTPFault| { &mut m.max_active_faults },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::fault::FaultRateLimit>>(
                "response_rate_limit",
                |m: &HTTPFault| { &m.response_rate_limit },
                |m: &mut HTTPFault| { &mut m.response_rate_limit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "delay_percent_runtime",
                |m: &HTTPFault| { &m.delay_percent_runtime },
                |m: &mut HTTPFault| { &mut m.delay_percent_runtime },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "abort_percent_runtime",
                |m: &HTTPFault| { &m.abort_percent_runtime },
                |m: &mut HTTPFault| { &mut m.abort_percent_runtime },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "delay_duration_runtime",
                |m: &HTTPFault| { &m.delay_duration_runtime },
                |m: &mut HTTPFault| { &mut m.delay_duration_runtime },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "abort_http_status_runtime",
                |m: &HTTPFault| { &m.abort_http_status_runtime },
                |m: &mut HTTPFault| { &mut m.abort_http_status_runtime },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "max_active_faults_runtime",
                |m: &HTTPFault| { &m.max_active_faults_runtime },
                |m: &mut HTTPFault| { &mut m.max_active_faults_runtime },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "response_rate_limit_percent_runtime",
                |m: &HTTPFault| { &m.response_rate_limit_percent_runtime },
                |m: &mut HTTPFault| { &mut m.response_rate_limit_percent_runtime },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "abort_grpc_status_runtime",
                |m: &HTTPFault| { &m.abort_grpc_status_runtime },
                |m: &mut HTTPFault| { &mut m.abort_grpc_status_runtime },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HTTPFault>(
                "HTTPFault",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HTTPFault {
        static instance: ::protobuf::rt::LazyV2<HTTPFault> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HTTPFault::new)
    }
}

impl ::protobuf::Clear for HTTPFault {
    fn clear(&mut self) {
        self.delay.clear();
        self.abort.clear();
        self.upstream_cluster.clear();
        self.headers.clear();
        self.downstream_nodes.clear();
        self.max_active_faults.clear();
        self.response_rate_limit.clear();
        self.delay_percent_runtime.clear();
        self.abort_percent_runtime.clear();
        self.delay_duration_runtime.clear();
        self.abort_http_status_runtime.clear();
        self.max_active_faults_runtime.clear();
        self.response_rate_limit_percent_runtime.clear();
        self.abort_grpc_status_runtime.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HTTPFault {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HTTPFault {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n7envoy/extensions/filters/http/fault/v4alpha/fault.proto\x12+envoy.ext\
    ensions.filters.http.fault.v4alpha\x1a1envoy/config/route/v4alpha/route_\
    components.proto\x1a4envoy/extensions/filters/common/fault/v3/fault.prot\
    o\x1a\x1benvoy/type/v3/percent.proto\x1a\x1egoogle/protobuf/wrappers.pro\
    to\x1a\x1dudpa/annotations/status.proto\x1a!udpa/annotations/versioning.\
    proto\x1a\x17validate/validate.proto\"\xb3\x03\n\nFaultAbort\x12.\n\x0bh\
    ttp_status\x18\x02\x20\x01(\rH\0R\nhttpStatusB\x0b\xfaB\x08*\x06\x10\xd8\
    \x04(\xc8\x01\x12!\n\x0bgrpc_status\x18\x05\x20\x01(\rH\0R\ngrpcStatus\
    \x12h\n\x0cheader_abort\x18\x04\x20\x01(\x0b2C.envoy.extensions.filters.\
    http.fault.v4alpha.FaultAbort.HeaderAbortH\0R\x0bheaderAbort\x12@\n\nper\
    centage\x18\x03\x20\x01(\x0b2\x20.envoy.type.v3.FractionalPercentR\nperc\
    entage\x1aS\n\x0bHeaderAbort:D\x9a\xc5\x88\x1e?\n=envoy.extensions.filte\
    rs.http.fault.v3.FaultAbort.HeaderAbortB\x11\n\nerror_type\x12\x03\xf8B\
    \x01:8\x9a\xc5\x88\x1e3\n1envoy.extensions.filters.http.fault.v3.FaultAb\
    ortJ\x04\x08\x01\x10\x02\"\xcb\x07\n\tHTTPFault\x12J\n\x05delay\x18\x01\
    \x20\x01(\x0b24.envoy.extensions.filters.common.fault.v3.FaultDelayR\x05\
    delay\x12M\n\x05abort\x18\x02\x20\x01(\x0b27.envoy.extensions.filters.ht\
    tp.fault.v4alpha.FaultAbortR\x05abort\x12)\n\x10upstream_cluster\x18\x03\
    \x20\x01(\tR\x0fupstreamCluster\x12C\n\x07headers\x18\x04\x20\x03(\x0b2)\
    .envoy.config.route.v4alpha.HeaderMatcherR\x07headers\x12)\n\x10downstre\
    am_nodes\x18\x05\x20\x03(\tR\x0fdownstreamNodes\x12H\n\x11max_active_fau\
    lts\x18\x06\x20\x01(\x0b2\x1c.google.protobuf.UInt32ValueR\x0fmaxActiveF\
    aults\x12h\n\x13response_rate_limit\x18\x07\x20\x01(\x0b28.envoy.extensi\
    ons.filters.common.fault.v3.FaultRateLimitR\x11responseRateLimit\x122\n\
    \x15delay_percent_runtime\x18\x08\x20\x01(\tR\x13delayPercentRuntime\x12\
    2\n\x15abort_percent_runtime\x18\t\x20\x01(\tR\x13abortPercentRuntime\
    \x124\n\x16delay_duration_runtime\x18\n\x20\x01(\tR\x14delayDurationRunt\
    ime\x129\n\x19abort_http_status_runtime\x18\x0b\x20\x01(\tR\x16abortHttp\
    StatusRuntime\x129\n\x19max_active_faults_runtime\x18\x0c\x20\x01(\tR\
    \x16maxActiveFaultsRuntime\x12L\n#response_rate_limit_percent_runtime\
    \x18\r\x20\x01(\tR\x1fresponseRateLimitPercentRuntime\x129\n\x19abort_gr\
    pc_status_runtime\x18\x0e\x20\x01(\tR\x16abortGrpcStatusRuntime:7\x9a\
    \xc5\x88\x1e2\n0envoy.extensions.filters.http.fault.v3.HTTPFaultBQ\n9io.\
    envoyproxy.envoy.extensions.filters.http.fault.v4alphaB\nFaultProtoP\x01\
    \xba\x80\xc8\xd1\x06\x02\x10\x03b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
