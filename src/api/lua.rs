// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/extensions/filters/http/lua/v3/lua.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct Lua {
    // message fields
    pub inline_code: ::std::string::String,
    pub source_codes: ::std::collections::HashMap<::std::string::String, super::base::DataSource>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Lua {
    fn default() -> &'a Lua {
        <Lua as ::protobuf::Message>::default_instance()
    }
}

impl Lua {
    pub fn new() -> Lua {
        ::std::default::Default::default()
    }

    // string inline_code = 1;


    pub fn get_inline_code(&self) -> &str {
        &self.inline_code
    }
    pub fn clear_inline_code(&mut self) {
        self.inline_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_inline_code(&mut self, v: ::std::string::String) {
        self.inline_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_inline_code(&mut self) -> &mut ::std::string::String {
        &mut self.inline_code
    }

    // Take field
    pub fn take_inline_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.inline_code, ::std::string::String::new())
    }

    // repeated .envoy.extensions.filters.http.lua.v3.Lua.SourceCodesEntry source_codes = 2;


    pub fn get_source_codes(&self) -> &::std::collections::HashMap<::std::string::String, super::base::DataSource> {
        &self.source_codes
    }
    pub fn clear_source_codes(&mut self) {
        self.source_codes.clear();
    }

    // Param is passed by value, moved
    pub fn set_source_codes(&mut self, v: ::std::collections::HashMap<::std::string::String, super::base::DataSource>) {
        self.source_codes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_source_codes(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, super::base::DataSource> {
        &mut self.source_codes
    }

    // Take field
    pub fn take_source_codes(&mut self) -> ::std::collections::HashMap<::std::string::String, super::base::DataSource> {
        ::std::mem::replace(&mut self.source_codes, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for Lua {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.inline_code)?;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::base::DataSource>>(wire_type, is, &mut self.source_codes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.inline_code.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.inline_code);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::base::DataSource>>(2, &self.source_codes);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.inline_code.is_empty() {
            os.write_string(1, &self.inline_code)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::base::DataSource>>(2, &self.source_codes, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Lua {
        Lua::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "inline_code",
                |m: &Lua| { &m.inline_code },
                |m: &mut Lua| { &mut m.inline_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::base::DataSource>>(
                "source_codes",
                |m: &Lua| { &m.source_codes },
                |m: &mut Lua| { &mut m.source_codes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Lua>(
                "Lua",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Lua {
        static instance: ::protobuf::rt::LazyV2<Lua> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Lua::new)
    }
}

impl ::protobuf::Clear for Lua {
    fn clear(&mut self) {
        self.inline_code.clear();
        self.source_codes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Lua {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Lua {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LuaPerRoute {
    // message oneof groups
    pub field_override: ::std::option::Option<LuaPerRoute_oneof_override>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LuaPerRoute {
    fn default() -> &'a LuaPerRoute {
        <LuaPerRoute as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum LuaPerRoute_oneof_override {
    disabled(bool),
    name(::std::string::String),
    source_code(super::base::DataSource),
}

impl LuaPerRoute {
    pub fn new() -> LuaPerRoute {
        ::std::default::Default::default()
    }

    // bool disabled = 1;


    pub fn get_disabled(&self) -> bool {
        match self.field_override {
            ::std::option::Option::Some(LuaPerRoute_oneof_override::disabled(v)) => v,
            _ => false,
        }
    }
    pub fn clear_disabled(&mut self) {
        self.field_override = ::std::option::Option::None;
    }

    pub fn has_disabled(&self) -> bool {
        match self.field_override {
            ::std::option::Option::Some(LuaPerRoute_oneof_override::disabled(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_disabled(&mut self, v: bool) {
        self.field_override = ::std::option::Option::Some(LuaPerRoute_oneof_override::disabled(v))
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        match self.field_override {
            ::std::option::Option::Some(LuaPerRoute_oneof_override::name(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_name(&mut self) {
        self.field_override = ::std::option::Option::None;
    }

    pub fn has_name(&self) -> bool {
        match self.field_override {
            ::std::option::Option::Some(LuaPerRoute_oneof_override::name(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.field_override = ::std::option::Option::Some(LuaPerRoute_oneof_override::name(v))
    }

    // Mutable pointer to the field.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(LuaPerRoute_oneof_override::name(_)) = self.field_override {
        } else {
            self.field_override = ::std::option::Option::Some(LuaPerRoute_oneof_override::name(::std::string::String::new()));
        }
        match self.field_override {
            ::std::option::Option::Some(LuaPerRoute_oneof_override::name(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        if self.has_name() {
            match self.field_override.take() {
                ::std::option::Option::Some(LuaPerRoute_oneof_override::name(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .envoy.config.core.v3.DataSource source_code = 3;


    pub fn get_source_code(&self) -> &super::base::DataSource {
        match self.field_override {
            ::std::option::Option::Some(LuaPerRoute_oneof_override::source_code(ref v)) => v,
            _ => <super::base::DataSource as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_source_code(&mut self) {
        self.field_override = ::std::option::Option::None;
    }

    pub fn has_source_code(&self) -> bool {
        match self.field_override {
            ::std::option::Option::Some(LuaPerRoute_oneof_override::source_code(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_source_code(&mut self, v: super::base::DataSource) {
        self.field_override = ::std::option::Option::Some(LuaPerRoute_oneof_override::source_code(v))
    }

    // Mutable pointer to the field.
    pub fn mut_source_code(&mut self) -> &mut super::base::DataSource {
        if let ::std::option::Option::Some(LuaPerRoute_oneof_override::source_code(_)) = self.field_override {
        } else {
            self.field_override = ::std::option::Option::Some(LuaPerRoute_oneof_override::source_code(super::base::DataSource::new()));
        }
        match self.field_override {
            ::std::option::Option::Some(LuaPerRoute_oneof_override::source_code(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_source_code(&mut self) -> super::base::DataSource {
        if self.has_source_code() {
            match self.field_override.take() {
                ::std::option::Option::Some(LuaPerRoute_oneof_override::source_code(v)) => v,
                _ => panic!(),
            }
        } else {
            super::base::DataSource::new()
        }
    }
}

impl ::protobuf::Message for LuaPerRoute {
    fn is_initialized(&self) -> bool {
        if let Some(LuaPerRoute_oneof_override::source_code(ref v)) = self.field_override {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_override = ::std::option::Option::Some(LuaPerRoute_oneof_override::disabled(is.read_bool()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_override = ::std::option::Option::Some(LuaPerRoute_oneof_override::name(is.read_string()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_override = ::std::option::Option::Some(LuaPerRoute_oneof_override::source_code(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.field_override {
            match v {
                &LuaPerRoute_oneof_override::disabled(v) => {
                    my_size += 2;
                },
                &LuaPerRoute_oneof_override::name(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
                &LuaPerRoute_oneof_override::source_code(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.field_override {
            match v {
                &LuaPerRoute_oneof_override::disabled(v) => {
                    os.write_bool(1, v)?;
                },
                &LuaPerRoute_oneof_override::name(ref v) => {
                    os.write_string(2, v)?;
                },
                &LuaPerRoute_oneof_override::source_code(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LuaPerRoute {
        LuaPerRoute::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "disabled",
                LuaPerRoute::has_disabled,
                LuaPerRoute::get_disabled,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "name",
                LuaPerRoute::has_name,
                LuaPerRoute::get_name,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::base::DataSource>(
                "source_code",
                LuaPerRoute::has_source_code,
                LuaPerRoute::get_source_code,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LuaPerRoute>(
                "LuaPerRoute",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LuaPerRoute {
        static instance: ::protobuf::rt::LazyV2<LuaPerRoute> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LuaPerRoute::new)
    }
}

impl ::protobuf::Clear for LuaPerRoute {
    fn clear(&mut self) {
        self.field_override = ::std::option::Option::None;
        self.field_override = ::std::option::Option::None;
        self.field_override = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LuaPerRoute {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LuaPerRoute {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n.envoy/extensions/filters/http/lua/v3/lua.proto\x12$envoy.extensions.f\
    ilters.http.lua.v3\x1a\x1fenvoy/config/core/v3/base.proto\x1a\x1dudpa/an\
    notations/status.proto\x1a!udpa/annotations/versioning.proto\x1a\x17vali\
    date/validate.proto\"\x9c\x02\n\x03Lua\x12(\n\x0binline_code\x18\x01\x20\
    \x01(\tR\ninlineCodeB\x07\xfaB\x04r\x02\x10\x01\x12]\n\x0csource_codes\
    \x18\x02\x20\x03(\x0b2:.envoy.extensions.filters.http.lua.v3.Lua.SourceC\
    odesEntryR\x0bsourceCodes\x1a`\n\x10SourceCodesEntry\x12\x10\n\x03key\
    \x18\x01\x20\x01(\tR\x03key\x126\n\x05value\x18\x02\x20\x01(\x0b2\x20.en\
    voy.config.core.v3.DataSourceR\x05value:\x028\x01:*\x9a\xc5\x88\x1e%\n#e\
    nvoy.config.filter.http.lua.v2.Lua\"\xa9\x01\n\x0bLuaPerRoute\x12%\n\x08\
    disabled\x18\x01\x20\x01(\x08H\0R\x08disabledB\x07\xfaB\x04j\x02\x08\x01\
    \x12\x1d\n\x04name\x18\x02\x20\x01(\tH\0R\x04nameB\x07\xfaB\x04r\x02\x10\
    \x01\x12C\n\x0bsource_code\x18\x03\x20\x01(\x0b2\x20.envoy.config.core.v\
    3.DataSourceH\0R\nsourceCodeB\x0f\n\x08override\x12\x03\xf8B\x01BH\n2io.\
    envoyproxy.envoy.extensions.filters.http.lua.v3B\x08LuaProtoP\x01\xba\
    \x80\xc8\xd1\x06\x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
