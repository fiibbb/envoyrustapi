// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/extensions/filters/http/header_to_metadata/v4alpha/header_to_metadata.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct Config {
    // message fields
    pub request_rules: ::protobuf::RepeatedField<Config_Rule>,
    pub response_rules: ::protobuf::RepeatedField<Config_Rule>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Config {
    fn default() -> &'a Config {
        <Config as ::protobuf::Message>::default_instance()
    }
}

impl Config {
    pub fn new() -> Config {
        ::std::default::Default::default()
    }

    // repeated .envoy.extensions.filters.http.header_to_metadata.v4alpha.Config.Rule request_rules = 1;


    pub fn get_request_rules(&self) -> &[Config_Rule] {
        &self.request_rules
    }
    pub fn clear_request_rules(&mut self) {
        self.request_rules.clear();
    }

    // Param is passed by value, moved
    pub fn set_request_rules(&mut self, v: ::protobuf::RepeatedField<Config_Rule>) {
        self.request_rules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_request_rules(&mut self) -> &mut ::protobuf::RepeatedField<Config_Rule> {
        &mut self.request_rules
    }

    // Take field
    pub fn take_request_rules(&mut self) -> ::protobuf::RepeatedField<Config_Rule> {
        ::std::mem::replace(&mut self.request_rules, ::protobuf::RepeatedField::new())
    }

    // repeated .envoy.extensions.filters.http.header_to_metadata.v4alpha.Config.Rule response_rules = 2;


    pub fn get_response_rules(&self) -> &[Config_Rule] {
        &self.response_rules
    }
    pub fn clear_response_rules(&mut self) {
        self.response_rules.clear();
    }

    // Param is passed by value, moved
    pub fn set_response_rules(&mut self, v: ::protobuf::RepeatedField<Config_Rule>) {
        self.response_rules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_response_rules(&mut self) -> &mut ::protobuf::RepeatedField<Config_Rule> {
        &mut self.response_rules
    }

    // Take field
    pub fn take_response_rules(&mut self) -> ::protobuf::RepeatedField<Config_Rule> {
        ::std::mem::replace(&mut self.response_rules, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Config {
    fn is_initialized(&self) -> bool {
        for v in &self.request_rules {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.response_rules {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.request_rules)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.response_rules)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.request_rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.response_rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.request_rules {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.response_rules {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Config {
        Config::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Config_Rule>>(
                "request_rules",
                |m: &Config| { &m.request_rules },
                |m: &mut Config| { &mut m.request_rules },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Config_Rule>>(
                "response_rules",
                |m: &Config| { &m.response_rules },
                |m: &mut Config| { &mut m.response_rules },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Config>(
                "Config",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Config {
        static instance: ::protobuf::rt::LazyV2<Config> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Config::new)
    }
}

impl ::protobuf::Clear for Config {
    fn clear(&mut self) {
        self.request_rules.clear();
        self.response_rules.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Config {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Config {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Config_KeyValuePair {
    // message fields
    pub metadata_namespace: ::std::string::String,
    pub key: ::std::string::String,
    pub field_type: Config_ValueType,
    pub encode: Config_ValueEncode,
    // message oneof groups
    pub value_type: ::std::option::Option<Config_KeyValuePair_oneof_value_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Config_KeyValuePair {
    fn default() -> &'a Config_KeyValuePair {
        <Config_KeyValuePair as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Config_KeyValuePair_oneof_value_type {
    value(::std::string::String),
    regex_value_rewrite(super::regex::RegexMatchAndSubstitute),
}

impl Config_KeyValuePair {
    pub fn new() -> Config_KeyValuePair {
        ::std::default::Default::default()
    }

    // string metadata_namespace = 1;


    pub fn get_metadata_namespace(&self) -> &str {
        &self.metadata_namespace
    }
    pub fn clear_metadata_namespace(&mut self) {
        self.metadata_namespace.clear();
    }

    // Param is passed by value, moved
    pub fn set_metadata_namespace(&mut self, v: ::std::string::String) {
        self.metadata_namespace = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata_namespace(&mut self) -> &mut ::std::string::String {
        &mut self.metadata_namespace
    }

    // Take field
    pub fn take_metadata_namespace(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.metadata_namespace, ::std::string::String::new())
    }

    // string key = 2;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }

    // string value = 3;


    pub fn get_value(&self) -> &str {
        match self.value_type {
            ::std::option::Option::Some(Config_KeyValuePair_oneof_value_type::value(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Config_KeyValuePair_oneof_value_type::value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value_type = ::std::option::Option::Some(Config_KeyValuePair_oneof_value_type::value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(Config_KeyValuePair_oneof_value_type::value(_)) = self.value_type {
        } else {
            self.value_type = ::std::option::Option::Some(Config_KeyValuePair_oneof_value_type::value(::std::string::String::new()));
        }
        match self.value_type {
            ::std::option::Option::Some(Config_KeyValuePair_oneof_value_type::value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        if self.has_value() {
            match self.value_type.take() {
                ::std::option::Option::Some(Config_KeyValuePair_oneof_value_type::value(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .envoy.type.matcher.v4alpha.RegexMatchAndSubstitute regex_value_rewrite = 6;


    pub fn get_regex_value_rewrite(&self) -> &super::regex::RegexMatchAndSubstitute {
        match self.value_type {
            ::std::option::Option::Some(Config_KeyValuePair_oneof_value_type::regex_value_rewrite(ref v)) => v,
            _ => <super::regex::RegexMatchAndSubstitute as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_regex_value_rewrite(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_regex_value_rewrite(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Config_KeyValuePair_oneof_value_type::regex_value_rewrite(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_regex_value_rewrite(&mut self, v: super::regex::RegexMatchAndSubstitute) {
        self.value_type = ::std::option::Option::Some(Config_KeyValuePair_oneof_value_type::regex_value_rewrite(v))
    }

    // Mutable pointer to the field.
    pub fn mut_regex_value_rewrite(&mut self) -> &mut super::regex::RegexMatchAndSubstitute {
        if let ::std::option::Option::Some(Config_KeyValuePair_oneof_value_type::regex_value_rewrite(_)) = self.value_type {
        } else {
            self.value_type = ::std::option::Option::Some(Config_KeyValuePair_oneof_value_type::regex_value_rewrite(super::regex::RegexMatchAndSubstitute::new()));
        }
        match self.value_type {
            ::std::option::Option::Some(Config_KeyValuePair_oneof_value_type::regex_value_rewrite(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_regex_value_rewrite(&mut self) -> super::regex::RegexMatchAndSubstitute {
        if self.has_regex_value_rewrite() {
            match self.value_type.take() {
                ::std::option::Option::Some(Config_KeyValuePair_oneof_value_type::regex_value_rewrite(v)) => v,
                _ => panic!(),
            }
        } else {
            super::regex::RegexMatchAndSubstitute::new()
        }
    }

    // .envoy.extensions.filters.http.header_to_metadata.v4alpha.Config.ValueType type = 4;


    pub fn get_field_type(&self) -> Config_ValueType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = Config_ValueType::STRING;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Config_ValueType) {
        self.field_type = v;
    }

    // .envoy.extensions.filters.http.header_to_metadata.v4alpha.Config.ValueEncode encode = 5;


    pub fn get_encode(&self) -> Config_ValueEncode {
        self.encode
    }
    pub fn clear_encode(&mut self) {
        self.encode = Config_ValueEncode::NONE;
    }

    // Param is passed by value, moved
    pub fn set_encode(&mut self, v: Config_ValueEncode) {
        self.encode = v;
    }
}

impl ::protobuf::Message for Config_KeyValuePair {
    fn is_initialized(&self) -> bool {
        if let Some(Config_KeyValuePair_oneof_value_type::regex_value_rewrite(ref v)) = self.value_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.metadata_namespace)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value_type = ::std::option::Option::Some(Config_KeyValuePair_oneof_value_type::value(is.read_string()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value_type = ::std::option::Option::Some(Config_KeyValuePair_oneof_value_type::regex_value_rewrite(is.read_message()?));
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 4, &mut self.unknown_fields)?
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.encode, 5, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.metadata_namespace.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.metadata_namespace);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.key);
        }
        if self.field_type != Config_ValueType::STRING {
            my_size += ::protobuf::rt::enum_size(4, self.field_type);
        }
        if self.encode != Config_ValueEncode::NONE {
            my_size += ::protobuf::rt::enum_size(5, self.encode);
        }
        if let ::std::option::Option::Some(ref v) = self.value_type {
            match v {
                &Config_KeyValuePair_oneof_value_type::value(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
                &Config_KeyValuePair_oneof_value_type::regex_value_rewrite(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.metadata_namespace.is_empty() {
            os.write_string(1, &self.metadata_namespace)?;
        }
        if !self.key.is_empty() {
            os.write_string(2, &self.key)?;
        }
        if self.field_type != Config_ValueType::STRING {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if self.encode != Config_ValueEncode::NONE {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(&self.encode))?;
        }
        if let ::std::option::Option::Some(ref v) = self.value_type {
            match v {
                &Config_KeyValuePair_oneof_value_type::value(ref v) => {
                    os.write_string(3, v)?;
                },
                &Config_KeyValuePair_oneof_value_type::regex_value_rewrite(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Config_KeyValuePair {
        Config_KeyValuePair::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "metadata_namespace",
                |m: &Config_KeyValuePair| { &m.metadata_namespace },
                |m: &mut Config_KeyValuePair| { &mut m.metadata_namespace },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &Config_KeyValuePair| { &m.key },
                |m: &mut Config_KeyValuePair| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "value",
                Config_KeyValuePair::has_value,
                Config_KeyValuePair::get_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::regex::RegexMatchAndSubstitute>(
                "regex_value_rewrite",
                Config_KeyValuePair::has_regex_value_rewrite,
                Config_KeyValuePair::get_regex_value_rewrite,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Config_ValueType>>(
                "type",
                |m: &Config_KeyValuePair| { &m.field_type },
                |m: &mut Config_KeyValuePair| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Config_ValueEncode>>(
                "encode",
                |m: &Config_KeyValuePair| { &m.encode },
                |m: &mut Config_KeyValuePair| { &mut m.encode },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Config_KeyValuePair>(
                "Config.KeyValuePair",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Config_KeyValuePair {
        static instance: ::protobuf::rt::LazyV2<Config_KeyValuePair> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Config_KeyValuePair::new)
    }
}

impl ::protobuf::Clear for Config_KeyValuePair {
    fn clear(&mut self) {
        self.metadata_namespace.clear();
        self.key.clear();
        self.value_type = ::std::option::Option::None;
        self.value_type = ::std::option::Option::None;
        self.field_type = Config_ValueType::STRING;
        self.encode = Config_ValueEncode::NONE;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Config_KeyValuePair {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Config_KeyValuePair {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Config_Rule {
    // message fields
    pub on_present: ::protobuf::SingularPtrField<Config_KeyValuePair>,
    pub on_missing: ::protobuf::SingularPtrField<Config_KeyValuePair>,
    pub remove: bool,
    // message oneof groups
    pub header_cookie_specifier: ::std::option::Option<Config_Rule_oneof_header_cookie_specifier>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Config_Rule {
    fn default() -> &'a Config_Rule {
        <Config_Rule as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Config_Rule_oneof_header_cookie_specifier {
    header(::std::string::String),
    cookie(::std::string::String),
}

impl Config_Rule {
    pub fn new() -> Config_Rule {
        ::std::default::Default::default()
    }

    // string header = 1;


    pub fn get_header(&self) -> &str {
        match self.header_cookie_specifier {
            ::std::option::Option::Some(Config_Rule_oneof_header_cookie_specifier::header(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_header(&mut self) {
        self.header_cookie_specifier = ::std::option::Option::None;
    }

    pub fn has_header(&self) -> bool {
        match self.header_cookie_specifier {
            ::std::option::Option::Some(Config_Rule_oneof_header_cookie_specifier::header(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: ::std::string::String) {
        self.header_cookie_specifier = ::std::option::Option::Some(Config_Rule_oneof_header_cookie_specifier::header(v))
    }

    // Mutable pointer to the field.
    pub fn mut_header(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(Config_Rule_oneof_header_cookie_specifier::header(_)) = self.header_cookie_specifier {
        } else {
            self.header_cookie_specifier = ::std::option::Option::Some(Config_Rule_oneof_header_cookie_specifier::header(::std::string::String::new()));
        }
        match self.header_cookie_specifier {
            ::std::option::Option::Some(Config_Rule_oneof_header_cookie_specifier::header(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_header(&mut self) -> ::std::string::String {
        if self.has_header() {
            match self.header_cookie_specifier.take() {
                ::std::option::Option::Some(Config_Rule_oneof_header_cookie_specifier::header(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string cookie = 5;


    pub fn get_cookie(&self) -> &str {
        match self.header_cookie_specifier {
            ::std::option::Option::Some(Config_Rule_oneof_header_cookie_specifier::cookie(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_cookie(&mut self) {
        self.header_cookie_specifier = ::std::option::Option::None;
    }

    pub fn has_cookie(&self) -> bool {
        match self.header_cookie_specifier {
            ::std::option::Option::Some(Config_Rule_oneof_header_cookie_specifier::cookie(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cookie(&mut self, v: ::std::string::String) {
        self.header_cookie_specifier = ::std::option::Option::Some(Config_Rule_oneof_header_cookie_specifier::cookie(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cookie(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(Config_Rule_oneof_header_cookie_specifier::cookie(_)) = self.header_cookie_specifier {
        } else {
            self.header_cookie_specifier = ::std::option::Option::Some(Config_Rule_oneof_header_cookie_specifier::cookie(::std::string::String::new()));
        }
        match self.header_cookie_specifier {
            ::std::option::Option::Some(Config_Rule_oneof_header_cookie_specifier::cookie(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cookie(&mut self) -> ::std::string::String {
        if self.has_cookie() {
            match self.header_cookie_specifier.take() {
                ::std::option::Option::Some(Config_Rule_oneof_header_cookie_specifier::cookie(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .envoy.extensions.filters.http.header_to_metadata.v4alpha.Config.KeyValuePair on_present = 2;


    pub fn get_on_present(&self) -> &Config_KeyValuePair {
        self.on_present.as_ref().unwrap_or_else(|| <Config_KeyValuePair as ::protobuf::Message>::default_instance())
    }
    pub fn clear_on_present(&mut self) {
        self.on_present.clear();
    }

    pub fn has_on_present(&self) -> bool {
        self.on_present.is_some()
    }

    // Param is passed by value, moved
    pub fn set_on_present(&mut self, v: Config_KeyValuePair) {
        self.on_present = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_on_present(&mut self) -> &mut Config_KeyValuePair {
        if self.on_present.is_none() {
            self.on_present.set_default();
        }
        self.on_present.as_mut().unwrap()
    }

    // Take field
    pub fn take_on_present(&mut self) -> Config_KeyValuePair {
        self.on_present.take().unwrap_or_else(|| Config_KeyValuePair::new())
    }

    // .envoy.extensions.filters.http.header_to_metadata.v4alpha.Config.KeyValuePair on_missing = 3;


    pub fn get_on_missing(&self) -> &Config_KeyValuePair {
        self.on_missing.as_ref().unwrap_or_else(|| <Config_KeyValuePair as ::protobuf::Message>::default_instance())
    }
    pub fn clear_on_missing(&mut self) {
        self.on_missing.clear();
    }

    pub fn has_on_missing(&self) -> bool {
        self.on_missing.is_some()
    }

    // Param is passed by value, moved
    pub fn set_on_missing(&mut self, v: Config_KeyValuePair) {
        self.on_missing = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_on_missing(&mut self) -> &mut Config_KeyValuePair {
        if self.on_missing.is_none() {
            self.on_missing.set_default();
        }
        self.on_missing.as_mut().unwrap()
    }

    // Take field
    pub fn take_on_missing(&mut self) -> Config_KeyValuePair {
        self.on_missing.take().unwrap_or_else(|| Config_KeyValuePair::new())
    }

    // bool remove = 4;


    pub fn get_remove(&self) -> bool {
        self.remove
    }
    pub fn clear_remove(&mut self) {
        self.remove = false;
    }

    // Param is passed by value, moved
    pub fn set_remove(&mut self, v: bool) {
        self.remove = v;
    }
}

impl ::protobuf::Message for Config_Rule {
    fn is_initialized(&self) -> bool {
        for v in &self.on_present {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.on_missing {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.header_cookie_specifier = ::std::option::Option::Some(Config_Rule_oneof_header_cookie_specifier::header(is.read_string()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.header_cookie_specifier = ::std::option::Option::Some(Config_Rule_oneof_header_cookie_specifier::cookie(is.read_string()?));
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.on_present)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.on_missing)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.remove = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.on_present.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.on_missing.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.remove != false {
            my_size += 2;
        }
        if let ::std::option::Option::Some(ref v) = self.header_cookie_specifier {
            match v {
                &Config_Rule_oneof_header_cookie_specifier::header(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
                &Config_Rule_oneof_header_cookie_specifier::cookie(ref v) => {
                    my_size += ::protobuf::rt::string_size(5, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.on_present.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.on_missing.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.remove != false {
            os.write_bool(4, self.remove)?;
        }
        if let ::std::option::Option::Some(ref v) = self.header_cookie_specifier {
            match v {
                &Config_Rule_oneof_header_cookie_specifier::header(ref v) => {
                    os.write_string(1, v)?;
                },
                &Config_Rule_oneof_header_cookie_specifier::cookie(ref v) => {
                    os.write_string(5, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Config_Rule {
        Config_Rule::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "header",
                Config_Rule::has_header,
                Config_Rule::get_header,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "cookie",
                Config_Rule::has_cookie,
                Config_Rule::get_cookie,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Config_KeyValuePair>>(
                "on_present",
                |m: &Config_Rule| { &m.on_present },
                |m: &mut Config_Rule| { &mut m.on_present },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Config_KeyValuePair>>(
                "on_missing",
                |m: &Config_Rule| { &m.on_missing },
                |m: &mut Config_Rule| { &mut m.on_missing },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "remove",
                |m: &Config_Rule| { &m.remove },
                |m: &mut Config_Rule| { &mut m.remove },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Config_Rule>(
                "Config.Rule",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Config_Rule {
        static instance: ::protobuf::rt::LazyV2<Config_Rule> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Config_Rule::new)
    }
}

impl ::protobuf::Clear for Config_Rule {
    fn clear(&mut self) {
        self.header_cookie_specifier = ::std::option::Option::None;
        self.header_cookie_specifier = ::std::option::Option::None;
        self.on_present.clear();
        self.on_missing.clear();
        self.remove = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Config_Rule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Config_Rule {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Config_ValueType {
    STRING = 0,
    NUMBER = 1,
    PROTOBUF_VALUE = 2,
}

impl ::protobuf::ProtobufEnum for Config_ValueType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Config_ValueType> {
        match value {
            0 => ::std::option::Option::Some(Config_ValueType::STRING),
            1 => ::std::option::Option::Some(Config_ValueType::NUMBER),
            2 => ::std::option::Option::Some(Config_ValueType::PROTOBUF_VALUE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Config_ValueType] = &[
            Config_ValueType::STRING,
            Config_ValueType::NUMBER,
            Config_ValueType::PROTOBUF_VALUE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Config_ValueType>("Config.ValueType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Config_ValueType {
}

impl ::std::default::Default for Config_ValueType {
    fn default() -> Self {
        Config_ValueType::STRING
    }
}

impl ::protobuf::reflect::ProtobufValue for Config_ValueType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Config_ValueEncode {
    NONE = 0,
    BASE64 = 1,
}

impl ::protobuf::ProtobufEnum for Config_ValueEncode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Config_ValueEncode> {
        match value {
            0 => ::std::option::Option::Some(Config_ValueEncode::NONE),
            1 => ::std::option::Option::Some(Config_ValueEncode::BASE64),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Config_ValueEncode] = &[
            Config_ValueEncode::NONE,
            Config_ValueEncode::BASE64,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Config_ValueEncode>("Config.ValueEncode", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Config_ValueEncode {
}

impl ::std::default::Default for Config_ValueEncode {
    fn default() -> Self {
        Config_ValueEncode::NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for Config_ValueEncode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \nQenvoy/extensions/filters/http/header_to_metadata/v4alpha/header_to_me\
    tadata.proto\x128envoy.extensions.filters.http.header_to_metadata.v4alph\
    a\x1a&envoy/type/matcher/v4alpha/regex.proto\x1a\x1dudpa/annotations/sta\
    tus.proto\x1a!udpa/annotations/versioning.proto\x1a\x17validate/validate\
    .proto\"\xb9\n\n\x06Config\x12j\n\rrequest_rules\x18\x01\x20\x03(\x0b2E.\
    envoy.extensions.filters.http.header_to_metadata.v4alpha.Config.RuleR\
    \x0crequestRules\x12l\n\x0eresponse_rules\x18\x02\x20\x03(\x0b2E.envoy.e\
    xtensions.filters.http.header_to_metadata.v4alpha.Config.RuleR\rresponse\
    Rules\x1a\x85\x04\n\x0cKeyValuePair\x12-\n\x12metadata_namespace\x18\x01\
    \x20\x01(\tR\x11metadataNamespace\x12\x19\n\x03key\x18\x02\x20\x01(\tR\
    \x03keyB\x07\xfaB\x04r\x02\x10\x01\x12\x16\n\x05value\x18\x03\x20\x01(\t\
    H\0R\x05value\x12e\n\x13regex_value_rewrite\x18\x06\x20\x01(\x0b23.envoy\
    .type.matcher.v4alpha.RegexMatchAndSubstituteH\0R\x11regexValueRewrite\
    \x12h\n\x04type\x18\x04\x20\x01(\x0e2J.envoy.extensions.filters.http.hea\
    der_to_metadata.v4alpha.Config.ValueTypeR\x04typeB\x08\xfaB\x05\x82\x01\
    \x02\x10\x01\x12d\n\x06encode\x18\x05\x20\x01(\x0e2L.envoy.extensions.fi\
    lters.http.header_to_metadata.v4alpha.Config.ValueEncodeR\x06encodeB\x0c\
    \n\nvalue_type:N\x9a\xc5\x88\x1eI\nGenvoy.extensions.filters.http.header\
    _to_metadata.v3.Config.KeyValuePair\x1a\xab\x03\n\x04Rule\x12%\n\x06head\
    er\x18\x01\x20\x01(\tH\0R\x06headerB\x0b\xfaB\x08r\x06\xc0\x01\x01\xc8\
    \x01\0\x12%\n\x06cookie\x18\x05\x20\x01(\tH\0R\x06cookieB\x0b\xfaB\x08r\
    \x06\xc0\x01\x01\xc8\x01\0\x12l\n\non_present\x18\x02\x20\x01(\x0b2M.env\
    oy.extensions.filters.http.header_to_metadata.v4alpha.Config.KeyValuePai\
    rR\tonPresent\x12l\n\non_missing\x18\x03\x20\x01(\x0b2M.envoy.extensions\
    .filters.http.header_to_metadata.v4alpha.Config.KeyValuePairR\tonMissing\
    \x12\x16\n\x06remove\x18\x04\x20\x01(\x08R\x06removeB\x19\n\x17header_co\
    okie_specifier:F\x9a\xc5\x88\x1eA\n?envoy.extensions.filters.http.header\
    _to_metadata.v3.Config.Rule\"7\n\tValueType\x12\n\n\x06STRING\x10\0\x12\
    \n\n\x06NUMBER\x10\x01\x12\x12\n\x0ePROTOBUF_VALUE\x10\x02\"#\n\x0bValue\
    Encode\x12\x08\n\x04NONE\x10\0\x12\n\n\x06BASE64\x10\x01:A\x9a\xc5\x88\
    \x1e<\n:envoy.extensions.filters.http.header_to_metadata.v3.ConfigBi\nFi\
    o.envoyproxy.envoy.extensions.filters.http.header_to_metadata.v4alphaB\
    \x15HeaderToMetadataProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\x03b\x06proto\
    3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
