// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/extensions/filters/http/decompressor/v3/decompressor.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct Decompressor {
    // message fields
    pub decompressor_library: ::protobuf::SingularPtrField<super::extension::TypedExtensionConfig>,
    pub request_direction_config: ::protobuf::SingularPtrField<Decompressor_RequestDirectionConfig>,
    pub response_direction_config: ::protobuf::SingularPtrField<Decompressor_ResponseDirectionConfig>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Decompressor {
    fn default() -> &'a Decompressor {
        <Decompressor as ::protobuf::Message>::default_instance()
    }
}

impl Decompressor {
    pub fn new() -> Decompressor {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.TypedExtensionConfig decompressor_library = 1;


    pub fn get_decompressor_library(&self) -> &super::extension::TypedExtensionConfig {
        self.decompressor_library.as_ref().unwrap_or_else(|| <super::extension::TypedExtensionConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_decompressor_library(&mut self) {
        self.decompressor_library.clear();
    }

    pub fn has_decompressor_library(&self) -> bool {
        self.decompressor_library.is_some()
    }

    // Param is passed by value, moved
    pub fn set_decompressor_library(&mut self, v: super::extension::TypedExtensionConfig) {
        self.decompressor_library = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_decompressor_library(&mut self) -> &mut super::extension::TypedExtensionConfig {
        if self.decompressor_library.is_none() {
            self.decompressor_library.set_default();
        }
        self.decompressor_library.as_mut().unwrap()
    }

    // Take field
    pub fn take_decompressor_library(&mut self) -> super::extension::TypedExtensionConfig {
        self.decompressor_library.take().unwrap_or_else(|| super::extension::TypedExtensionConfig::new())
    }

    // .envoy.extensions.filters.http.decompressor.v3.Decompressor.RequestDirectionConfig request_direction_config = 2;


    pub fn get_request_direction_config(&self) -> &Decompressor_RequestDirectionConfig {
        self.request_direction_config.as_ref().unwrap_or_else(|| <Decompressor_RequestDirectionConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_request_direction_config(&mut self) {
        self.request_direction_config.clear();
    }

    pub fn has_request_direction_config(&self) -> bool {
        self.request_direction_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request_direction_config(&mut self, v: Decompressor_RequestDirectionConfig) {
        self.request_direction_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_direction_config(&mut self) -> &mut Decompressor_RequestDirectionConfig {
        if self.request_direction_config.is_none() {
            self.request_direction_config.set_default();
        }
        self.request_direction_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_request_direction_config(&mut self) -> Decompressor_RequestDirectionConfig {
        self.request_direction_config.take().unwrap_or_else(|| Decompressor_RequestDirectionConfig::new())
    }

    // .envoy.extensions.filters.http.decompressor.v3.Decompressor.ResponseDirectionConfig response_direction_config = 3;


    pub fn get_response_direction_config(&self) -> &Decompressor_ResponseDirectionConfig {
        self.response_direction_config.as_ref().unwrap_or_else(|| <Decompressor_ResponseDirectionConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_response_direction_config(&mut self) {
        self.response_direction_config.clear();
    }

    pub fn has_response_direction_config(&self) -> bool {
        self.response_direction_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response_direction_config(&mut self, v: Decompressor_ResponseDirectionConfig) {
        self.response_direction_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response_direction_config(&mut self) -> &mut Decompressor_ResponseDirectionConfig {
        if self.response_direction_config.is_none() {
            self.response_direction_config.set_default();
        }
        self.response_direction_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_response_direction_config(&mut self) -> Decompressor_ResponseDirectionConfig {
        self.response_direction_config.take().unwrap_or_else(|| Decompressor_ResponseDirectionConfig::new())
    }
}

impl ::protobuf::Message for Decompressor {
    fn is_initialized(&self) -> bool {
        for v in &self.decompressor_library {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.request_direction_config {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.response_direction_config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.decompressor_library)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.request_direction_config)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response_direction_config)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.decompressor_library.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.request_direction_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.response_direction_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.decompressor_library.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.request_direction_config.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.response_direction_config.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Decompressor {
        Decompressor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::extension::TypedExtensionConfig>>(
                "decompressor_library",
                |m: &Decompressor| { &m.decompressor_library },
                |m: &mut Decompressor| { &mut m.decompressor_library },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Decompressor_RequestDirectionConfig>>(
                "request_direction_config",
                |m: &Decompressor| { &m.request_direction_config },
                |m: &mut Decompressor| { &mut m.request_direction_config },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Decompressor_ResponseDirectionConfig>>(
                "response_direction_config",
                |m: &Decompressor| { &m.response_direction_config },
                |m: &mut Decompressor| { &mut m.response_direction_config },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Decompressor>(
                "Decompressor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Decompressor {
        static instance: ::protobuf::rt::LazyV2<Decompressor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Decompressor::new)
    }
}

impl ::protobuf::Clear for Decompressor {
    fn clear(&mut self) {
        self.decompressor_library.clear();
        self.request_direction_config.clear();
        self.response_direction_config.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Decompressor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Decompressor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Decompressor_CommonDirectionConfig {
    // message fields
    pub enabled: ::protobuf::SingularPtrField<super::base::RuntimeFeatureFlag>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Decompressor_CommonDirectionConfig {
    fn default() -> &'a Decompressor_CommonDirectionConfig {
        <Decompressor_CommonDirectionConfig as ::protobuf::Message>::default_instance()
    }
}

impl Decompressor_CommonDirectionConfig {
    pub fn new() -> Decompressor_CommonDirectionConfig {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.RuntimeFeatureFlag enabled = 1;


    pub fn get_enabled(&self) -> &super::base::RuntimeFeatureFlag {
        self.enabled.as_ref().unwrap_or_else(|| <super::base::RuntimeFeatureFlag as ::protobuf::Message>::default_instance())
    }
    pub fn clear_enabled(&mut self) {
        self.enabled.clear();
    }

    pub fn has_enabled(&self) -> bool {
        self.enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_enabled(&mut self, v: super::base::RuntimeFeatureFlag) {
        self.enabled = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_enabled(&mut self) -> &mut super::base::RuntimeFeatureFlag {
        if self.enabled.is_none() {
            self.enabled.set_default();
        }
        self.enabled.as_mut().unwrap()
    }

    // Take field
    pub fn take_enabled(&mut self) -> super::base::RuntimeFeatureFlag {
        self.enabled.take().unwrap_or_else(|| super::base::RuntimeFeatureFlag::new())
    }
}

impl ::protobuf::Message for Decompressor_CommonDirectionConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.enabled {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.enabled)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.enabled.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.enabled.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Decompressor_CommonDirectionConfig {
        Decompressor_CommonDirectionConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::RuntimeFeatureFlag>>(
                "enabled",
                |m: &Decompressor_CommonDirectionConfig| { &m.enabled },
                |m: &mut Decompressor_CommonDirectionConfig| { &mut m.enabled },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Decompressor_CommonDirectionConfig>(
                "Decompressor.CommonDirectionConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Decompressor_CommonDirectionConfig {
        static instance: ::protobuf::rt::LazyV2<Decompressor_CommonDirectionConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Decompressor_CommonDirectionConfig::new)
    }
}

impl ::protobuf::Clear for Decompressor_CommonDirectionConfig {
    fn clear(&mut self) {
        self.enabled.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Decompressor_CommonDirectionConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Decompressor_CommonDirectionConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Decompressor_RequestDirectionConfig {
    // message fields
    pub common_config: ::protobuf::SingularPtrField<Decompressor_CommonDirectionConfig>,
    pub advertise_accept_encoding: ::protobuf::SingularPtrField<::protobuf::well_known_types::BoolValue>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Decompressor_RequestDirectionConfig {
    fn default() -> &'a Decompressor_RequestDirectionConfig {
        <Decompressor_RequestDirectionConfig as ::protobuf::Message>::default_instance()
    }
}

impl Decompressor_RequestDirectionConfig {
    pub fn new() -> Decompressor_RequestDirectionConfig {
        ::std::default::Default::default()
    }

    // .envoy.extensions.filters.http.decompressor.v3.Decompressor.CommonDirectionConfig common_config = 1;


    pub fn get_common_config(&self) -> &Decompressor_CommonDirectionConfig {
        self.common_config.as_ref().unwrap_or_else(|| <Decompressor_CommonDirectionConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_common_config(&mut self) {
        self.common_config.clear();
    }

    pub fn has_common_config(&self) -> bool {
        self.common_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_common_config(&mut self, v: Decompressor_CommonDirectionConfig) {
        self.common_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_common_config(&mut self) -> &mut Decompressor_CommonDirectionConfig {
        if self.common_config.is_none() {
            self.common_config.set_default();
        }
        self.common_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_common_config(&mut self) -> Decompressor_CommonDirectionConfig {
        self.common_config.take().unwrap_or_else(|| Decompressor_CommonDirectionConfig::new())
    }

    // .google.protobuf.BoolValue advertise_accept_encoding = 2;


    pub fn get_advertise_accept_encoding(&self) -> &::protobuf::well_known_types::BoolValue {
        self.advertise_accept_encoding.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::BoolValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_advertise_accept_encoding(&mut self) {
        self.advertise_accept_encoding.clear();
    }

    pub fn has_advertise_accept_encoding(&self) -> bool {
        self.advertise_accept_encoding.is_some()
    }

    // Param is passed by value, moved
    pub fn set_advertise_accept_encoding(&mut self, v: ::protobuf::well_known_types::BoolValue) {
        self.advertise_accept_encoding = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_advertise_accept_encoding(&mut self) -> &mut ::protobuf::well_known_types::BoolValue {
        if self.advertise_accept_encoding.is_none() {
            self.advertise_accept_encoding.set_default();
        }
        self.advertise_accept_encoding.as_mut().unwrap()
    }

    // Take field
    pub fn take_advertise_accept_encoding(&mut self) -> ::protobuf::well_known_types::BoolValue {
        self.advertise_accept_encoding.take().unwrap_or_else(|| ::protobuf::well_known_types::BoolValue::new())
    }
}

impl ::protobuf::Message for Decompressor_RequestDirectionConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.common_config {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.advertise_accept_encoding {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.common_config)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.advertise_accept_encoding)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.common_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.advertise_accept_encoding.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.common_config.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.advertise_accept_encoding.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Decompressor_RequestDirectionConfig {
        Decompressor_RequestDirectionConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Decompressor_CommonDirectionConfig>>(
                "common_config",
                |m: &Decompressor_RequestDirectionConfig| { &m.common_config },
                |m: &mut Decompressor_RequestDirectionConfig| { &mut m.common_config },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::BoolValue>>(
                "advertise_accept_encoding",
                |m: &Decompressor_RequestDirectionConfig| { &m.advertise_accept_encoding },
                |m: &mut Decompressor_RequestDirectionConfig| { &mut m.advertise_accept_encoding },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Decompressor_RequestDirectionConfig>(
                "Decompressor.RequestDirectionConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Decompressor_RequestDirectionConfig {
        static instance: ::protobuf::rt::LazyV2<Decompressor_RequestDirectionConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Decompressor_RequestDirectionConfig::new)
    }
}

impl ::protobuf::Clear for Decompressor_RequestDirectionConfig {
    fn clear(&mut self) {
        self.common_config.clear();
        self.advertise_accept_encoding.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Decompressor_RequestDirectionConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Decompressor_RequestDirectionConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Decompressor_ResponseDirectionConfig {
    // message fields
    pub common_config: ::protobuf::SingularPtrField<Decompressor_CommonDirectionConfig>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Decompressor_ResponseDirectionConfig {
    fn default() -> &'a Decompressor_ResponseDirectionConfig {
        <Decompressor_ResponseDirectionConfig as ::protobuf::Message>::default_instance()
    }
}

impl Decompressor_ResponseDirectionConfig {
    pub fn new() -> Decompressor_ResponseDirectionConfig {
        ::std::default::Default::default()
    }

    // .envoy.extensions.filters.http.decompressor.v3.Decompressor.CommonDirectionConfig common_config = 1;


    pub fn get_common_config(&self) -> &Decompressor_CommonDirectionConfig {
        self.common_config.as_ref().unwrap_or_else(|| <Decompressor_CommonDirectionConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_common_config(&mut self) {
        self.common_config.clear();
    }

    pub fn has_common_config(&self) -> bool {
        self.common_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_common_config(&mut self, v: Decompressor_CommonDirectionConfig) {
        self.common_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_common_config(&mut self) -> &mut Decompressor_CommonDirectionConfig {
        if self.common_config.is_none() {
            self.common_config.set_default();
        }
        self.common_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_common_config(&mut self) -> Decompressor_CommonDirectionConfig {
        self.common_config.take().unwrap_or_else(|| Decompressor_CommonDirectionConfig::new())
    }
}

impl ::protobuf::Message for Decompressor_ResponseDirectionConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.common_config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.common_config)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.common_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.common_config.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Decompressor_ResponseDirectionConfig {
        Decompressor_ResponseDirectionConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Decompressor_CommonDirectionConfig>>(
                "common_config",
                |m: &Decompressor_ResponseDirectionConfig| { &m.common_config },
                |m: &mut Decompressor_ResponseDirectionConfig| { &mut m.common_config },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Decompressor_ResponseDirectionConfig>(
                "Decompressor.ResponseDirectionConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Decompressor_ResponseDirectionConfig {
        static instance: ::protobuf::rt::LazyV2<Decompressor_ResponseDirectionConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Decompressor_ResponseDirectionConfig::new)
    }
}

impl ::protobuf::Clear for Decompressor_ResponseDirectionConfig {
    fn clear(&mut self) {
        self.common_config.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Decompressor_ResponseDirectionConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Decompressor_ResponseDirectionConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n@envoy/extensions/filters/http/decompressor/v3/decompressor.proto\x12-\
    envoy.extensions.filters.http.decompressor.v3\x1a\x1fenvoy/config/core/v\
    3/base.proto\x1a$envoy/config/core/v3/extension.proto\x1a\x19google/prot\
    obuf/any.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1eudpa/annotat\
    ions/migrate.proto\x1a\x1dudpa/annotations/status.proto\x1a!udpa/annotat\
    ions/versioning.proto\x1a\x17validate/validate.proto\"\xf4\x06\n\x0cDeco\
    mpressor\x12g\n\x14decompressor_library\x18\x01\x20\x01(\x0b2*.envoy.con\
    fig.core.v3.TypedExtensionConfigR\x13decompressorLibraryB\x08\xfaB\x05\
    \x8a\x01\x02\x10\x01\x12\x8c\x01\n\x18request_direction_config\x18\x02\
    \x20\x01(\x0b2R.envoy.extensions.filters.http.decompressor.v3.Decompress\
    or.RequestDirectionConfigR\x16requestDirectionConfig\x12\x8f\x01\n\x19re\
    sponse_direction_config\x18\x03\x20\x01(\x0b2S.envoy.extensions.filters.\
    http.decompressor.v3.Decompressor.ResponseDirectionConfigR\x17responseDi\
    rectionConfig\x1a[\n\x15CommonDirectionConfig\x12B\n\x07enabled\x18\x01\
    \x20\x01(\x0b2(.envoy.config.core.v3.RuntimeFeatureFlagR\x07enabled\x1a\
    \xe8\x01\n\x16RequestDirectionConfig\x12v\n\rcommon_config\x18\x01\x20\
    \x01(\x0b2Q.envoy.extensions.filters.http.decompressor.v3.Decompressor.C\
    ommonDirectionConfigR\x0ccommonConfig\x12V\n\x19advertise_accept_encodin\
    g\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\x17advertiseAccep\
    tEncoding\x1a\x91\x01\n\x17ResponseDirectionConfig\x12v\n\rcommon_config\
    \x18\x01\x20\x01(\x0b2Q.envoy.extensions.filters.http.decompressor.v3.De\
    compressor.CommonDirectionConfigR\x0ccommonConfigBZ\n;io.envoyproxy.envo\
    y.extensions.filters.http.decompressor.v3B\x11DecompressorProtoP\x01\xba\
    \x80\xc8\xd1\x06\x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
