// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `opencensus/proto/agent/common/v1/common.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct Node {
    // message fields
    pub identifier: ::protobuf::SingularPtrField<ProcessIdentifier>,
    pub library_info: ::protobuf::SingularPtrField<LibraryInfo>,
    pub service_info: ::protobuf::SingularPtrField<ServiceInfo>,
    pub attributes: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Node {
    fn default() -> &'a Node {
        <Node as ::protobuf::Message>::default_instance()
    }
}

impl Node {
    pub fn new() -> Node {
        ::std::default::Default::default()
    }

    // .opencensus.proto.agent.common.v1.ProcessIdentifier identifier = 1;


    pub fn get_identifier(&self) -> &ProcessIdentifier {
        self.identifier.as_ref().unwrap_or_else(|| <ProcessIdentifier as ::protobuf::Message>::default_instance())
    }
    pub fn clear_identifier(&mut self) {
        self.identifier.clear();
    }

    pub fn has_identifier(&self) -> bool {
        self.identifier.is_some()
    }

    // Param is passed by value, moved
    pub fn set_identifier(&mut self, v: ProcessIdentifier) {
        self.identifier = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_identifier(&mut self) -> &mut ProcessIdentifier {
        if self.identifier.is_none() {
            self.identifier.set_default();
        }
        self.identifier.as_mut().unwrap()
    }

    // Take field
    pub fn take_identifier(&mut self) -> ProcessIdentifier {
        self.identifier.take().unwrap_or_else(|| ProcessIdentifier::new())
    }

    // .opencensus.proto.agent.common.v1.LibraryInfo library_info = 2;


    pub fn get_library_info(&self) -> &LibraryInfo {
        self.library_info.as_ref().unwrap_or_else(|| <LibraryInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_library_info(&mut self) {
        self.library_info.clear();
    }

    pub fn has_library_info(&self) -> bool {
        self.library_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_library_info(&mut self, v: LibraryInfo) {
        self.library_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_library_info(&mut self) -> &mut LibraryInfo {
        if self.library_info.is_none() {
            self.library_info.set_default();
        }
        self.library_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_library_info(&mut self) -> LibraryInfo {
        self.library_info.take().unwrap_or_else(|| LibraryInfo::new())
    }

    // .opencensus.proto.agent.common.v1.ServiceInfo service_info = 3;


    pub fn get_service_info(&self) -> &ServiceInfo {
        self.service_info.as_ref().unwrap_or_else(|| <ServiceInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_service_info(&mut self) {
        self.service_info.clear();
    }

    pub fn has_service_info(&self) -> bool {
        self.service_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_service_info(&mut self, v: ServiceInfo) {
        self.service_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_info(&mut self) -> &mut ServiceInfo {
        if self.service_info.is_none() {
            self.service_info.set_default();
        }
        self.service_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_service_info(&mut self) -> ServiceInfo {
        self.service_info.take().unwrap_or_else(|| ServiceInfo::new())
    }

    // repeated .opencensus.proto.agent.common.v1.Node.AttributesEntry attributes = 4;


    pub fn get_attributes(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.attributes
    }
    pub fn clear_attributes(&mut self) {
        self.attributes.clear();
    }

    // Param is passed by value, moved
    pub fn set_attributes(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.attributes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_attributes(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.attributes
    }

    // Take field
    pub fn take_attributes(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.attributes, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for Node {
    fn is_initialized(&self) -> bool {
        for v in &self.identifier {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.library_info {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.service_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.identifier)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.library_info)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.service_info)?;
                },
                4 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.attributes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.identifier.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.library_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.service_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(4, &self.attributes);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.identifier.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.library_info.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.service_info.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(4, &self.attributes, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Node {
        Node::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ProcessIdentifier>>(
                "identifier",
                |m: &Node| { &m.identifier },
                |m: &mut Node| { &mut m.identifier },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LibraryInfo>>(
                "library_info",
                |m: &Node| { &m.library_info },
                |m: &mut Node| { &mut m.library_info },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ServiceInfo>>(
                "service_info",
                |m: &Node| { &m.service_info },
                |m: &mut Node| { &mut m.service_info },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "attributes",
                |m: &Node| { &m.attributes },
                |m: &mut Node| { &mut m.attributes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Node>(
                "Node",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Node {
        static instance: ::protobuf::rt::LazyV2<Node> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Node::new)
    }
}

impl ::protobuf::Clear for Node {
    fn clear(&mut self) {
        self.identifier.clear();
        self.library_info.clear();
        self.service_info.clear();
        self.attributes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Node {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Node {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProcessIdentifier {
    // message fields
    pub host_name: ::std::string::String,
    pub pid: u32,
    pub start_timestamp: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProcessIdentifier {
    fn default() -> &'a ProcessIdentifier {
        <ProcessIdentifier as ::protobuf::Message>::default_instance()
    }
}

impl ProcessIdentifier {
    pub fn new() -> ProcessIdentifier {
        ::std::default::Default::default()
    }

    // string host_name = 1;


    pub fn get_host_name(&self) -> &str {
        &self.host_name
    }
    pub fn clear_host_name(&mut self) {
        self.host_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_host_name(&mut self, v: ::std::string::String) {
        self.host_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host_name(&mut self) -> &mut ::std::string::String {
        &mut self.host_name
    }

    // Take field
    pub fn take_host_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.host_name, ::std::string::String::new())
    }

    // uint32 pid = 2;


    pub fn get_pid(&self) -> u32 {
        self.pid
    }
    pub fn clear_pid(&mut self) {
        self.pid = 0;
    }

    // Param is passed by value, moved
    pub fn set_pid(&mut self, v: u32) {
        self.pid = v;
    }

    // .google.protobuf.Timestamp start_timestamp = 3;


    pub fn get_start_timestamp(&self) -> &::protobuf::well_known_types::Timestamp {
        self.start_timestamp.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_start_timestamp(&mut self) {
        self.start_timestamp.clear();
    }

    pub fn has_start_timestamp(&self) -> bool {
        self.start_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_timestamp(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.start_timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_timestamp(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.start_timestamp.is_none() {
            self.start_timestamp.set_default();
        }
        self.start_timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_start_timestamp(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.start_timestamp.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for ProcessIdentifier {
    fn is_initialized(&self) -> bool {
        for v in &self.start_timestamp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.host_name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.pid = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.start_timestamp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.host_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.host_name);
        }
        if self.pid != 0 {
            my_size += ::protobuf::rt::value_size(2, self.pid, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.start_timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.host_name.is_empty() {
            os.write_string(1, &self.host_name)?;
        }
        if self.pid != 0 {
            os.write_uint32(2, self.pid)?;
        }
        if let Some(ref v) = self.start_timestamp.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProcessIdentifier {
        ProcessIdentifier::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "host_name",
                |m: &ProcessIdentifier| { &m.host_name },
                |m: &mut ProcessIdentifier| { &mut m.host_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "pid",
                |m: &ProcessIdentifier| { &m.pid },
                |m: &mut ProcessIdentifier| { &mut m.pid },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "start_timestamp",
                |m: &ProcessIdentifier| { &m.start_timestamp },
                |m: &mut ProcessIdentifier| { &mut m.start_timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProcessIdentifier>(
                "ProcessIdentifier",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProcessIdentifier {
        static instance: ::protobuf::rt::LazyV2<ProcessIdentifier> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProcessIdentifier::new)
    }
}

impl ::protobuf::Clear for ProcessIdentifier {
    fn clear(&mut self) {
        self.host_name.clear();
        self.pid = 0;
        self.start_timestamp.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProcessIdentifier {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProcessIdentifier {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LibraryInfo {
    // message fields
    pub language: LibraryInfo_Language,
    pub exporter_version: ::std::string::String,
    pub core_library_version: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LibraryInfo {
    fn default() -> &'a LibraryInfo {
        <LibraryInfo as ::protobuf::Message>::default_instance()
    }
}

impl LibraryInfo {
    pub fn new() -> LibraryInfo {
        ::std::default::Default::default()
    }

    // .opencensus.proto.agent.common.v1.LibraryInfo.Language language = 1;


    pub fn get_language(&self) -> LibraryInfo_Language {
        self.language
    }
    pub fn clear_language(&mut self) {
        self.language = LibraryInfo_Language::LANGUAGE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_language(&mut self, v: LibraryInfo_Language) {
        self.language = v;
    }

    // string exporter_version = 2;


    pub fn get_exporter_version(&self) -> &str {
        &self.exporter_version
    }
    pub fn clear_exporter_version(&mut self) {
        self.exporter_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_exporter_version(&mut self, v: ::std::string::String) {
        self.exporter_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_exporter_version(&mut self) -> &mut ::std::string::String {
        &mut self.exporter_version
    }

    // Take field
    pub fn take_exporter_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.exporter_version, ::std::string::String::new())
    }

    // string core_library_version = 3;


    pub fn get_core_library_version(&self) -> &str {
        &self.core_library_version
    }
    pub fn clear_core_library_version(&mut self) {
        self.core_library_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_core_library_version(&mut self, v: ::std::string::String) {
        self.core_library_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_core_library_version(&mut self) -> &mut ::std::string::String {
        &mut self.core_library_version
    }

    // Take field
    pub fn take_core_library_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.core_library_version, ::std::string::String::new())
    }
}

impl ::protobuf::Message for LibraryInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.language, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.exporter_version)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.core_library_version)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.language != LibraryInfo_Language::LANGUAGE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.language);
        }
        if !self.exporter_version.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.exporter_version);
        }
        if !self.core_library_version.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.core_library_version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.language != LibraryInfo_Language::LANGUAGE_UNSPECIFIED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.language))?;
        }
        if !self.exporter_version.is_empty() {
            os.write_string(2, &self.exporter_version)?;
        }
        if !self.core_library_version.is_empty() {
            os.write_string(3, &self.core_library_version)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LibraryInfo {
        LibraryInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<LibraryInfo_Language>>(
                "language",
                |m: &LibraryInfo| { &m.language },
                |m: &mut LibraryInfo| { &mut m.language },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "exporter_version",
                |m: &LibraryInfo| { &m.exporter_version },
                |m: &mut LibraryInfo| { &mut m.exporter_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "core_library_version",
                |m: &LibraryInfo| { &m.core_library_version },
                |m: &mut LibraryInfo| { &mut m.core_library_version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LibraryInfo>(
                "LibraryInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LibraryInfo {
        static instance: ::protobuf::rt::LazyV2<LibraryInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LibraryInfo::new)
    }
}

impl ::protobuf::Clear for LibraryInfo {
    fn clear(&mut self) {
        self.language = LibraryInfo_Language::LANGUAGE_UNSPECIFIED;
        self.exporter_version.clear();
        self.core_library_version.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LibraryInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LibraryInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum LibraryInfo_Language {
    LANGUAGE_UNSPECIFIED = 0,
    CPP = 1,
    C_SHARP = 2,
    ERLANG = 3,
    GO_LANG = 4,
    JAVA = 5,
    NODE_JS = 6,
    PHP = 7,
    PYTHON = 8,
    RUBY = 9,
    WEB_JS = 10,
}

impl ::protobuf::ProtobufEnum for LibraryInfo_Language {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<LibraryInfo_Language> {
        match value {
            0 => ::std::option::Option::Some(LibraryInfo_Language::LANGUAGE_UNSPECIFIED),
            1 => ::std::option::Option::Some(LibraryInfo_Language::CPP),
            2 => ::std::option::Option::Some(LibraryInfo_Language::C_SHARP),
            3 => ::std::option::Option::Some(LibraryInfo_Language::ERLANG),
            4 => ::std::option::Option::Some(LibraryInfo_Language::GO_LANG),
            5 => ::std::option::Option::Some(LibraryInfo_Language::JAVA),
            6 => ::std::option::Option::Some(LibraryInfo_Language::NODE_JS),
            7 => ::std::option::Option::Some(LibraryInfo_Language::PHP),
            8 => ::std::option::Option::Some(LibraryInfo_Language::PYTHON),
            9 => ::std::option::Option::Some(LibraryInfo_Language::RUBY),
            10 => ::std::option::Option::Some(LibraryInfo_Language::WEB_JS),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [LibraryInfo_Language] = &[
            LibraryInfo_Language::LANGUAGE_UNSPECIFIED,
            LibraryInfo_Language::CPP,
            LibraryInfo_Language::C_SHARP,
            LibraryInfo_Language::ERLANG,
            LibraryInfo_Language::GO_LANG,
            LibraryInfo_Language::JAVA,
            LibraryInfo_Language::NODE_JS,
            LibraryInfo_Language::PHP,
            LibraryInfo_Language::PYTHON,
            LibraryInfo_Language::RUBY,
            LibraryInfo_Language::WEB_JS,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<LibraryInfo_Language>("LibraryInfo.Language", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for LibraryInfo_Language {
}

impl ::std::default::Default for LibraryInfo_Language {
    fn default() -> Self {
        LibraryInfo_Language::LANGUAGE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for LibraryInfo_Language {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ServiceInfo {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServiceInfo {
    fn default() -> &'a ServiceInfo {
        <ServiceInfo as ::protobuf::Message>::default_instance()
    }
}

impl ServiceInfo {
    pub fn new() -> ServiceInfo {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ServiceInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServiceInfo {
        ServiceInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &ServiceInfo| { &m.name },
                |m: &mut ServiceInfo| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ServiceInfo>(
                "ServiceInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ServiceInfo {
        static instance: ::protobuf::rt::LazyV2<ServiceInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ServiceInfo::new)
    }
}

impl ::protobuf::Clear for ServiceInfo {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServiceInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServiceInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n-opencensus/proto/agent/common/v1/common.proto\x12\x20opencensus.proto\
    .agent.common.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\x96\x03\n\x04N\
    ode\x12S\n\nidentifier\x18\x01\x20\x01(\x0b23.opencensus.proto.agent.com\
    mon.v1.ProcessIdentifierR\nidentifier\x12P\n\x0clibrary_info\x18\x02\x20\
    \x01(\x0b2-.opencensus.proto.agent.common.v1.LibraryInfoR\x0blibraryInfo\
    \x12P\n\x0cservice_info\x18\x03\x20\x01(\x0b2-.opencensus.proto.agent.co\
    mmon.v1.ServiceInfoR\x0bserviceInfo\x12V\n\nattributes\x18\x04\x20\x03(\
    \x0b26.opencensus.proto.agent.common.v1.Node.AttributesEntryR\nattribute\
    s\x1a=\n\x0fAttributesEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\
    \x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"\x87\x01\n\
    \x11ProcessIdentifier\x12\x1b\n\thost_name\x18\x01\x20\x01(\tR\x08hostNa\
    me\x12\x10\n\x03pid\x18\x02\x20\x01(\rR\x03pid\x12C\n\x0fstart_timestamp\
    \x18\x03\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x0estartTimestamp\
    \"\xd6\x02\n\x0bLibraryInfo\x12R\n\x08language\x18\x01\x20\x01(\x0e26.op\
    encensus.proto.agent.common.v1.LibraryInfo.LanguageR\x08language\x12)\n\
    \x10exporter_version\x18\x02\x20\x01(\tR\x0fexporterVersion\x120\n\x14co\
    re_library_version\x18\x03\x20\x01(\tR\x12coreLibraryVersion\"\x95\x01\n\
    \x08Language\x12\x18\n\x14LANGUAGE_UNSPECIFIED\x10\0\x12\x07\n\x03CPP\
    \x10\x01\x12\x0b\n\x07C_SHARP\x10\x02\x12\n\n\x06ERLANG\x10\x03\x12\x0b\
    \n\x07GO_LANG\x10\x04\x12\x08\n\x04JAVA\x10\x05\x12\x0b\n\x07NODE_JS\x10\
    \x06\x12\x07\n\x03PHP\x10\x07\x12\n\n\x06PYTHON\x10\x08\x12\x08\n\x04RUB\
    Y\x10\t\x12\n\n\x06WEB_JS\x10\n\"!\n\x0bServiceInfo\x12\x12\n\x04name\
    \x18\x01\x20\x01(\tR\x04nameB\xa2\x01\n#io.opencensus.proto.agent.common\
    .v1B\x0bCommonProtoP\x01ZIgithub.com/census-instrumentation/opencensus-p\
    roto/gen-go/agent/common/v1\xea\x02\x20OpenCensus.Proto.Agent.Common.V1b\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
