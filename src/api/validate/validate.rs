// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `validate/validate.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct FieldRules {
    // message fields
    pub message: ::protobuf::SingularPtrField<MessageRules>,
    // message oneof groups
    pub field_type: ::std::option::Option<FieldRules_oneof_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FieldRules {
    fn default() -> &'a FieldRules {
        <FieldRules as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum FieldRules_oneof_type {
    float(FloatRules),
    double(DoubleRules),
    int32(Int32Rules),
    int64(Int64Rules),
    uint32(UInt32Rules),
    uint64(UInt64Rules),
    sint32(SInt32Rules),
    sint64(SInt64Rules),
    fixed32(Fixed32Rules),
    fixed64(Fixed64Rules),
    sfixed32(SFixed32Rules),
    sfixed64(SFixed64Rules),
    bool(BoolRules),
    string(StringRules),
    bytes(BytesRules),
    field_enum(EnumRules),
    repeated(RepeatedRules),
    map(MapRules),
    any(AnyRules),
    duration(DurationRules),
    timestamp(TimestampRules),
}

impl FieldRules {
    pub fn new() -> FieldRules {
        ::std::default::Default::default()
    }

    // optional .validate.MessageRules message = 17;


    pub fn get_message(&self) -> &MessageRules {
        self.message.as_ref().unwrap_or_else(|| <MessageRules as ::protobuf::Message>::default_instance())
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: MessageRules) {
        self.message = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut MessageRules {
        if self.message.is_none() {
            self.message.set_default();
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> MessageRules {
        self.message.take().unwrap_or_else(|| MessageRules::new())
    }

    // optional .validate.FloatRules float = 1;


    pub fn get_float(&self) -> &FloatRules {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::float(ref v)) => v,
            _ => <FloatRules as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_float(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_float(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::float(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_float(&mut self, v: FloatRules) {
        self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::float(v))
    }

    // Mutable pointer to the field.
    pub fn mut_float(&mut self) -> &mut FloatRules {
        if let ::std::option::Option::Some(FieldRules_oneof_type::float(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::float(FloatRules::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::float(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_float(&mut self) -> FloatRules {
        if self.has_float() {
            match self.field_type.take() {
                ::std::option::Option::Some(FieldRules_oneof_type::float(v)) => v,
                _ => panic!(),
            }
        } else {
            FloatRules::new()
        }
    }

    // optional .validate.DoubleRules double = 2;


    pub fn get_double(&self) -> &DoubleRules {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::double(ref v)) => v,
            _ => <DoubleRules as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_double(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_double(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::double(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_double(&mut self, v: DoubleRules) {
        self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::double(v))
    }

    // Mutable pointer to the field.
    pub fn mut_double(&mut self) -> &mut DoubleRules {
        if let ::std::option::Option::Some(FieldRules_oneof_type::double(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::double(DoubleRules::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::double(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_double(&mut self) -> DoubleRules {
        if self.has_double() {
            match self.field_type.take() {
                ::std::option::Option::Some(FieldRules_oneof_type::double(v)) => v,
                _ => panic!(),
            }
        } else {
            DoubleRules::new()
        }
    }

    // optional .validate.Int32Rules int32 = 3;


    pub fn get_int32(&self) -> &Int32Rules {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::int32(ref v)) => v,
            _ => <Int32Rules as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_int32(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_int32(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::int32(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_int32(&mut self, v: Int32Rules) {
        self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::int32(v))
    }

    // Mutable pointer to the field.
    pub fn mut_int32(&mut self) -> &mut Int32Rules {
        if let ::std::option::Option::Some(FieldRules_oneof_type::int32(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::int32(Int32Rules::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::int32(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_int32(&mut self) -> Int32Rules {
        if self.has_int32() {
            match self.field_type.take() {
                ::std::option::Option::Some(FieldRules_oneof_type::int32(v)) => v,
                _ => panic!(),
            }
        } else {
            Int32Rules::new()
        }
    }

    // optional .validate.Int64Rules int64 = 4;


    pub fn get_int64(&self) -> &Int64Rules {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::int64(ref v)) => v,
            _ => <Int64Rules as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_int64(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_int64(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::int64(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_int64(&mut self, v: Int64Rules) {
        self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::int64(v))
    }

    // Mutable pointer to the field.
    pub fn mut_int64(&mut self) -> &mut Int64Rules {
        if let ::std::option::Option::Some(FieldRules_oneof_type::int64(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::int64(Int64Rules::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::int64(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_int64(&mut self) -> Int64Rules {
        if self.has_int64() {
            match self.field_type.take() {
                ::std::option::Option::Some(FieldRules_oneof_type::int64(v)) => v,
                _ => panic!(),
            }
        } else {
            Int64Rules::new()
        }
    }

    // optional .validate.UInt32Rules uint32 = 5;


    pub fn get_uint32(&self) -> &UInt32Rules {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::uint32(ref v)) => v,
            _ => <UInt32Rules as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_uint32(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_uint32(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::uint32(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_uint32(&mut self, v: UInt32Rules) {
        self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::uint32(v))
    }

    // Mutable pointer to the field.
    pub fn mut_uint32(&mut self) -> &mut UInt32Rules {
        if let ::std::option::Option::Some(FieldRules_oneof_type::uint32(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::uint32(UInt32Rules::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::uint32(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_uint32(&mut self) -> UInt32Rules {
        if self.has_uint32() {
            match self.field_type.take() {
                ::std::option::Option::Some(FieldRules_oneof_type::uint32(v)) => v,
                _ => panic!(),
            }
        } else {
            UInt32Rules::new()
        }
    }

    // optional .validate.UInt64Rules uint64 = 6;


    pub fn get_uint64(&self) -> &UInt64Rules {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::uint64(ref v)) => v,
            _ => <UInt64Rules as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_uint64(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_uint64(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::uint64(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_uint64(&mut self, v: UInt64Rules) {
        self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::uint64(v))
    }

    // Mutable pointer to the field.
    pub fn mut_uint64(&mut self) -> &mut UInt64Rules {
        if let ::std::option::Option::Some(FieldRules_oneof_type::uint64(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::uint64(UInt64Rules::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::uint64(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_uint64(&mut self) -> UInt64Rules {
        if self.has_uint64() {
            match self.field_type.take() {
                ::std::option::Option::Some(FieldRules_oneof_type::uint64(v)) => v,
                _ => panic!(),
            }
        } else {
            UInt64Rules::new()
        }
    }

    // optional .validate.SInt32Rules sint32 = 7;


    pub fn get_sint32(&self) -> &SInt32Rules {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::sint32(ref v)) => v,
            _ => <SInt32Rules as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_sint32(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_sint32(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::sint32(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sint32(&mut self, v: SInt32Rules) {
        self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::sint32(v))
    }

    // Mutable pointer to the field.
    pub fn mut_sint32(&mut self) -> &mut SInt32Rules {
        if let ::std::option::Option::Some(FieldRules_oneof_type::sint32(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::sint32(SInt32Rules::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::sint32(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_sint32(&mut self) -> SInt32Rules {
        if self.has_sint32() {
            match self.field_type.take() {
                ::std::option::Option::Some(FieldRules_oneof_type::sint32(v)) => v,
                _ => panic!(),
            }
        } else {
            SInt32Rules::new()
        }
    }

    // optional .validate.SInt64Rules sint64 = 8;


    pub fn get_sint64(&self) -> &SInt64Rules {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::sint64(ref v)) => v,
            _ => <SInt64Rules as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_sint64(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_sint64(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::sint64(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sint64(&mut self, v: SInt64Rules) {
        self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::sint64(v))
    }

    // Mutable pointer to the field.
    pub fn mut_sint64(&mut self) -> &mut SInt64Rules {
        if let ::std::option::Option::Some(FieldRules_oneof_type::sint64(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::sint64(SInt64Rules::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::sint64(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_sint64(&mut self) -> SInt64Rules {
        if self.has_sint64() {
            match self.field_type.take() {
                ::std::option::Option::Some(FieldRules_oneof_type::sint64(v)) => v,
                _ => panic!(),
            }
        } else {
            SInt64Rules::new()
        }
    }

    // optional .validate.Fixed32Rules fixed32 = 9;


    pub fn get_fixed32(&self) -> &Fixed32Rules {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::fixed32(ref v)) => v,
            _ => <Fixed32Rules as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_fixed32(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_fixed32(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::fixed32(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fixed32(&mut self, v: Fixed32Rules) {
        self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::fixed32(v))
    }

    // Mutable pointer to the field.
    pub fn mut_fixed32(&mut self) -> &mut Fixed32Rules {
        if let ::std::option::Option::Some(FieldRules_oneof_type::fixed32(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::fixed32(Fixed32Rules::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::fixed32(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_fixed32(&mut self) -> Fixed32Rules {
        if self.has_fixed32() {
            match self.field_type.take() {
                ::std::option::Option::Some(FieldRules_oneof_type::fixed32(v)) => v,
                _ => panic!(),
            }
        } else {
            Fixed32Rules::new()
        }
    }

    // optional .validate.Fixed64Rules fixed64 = 10;


    pub fn get_fixed64(&self) -> &Fixed64Rules {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::fixed64(ref v)) => v,
            _ => <Fixed64Rules as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_fixed64(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_fixed64(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::fixed64(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fixed64(&mut self, v: Fixed64Rules) {
        self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::fixed64(v))
    }

    // Mutable pointer to the field.
    pub fn mut_fixed64(&mut self) -> &mut Fixed64Rules {
        if let ::std::option::Option::Some(FieldRules_oneof_type::fixed64(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::fixed64(Fixed64Rules::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::fixed64(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_fixed64(&mut self) -> Fixed64Rules {
        if self.has_fixed64() {
            match self.field_type.take() {
                ::std::option::Option::Some(FieldRules_oneof_type::fixed64(v)) => v,
                _ => panic!(),
            }
        } else {
            Fixed64Rules::new()
        }
    }

    // optional .validate.SFixed32Rules sfixed32 = 11;


    pub fn get_sfixed32(&self) -> &SFixed32Rules {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::sfixed32(ref v)) => v,
            _ => <SFixed32Rules as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_sfixed32(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_sfixed32(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::sfixed32(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sfixed32(&mut self, v: SFixed32Rules) {
        self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::sfixed32(v))
    }

    // Mutable pointer to the field.
    pub fn mut_sfixed32(&mut self) -> &mut SFixed32Rules {
        if let ::std::option::Option::Some(FieldRules_oneof_type::sfixed32(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::sfixed32(SFixed32Rules::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::sfixed32(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_sfixed32(&mut self) -> SFixed32Rules {
        if self.has_sfixed32() {
            match self.field_type.take() {
                ::std::option::Option::Some(FieldRules_oneof_type::sfixed32(v)) => v,
                _ => panic!(),
            }
        } else {
            SFixed32Rules::new()
        }
    }

    // optional .validate.SFixed64Rules sfixed64 = 12;


    pub fn get_sfixed64(&self) -> &SFixed64Rules {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::sfixed64(ref v)) => v,
            _ => <SFixed64Rules as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_sfixed64(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_sfixed64(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::sfixed64(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sfixed64(&mut self, v: SFixed64Rules) {
        self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::sfixed64(v))
    }

    // Mutable pointer to the field.
    pub fn mut_sfixed64(&mut self) -> &mut SFixed64Rules {
        if let ::std::option::Option::Some(FieldRules_oneof_type::sfixed64(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::sfixed64(SFixed64Rules::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::sfixed64(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_sfixed64(&mut self) -> SFixed64Rules {
        if self.has_sfixed64() {
            match self.field_type.take() {
                ::std::option::Option::Some(FieldRules_oneof_type::sfixed64(v)) => v,
                _ => panic!(),
            }
        } else {
            SFixed64Rules::new()
        }
    }

    // optional .validate.BoolRules bool = 13;


    pub fn get_bool(&self) -> &BoolRules {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::bool(ref v)) => v,
            _ => <BoolRules as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_bool(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_bool(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::bool(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bool(&mut self, v: BoolRules) {
        self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::bool(v))
    }

    // Mutable pointer to the field.
    pub fn mut_bool(&mut self) -> &mut BoolRules {
        if let ::std::option::Option::Some(FieldRules_oneof_type::bool(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::bool(BoolRules::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::bool(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_bool(&mut self) -> BoolRules {
        if self.has_bool() {
            match self.field_type.take() {
                ::std::option::Option::Some(FieldRules_oneof_type::bool(v)) => v,
                _ => panic!(),
            }
        } else {
            BoolRules::new()
        }
    }

    // optional .validate.StringRules string = 14;


    pub fn get_string(&self) -> &StringRules {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::string(ref v)) => v,
            _ => <StringRules as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_string(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_string(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::string(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_string(&mut self, v: StringRules) {
        self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::string(v))
    }

    // Mutable pointer to the field.
    pub fn mut_string(&mut self) -> &mut StringRules {
        if let ::std::option::Option::Some(FieldRules_oneof_type::string(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::string(StringRules::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::string(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_string(&mut self) -> StringRules {
        if self.has_string() {
            match self.field_type.take() {
                ::std::option::Option::Some(FieldRules_oneof_type::string(v)) => v,
                _ => panic!(),
            }
        } else {
            StringRules::new()
        }
    }

    // optional .validate.BytesRules bytes = 15;


    pub fn get_bytes(&self) -> &BytesRules {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::bytes(ref v)) => v,
            _ => <BytesRules as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_bytes(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_bytes(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::bytes(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bytes(&mut self, v: BytesRules) {
        self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::bytes(v))
    }

    // Mutable pointer to the field.
    pub fn mut_bytes(&mut self) -> &mut BytesRules {
        if let ::std::option::Option::Some(FieldRules_oneof_type::bytes(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::bytes(BytesRules::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::bytes(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_bytes(&mut self) -> BytesRules {
        if self.has_bytes() {
            match self.field_type.take() {
                ::std::option::Option::Some(FieldRules_oneof_type::bytes(v)) => v,
                _ => panic!(),
            }
        } else {
            BytesRules::new()
        }
    }

    // optional .validate.EnumRules enum = 16;


    pub fn get_field_enum(&self) -> &EnumRules {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::field_enum(ref v)) => v,
            _ => <EnumRules as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_field_enum(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_enum(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::field_enum(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_field_enum(&mut self, v: EnumRules) {
        self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::field_enum(v))
    }

    // Mutable pointer to the field.
    pub fn mut_field_enum(&mut self) -> &mut EnumRules {
        if let ::std::option::Option::Some(FieldRules_oneof_type::field_enum(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::field_enum(EnumRules::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::field_enum(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_field_enum(&mut self) -> EnumRules {
        if self.has_field_enum() {
            match self.field_type.take() {
                ::std::option::Option::Some(FieldRules_oneof_type::field_enum(v)) => v,
                _ => panic!(),
            }
        } else {
            EnumRules::new()
        }
    }

    // optional .validate.RepeatedRules repeated = 18;


    pub fn get_repeated(&self) -> &RepeatedRules {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::repeated(ref v)) => v,
            _ => <RepeatedRules as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_repeated(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_repeated(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::repeated(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_repeated(&mut self, v: RepeatedRules) {
        self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::repeated(v))
    }

    // Mutable pointer to the field.
    pub fn mut_repeated(&mut self) -> &mut RepeatedRules {
        if let ::std::option::Option::Some(FieldRules_oneof_type::repeated(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::repeated(RepeatedRules::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::repeated(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_repeated(&mut self) -> RepeatedRules {
        if self.has_repeated() {
            match self.field_type.take() {
                ::std::option::Option::Some(FieldRules_oneof_type::repeated(v)) => v,
                _ => panic!(),
            }
        } else {
            RepeatedRules::new()
        }
    }

    // optional .validate.MapRules map = 19;


    pub fn get_map(&self) -> &MapRules {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::map(ref v)) => v,
            _ => <MapRules as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_map(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_map(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::map(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_map(&mut self, v: MapRules) {
        self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::map(v))
    }

    // Mutable pointer to the field.
    pub fn mut_map(&mut self) -> &mut MapRules {
        if let ::std::option::Option::Some(FieldRules_oneof_type::map(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::map(MapRules::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::map(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_map(&mut self) -> MapRules {
        if self.has_map() {
            match self.field_type.take() {
                ::std::option::Option::Some(FieldRules_oneof_type::map(v)) => v,
                _ => panic!(),
            }
        } else {
            MapRules::new()
        }
    }

    // optional .validate.AnyRules any = 20;


    pub fn get_any(&self) -> &AnyRules {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::any(ref v)) => v,
            _ => <AnyRules as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_any(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_any(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::any(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_any(&mut self, v: AnyRules) {
        self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::any(v))
    }

    // Mutable pointer to the field.
    pub fn mut_any(&mut self) -> &mut AnyRules {
        if let ::std::option::Option::Some(FieldRules_oneof_type::any(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::any(AnyRules::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::any(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_any(&mut self) -> AnyRules {
        if self.has_any() {
            match self.field_type.take() {
                ::std::option::Option::Some(FieldRules_oneof_type::any(v)) => v,
                _ => panic!(),
            }
        } else {
            AnyRules::new()
        }
    }

    // optional .validate.DurationRules duration = 21;


    pub fn get_duration(&self) -> &DurationRules {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::duration(ref v)) => v,
            _ => <DurationRules as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_duration(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_duration(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::duration(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_duration(&mut self, v: DurationRules) {
        self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::duration(v))
    }

    // Mutable pointer to the field.
    pub fn mut_duration(&mut self) -> &mut DurationRules {
        if let ::std::option::Option::Some(FieldRules_oneof_type::duration(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::duration(DurationRules::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::duration(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_duration(&mut self) -> DurationRules {
        if self.has_duration() {
            match self.field_type.take() {
                ::std::option::Option::Some(FieldRules_oneof_type::duration(v)) => v,
                _ => panic!(),
            }
        } else {
            DurationRules::new()
        }
    }

    // optional .validate.TimestampRules timestamp = 22;


    pub fn get_timestamp(&self) -> &TimestampRules {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::timestamp(ref v)) => v,
            _ => <TimestampRules as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_timestamp(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_timestamp(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::timestamp(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: TimestampRules) {
        self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::timestamp(v))
    }

    // Mutable pointer to the field.
    pub fn mut_timestamp(&mut self) -> &mut TimestampRules {
        if let ::std::option::Option::Some(FieldRules_oneof_type::timestamp(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::timestamp(TimestampRules::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(FieldRules_oneof_type::timestamp(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_timestamp(&mut self) -> TimestampRules {
        if self.has_timestamp() {
            match self.field_type.take() {
                ::std::option::Option::Some(FieldRules_oneof_type::timestamp(v)) => v,
                _ => panic!(),
            }
        } else {
            TimestampRules::new()
        }
    }
}

impl ::protobuf::Message for FieldRules {
    fn is_initialized(&self) -> bool {
        for v in &self.message {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(FieldRules_oneof_type::float(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FieldRules_oneof_type::double(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FieldRules_oneof_type::int32(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FieldRules_oneof_type::int64(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FieldRules_oneof_type::uint32(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FieldRules_oneof_type::uint64(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FieldRules_oneof_type::sint32(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FieldRules_oneof_type::sint64(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FieldRules_oneof_type::fixed32(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FieldRules_oneof_type::fixed64(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FieldRules_oneof_type::sfixed32(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FieldRules_oneof_type::sfixed64(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FieldRules_oneof_type::bool(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FieldRules_oneof_type::string(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FieldRules_oneof_type::bytes(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FieldRules_oneof_type::field_enum(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FieldRules_oneof_type::repeated(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FieldRules_oneof_type::map(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FieldRules_oneof_type::any(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FieldRules_oneof_type::duration(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FieldRules_oneof_type::timestamp(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                17 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.message)?;
                },
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::float(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::double(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::int32(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::int64(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::uint32(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::uint64(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::sint32(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::sint64(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::fixed32(is.read_message()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::fixed64(is.read_message()?));
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::sfixed32(is.read_message()?));
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::sfixed64(is.read_message()?));
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::bool(is.read_message()?));
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::string(is.read_message()?));
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::bytes(is.read_message()?));
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::field_enum(is.read_message()?));
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::repeated(is.read_message()?));
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::map(is.read_message()?));
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::any(is.read_message()?));
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::duration(is.read_message()?));
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(FieldRules_oneof_type::timestamp(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.message.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.field_type {
            match v {
                &FieldRules_oneof_type::float(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FieldRules_oneof_type::double(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FieldRules_oneof_type::int32(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FieldRules_oneof_type::int64(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FieldRules_oneof_type::uint32(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FieldRules_oneof_type::uint64(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FieldRules_oneof_type::sint32(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FieldRules_oneof_type::sint64(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FieldRules_oneof_type::fixed32(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FieldRules_oneof_type::fixed64(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FieldRules_oneof_type::sfixed32(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FieldRules_oneof_type::sfixed64(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FieldRules_oneof_type::bool(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FieldRules_oneof_type::string(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FieldRules_oneof_type::bytes(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FieldRules_oneof_type::field_enum(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FieldRules_oneof_type::repeated(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FieldRules_oneof_type::map(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FieldRules_oneof_type::any(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FieldRules_oneof_type::duration(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FieldRules_oneof_type::timestamp(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.message.as_ref() {
            os.write_tag(17, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.field_type {
            match v {
                &FieldRules_oneof_type::float(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FieldRules_oneof_type::double(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FieldRules_oneof_type::int32(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FieldRules_oneof_type::int64(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FieldRules_oneof_type::uint32(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FieldRules_oneof_type::uint64(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FieldRules_oneof_type::sint32(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FieldRules_oneof_type::sint64(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FieldRules_oneof_type::fixed32(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FieldRules_oneof_type::fixed64(ref v) => {
                    os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FieldRules_oneof_type::sfixed32(ref v) => {
                    os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FieldRules_oneof_type::sfixed64(ref v) => {
                    os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FieldRules_oneof_type::bool(ref v) => {
                    os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FieldRules_oneof_type::string(ref v) => {
                    os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FieldRules_oneof_type::bytes(ref v) => {
                    os.write_tag(15, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FieldRules_oneof_type::field_enum(ref v) => {
                    os.write_tag(16, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FieldRules_oneof_type::repeated(ref v) => {
                    os.write_tag(18, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FieldRules_oneof_type::map(ref v) => {
                    os.write_tag(19, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FieldRules_oneof_type::any(ref v) => {
                    os.write_tag(20, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FieldRules_oneof_type::duration(ref v) => {
                    os.write_tag(21, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FieldRules_oneof_type::timestamp(ref v) => {
                    os.write_tag(22, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FieldRules {
        FieldRules::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MessageRules>>(
                "message",
                |m: &FieldRules| { &m.message },
                |m: &mut FieldRules| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, FloatRules>(
                "float",
                FieldRules::has_float,
                FieldRules::get_float,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, DoubleRules>(
                "double",
                FieldRules::has_double,
                FieldRules::get_double,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Int32Rules>(
                "int32",
                FieldRules::has_int32,
                FieldRules::get_int32,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Int64Rules>(
                "int64",
                FieldRules::has_int64,
                FieldRules::get_int64,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, UInt32Rules>(
                "uint32",
                FieldRules::has_uint32,
                FieldRules::get_uint32,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, UInt64Rules>(
                "uint64",
                FieldRules::has_uint64,
                FieldRules::get_uint64,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SInt32Rules>(
                "sint32",
                FieldRules::has_sint32,
                FieldRules::get_sint32,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SInt64Rules>(
                "sint64",
                FieldRules::has_sint64,
                FieldRules::get_sint64,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Fixed32Rules>(
                "fixed32",
                FieldRules::has_fixed32,
                FieldRules::get_fixed32,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Fixed64Rules>(
                "fixed64",
                FieldRules::has_fixed64,
                FieldRules::get_fixed64,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SFixed32Rules>(
                "sfixed32",
                FieldRules::has_sfixed32,
                FieldRules::get_sfixed32,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SFixed64Rules>(
                "sfixed64",
                FieldRules::has_sfixed64,
                FieldRules::get_sfixed64,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, BoolRules>(
                "bool",
                FieldRules::has_bool,
                FieldRules::get_bool,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, StringRules>(
                "string",
                FieldRules::has_string,
                FieldRules::get_string,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, BytesRules>(
                "bytes",
                FieldRules::has_bytes,
                FieldRules::get_bytes,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, EnumRules>(
                "enum",
                FieldRules::has_field_enum,
                FieldRules::get_field_enum,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, RepeatedRules>(
                "repeated",
                FieldRules::has_repeated,
                FieldRules::get_repeated,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, MapRules>(
                "map",
                FieldRules::has_map,
                FieldRules::get_map,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, AnyRules>(
                "any",
                FieldRules::has_any,
                FieldRules::get_any,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, DurationRules>(
                "duration",
                FieldRules::has_duration,
                FieldRules::get_duration,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, TimestampRules>(
                "timestamp",
                FieldRules::has_timestamp,
                FieldRules::get_timestamp,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FieldRules>(
                "FieldRules",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FieldRules {
        static instance: ::protobuf::rt::LazyV2<FieldRules> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FieldRules::new)
    }
}

impl ::protobuf::Clear for FieldRules {
    fn clear(&mut self) {
        self.message.clear();
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FieldRules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FieldRules {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FloatRules {
    // message fields
    field_const: ::std::option::Option<f32>,
    lt: ::std::option::Option<f32>,
    lte: ::std::option::Option<f32>,
    gt: ::std::option::Option<f32>,
    gte: ::std::option::Option<f32>,
    pub field_in: ::std::vec::Vec<f32>,
    pub not_in: ::std::vec::Vec<f32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FloatRules {
    fn default() -> &'a FloatRules {
        <FloatRules as ::protobuf::Message>::default_instance()
    }
}

impl FloatRules {
    pub fn new() -> FloatRules {
        ::std::default::Default::default()
    }

    // optional float const = 1;


    pub fn get_field_const(&self) -> f32 {
        self.field_const.unwrap_or(0.)
    }
    pub fn clear_field_const(&mut self) {
        self.field_const = ::std::option::Option::None;
    }

    pub fn has_field_const(&self) -> bool {
        self.field_const.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_const(&mut self, v: f32) {
        self.field_const = ::std::option::Option::Some(v);
    }

    // optional float lt = 2;


    pub fn get_lt(&self) -> f32 {
        self.lt.unwrap_or(0.)
    }
    pub fn clear_lt(&mut self) {
        self.lt = ::std::option::Option::None;
    }

    pub fn has_lt(&self) -> bool {
        self.lt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lt(&mut self, v: f32) {
        self.lt = ::std::option::Option::Some(v);
    }

    // optional float lte = 3;


    pub fn get_lte(&self) -> f32 {
        self.lte.unwrap_or(0.)
    }
    pub fn clear_lte(&mut self) {
        self.lte = ::std::option::Option::None;
    }

    pub fn has_lte(&self) -> bool {
        self.lte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lte(&mut self, v: f32) {
        self.lte = ::std::option::Option::Some(v);
    }

    // optional float gt = 4;


    pub fn get_gt(&self) -> f32 {
        self.gt.unwrap_or(0.)
    }
    pub fn clear_gt(&mut self) {
        self.gt = ::std::option::Option::None;
    }

    pub fn has_gt(&self) -> bool {
        self.gt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gt(&mut self, v: f32) {
        self.gt = ::std::option::Option::Some(v);
    }

    // optional float gte = 5;


    pub fn get_gte(&self) -> f32 {
        self.gte.unwrap_or(0.)
    }
    pub fn clear_gte(&mut self) {
        self.gte = ::std::option::Option::None;
    }

    pub fn has_gte(&self) -> bool {
        self.gte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gte(&mut self, v: f32) {
        self.gte = ::std::option::Option::Some(v);
    }

    // repeated float in = 6;


    pub fn get_field_in(&self) -> &[f32] {
        &self.field_in
    }
    pub fn clear_field_in(&mut self) {
        self.field_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_in(&mut self, v: ::std::vec::Vec<f32>) {
        self.field_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_field_in(&mut self) -> &mut ::std::vec::Vec<f32> {
        &mut self.field_in
    }

    // Take field
    pub fn take_field_in(&mut self) -> ::std::vec::Vec<f32> {
        ::std::mem::replace(&mut self.field_in, ::std::vec::Vec::new())
    }

    // repeated float not_in = 7;


    pub fn get_not_in(&self) -> &[f32] {
        &self.not_in
    }
    pub fn clear_not_in(&mut self) {
        self.not_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_not_in(&mut self, v: ::std::vec::Vec<f32>) {
        self.not_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_not_in(&mut self) -> &mut ::std::vec::Vec<f32> {
        &mut self.not_in
    }

    // Take field
    pub fn take_not_in(&mut self) -> ::std::vec::Vec<f32> {
        ::std::mem::replace(&mut self.not_in, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for FloatRules {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.field_const = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.lt = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.lte = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gt = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gte = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_repeated_float_into(wire_type, is, &mut self.field_in)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_float_into(wire_type, is, &mut self.not_in)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_const {
            my_size += 5;
        }
        if let Some(v) = self.lt {
            my_size += 5;
        }
        if let Some(v) = self.lte {
            my_size += 5;
        }
        if let Some(v) = self.gt {
            my_size += 5;
        }
        if let Some(v) = self.gte {
            my_size += 5;
        }
        my_size += 5 * self.field_in.len() as u32;
        my_size += 5 * self.not_in.len() as u32;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_const {
            os.write_float(1, v)?;
        }
        if let Some(v) = self.lt {
            os.write_float(2, v)?;
        }
        if let Some(v) = self.lte {
            os.write_float(3, v)?;
        }
        if let Some(v) = self.gt {
            os.write_float(4, v)?;
        }
        if let Some(v) = self.gte {
            os.write_float(5, v)?;
        }
        for v in &self.field_in {
            os.write_float(6, *v)?;
        };
        for v in &self.not_in {
            os.write_float(7, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FloatRules {
        FloatRules::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "const",
                |m: &FloatRules| { &m.field_const },
                |m: &mut FloatRules| { &mut m.field_const },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "lt",
                |m: &FloatRules| { &m.lt },
                |m: &mut FloatRules| { &mut m.lt },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "lte",
                |m: &FloatRules| { &m.lte },
                |m: &mut FloatRules| { &mut m.lte },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gt",
                |m: &FloatRules| { &m.gt },
                |m: &mut FloatRules| { &mut m.gt },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gte",
                |m: &FloatRules| { &m.gte },
                |m: &mut FloatRules| { &mut m.gte },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "in",
                |m: &FloatRules| { &m.field_in },
                |m: &mut FloatRules| { &mut m.field_in },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "not_in",
                |m: &FloatRules| { &m.not_in },
                |m: &mut FloatRules| { &mut m.not_in },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FloatRules>(
                "FloatRules",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FloatRules {
        static instance: ::protobuf::rt::LazyV2<FloatRules> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FloatRules::new)
    }
}

impl ::protobuf::Clear for FloatRules {
    fn clear(&mut self) {
        self.field_const = ::std::option::Option::None;
        self.lt = ::std::option::Option::None;
        self.lte = ::std::option::Option::None;
        self.gt = ::std::option::Option::None;
        self.gte = ::std::option::Option::None;
        self.field_in.clear();
        self.not_in.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FloatRules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FloatRules {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DoubleRules {
    // message fields
    field_const: ::std::option::Option<f64>,
    lt: ::std::option::Option<f64>,
    lte: ::std::option::Option<f64>,
    gt: ::std::option::Option<f64>,
    gte: ::std::option::Option<f64>,
    pub field_in: ::std::vec::Vec<f64>,
    pub not_in: ::std::vec::Vec<f64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DoubleRules {
    fn default() -> &'a DoubleRules {
        <DoubleRules as ::protobuf::Message>::default_instance()
    }
}

impl DoubleRules {
    pub fn new() -> DoubleRules {
        ::std::default::Default::default()
    }

    // optional double const = 1;


    pub fn get_field_const(&self) -> f64 {
        self.field_const.unwrap_or(0.)
    }
    pub fn clear_field_const(&mut self) {
        self.field_const = ::std::option::Option::None;
    }

    pub fn has_field_const(&self) -> bool {
        self.field_const.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_const(&mut self, v: f64) {
        self.field_const = ::std::option::Option::Some(v);
    }

    // optional double lt = 2;


    pub fn get_lt(&self) -> f64 {
        self.lt.unwrap_or(0.)
    }
    pub fn clear_lt(&mut self) {
        self.lt = ::std::option::Option::None;
    }

    pub fn has_lt(&self) -> bool {
        self.lt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lt(&mut self, v: f64) {
        self.lt = ::std::option::Option::Some(v);
    }

    // optional double lte = 3;


    pub fn get_lte(&self) -> f64 {
        self.lte.unwrap_or(0.)
    }
    pub fn clear_lte(&mut self) {
        self.lte = ::std::option::Option::None;
    }

    pub fn has_lte(&self) -> bool {
        self.lte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lte(&mut self, v: f64) {
        self.lte = ::std::option::Option::Some(v);
    }

    // optional double gt = 4;


    pub fn get_gt(&self) -> f64 {
        self.gt.unwrap_or(0.)
    }
    pub fn clear_gt(&mut self) {
        self.gt = ::std::option::Option::None;
    }

    pub fn has_gt(&self) -> bool {
        self.gt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gt(&mut self, v: f64) {
        self.gt = ::std::option::Option::Some(v);
    }

    // optional double gte = 5;


    pub fn get_gte(&self) -> f64 {
        self.gte.unwrap_or(0.)
    }
    pub fn clear_gte(&mut self) {
        self.gte = ::std::option::Option::None;
    }

    pub fn has_gte(&self) -> bool {
        self.gte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gte(&mut self, v: f64) {
        self.gte = ::std::option::Option::Some(v);
    }

    // repeated double in = 6;


    pub fn get_field_in(&self) -> &[f64] {
        &self.field_in
    }
    pub fn clear_field_in(&mut self) {
        self.field_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_in(&mut self, v: ::std::vec::Vec<f64>) {
        self.field_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_field_in(&mut self) -> &mut ::std::vec::Vec<f64> {
        &mut self.field_in
    }

    // Take field
    pub fn take_field_in(&mut self) -> ::std::vec::Vec<f64> {
        ::std::mem::replace(&mut self.field_in, ::std::vec::Vec::new())
    }

    // repeated double not_in = 7;


    pub fn get_not_in(&self) -> &[f64] {
        &self.not_in
    }
    pub fn clear_not_in(&mut self) {
        self.not_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_not_in(&mut self, v: ::std::vec::Vec<f64>) {
        self.not_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_not_in(&mut self) -> &mut ::std::vec::Vec<f64> {
        &mut self.not_in
    }

    // Take field
    pub fn take_not_in(&mut self) -> ::std::vec::Vec<f64> {
        ::std::mem::replace(&mut self.not_in, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for DoubleRules {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.field_const = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.lt = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.lte = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.gt = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.gte = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_repeated_double_into(wire_type, is, &mut self.field_in)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_double_into(wire_type, is, &mut self.not_in)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_const {
            my_size += 9;
        }
        if let Some(v) = self.lt {
            my_size += 9;
        }
        if let Some(v) = self.lte {
            my_size += 9;
        }
        if let Some(v) = self.gt {
            my_size += 9;
        }
        if let Some(v) = self.gte {
            my_size += 9;
        }
        my_size += 9 * self.field_in.len() as u32;
        my_size += 9 * self.not_in.len() as u32;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_const {
            os.write_double(1, v)?;
        }
        if let Some(v) = self.lt {
            os.write_double(2, v)?;
        }
        if let Some(v) = self.lte {
            os.write_double(3, v)?;
        }
        if let Some(v) = self.gt {
            os.write_double(4, v)?;
        }
        if let Some(v) = self.gte {
            os.write_double(5, v)?;
        }
        for v in &self.field_in {
            os.write_double(6, *v)?;
        };
        for v in &self.not_in {
            os.write_double(7, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DoubleRules {
        DoubleRules::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "const",
                |m: &DoubleRules| { &m.field_const },
                |m: &mut DoubleRules| { &mut m.field_const },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "lt",
                |m: &DoubleRules| { &m.lt },
                |m: &mut DoubleRules| { &mut m.lt },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "lte",
                |m: &DoubleRules| { &m.lte },
                |m: &mut DoubleRules| { &mut m.lte },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "gt",
                |m: &DoubleRules| { &m.gt },
                |m: &mut DoubleRules| { &mut m.gt },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "gte",
                |m: &DoubleRules| { &m.gte },
                |m: &mut DoubleRules| { &mut m.gte },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "in",
                |m: &DoubleRules| { &m.field_in },
                |m: &mut DoubleRules| { &mut m.field_in },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "not_in",
                |m: &DoubleRules| { &m.not_in },
                |m: &mut DoubleRules| { &mut m.not_in },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DoubleRules>(
                "DoubleRules",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DoubleRules {
        static instance: ::protobuf::rt::LazyV2<DoubleRules> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DoubleRules::new)
    }
}

impl ::protobuf::Clear for DoubleRules {
    fn clear(&mut self) {
        self.field_const = ::std::option::Option::None;
        self.lt = ::std::option::Option::None;
        self.lte = ::std::option::Option::None;
        self.gt = ::std::option::Option::None;
        self.gte = ::std::option::Option::None;
        self.field_in.clear();
        self.not_in.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DoubleRules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DoubleRules {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Int32Rules {
    // message fields
    field_const: ::std::option::Option<i32>,
    lt: ::std::option::Option<i32>,
    lte: ::std::option::Option<i32>,
    gt: ::std::option::Option<i32>,
    gte: ::std::option::Option<i32>,
    pub field_in: ::std::vec::Vec<i32>,
    pub not_in: ::std::vec::Vec<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Int32Rules {
    fn default() -> &'a Int32Rules {
        <Int32Rules as ::protobuf::Message>::default_instance()
    }
}

impl Int32Rules {
    pub fn new() -> Int32Rules {
        ::std::default::Default::default()
    }

    // optional int32 const = 1;


    pub fn get_field_const(&self) -> i32 {
        self.field_const.unwrap_or(0)
    }
    pub fn clear_field_const(&mut self) {
        self.field_const = ::std::option::Option::None;
    }

    pub fn has_field_const(&self) -> bool {
        self.field_const.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_const(&mut self, v: i32) {
        self.field_const = ::std::option::Option::Some(v);
    }

    // optional int32 lt = 2;


    pub fn get_lt(&self) -> i32 {
        self.lt.unwrap_or(0)
    }
    pub fn clear_lt(&mut self) {
        self.lt = ::std::option::Option::None;
    }

    pub fn has_lt(&self) -> bool {
        self.lt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lt(&mut self, v: i32) {
        self.lt = ::std::option::Option::Some(v);
    }

    // optional int32 lte = 3;


    pub fn get_lte(&self) -> i32 {
        self.lte.unwrap_or(0)
    }
    pub fn clear_lte(&mut self) {
        self.lte = ::std::option::Option::None;
    }

    pub fn has_lte(&self) -> bool {
        self.lte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lte(&mut self, v: i32) {
        self.lte = ::std::option::Option::Some(v);
    }

    // optional int32 gt = 4;


    pub fn get_gt(&self) -> i32 {
        self.gt.unwrap_or(0)
    }
    pub fn clear_gt(&mut self) {
        self.gt = ::std::option::Option::None;
    }

    pub fn has_gt(&self) -> bool {
        self.gt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gt(&mut self, v: i32) {
        self.gt = ::std::option::Option::Some(v);
    }

    // optional int32 gte = 5;


    pub fn get_gte(&self) -> i32 {
        self.gte.unwrap_or(0)
    }
    pub fn clear_gte(&mut self) {
        self.gte = ::std::option::Option::None;
    }

    pub fn has_gte(&self) -> bool {
        self.gte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gte(&mut self, v: i32) {
        self.gte = ::std::option::Option::Some(v);
    }

    // repeated int32 in = 6;


    pub fn get_field_in(&self) -> &[i32] {
        &self.field_in
    }
    pub fn clear_field_in(&mut self) {
        self.field_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_in(&mut self, v: ::std::vec::Vec<i32>) {
        self.field_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_field_in(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.field_in
    }

    // Take field
    pub fn take_field_in(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.field_in, ::std::vec::Vec::new())
    }

    // repeated int32 not_in = 7;


    pub fn get_not_in(&self) -> &[i32] {
        &self.not_in
    }
    pub fn clear_not_in(&mut self) {
        self.not_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_not_in(&mut self, v: ::std::vec::Vec<i32>) {
        self.not_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_not_in(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.not_in
    }

    // Take field
    pub fn take_not_in(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.not_in, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Int32Rules {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.field_const = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.lt = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.lte = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.gt = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.gte = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.field_in)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.not_in)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_const {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.lt {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.lte {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.gt {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.gte {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.field_in {
            my_size += ::protobuf::rt::value_size(6, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.not_in {
            my_size += ::protobuf::rt::value_size(7, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_const {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.lt {
            os.write_int32(2, v)?;
        }
        if let Some(v) = self.lte {
            os.write_int32(3, v)?;
        }
        if let Some(v) = self.gt {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.gte {
            os.write_int32(5, v)?;
        }
        for v in &self.field_in {
            os.write_int32(6, *v)?;
        };
        for v in &self.not_in {
            os.write_int32(7, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Int32Rules {
        Int32Rules::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "const",
                |m: &Int32Rules| { &m.field_const },
                |m: &mut Int32Rules| { &mut m.field_const },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "lt",
                |m: &Int32Rules| { &m.lt },
                |m: &mut Int32Rules| { &mut m.lt },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "lte",
                |m: &Int32Rules| { &m.lte },
                |m: &mut Int32Rules| { &mut m.lte },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "gt",
                |m: &Int32Rules| { &m.gt },
                |m: &mut Int32Rules| { &mut m.gt },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "gte",
                |m: &Int32Rules| { &m.gte },
                |m: &mut Int32Rules| { &mut m.gte },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "in",
                |m: &Int32Rules| { &m.field_in },
                |m: &mut Int32Rules| { &mut m.field_in },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "not_in",
                |m: &Int32Rules| { &m.not_in },
                |m: &mut Int32Rules| { &mut m.not_in },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Int32Rules>(
                "Int32Rules",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Int32Rules {
        static instance: ::protobuf::rt::LazyV2<Int32Rules> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Int32Rules::new)
    }
}

impl ::protobuf::Clear for Int32Rules {
    fn clear(&mut self) {
        self.field_const = ::std::option::Option::None;
        self.lt = ::std::option::Option::None;
        self.lte = ::std::option::Option::None;
        self.gt = ::std::option::Option::None;
        self.gte = ::std::option::Option::None;
        self.field_in.clear();
        self.not_in.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Int32Rules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Int32Rules {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Int64Rules {
    // message fields
    field_const: ::std::option::Option<i64>,
    lt: ::std::option::Option<i64>,
    lte: ::std::option::Option<i64>,
    gt: ::std::option::Option<i64>,
    gte: ::std::option::Option<i64>,
    pub field_in: ::std::vec::Vec<i64>,
    pub not_in: ::std::vec::Vec<i64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Int64Rules {
    fn default() -> &'a Int64Rules {
        <Int64Rules as ::protobuf::Message>::default_instance()
    }
}

impl Int64Rules {
    pub fn new() -> Int64Rules {
        ::std::default::Default::default()
    }

    // optional int64 const = 1;


    pub fn get_field_const(&self) -> i64 {
        self.field_const.unwrap_or(0)
    }
    pub fn clear_field_const(&mut self) {
        self.field_const = ::std::option::Option::None;
    }

    pub fn has_field_const(&self) -> bool {
        self.field_const.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_const(&mut self, v: i64) {
        self.field_const = ::std::option::Option::Some(v);
    }

    // optional int64 lt = 2;


    pub fn get_lt(&self) -> i64 {
        self.lt.unwrap_or(0)
    }
    pub fn clear_lt(&mut self) {
        self.lt = ::std::option::Option::None;
    }

    pub fn has_lt(&self) -> bool {
        self.lt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lt(&mut self, v: i64) {
        self.lt = ::std::option::Option::Some(v);
    }

    // optional int64 lte = 3;


    pub fn get_lte(&self) -> i64 {
        self.lte.unwrap_or(0)
    }
    pub fn clear_lte(&mut self) {
        self.lte = ::std::option::Option::None;
    }

    pub fn has_lte(&self) -> bool {
        self.lte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lte(&mut self, v: i64) {
        self.lte = ::std::option::Option::Some(v);
    }

    // optional int64 gt = 4;


    pub fn get_gt(&self) -> i64 {
        self.gt.unwrap_or(0)
    }
    pub fn clear_gt(&mut self) {
        self.gt = ::std::option::Option::None;
    }

    pub fn has_gt(&self) -> bool {
        self.gt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gt(&mut self, v: i64) {
        self.gt = ::std::option::Option::Some(v);
    }

    // optional int64 gte = 5;


    pub fn get_gte(&self) -> i64 {
        self.gte.unwrap_or(0)
    }
    pub fn clear_gte(&mut self) {
        self.gte = ::std::option::Option::None;
    }

    pub fn has_gte(&self) -> bool {
        self.gte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gte(&mut self, v: i64) {
        self.gte = ::std::option::Option::Some(v);
    }

    // repeated int64 in = 6;


    pub fn get_field_in(&self) -> &[i64] {
        &self.field_in
    }
    pub fn clear_field_in(&mut self) {
        self.field_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_in(&mut self, v: ::std::vec::Vec<i64>) {
        self.field_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_field_in(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.field_in
    }

    // Take field
    pub fn take_field_in(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.field_in, ::std::vec::Vec::new())
    }

    // repeated int64 not_in = 7;


    pub fn get_not_in(&self) -> &[i64] {
        &self.not_in
    }
    pub fn clear_not_in(&mut self) {
        self.not_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_not_in(&mut self, v: ::std::vec::Vec<i64>) {
        self.not_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_not_in(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.not_in
    }

    // Take field
    pub fn take_not_in(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.not_in, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Int64Rules {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.field_const = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.lt = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.lte = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.gt = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.gte = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_repeated_int64_into(wire_type, is, &mut self.field_in)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_int64_into(wire_type, is, &mut self.not_in)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_const {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.lt {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.lte {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.gt {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.gte {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.field_in {
            my_size += ::protobuf::rt::value_size(6, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.not_in {
            my_size += ::protobuf::rt::value_size(7, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_const {
            os.write_int64(1, v)?;
        }
        if let Some(v) = self.lt {
            os.write_int64(2, v)?;
        }
        if let Some(v) = self.lte {
            os.write_int64(3, v)?;
        }
        if let Some(v) = self.gt {
            os.write_int64(4, v)?;
        }
        if let Some(v) = self.gte {
            os.write_int64(5, v)?;
        }
        for v in &self.field_in {
            os.write_int64(6, *v)?;
        };
        for v in &self.not_in {
            os.write_int64(7, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Int64Rules {
        Int64Rules::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "const",
                |m: &Int64Rules| { &m.field_const },
                |m: &mut Int64Rules| { &mut m.field_const },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "lt",
                |m: &Int64Rules| { &m.lt },
                |m: &mut Int64Rules| { &mut m.lt },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "lte",
                |m: &Int64Rules| { &m.lte },
                |m: &mut Int64Rules| { &mut m.lte },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "gt",
                |m: &Int64Rules| { &m.gt },
                |m: &mut Int64Rules| { &mut m.gt },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "gte",
                |m: &Int64Rules| { &m.gte },
                |m: &mut Int64Rules| { &mut m.gte },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "in",
                |m: &Int64Rules| { &m.field_in },
                |m: &mut Int64Rules| { &mut m.field_in },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "not_in",
                |m: &Int64Rules| { &m.not_in },
                |m: &mut Int64Rules| { &mut m.not_in },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Int64Rules>(
                "Int64Rules",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Int64Rules {
        static instance: ::protobuf::rt::LazyV2<Int64Rules> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Int64Rules::new)
    }
}

impl ::protobuf::Clear for Int64Rules {
    fn clear(&mut self) {
        self.field_const = ::std::option::Option::None;
        self.lt = ::std::option::Option::None;
        self.lte = ::std::option::Option::None;
        self.gt = ::std::option::Option::None;
        self.gte = ::std::option::Option::None;
        self.field_in.clear();
        self.not_in.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Int64Rules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Int64Rules {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UInt32Rules {
    // message fields
    field_const: ::std::option::Option<u32>,
    lt: ::std::option::Option<u32>,
    lte: ::std::option::Option<u32>,
    gt: ::std::option::Option<u32>,
    gte: ::std::option::Option<u32>,
    pub field_in: ::std::vec::Vec<u32>,
    pub not_in: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UInt32Rules {
    fn default() -> &'a UInt32Rules {
        <UInt32Rules as ::protobuf::Message>::default_instance()
    }
}

impl UInt32Rules {
    pub fn new() -> UInt32Rules {
        ::std::default::Default::default()
    }

    // optional uint32 const = 1;


    pub fn get_field_const(&self) -> u32 {
        self.field_const.unwrap_or(0)
    }
    pub fn clear_field_const(&mut self) {
        self.field_const = ::std::option::Option::None;
    }

    pub fn has_field_const(&self) -> bool {
        self.field_const.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_const(&mut self, v: u32) {
        self.field_const = ::std::option::Option::Some(v);
    }

    // optional uint32 lt = 2;


    pub fn get_lt(&self) -> u32 {
        self.lt.unwrap_or(0)
    }
    pub fn clear_lt(&mut self) {
        self.lt = ::std::option::Option::None;
    }

    pub fn has_lt(&self) -> bool {
        self.lt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lt(&mut self, v: u32) {
        self.lt = ::std::option::Option::Some(v);
    }

    // optional uint32 lte = 3;


    pub fn get_lte(&self) -> u32 {
        self.lte.unwrap_or(0)
    }
    pub fn clear_lte(&mut self) {
        self.lte = ::std::option::Option::None;
    }

    pub fn has_lte(&self) -> bool {
        self.lte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lte(&mut self, v: u32) {
        self.lte = ::std::option::Option::Some(v);
    }

    // optional uint32 gt = 4;


    pub fn get_gt(&self) -> u32 {
        self.gt.unwrap_or(0)
    }
    pub fn clear_gt(&mut self) {
        self.gt = ::std::option::Option::None;
    }

    pub fn has_gt(&self) -> bool {
        self.gt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gt(&mut self, v: u32) {
        self.gt = ::std::option::Option::Some(v);
    }

    // optional uint32 gte = 5;


    pub fn get_gte(&self) -> u32 {
        self.gte.unwrap_or(0)
    }
    pub fn clear_gte(&mut self) {
        self.gte = ::std::option::Option::None;
    }

    pub fn has_gte(&self) -> bool {
        self.gte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gte(&mut self, v: u32) {
        self.gte = ::std::option::Option::Some(v);
    }

    // repeated uint32 in = 6;


    pub fn get_field_in(&self) -> &[u32] {
        &self.field_in
    }
    pub fn clear_field_in(&mut self) {
        self.field_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_in(&mut self, v: ::std::vec::Vec<u32>) {
        self.field_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_field_in(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.field_in
    }

    // Take field
    pub fn take_field_in(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.field_in, ::std::vec::Vec::new())
    }

    // repeated uint32 not_in = 7;


    pub fn get_not_in(&self) -> &[u32] {
        &self.not_in
    }
    pub fn clear_not_in(&mut self) {
        self.not_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_not_in(&mut self, v: ::std::vec::Vec<u32>) {
        self.not_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_not_in(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.not_in
    }

    // Take field
    pub fn take_not_in(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.not_in, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for UInt32Rules {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.field_const = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.lt = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.lte = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.gt = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.gte = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.field_in)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.not_in)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_const {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.lt {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.lte {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.gt {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.gte {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.field_in {
            my_size += ::protobuf::rt::value_size(6, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.not_in {
            my_size += ::protobuf::rt::value_size(7, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_const {
            os.write_uint32(1, v)?;
        }
        if let Some(v) = self.lt {
            os.write_uint32(2, v)?;
        }
        if let Some(v) = self.lte {
            os.write_uint32(3, v)?;
        }
        if let Some(v) = self.gt {
            os.write_uint32(4, v)?;
        }
        if let Some(v) = self.gte {
            os.write_uint32(5, v)?;
        }
        for v in &self.field_in {
            os.write_uint32(6, *v)?;
        };
        for v in &self.not_in {
            os.write_uint32(7, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UInt32Rules {
        UInt32Rules::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "const",
                |m: &UInt32Rules| { &m.field_const },
                |m: &mut UInt32Rules| { &mut m.field_const },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "lt",
                |m: &UInt32Rules| { &m.lt },
                |m: &mut UInt32Rules| { &mut m.lt },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "lte",
                |m: &UInt32Rules| { &m.lte },
                |m: &mut UInt32Rules| { &mut m.lte },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "gt",
                |m: &UInt32Rules| { &m.gt },
                |m: &mut UInt32Rules| { &mut m.gt },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "gte",
                |m: &UInt32Rules| { &m.gte },
                |m: &mut UInt32Rules| { &mut m.gte },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "in",
                |m: &UInt32Rules| { &m.field_in },
                |m: &mut UInt32Rules| { &mut m.field_in },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "not_in",
                |m: &UInt32Rules| { &m.not_in },
                |m: &mut UInt32Rules| { &mut m.not_in },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UInt32Rules>(
                "UInt32Rules",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UInt32Rules {
        static instance: ::protobuf::rt::LazyV2<UInt32Rules> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UInt32Rules::new)
    }
}

impl ::protobuf::Clear for UInt32Rules {
    fn clear(&mut self) {
        self.field_const = ::std::option::Option::None;
        self.lt = ::std::option::Option::None;
        self.lte = ::std::option::Option::None;
        self.gt = ::std::option::Option::None;
        self.gte = ::std::option::Option::None;
        self.field_in.clear();
        self.not_in.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UInt32Rules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UInt32Rules {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UInt64Rules {
    // message fields
    field_const: ::std::option::Option<u64>,
    lt: ::std::option::Option<u64>,
    lte: ::std::option::Option<u64>,
    gt: ::std::option::Option<u64>,
    gte: ::std::option::Option<u64>,
    pub field_in: ::std::vec::Vec<u64>,
    pub not_in: ::std::vec::Vec<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UInt64Rules {
    fn default() -> &'a UInt64Rules {
        <UInt64Rules as ::protobuf::Message>::default_instance()
    }
}

impl UInt64Rules {
    pub fn new() -> UInt64Rules {
        ::std::default::Default::default()
    }

    // optional uint64 const = 1;


    pub fn get_field_const(&self) -> u64 {
        self.field_const.unwrap_or(0)
    }
    pub fn clear_field_const(&mut self) {
        self.field_const = ::std::option::Option::None;
    }

    pub fn has_field_const(&self) -> bool {
        self.field_const.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_const(&mut self, v: u64) {
        self.field_const = ::std::option::Option::Some(v);
    }

    // optional uint64 lt = 2;


    pub fn get_lt(&self) -> u64 {
        self.lt.unwrap_or(0)
    }
    pub fn clear_lt(&mut self) {
        self.lt = ::std::option::Option::None;
    }

    pub fn has_lt(&self) -> bool {
        self.lt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lt(&mut self, v: u64) {
        self.lt = ::std::option::Option::Some(v);
    }

    // optional uint64 lte = 3;


    pub fn get_lte(&self) -> u64 {
        self.lte.unwrap_or(0)
    }
    pub fn clear_lte(&mut self) {
        self.lte = ::std::option::Option::None;
    }

    pub fn has_lte(&self) -> bool {
        self.lte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lte(&mut self, v: u64) {
        self.lte = ::std::option::Option::Some(v);
    }

    // optional uint64 gt = 4;


    pub fn get_gt(&self) -> u64 {
        self.gt.unwrap_or(0)
    }
    pub fn clear_gt(&mut self) {
        self.gt = ::std::option::Option::None;
    }

    pub fn has_gt(&self) -> bool {
        self.gt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gt(&mut self, v: u64) {
        self.gt = ::std::option::Option::Some(v);
    }

    // optional uint64 gte = 5;


    pub fn get_gte(&self) -> u64 {
        self.gte.unwrap_or(0)
    }
    pub fn clear_gte(&mut self) {
        self.gte = ::std::option::Option::None;
    }

    pub fn has_gte(&self) -> bool {
        self.gte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gte(&mut self, v: u64) {
        self.gte = ::std::option::Option::Some(v);
    }

    // repeated uint64 in = 6;


    pub fn get_field_in(&self) -> &[u64] {
        &self.field_in
    }
    pub fn clear_field_in(&mut self) {
        self.field_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_in(&mut self, v: ::std::vec::Vec<u64>) {
        self.field_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_field_in(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.field_in
    }

    // Take field
    pub fn take_field_in(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.field_in, ::std::vec::Vec::new())
    }

    // repeated uint64 not_in = 7;


    pub fn get_not_in(&self) -> &[u64] {
        &self.not_in
    }
    pub fn clear_not_in(&mut self) {
        self.not_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_not_in(&mut self, v: ::std::vec::Vec<u64>) {
        self.not_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_not_in(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.not_in
    }

    // Take field
    pub fn take_not_in(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.not_in, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for UInt64Rules {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.field_const = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.lt = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.lte = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.gt = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.gte = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.field_in)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.not_in)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_const {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.lt {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.lte {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.gt {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.gte {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.field_in {
            my_size += ::protobuf::rt::value_size(6, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.not_in {
            my_size += ::protobuf::rt::value_size(7, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_const {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.lt {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.lte {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.gt {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.gte {
            os.write_uint64(5, v)?;
        }
        for v in &self.field_in {
            os.write_uint64(6, *v)?;
        };
        for v in &self.not_in {
            os.write_uint64(7, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UInt64Rules {
        UInt64Rules::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "const",
                |m: &UInt64Rules| { &m.field_const },
                |m: &mut UInt64Rules| { &mut m.field_const },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "lt",
                |m: &UInt64Rules| { &m.lt },
                |m: &mut UInt64Rules| { &mut m.lt },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "lte",
                |m: &UInt64Rules| { &m.lte },
                |m: &mut UInt64Rules| { &mut m.lte },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "gt",
                |m: &UInt64Rules| { &m.gt },
                |m: &mut UInt64Rules| { &mut m.gt },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "gte",
                |m: &UInt64Rules| { &m.gte },
                |m: &mut UInt64Rules| { &mut m.gte },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "in",
                |m: &UInt64Rules| { &m.field_in },
                |m: &mut UInt64Rules| { &mut m.field_in },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "not_in",
                |m: &UInt64Rules| { &m.not_in },
                |m: &mut UInt64Rules| { &mut m.not_in },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UInt64Rules>(
                "UInt64Rules",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UInt64Rules {
        static instance: ::protobuf::rt::LazyV2<UInt64Rules> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UInt64Rules::new)
    }
}

impl ::protobuf::Clear for UInt64Rules {
    fn clear(&mut self) {
        self.field_const = ::std::option::Option::None;
        self.lt = ::std::option::Option::None;
        self.lte = ::std::option::Option::None;
        self.gt = ::std::option::Option::None;
        self.gte = ::std::option::Option::None;
        self.field_in.clear();
        self.not_in.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UInt64Rules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UInt64Rules {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SInt32Rules {
    // message fields
    field_const: ::std::option::Option<i32>,
    lt: ::std::option::Option<i32>,
    lte: ::std::option::Option<i32>,
    gt: ::std::option::Option<i32>,
    gte: ::std::option::Option<i32>,
    pub field_in: ::std::vec::Vec<i32>,
    pub not_in: ::std::vec::Vec<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SInt32Rules {
    fn default() -> &'a SInt32Rules {
        <SInt32Rules as ::protobuf::Message>::default_instance()
    }
}

impl SInt32Rules {
    pub fn new() -> SInt32Rules {
        ::std::default::Default::default()
    }

    // optional sint32 const = 1;


    pub fn get_field_const(&self) -> i32 {
        self.field_const.unwrap_or(0)
    }
    pub fn clear_field_const(&mut self) {
        self.field_const = ::std::option::Option::None;
    }

    pub fn has_field_const(&self) -> bool {
        self.field_const.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_const(&mut self, v: i32) {
        self.field_const = ::std::option::Option::Some(v);
    }

    // optional sint32 lt = 2;


    pub fn get_lt(&self) -> i32 {
        self.lt.unwrap_or(0)
    }
    pub fn clear_lt(&mut self) {
        self.lt = ::std::option::Option::None;
    }

    pub fn has_lt(&self) -> bool {
        self.lt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lt(&mut self, v: i32) {
        self.lt = ::std::option::Option::Some(v);
    }

    // optional sint32 lte = 3;


    pub fn get_lte(&self) -> i32 {
        self.lte.unwrap_or(0)
    }
    pub fn clear_lte(&mut self) {
        self.lte = ::std::option::Option::None;
    }

    pub fn has_lte(&self) -> bool {
        self.lte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lte(&mut self, v: i32) {
        self.lte = ::std::option::Option::Some(v);
    }

    // optional sint32 gt = 4;


    pub fn get_gt(&self) -> i32 {
        self.gt.unwrap_or(0)
    }
    pub fn clear_gt(&mut self) {
        self.gt = ::std::option::Option::None;
    }

    pub fn has_gt(&self) -> bool {
        self.gt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gt(&mut self, v: i32) {
        self.gt = ::std::option::Option::Some(v);
    }

    // optional sint32 gte = 5;


    pub fn get_gte(&self) -> i32 {
        self.gte.unwrap_or(0)
    }
    pub fn clear_gte(&mut self) {
        self.gte = ::std::option::Option::None;
    }

    pub fn has_gte(&self) -> bool {
        self.gte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gte(&mut self, v: i32) {
        self.gte = ::std::option::Option::Some(v);
    }

    // repeated sint32 in = 6;


    pub fn get_field_in(&self) -> &[i32] {
        &self.field_in
    }
    pub fn clear_field_in(&mut self) {
        self.field_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_in(&mut self, v: ::std::vec::Vec<i32>) {
        self.field_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_field_in(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.field_in
    }

    // Take field
    pub fn take_field_in(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.field_in, ::std::vec::Vec::new())
    }

    // repeated sint32 not_in = 7;


    pub fn get_not_in(&self) -> &[i32] {
        &self.not_in
    }
    pub fn clear_not_in(&mut self) {
        self.not_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_not_in(&mut self, v: ::std::vec::Vec<i32>) {
        self.not_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_not_in(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.not_in
    }

    // Take field
    pub fn take_not_in(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.not_in, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for SInt32Rules {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.field_const = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.lt = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.lte = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.gt = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint32()?;
                    self.gte = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_repeated_sint32_into(wire_type, is, &mut self.field_in)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_sint32_into(wire_type, is, &mut self.not_in)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_const {
            my_size += ::protobuf::rt::value_varint_zigzag_size(1, v);
        }
        if let Some(v) = self.lt {
            my_size += ::protobuf::rt::value_varint_zigzag_size(2, v);
        }
        if let Some(v) = self.lte {
            my_size += ::protobuf::rt::value_varint_zigzag_size(3, v);
        }
        if let Some(v) = self.gt {
            my_size += ::protobuf::rt::value_varint_zigzag_size(4, v);
        }
        if let Some(v) = self.gte {
            my_size += ::protobuf::rt::value_varint_zigzag_size(5, v);
        }
        for value in &self.field_in {
            my_size += ::protobuf::rt::value_varint_zigzag_size(6, *value);
        };
        for value in &self.not_in {
            my_size += ::protobuf::rt::value_varint_zigzag_size(7, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_const {
            os.write_sint32(1, v)?;
        }
        if let Some(v) = self.lt {
            os.write_sint32(2, v)?;
        }
        if let Some(v) = self.lte {
            os.write_sint32(3, v)?;
        }
        if let Some(v) = self.gt {
            os.write_sint32(4, v)?;
        }
        if let Some(v) = self.gte {
            os.write_sint32(5, v)?;
        }
        for v in &self.field_in {
            os.write_sint32(6, *v)?;
        };
        for v in &self.not_in {
            os.write_sint32(7, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SInt32Rules {
        SInt32Rules::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                "const",
                |m: &SInt32Rules| { &m.field_const },
                |m: &mut SInt32Rules| { &mut m.field_const },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                "lt",
                |m: &SInt32Rules| { &m.lt },
                |m: &mut SInt32Rules| { &mut m.lt },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                "lte",
                |m: &SInt32Rules| { &m.lte },
                |m: &mut SInt32Rules| { &mut m.lte },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                "gt",
                |m: &SInt32Rules| { &m.gt },
                |m: &mut SInt32Rules| { &mut m.gt },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                "gte",
                |m: &SInt32Rules| { &m.gte },
                |m: &mut SInt32Rules| { &mut m.gte },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                "in",
                |m: &SInt32Rules| { &m.field_in },
                |m: &mut SInt32Rules| { &mut m.field_in },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeSint32>(
                "not_in",
                |m: &SInt32Rules| { &m.not_in },
                |m: &mut SInt32Rules| { &mut m.not_in },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SInt32Rules>(
                "SInt32Rules",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SInt32Rules {
        static instance: ::protobuf::rt::LazyV2<SInt32Rules> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SInt32Rules::new)
    }
}

impl ::protobuf::Clear for SInt32Rules {
    fn clear(&mut self) {
        self.field_const = ::std::option::Option::None;
        self.lt = ::std::option::Option::None;
        self.lte = ::std::option::Option::None;
        self.gt = ::std::option::Option::None;
        self.gte = ::std::option::Option::None;
        self.field_in.clear();
        self.not_in.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SInt32Rules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SInt32Rules {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SInt64Rules {
    // message fields
    field_const: ::std::option::Option<i64>,
    lt: ::std::option::Option<i64>,
    lte: ::std::option::Option<i64>,
    gt: ::std::option::Option<i64>,
    gte: ::std::option::Option<i64>,
    pub field_in: ::std::vec::Vec<i64>,
    pub not_in: ::std::vec::Vec<i64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SInt64Rules {
    fn default() -> &'a SInt64Rules {
        <SInt64Rules as ::protobuf::Message>::default_instance()
    }
}

impl SInt64Rules {
    pub fn new() -> SInt64Rules {
        ::std::default::Default::default()
    }

    // optional sint64 const = 1;


    pub fn get_field_const(&self) -> i64 {
        self.field_const.unwrap_or(0)
    }
    pub fn clear_field_const(&mut self) {
        self.field_const = ::std::option::Option::None;
    }

    pub fn has_field_const(&self) -> bool {
        self.field_const.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_const(&mut self, v: i64) {
        self.field_const = ::std::option::Option::Some(v);
    }

    // optional sint64 lt = 2;


    pub fn get_lt(&self) -> i64 {
        self.lt.unwrap_or(0)
    }
    pub fn clear_lt(&mut self) {
        self.lt = ::std::option::Option::None;
    }

    pub fn has_lt(&self) -> bool {
        self.lt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lt(&mut self, v: i64) {
        self.lt = ::std::option::Option::Some(v);
    }

    // optional sint64 lte = 3;


    pub fn get_lte(&self) -> i64 {
        self.lte.unwrap_or(0)
    }
    pub fn clear_lte(&mut self) {
        self.lte = ::std::option::Option::None;
    }

    pub fn has_lte(&self) -> bool {
        self.lte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lte(&mut self, v: i64) {
        self.lte = ::std::option::Option::Some(v);
    }

    // optional sint64 gt = 4;


    pub fn get_gt(&self) -> i64 {
        self.gt.unwrap_or(0)
    }
    pub fn clear_gt(&mut self) {
        self.gt = ::std::option::Option::None;
    }

    pub fn has_gt(&self) -> bool {
        self.gt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gt(&mut self, v: i64) {
        self.gt = ::std::option::Option::Some(v);
    }

    // optional sint64 gte = 5;


    pub fn get_gte(&self) -> i64 {
        self.gte.unwrap_or(0)
    }
    pub fn clear_gte(&mut self) {
        self.gte = ::std::option::Option::None;
    }

    pub fn has_gte(&self) -> bool {
        self.gte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gte(&mut self, v: i64) {
        self.gte = ::std::option::Option::Some(v);
    }

    // repeated sint64 in = 6;


    pub fn get_field_in(&self) -> &[i64] {
        &self.field_in
    }
    pub fn clear_field_in(&mut self) {
        self.field_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_in(&mut self, v: ::std::vec::Vec<i64>) {
        self.field_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_field_in(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.field_in
    }

    // Take field
    pub fn take_field_in(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.field_in, ::std::vec::Vec::new())
    }

    // repeated sint64 not_in = 7;


    pub fn get_not_in(&self) -> &[i64] {
        &self.not_in
    }
    pub fn clear_not_in(&mut self) {
        self.not_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_not_in(&mut self, v: ::std::vec::Vec<i64>) {
        self.not_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_not_in(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.not_in
    }

    // Take field
    pub fn take_not_in(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.not_in, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for SInt64Rules {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.field_const = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.lt = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.lte = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.gt = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.gte = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_repeated_sint64_into(wire_type, is, &mut self.field_in)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_sint64_into(wire_type, is, &mut self.not_in)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_const {
            my_size += ::protobuf::rt::value_varint_zigzag_size(1, v);
        }
        if let Some(v) = self.lt {
            my_size += ::protobuf::rt::value_varint_zigzag_size(2, v);
        }
        if let Some(v) = self.lte {
            my_size += ::protobuf::rt::value_varint_zigzag_size(3, v);
        }
        if let Some(v) = self.gt {
            my_size += ::protobuf::rt::value_varint_zigzag_size(4, v);
        }
        if let Some(v) = self.gte {
            my_size += ::protobuf::rt::value_varint_zigzag_size(5, v);
        }
        for value in &self.field_in {
            my_size += ::protobuf::rt::value_varint_zigzag_size(6, *value);
        };
        for value in &self.not_in {
            my_size += ::protobuf::rt::value_varint_zigzag_size(7, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_const {
            os.write_sint64(1, v)?;
        }
        if let Some(v) = self.lt {
            os.write_sint64(2, v)?;
        }
        if let Some(v) = self.lte {
            os.write_sint64(3, v)?;
        }
        if let Some(v) = self.gt {
            os.write_sint64(4, v)?;
        }
        if let Some(v) = self.gte {
            os.write_sint64(5, v)?;
        }
        for v in &self.field_in {
            os.write_sint64(6, *v)?;
        };
        for v in &self.not_in {
            os.write_sint64(7, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SInt64Rules {
        SInt64Rules::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                "const",
                |m: &SInt64Rules| { &m.field_const },
                |m: &mut SInt64Rules| { &mut m.field_const },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                "lt",
                |m: &SInt64Rules| { &m.lt },
                |m: &mut SInt64Rules| { &mut m.lt },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                "lte",
                |m: &SInt64Rules| { &m.lte },
                |m: &mut SInt64Rules| { &mut m.lte },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                "gt",
                |m: &SInt64Rules| { &m.gt },
                |m: &mut SInt64Rules| { &mut m.gt },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                "gte",
                |m: &SInt64Rules| { &m.gte },
                |m: &mut SInt64Rules| { &mut m.gte },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                "in",
                |m: &SInt64Rules| { &m.field_in },
                |m: &mut SInt64Rules| { &mut m.field_in },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                "not_in",
                |m: &SInt64Rules| { &m.not_in },
                |m: &mut SInt64Rules| { &mut m.not_in },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SInt64Rules>(
                "SInt64Rules",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SInt64Rules {
        static instance: ::protobuf::rt::LazyV2<SInt64Rules> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SInt64Rules::new)
    }
}

impl ::protobuf::Clear for SInt64Rules {
    fn clear(&mut self) {
        self.field_const = ::std::option::Option::None;
        self.lt = ::std::option::Option::None;
        self.lte = ::std::option::Option::None;
        self.gt = ::std::option::Option::None;
        self.gte = ::std::option::Option::None;
        self.field_in.clear();
        self.not_in.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SInt64Rules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SInt64Rules {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Fixed32Rules {
    // message fields
    field_const: ::std::option::Option<u32>,
    lt: ::std::option::Option<u32>,
    lte: ::std::option::Option<u32>,
    gt: ::std::option::Option<u32>,
    gte: ::std::option::Option<u32>,
    pub field_in: ::std::vec::Vec<u32>,
    pub not_in: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Fixed32Rules {
    fn default() -> &'a Fixed32Rules {
        <Fixed32Rules as ::protobuf::Message>::default_instance()
    }
}

impl Fixed32Rules {
    pub fn new() -> Fixed32Rules {
        ::std::default::Default::default()
    }

    // optional fixed32 const = 1;


    pub fn get_field_const(&self) -> u32 {
        self.field_const.unwrap_or(0)
    }
    pub fn clear_field_const(&mut self) {
        self.field_const = ::std::option::Option::None;
    }

    pub fn has_field_const(&self) -> bool {
        self.field_const.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_const(&mut self, v: u32) {
        self.field_const = ::std::option::Option::Some(v);
    }

    // optional fixed32 lt = 2;


    pub fn get_lt(&self) -> u32 {
        self.lt.unwrap_or(0)
    }
    pub fn clear_lt(&mut self) {
        self.lt = ::std::option::Option::None;
    }

    pub fn has_lt(&self) -> bool {
        self.lt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lt(&mut self, v: u32) {
        self.lt = ::std::option::Option::Some(v);
    }

    // optional fixed32 lte = 3;


    pub fn get_lte(&self) -> u32 {
        self.lte.unwrap_or(0)
    }
    pub fn clear_lte(&mut self) {
        self.lte = ::std::option::Option::None;
    }

    pub fn has_lte(&self) -> bool {
        self.lte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lte(&mut self, v: u32) {
        self.lte = ::std::option::Option::Some(v);
    }

    // optional fixed32 gt = 4;


    pub fn get_gt(&self) -> u32 {
        self.gt.unwrap_or(0)
    }
    pub fn clear_gt(&mut self) {
        self.gt = ::std::option::Option::None;
    }

    pub fn has_gt(&self) -> bool {
        self.gt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gt(&mut self, v: u32) {
        self.gt = ::std::option::Option::Some(v);
    }

    // optional fixed32 gte = 5;


    pub fn get_gte(&self) -> u32 {
        self.gte.unwrap_or(0)
    }
    pub fn clear_gte(&mut self) {
        self.gte = ::std::option::Option::None;
    }

    pub fn has_gte(&self) -> bool {
        self.gte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gte(&mut self, v: u32) {
        self.gte = ::std::option::Option::Some(v);
    }

    // repeated fixed32 in = 6;


    pub fn get_field_in(&self) -> &[u32] {
        &self.field_in
    }
    pub fn clear_field_in(&mut self) {
        self.field_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_in(&mut self, v: ::std::vec::Vec<u32>) {
        self.field_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_field_in(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.field_in
    }

    // Take field
    pub fn take_field_in(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.field_in, ::std::vec::Vec::new())
    }

    // repeated fixed32 not_in = 7;


    pub fn get_not_in(&self) -> &[u32] {
        &self.not_in
    }
    pub fn clear_not_in(&mut self) {
        self.not_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_not_in(&mut self, v: ::std::vec::Vec<u32>) {
        self.not_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_not_in(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.not_in
    }

    // Take field
    pub fn take_not_in(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.not_in, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Fixed32Rules {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.field_const = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.lt = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.lte = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.gt = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed32()?;
                    self.gte = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_repeated_fixed32_into(wire_type, is, &mut self.field_in)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_fixed32_into(wire_type, is, &mut self.not_in)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_const {
            my_size += 5;
        }
        if let Some(v) = self.lt {
            my_size += 5;
        }
        if let Some(v) = self.lte {
            my_size += 5;
        }
        if let Some(v) = self.gt {
            my_size += 5;
        }
        if let Some(v) = self.gte {
            my_size += 5;
        }
        my_size += 5 * self.field_in.len() as u32;
        my_size += 5 * self.not_in.len() as u32;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_const {
            os.write_fixed32(1, v)?;
        }
        if let Some(v) = self.lt {
            os.write_fixed32(2, v)?;
        }
        if let Some(v) = self.lte {
            os.write_fixed32(3, v)?;
        }
        if let Some(v) = self.gt {
            os.write_fixed32(4, v)?;
        }
        if let Some(v) = self.gte {
            os.write_fixed32(5, v)?;
        }
        for v in &self.field_in {
            os.write_fixed32(6, *v)?;
        };
        for v in &self.not_in {
            os.write_fixed32(7, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Fixed32Rules {
        Fixed32Rules::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "const",
                |m: &Fixed32Rules| { &m.field_const },
                |m: &mut Fixed32Rules| { &mut m.field_const },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "lt",
                |m: &Fixed32Rules| { &m.lt },
                |m: &mut Fixed32Rules| { &mut m.lt },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "lte",
                |m: &Fixed32Rules| { &m.lte },
                |m: &mut Fixed32Rules| { &mut m.lte },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "gt",
                |m: &Fixed32Rules| { &m.gt },
                |m: &mut Fixed32Rules| { &mut m.gt },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "gte",
                |m: &Fixed32Rules| { &m.gte },
                |m: &mut Fixed32Rules| { &mut m.gte },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "in",
                |m: &Fixed32Rules| { &m.field_in },
                |m: &mut Fixed32Rules| { &mut m.field_in },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeFixed32>(
                "not_in",
                |m: &Fixed32Rules| { &m.not_in },
                |m: &mut Fixed32Rules| { &mut m.not_in },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Fixed32Rules>(
                "Fixed32Rules",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Fixed32Rules {
        static instance: ::protobuf::rt::LazyV2<Fixed32Rules> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Fixed32Rules::new)
    }
}

impl ::protobuf::Clear for Fixed32Rules {
    fn clear(&mut self) {
        self.field_const = ::std::option::Option::None;
        self.lt = ::std::option::Option::None;
        self.lte = ::std::option::Option::None;
        self.gt = ::std::option::Option::None;
        self.gte = ::std::option::Option::None;
        self.field_in.clear();
        self.not_in.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Fixed32Rules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Fixed32Rules {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Fixed64Rules {
    // message fields
    field_const: ::std::option::Option<u64>,
    lt: ::std::option::Option<u64>,
    lte: ::std::option::Option<u64>,
    gt: ::std::option::Option<u64>,
    gte: ::std::option::Option<u64>,
    pub field_in: ::std::vec::Vec<u64>,
    pub not_in: ::std::vec::Vec<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Fixed64Rules {
    fn default() -> &'a Fixed64Rules {
        <Fixed64Rules as ::protobuf::Message>::default_instance()
    }
}

impl Fixed64Rules {
    pub fn new() -> Fixed64Rules {
        ::std::default::Default::default()
    }

    // optional fixed64 const = 1;


    pub fn get_field_const(&self) -> u64 {
        self.field_const.unwrap_or(0)
    }
    pub fn clear_field_const(&mut self) {
        self.field_const = ::std::option::Option::None;
    }

    pub fn has_field_const(&self) -> bool {
        self.field_const.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_const(&mut self, v: u64) {
        self.field_const = ::std::option::Option::Some(v);
    }

    // optional fixed64 lt = 2;


    pub fn get_lt(&self) -> u64 {
        self.lt.unwrap_or(0)
    }
    pub fn clear_lt(&mut self) {
        self.lt = ::std::option::Option::None;
    }

    pub fn has_lt(&self) -> bool {
        self.lt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lt(&mut self, v: u64) {
        self.lt = ::std::option::Option::Some(v);
    }

    // optional fixed64 lte = 3;


    pub fn get_lte(&self) -> u64 {
        self.lte.unwrap_or(0)
    }
    pub fn clear_lte(&mut self) {
        self.lte = ::std::option::Option::None;
    }

    pub fn has_lte(&self) -> bool {
        self.lte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lte(&mut self, v: u64) {
        self.lte = ::std::option::Option::Some(v);
    }

    // optional fixed64 gt = 4;


    pub fn get_gt(&self) -> u64 {
        self.gt.unwrap_or(0)
    }
    pub fn clear_gt(&mut self) {
        self.gt = ::std::option::Option::None;
    }

    pub fn has_gt(&self) -> bool {
        self.gt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gt(&mut self, v: u64) {
        self.gt = ::std::option::Option::Some(v);
    }

    // optional fixed64 gte = 5;


    pub fn get_gte(&self) -> u64 {
        self.gte.unwrap_or(0)
    }
    pub fn clear_gte(&mut self) {
        self.gte = ::std::option::Option::None;
    }

    pub fn has_gte(&self) -> bool {
        self.gte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gte(&mut self, v: u64) {
        self.gte = ::std::option::Option::Some(v);
    }

    // repeated fixed64 in = 6;


    pub fn get_field_in(&self) -> &[u64] {
        &self.field_in
    }
    pub fn clear_field_in(&mut self) {
        self.field_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_in(&mut self, v: ::std::vec::Vec<u64>) {
        self.field_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_field_in(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.field_in
    }

    // Take field
    pub fn take_field_in(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.field_in, ::std::vec::Vec::new())
    }

    // repeated fixed64 not_in = 7;


    pub fn get_not_in(&self) -> &[u64] {
        &self.not_in
    }
    pub fn clear_not_in(&mut self) {
        self.not_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_not_in(&mut self, v: ::std::vec::Vec<u64>) {
        self.not_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_not_in(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.not_in
    }

    // Take field
    pub fn take_not_in(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.not_in, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Fixed64Rules {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.field_const = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.lt = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.lte = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.gt = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_fixed64()?;
                    self.gte = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_repeated_fixed64_into(wire_type, is, &mut self.field_in)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_fixed64_into(wire_type, is, &mut self.not_in)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_const {
            my_size += 9;
        }
        if let Some(v) = self.lt {
            my_size += 9;
        }
        if let Some(v) = self.lte {
            my_size += 9;
        }
        if let Some(v) = self.gt {
            my_size += 9;
        }
        if let Some(v) = self.gte {
            my_size += 9;
        }
        my_size += 9 * self.field_in.len() as u32;
        my_size += 9 * self.not_in.len() as u32;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_const {
            os.write_fixed64(1, v)?;
        }
        if let Some(v) = self.lt {
            os.write_fixed64(2, v)?;
        }
        if let Some(v) = self.lte {
            os.write_fixed64(3, v)?;
        }
        if let Some(v) = self.gt {
            os.write_fixed64(4, v)?;
        }
        if let Some(v) = self.gte {
            os.write_fixed64(5, v)?;
        }
        for v in &self.field_in {
            os.write_fixed64(6, *v)?;
        };
        for v in &self.not_in {
            os.write_fixed64(7, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Fixed64Rules {
        Fixed64Rules::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "const",
                |m: &Fixed64Rules| { &m.field_const },
                |m: &mut Fixed64Rules| { &mut m.field_const },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "lt",
                |m: &Fixed64Rules| { &m.lt },
                |m: &mut Fixed64Rules| { &mut m.lt },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "lte",
                |m: &Fixed64Rules| { &m.lte },
                |m: &mut Fixed64Rules| { &mut m.lte },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "gt",
                |m: &Fixed64Rules| { &m.gt },
                |m: &mut Fixed64Rules| { &mut m.gt },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "gte",
                |m: &Fixed64Rules| { &m.gte },
                |m: &mut Fixed64Rules| { &mut m.gte },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "in",
                |m: &Fixed64Rules| { &m.field_in },
                |m: &mut Fixed64Rules| { &mut m.field_in },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeFixed64>(
                "not_in",
                |m: &Fixed64Rules| { &m.not_in },
                |m: &mut Fixed64Rules| { &mut m.not_in },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Fixed64Rules>(
                "Fixed64Rules",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Fixed64Rules {
        static instance: ::protobuf::rt::LazyV2<Fixed64Rules> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Fixed64Rules::new)
    }
}

impl ::protobuf::Clear for Fixed64Rules {
    fn clear(&mut self) {
        self.field_const = ::std::option::Option::None;
        self.lt = ::std::option::Option::None;
        self.lte = ::std::option::Option::None;
        self.gt = ::std::option::Option::None;
        self.gte = ::std::option::Option::None;
        self.field_in.clear();
        self.not_in.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Fixed64Rules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Fixed64Rules {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SFixed32Rules {
    // message fields
    field_const: ::std::option::Option<i32>,
    lt: ::std::option::Option<i32>,
    lte: ::std::option::Option<i32>,
    gt: ::std::option::Option<i32>,
    gte: ::std::option::Option<i32>,
    pub field_in: ::std::vec::Vec<i32>,
    pub not_in: ::std::vec::Vec<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SFixed32Rules {
    fn default() -> &'a SFixed32Rules {
        <SFixed32Rules as ::protobuf::Message>::default_instance()
    }
}

impl SFixed32Rules {
    pub fn new() -> SFixed32Rules {
        ::std::default::Default::default()
    }

    // optional sfixed32 const = 1;


    pub fn get_field_const(&self) -> i32 {
        self.field_const.unwrap_or(0)
    }
    pub fn clear_field_const(&mut self) {
        self.field_const = ::std::option::Option::None;
    }

    pub fn has_field_const(&self) -> bool {
        self.field_const.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_const(&mut self, v: i32) {
        self.field_const = ::std::option::Option::Some(v);
    }

    // optional sfixed32 lt = 2;


    pub fn get_lt(&self) -> i32 {
        self.lt.unwrap_or(0)
    }
    pub fn clear_lt(&mut self) {
        self.lt = ::std::option::Option::None;
    }

    pub fn has_lt(&self) -> bool {
        self.lt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lt(&mut self, v: i32) {
        self.lt = ::std::option::Option::Some(v);
    }

    // optional sfixed32 lte = 3;


    pub fn get_lte(&self) -> i32 {
        self.lte.unwrap_or(0)
    }
    pub fn clear_lte(&mut self) {
        self.lte = ::std::option::Option::None;
    }

    pub fn has_lte(&self) -> bool {
        self.lte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lte(&mut self, v: i32) {
        self.lte = ::std::option::Option::Some(v);
    }

    // optional sfixed32 gt = 4;


    pub fn get_gt(&self) -> i32 {
        self.gt.unwrap_or(0)
    }
    pub fn clear_gt(&mut self) {
        self.gt = ::std::option::Option::None;
    }

    pub fn has_gt(&self) -> bool {
        self.gt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gt(&mut self, v: i32) {
        self.gt = ::std::option::Option::Some(v);
    }

    // optional sfixed32 gte = 5;


    pub fn get_gte(&self) -> i32 {
        self.gte.unwrap_or(0)
    }
    pub fn clear_gte(&mut self) {
        self.gte = ::std::option::Option::None;
    }

    pub fn has_gte(&self) -> bool {
        self.gte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gte(&mut self, v: i32) {
        self.gte = ::std::option::Option::Some(v);
    }

    // repeated sfixed32 in = 6;


    pub fn get_field_in(&self) -> &[i32] {
        &self.field_in
    }
    pub fn clear_field_in(&mut self) {
        self.field_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_in(&mut self, v: ::std::vec::Vec<i32>) {
        self.field_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_field_in(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.field_in
    }

    // Take field
    pub fn take_field_in(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.field_in, ::std::vec::Vec::new())
    }

    // repeated sfixed32 not_in = 7;


    pub fn get_not_in(&self) -> &[i32] {
        &self.not_in
    }
    pub fn clear_not_in(&mut self) {
        self.not_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_not_in(&mut self, v: ::std::vec::Vec<i32>) {
        self.not_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_not_in(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.not_in
    }

    // Take field
    pub fn take_not_in(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.not_in, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for SFixed32Rules {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sfixed32()?;
                    self.field_const = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sfixed32()?;
                    self.lt = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sfixed32()?;
                    self.lte = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sfixed32()?;
                    self.gt = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sfixed32()?;
                    self.gte = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_repeated_sfixed32_into(wire_type, is, &mut self.field_in)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_sfixed32_into(wire_type, is, &mut self.not_in)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_const {
            my_size += 5;
        }
        if let Some(v) = self.lt {
            my_size += 5;
        }
        if let Some(v) = self.lte {
            my_size += 5;
        }
        if let Some(v) = self.gt {
            my_size += 5;
        }
        if let Some(v) = self.gte {
            my_size += 5;
        }
        my_size += 5 * self.field_in.len() as u32;
        my_size += 5 * self.not_in.len() as u32;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_const {
            os.write_sfixed32(1, v)?;
        }
        if let Some(v) = self.lt {
            os.write_sfixed32(2, v)?;
        }
        if let Some(v) = self.lte {
            os.write_sfixed32(3, v)?;
        }
        if let Some(v) = self.gt {
            os.write_sfixed32(4, v)?;
        }
        if let Some(v) = self.gte {
            os.write_sfixed32(5, v)?;
        }
        for v in &self.field_in {
            os.write_sfixed32(6, *v)?;
        };
        for v in &self.not_in {
            os.write_sfixed32(7, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SFixed32Rules {
        SFixed32Rules::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSfixed32>(
                "const",
                |m: &SFixed32Rules| { &m.field_const },
                |m: &mut SFixed32Rules| { &mut m.field_const },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSfixed32>(
                "lt",
                |m: &SFixed32Rules| { &m.lt },
                |m: &mut SFixed32Rules| { &mut m.lt },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSfixed32>(
                "lte",
                |m: &SFixed32Rules| { &m.lte },
                |m: &mut SFixed32Rules| { &mut m.lte },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSfixed32>(
                "gt",
                |m: &SFixed32Rules| { &m.gt },
                |m: &mut SFixed32Rules| { &mut m.gt },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSfixed32>(
                "gte",
                |m: &SFixed32Rules| { &m.gte },
                |m: &mut SFixed32Rules| { &mut m.gte },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeSfixed32>(
                "in",
                |m: &SFixed32Rules| { &m.field_in },
                |m: &mut SFixed32Rules| { &mut m.field_in },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeSfixed32>(
                "not_in",
                |m: &SFixed32Rules| { &m.not_in },
                |m: &mut SFixed32Rules| { &mut m.not_in },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SFixed32Rules>(
                "SFixed32Rules",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SFixed32Rules {
        static instance: ::protobuf::rt::LazyV2<SFixed32Rules> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SFixed32Rules::new)
    }
}

impl ::protobuf::Clear for SFixed32Rules {
    fn clear(&mut self) {
        self.field_const = ::std::option::Option::None;
        self.lt = ::std::option::Option::None;
        self.lte = ::std::option::Option::None;
        self.gt = ::std::option::Option::None;
        self.gte = ::std::option::Option::None;
        self.field_in.clear();
        self.not_in.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SFixed32Rules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SFixed32Rules {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SFixed64Rules {
    // message fields
    field_const: ::std::option::Option<i64>,
    lt: ::std::option::Option<i64>,
    lte: ::std::option::Option<i64>,
    gt: ::std::option::Option<i64>,
    gte: ::std::option::Option<i64>,
    pub field_in: ::std::vec::Vec<i64>,
    pub not_in: ::std::vec::Vec<i64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SFixed64Rules {
    fn default() -> &'a SFixed64Rules {
        <SFixed64Rules as ::protobuf::Message>::default_instance()
    }
}

impl SFixed64Rules {
    pub fn new() -> SFixed64Rules {
        ::std::default::Default::default()
    }

    // optional sfixed64 const = 1;


    pub fn get_field_const(&self) -> i64 {
        self.field_const.unwrap_or(0)
    }
    pub fn clear_field_const(&mut self) {
        self.field_const = ::std::option::Option::None;
    }

    pub fn has_field_const(&self) -> bool {
        self.field_const.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_const(&mut self, v: i64) {
        self.field_const = ::std::option::Option::Some(v);
    }

    // optional sfixed64 lt = 2;


    pub fn get_lt(&self) -> i64 {
        self.lt.unwrap_or(0)
    }
    pub fn clear_lt(&mut self) {
        self.lt = ::std::option::Option::None;
    }

    pub fn has_lt(&self) -> bool {
        self.lt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lt(&mut self, v: i64) {
        self.lt = ::std::option::Option::Some(v);
    }

    // optional sfixed64 lte = 3;


    pub fn get_lte(&self) -> i64 {
        self.lte.unwrap_or(0)
    }
    pub fn clear_lte(&mut self) {
        self.lte = ::std::option::Option::None;
    }

    pub fn has_lte(&self) -> bool {
        self.lte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lte(&mut self, v: i64) {
        self.lte = ::std::option::Option::Some(v);
    }

    // optional sfixed64 gt = 4;


    pub fn get_gt(&self) -> i64 {
        self.gt.unwrap_or(0)
    }
    pub fn clear_gt(&mut self) {
        self.gt = ::std::option::Option::None;
    }

    pub fn has_gt(&self) -> bool {
        self.gt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gt(&mut self, v: i64) {
        self.gt = ::std::option::Option::Some(v);
    }

    // optional sfixed64 gte = 5;


    pub fn get_gte(&self) -> i64 {
        self.gte.unwrap_or(0)
    }
    pub fn clear_gte(&mut self) {
        self.gte = ::std::option::Option::None;
    }

    pub fn has_gte(&self) -> bool {
        self.gte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gte(&mut self, v: i64) {
        self.gte = ::std::option::Option::Some(v);
    }

    // repeated sfixed64 in = 6;


    pub fn get_field_in(&self) -> &[i64] {
        &self.field_in
    }
    pub fn clear_field_in(&mut self) {
        self.field_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_in(&mut self, v: ::std::vec::Vec<i64>) {
        self.field_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_field_in(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.field_in
    }

    // Take field
    pub fn take_field_in(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.field_in, ::std::vec::Vec::new())
    }

    // repeated sfixed64 not_in = 7;


    pub fn get_not_in(&self) -> &[i64] {
        &self.not_in
    }
    pub fn clear_not_in(&mut self) {
        self.not_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_not_in(&mut self, v: ::std::vec::Vec<i64>) {
        self.not_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_not_in(&mut self) -> &mut ::std::vec::Vec<i64> {
        &mut self.not_in
    }

    // Take field
    pub fn take_not_in(&mut self) -> ::std::vec::Vec<i64> {
        ::std::mem::replace(&mut self.not_in, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for SFixed64Rules {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sfixed64()?;
                    self.field_const = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sfixed64()?;
                    self.lt = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sfixed64()?;
                    self.lte = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sfixed64()?;
                    self.gt = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sfixed64()?;
                    self.gte = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_repeated_sfixed64_into(wire_type, is, &mut self.field_in)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_sfixed64_into(wire_type, is, &mut self.not_in)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_const {
            my_size += 9;
        }
        if let Some(v) = self.lt {
            my_size += 9;
        }
        if let Some(v) = self.lte {
            my_size += 9;
        }
        if let Some(v) = self.gt {
            my_size += 9;
        }
        if let Some(v) = self.gte {
            my_size += 9;
        }
        my_size += 9 * self.field_in.len() as u32;
        my_size += 9 * self.not_in.len() as u32;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_const {
            os.write_sfixed64(1, v)?;
        }
        if let Some(v) = self.lt {
            os.write_sfixed64(2, v)?;
        }
        if let Some(v) = self.lte {
            os.write_sfixed64(3, v)?;
        }
        if let Some(v) = self.gt {
            os.write_sfixed64(4, v)?;
        }
        if let Some(v) = self.gte {
            os.write_sfixed64(5, v)?;
        }
        for v in &self.field_in {
            os.write_sfixed64(6, *v)?;
        };
        for v in &self.not_in {
            os.write_sfixed64(7, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SFixed64Rules {
        SFixed64Rules::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSfixed64>(
                "const",
                |m: &SFixed64Rules| { &m.field_const },
                |m: &mut SFixed64Rules| { &mut m.field_const },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSfixed64>(
                "lt",
                |m: &SFixed64Rules| { &m.lt },
                |m: &mut SFixed64Rules| { &mut m.lt },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSfixed64>(
                "lte",
                |m: &SFixed64Rules| { &m.lte },
                |m: &mut SFixed64Rules| { &mut m.lte },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSfixed64>(
                "gt",
                |m: &SFixed64Rules| { &m.gt },
                |m: &mut SFixed64Rules| { &mut m.gt },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeSfixed64>(
                "gte",
                |m: &SFixed64Rules| { &m.gte },
                |m: &mut SFixed64Rules| { &mut m.gte },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeSfixed64>(
                "in",
                |m: &SFixed64Rules| { &m.field_in },
                |m: &mut SFixed64Rules| { &mut m.field_in },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeSfixed64>(
                "not_in",
                |m: &SFixed64Rules| { &m.not_in },
                |m: &mut SFixed64Rules| { &mut m.not_in },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SFixed64Rules>(
                "SFixed64Rules",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SFixed64Rules {
        static instance: ::protobuf::rt::LazyV2<SFixed64Rules> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SFixed64Rules::new)
    }
}

impl ::protobuf::Clear for SFixed64Rules {
    fn clear(&mut self) {
        self.field_const = ::std::option::Option::None;
        self.lt = ::std::option::Option::None;
        self.lte = ::std::option::Option::None;
        self.gt = ::std::option::Option::None;
        self.gte = ::std::option::Option::None;
        self.field_in.clear();
        self.not_in.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SFixed64Rules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SFixed64Rules {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BoolRules {
    // message fields
    field_const: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BoolRules {
    fn default() -> &'a BoolRules {
        <BoolRules as ::protobuf::Message>::default_instance()
    }
}

impl BoolRules {
    pub fn new() -> BoolRules {
        ::std::default::Default::default()
    }

    // optional bool const = 1;


    pub fn get_field_const(&self) -> bool {
        self.field_const.unwrap_or(false)
    }
    pub fn clear_field_const(&mut self) {
        self.field_const = ::std::option::Option::None;
    }

    pub fn has_field_const(&self) -> bool {
        self.field_const.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_const(&mut self, v: bool) {
        self.field_const = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for BoolRules {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.field_const = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_const {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_const {
            os.write_bool(1, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BoolRules {
        BoolRules::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "const",
                |m: &BoolRules| { &m.field_const },
                |m: &mut BoolRules| { &mut m.field_const },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BoolRules>(
                "BoolRules",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BoolRules {
        static instance: ::protobuf::rt::LazyV2<BoolRules> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BoolRules::new)
    }
}

impl ::protobuf::Clear for BoolRules {
    fn clear(&mut self) {
        self.field_const = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BoolRules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BoolRules {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StringRules {
    // message fields
    field_const: ::protobuf::SingularField<::std::string::String>,
    len: ::std::option::Option<u64>,
    min_len: ::std::option::Option<u64>,
    max_len: ::std::option::Option<u64>,
    len_bytes: ::std::option::Option<u64>,
    min_bytes: ::std::option::Option<u64>,
    max_bytes: ::std::option::Option<u64>,
    pattern: ::protobuf::SingularField<::std::string::String>,
    prefix: ::protobuf::SingularField<::std::string::String>,
    suffix: ::protobuf::SingularField<::std::string::String>,
    contains: ::protobuf::SingularField<::std::string::String>,
    not_contains: ::protobuf::SingularField<::std::string::String>,
    pub field_in: ::protobuf::RepeatedField<::std::string::String>,
    pub not_in: ::protobuf::RepeatedField<::std::string::String>,
    strict: ::std::option::Option<bool>,
    // message oneof groups
    pub well_known: ::std::option::Option<StringRules_oneof_well_known>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StringRules {
    fn default() -> &'a StringRules {
        <StringRules as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum StringRules_oneof_well_known {
    email(bool),
    hostname(bool),
    ip(bool),
    ipv4(bool),
    ipv6(bool),
    uri(bool),
    uri_ref(bool),
    address(bool),
    uuid(bool),
    well_known_regex(KnownRegex),
}

impl StringRules {
    pub fn new() -> StringRules {
        ::std::default::Default::default()
    }

    // optional string const = 1;


    pub fn get_field_const(&self) -> &str {
        match self.field_const.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_field_const(&mut self) {
        self.field_const.clear();
    }

    pub fn has_field_const(&self) -> bool {
        self.field_const.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_const(&mut self, v: ::std::string::String) {
        self.field_const = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_const(&mut self) -> &mut ::std::string::String {
        if self.field_const.is_none() {
            self.field_const.set_default();
        }
        self.field_const.as_mut().unwrap()
    }

    // Take field
    pub fn take_field_const(&mut self) -> ::std::string::String {
        self.field_const.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional uint64 len = 19;


    pub fn get_len(&self) -> u64 {
        self.len.unwrap_or(0)
    }
    pub fn clear_len(&mut self) {
        self.len = ::std::option::Option::None;
    }

    pub fn has_len(&self) -> bool {
        self.len.is_some()
    }

    // Param is passed by value, moved
    pub fn set_len(&mut self, v: u64) {
        self.len = ::std::option::Option::Some(v);
    }

    // optional uint64 min_len = 2;


    pub fn get_min_len(&self) -> u64 {
        self.min_len.unwrap_or(0)
    }
    pub fn clear_min_len(&mut self) {
        self.min_len = ::std::option::Option::None;
    }

    pub fn has_min_len(&self) -> bool {
        self.min_len.is_some()
    }

    // Param is passed by value, moved
    pub fn set_min_len(&mut self, v: u64) {
        self.min_len = ::std::option::Option::Some(v);
    }

    // optional uint64 max_len = 3;


    pub fn get_max_len(&self) -> u64 {
        self.max_len.unwrap_or(0)
    }
    pub fn clear_max_len(&mut self) {
        self.max_len = ::std::option::Option::None;
    }

    pub fn has_max_len(&self) -> bool {
        self.max_len.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_len(&mut self, v: u64) {
        self.max_len = ::std::option::Option::Some(v);
    }

    // optional uint64 len_bytes = 20;


    pub fn get_len_bytes(&self) -> u64 {
        self.len_bytes.unwrap_or(0)
    }
    pub fn clear_len_bytes(&mut self) {
        self.len_bytes = ::std::option::Option::None;
    }

    pub fn has_len_bytes(&self) -> bool {
        self.len_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_len_bytes(&mut self, v: u64) {
        self.len_bytes = ::std::option::Option::Some(v);
    }

    // optional uint64 min_bytes = 4;


    pub fn get_min_bytes(&self) -> u64 {
        self.min_bytes.unwrap_or(0)
    }
    pub fn clear_min_bytes(&mut self) {
        self.min_bytes = ::std::option::Option::None;
    }

    pub fn has_min_bytes(&self) -> bool {
        self.min_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_min_bytes(&mut self, v: u64) {
        self.min_bytes = ::std::option::Option::Some(v);
    }

    // optional uint64 max_bytes = 5;


    pub fn get_max_bytes(&self) -> u64 {
        self.max_bytes.unwrap_or(0)
    }
    pub fn clear_max_bytes(&mut self) {
        self.max_bytes = ::std::option::Option::None;
    }

    pub fn has_max_bytes(&self) -> bool {
        self.max_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_bytes(&mut self, v: u64) {
        self.max_bytes = ::std::option::Option::Some(v);
    }

    // optional string pattern = 6;


    pub fn get_pattern(&self) -> &str {
        match self.pattern.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_pattern(&mut self) {
        self.pattern.clear();
    }

    pub fn has_pattern(&self) -> bool {
        self.pattern.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pattern(&mut self, v: ::std::string::String) {
        self.pattern = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pattern(&mut self) -> &mut ::std::string::String {
        if self.pattern.is_none() {
            self.pattern.set_default();
        }
        self.pattern.as_mut().unwrap()
    }

    // Take field
    pub fn take_pattern(&mut self) -> ::std::string::String {
        self.pattern.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string prefix = 7;


    pub fn get_prefix(&self) -> &str {
        match self.prefix.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_prefix(&mut self) {
        self.prefix.clear();
    }

    pub fn has_prefix(&self) -> bool {
        self.prefix.is_some()
    }

    // Param is passed by value, moved
    pub fn set_prefix(&mut self, v: ::std::string::String) {
        self.prefix = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prefix(&mut self) -> &mut ::std::string::String {
        if self.prefix.is_none() {
            self.prefix.set_default();
        }
        self.prefix.as_mut().unwrap()
    }

    // Take field
    pub fn take_prefix(&mut self) -> ::std::string::String {
        self.prefix.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string suffix = 8;


    pub fn get_suffix(&self) -> &str {
        match self.suffix.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_suffix(&mut self) {
        self.suffix.clear();
    }

    pub fn has_suffix(&self) -> bool {
        self.suffix.is_some()
    }

    // Param is passed by value, moved
    pub fn set_suffix(&mut self, v: ::std::string::String) {
        self.suffix = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_suffix(&mut self) -> &mut ::std::string::String {
        if self.suffix.is_none() {
            self.suffix.set_default();
        }
        self.suffix.as_mut().unwrap()
    }

    // Take field
    pub fn take_suffix(&mut self) -> ::std::string::String {
        self.suffix.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string contains = 9;


    pub fn get_contains(&self) -> &str {
        match self.contains.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_contains(&mut self) {
        self.contains.clear();
    }

    pub fn has_contains(&self) -> bool {
        self.contains.is_some()
    }

    // Param is passed by value, moved
    pub fn set_contains(&mut self, v: ::std::string::String) {
        self.contains = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contains(&mut self) -> &mut ::std::string::String {
        if self.contains.is_none() {
            self.contains.set_default();
        }
        self.contains.as_mut().unwrap()
    }

    // Take field
    pub fn take_contains(&mut self) -> ::std::string::String {
        self.contains.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional string not_contains = 23;


    pub fn get_not_contains(&self) -> &str {
        match self.not_contains.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_not_contains(&mut self) {
        self.not_contains.clear();
    }

    pub fn has_not_contains(&self) -> bool {
        self.not_contains.is_some()
    }

    // Param is passed by value, moved
    pub fn set_not_contains(&mut self, v: ::std::string::String) {
        self.not_contains = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_not_contains(&mut self) -> &mut ::std::string::String {
        if self.not_contains.is_none() {
            self.not_contains.set_default();
        }
        self.not_contains.as_mut().unwrap()
    }

    // Take field
    pub fn take_not_contains(&mut self) -> ::std::string::String {
        self.not_contains.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // repeated string in = 10;


    pub fn get_field_in(&self) -> &[::std::string::String] {
        &self.field_in
    }
    pub fn clear_field_in(&mut self) {
        self.field_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_in(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.field_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_field_in(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.field_in
    }

    // Take field
    pub fn take_field_in(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.field_in, ::protobuf::RepeatedField::new())
    }

    // repeated string not_in = 11;


    pub fn get_not_in(&self) -> &[::std::string::String] {
        &self.not_in
    }
    pub fn clear_not_in(&mut self) {
        self.not_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_not_in(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.not_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_not_in(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.not_in
    }

    // Take field
    pub fn take_not_in(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.not_in, ::protobuf::RepeatedField::new())
    }

    // optional bool email = 12;


    pub fn get_email(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(StringRules_oneof_well_known::email(v)) => v,
            _ => false,
        }
    }
    pub fn clear_email(&mut self) {
        self.well_known = ::std::option::Option::None;
    }

    pub fn has_email(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(StringRules_oneof_well_known::email(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_email(&mut self, v: bool) {
        self.well_known = ::std::option::Option::Some(StringRules_oneof_well_known::email(v))
    }

    // optional bool hostname = 13;


    pub fn get_hostname(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(StringRules_oneof_well_known::hostname(v)) => v,
            _ => false,
        }
    }
    pub fn clear_hostname(&mut self) {
        self.well_known = ::std::option::Option::None;
    }

    pub fn has_hostname(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(StringRules_oneof_well_known::hostname(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_hostname(&mut self, v: bool) {
        self.well_known = ::std::option::Option::Some(StringRules_oneof_well_known::hostname(v))
    }

    // optional bool ip = 14;


    pub fn get_ip(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(StringRules_oneof_well_known::ip(v)) => v,
            _ => false,
        }
    }
    pub fn clear_ip(&mut self) {
        self.well_known = ::std::option::Option::None;
    }

    pub fn has_ip(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(StringRules_oneof_well_known::ip(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ip(&mut self, v: bool) {
        self.well_known = ::std::option::Option::Some(StringRules_oneof_well_known::ip(v))
    }

    // optional bool ipv4 = 15;


    pub fn get_ipv4(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(StringRules_oneof_well_known::ipv4(v)) => v,
            _ => false,
        }
    }
    pub fn clear_ipv4(&mut self) {
        self.well_known = ::std::option::Option::None;
    }

    pub fn has_ipv4(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(StringRules_oneof_well_known::ipv4(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ipv4(&mut self, v: bool) {
        self.well_known = ::std::option::Option::Some(StringRules_oneof_well_known::ipv4(v))
    }

    // optional bool ipv6 = 16;


    pub fn get_ipv6(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(StringRules_oneof_well_known::ipv6(v)) => v,
            _ => false,
        }
    }
    pub fn clear_ipv6(&mut self) {
        self.well_known = ::std::option::Option::None;
    }

    pub fn has_ipv6(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(StringRules_oneof_well_known::ipv6(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ipv6(&mut self, v: bool) {
        self.well_known = ::std::option::Option::Some(StringRules_oneof_well_known::ipv6(v))
    }

    // optional bool uri = 17;


    pub fn get_uri(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(StringRules_oneof_well_known::uri(v)) => v,
            _ => false,
        }
    }
    pub fn clear_uri(&mut self) {
        self.well_known = ::std::option::Option::None;
    }

    pub fn has_uri(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(StringRules_oneof_well_known::uri(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_uri(&mut self, v: bool) {
        self.well_known = ::std::option::Option::Some(StringRules_oneof_well_known::uri(v))
    }

    // optional bool uri_ref = 18;


    pub fn get_uri_ref(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(StringRules_oneof_well_known::uri_ref(v)) => v,
            _ => false,
        }
    }
    pub fn clear_uri_ref(&mut self) {
        self.well_known = ::std::option::Option::None;
    }

    pub fn has_uri_ref(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(StringRules_oneof_well_known::uri_ref(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_uri_ref(&mut self, v: bool) {
        self.well_known = ::std::option::Option::Some(StringRules_oneof_well_known::uri_ref(v))
    }

    // optional bool address = 21;


    pub fn get_address(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(StringRules_oneof_well_known::address(v)) => v,
            _ => false,
        }
    }
    pub fn clear_address(&mut self) {
        self.well_known = ::std::option::Option::None;
    }

    pub fn has_address(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(StringRules_oneof_well_known::address(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: bool) {
        self.well_known = ::std::option::Option::Some(StringRules_oneof_well_known::address(v))
    }

    // optional bool uuid = 22;


    pub fn get_uuid(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(StringRules_oneof_well_known::uuid(v)) => v,
            _ => false,
        }
    }
    pub fn clear_uuid(&mut self) {
        self.well_known = ::std::option::Option::None;
    }

    pub fn has_uuid(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(StringRules_oneof_well_known::uuid(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: bool) {
        self.well_known = ::std::option::Option::Some(StringRules_oneof_well_known::uuid(v))
    }

    // optional .validate.KnownRegex well_known_regex = 24;


    pub fn get_well_known_regex(&self) -> KnownRegex {
        match self.well_known {
            ::std::option::Option::Some(StringRules_oneof_well_known::well_known_regex(v)) => v,
            _ => KnownRegex::UNKNOWN,
        }
    }
    pub fn clear_well_known_regex(&mut self) {
        self.well_known = ::std::option::Option::None;
    }

    pub fn has_well_known_regex(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(StringRules_oneof_well_known::well_known_regex(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_well_known_regex(&mut self, v: KnownRegex) {
        self.well_known = ::std::option::Option::Some(StringRules_oneof_well_known::well_known_regex(v))
    }

    // optional bool strict = 25;


    pub fn get_strict(&self) -> bool {
        self.strict.unwrap_or(true)
    }
    pub fn clear_strict(&mut self) {
        self.strict = ::std::option::Option::None;
    }

    pub fn has_strict(&self) -> bool {
        self.strict.is_some()
    }

    // Param is passed by value, moved
    pub fn set_strict(&mut self, v: bool) {
        self.strict = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for StringRules {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.field_const)?;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.len = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.min_len = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.max_len = ::std::option::Option::Some(tmp);
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.len_bytes = ::std::option::Option::Some(tmp);
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.min_bytes = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.max_bytes = ::std::option::Option::Some(tmp);
                },
                6 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.pattern)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.prefix)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.suffix)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.contains)?;
                },
                23 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.not_contains)?;
                },
                10 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.field_in)?;
                },
                11 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.not_in)?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.well_known = ::std::option::Option::Some(StringRules_oneof_well_known::email(is.read_bool()?));
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.well_known = ::std::option::Option::Some(StringRules_oneof_well_known::hostname(is.read_bool()?));
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.well_known = ::std::option::Option::Some(StringRules_oneof_well_known::ip(is.read_bool()?));
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.well_known = ::std::option::Option::Some(StringRules_oneof_well_known::ipv4(is.read_bool()?));
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.well_known = ::std::option::Option::Some(StringRules_oneof_well_known::ipv6(is.read_bool()?));
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.well_known = ::std::option::Option::Some(StringRules_oneof_well_known::uri(is.read_bool()?));
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.well_known = ::std::option::Option::Some(StringRules_oneof_well_known::uri_ref(is.read_bool()?));
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.well_known = ::std::option::Option::Some(StringRules_oneof_well_known::address(is.read_bool()?));
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.well_known = ::std::option::Option::Some(StringRules_oneof_well_known::uuid(is.read_bool()?));
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.well_known = ::std::option::Option::Some(StringRules_oneof_well_known::well_known_regex(is.read_enum()?));
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.strict = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.field_const.as_ref() {
            my_size += ::protobuf::rt::string_size(1, &v);
        }
        if let Some(v) = self.len {
            my_size += ::protobuf::rt::value_size(19, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.min_len {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.max_len {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.len_bytes {
            my_size += ::protobuf::rt::value_size(20, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.min_bytes {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.max_bytes {
            my_size += ::protobuf::rt::value_size(5, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.pattern.as_ref() {
            my_size += ::protobuf::rt::string_size(6, &v);
        }
        if let Some(ref v) = self.prefix.as_ref() {
            my_size += ::protobuf::rt::string_size(7, &v);
        }
        if let Some(ref v) = self.suffix.as_ref() {
            my_size += ::protobuf::rt::string_size(8, &v);
        }
        if let Some(ref v) = self.contains.as_ref() {
            my_size += ::protobuf::rt::string_size(9, &v);
        }
        if let Some(ref v) = self.not_contains.as_ref() {
            my_size += ::protobuf::rt::string_size(23, &v);
        }
        for value in &self.field_in {
            my_size += ::protobuf::rt::string_size(10, &value);
        };
        for value in &self.not_in {
            my_size += ::protobuf::rt::string_size(11, &value);
        };
        if let Some(v) = self.strict {
            my_size += 3;
        }
        if let ::std::option::Option::Some(ref v) = self.well_known {
            match v {
                &StringRules_oneof_well_known::email(v) => {
                    my_size += 2;
                },
                &StringRules_oneof_well_known::hostname(v) => {
                    my_size += 2;
                },
                &StringRules_oneof_well_known::ip(v) => {
                    my_size += 2;
                },
                &StringRules_oneof_well_known::ipv4(v) => {
                    my_size += 2;
                },
                &StringRules_oneof_well_known::ipv6(v) => {
                    my_size += 3;
                },
                &StringRules_oneof_well_known::uri(v) => {
                    my_size += 3;
                },
                &StringRules_oneof_well_known::uri_ref(v) => {
                    my_size += 3;
                },
                &StringRules_oneof_well_known::address(v) => {
                    my_size += 3;
                },
                &StringRules_oneof_well_known::uuid(v) => {
                    my_size += 3;
                },
                &StringRules_oneof_well_known::well_known_regex(v) => {
                    my_size += ::protobuf::rt::enum_size(24, v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.field_const.as_ref() {
            os.write_string(1, &v)?;
        }
        if let Some(v) = self.len {
            os.write_uint64(19, v)?;
        }
        if let Some(v) = self.min_len {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.max_len {
            os.write_uint64(3, v)?;
        }
        if let Some(v) = self.len_bytes {
            os.write_uint64(20, v)?;
        }
        if let Some(v) = self.min_bytes {
            os.write_uint64(4, v)?;
        }
        if let Some(v) = self.max_bytes {
            os.write_uint64(5, v)?;
        }
        if let Some(ref v) = self.pattern.as_ref() {
            os.write_string(6, &v)?;
        }
        if let Some(ref v) = self.prefix.as_ref() {
            os.write_string(7, &v)?;
        }
        if let Some(ref v) = self.suffix.as_ref() {
            os.write_string(8, &v)?;
        }
        if let Some(ref v) = self.contains.as_ref() {
            os.write_string(9, &v)?;
        }
        if let Some(ref v) = self.not_contains.as_ref() {
            os.write_string(23, &v)?;
        }
        for v in &self.field_in {
            os.write_string(10, &v)?;
        };
        for v in &self.not_in {
            os.write_string(11, &v)?;
        };
        if let Some(v) = self.strict {
            os.write_bool(25, v)?;
        }
        if let ::std::option::Option::Some(ref v) = self.well_known {
            match v {
                &StringRules_oneof_well_known::email(v) => {
                    os.write_bool(12, v)?;
                },
                &StringRules_oneof_well_known::hostname(v) => {
                    os.write_bool(13, v)?;
                },
                &StringRules_oneof_well_known::ip(v) => {
                    os.write_bool(14, v)?;
                },
                &StringRules_oneof_well_known::ipv4(v) => {
                    os.write_bool(15, v)?;
                },
                &StringRules_oneof_well_known::ipv6(v) => {
                    os.write_bool(16, v)?;
                },
                &StringRules_oneof_well_known::uri(v) => {
                    os.write_bool(17, v)?;
                },
                &StringRules_oneof_well_known::uri_ref(v) => {
                    os.write_bool(18, v)?;
                },
                &StringRules_oneof_well_known::address(v) => {
                    os.write_bool(21, v)?;
                },
                &StringRules_oneof_well_known::uuid(v) => {
                    os.write_bool(22, v)?;
                },
                &StringRules_oneof_well_known::well_known_regex(v) => {
                    os.write_enum(24, ::protobuf::ProtobufEnum::value(&v))?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StringRules {
        StringRules::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "const",
                |m: &StringRules| { &m.field_const },
                |m: &mut StringRules| { &mut m.field_const },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "len",
                |m: &StringRules| { &m.len },
                |m: &mut StringRules| { &mut m.len },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "min_len",
                |m: &StringRules| { &m.min_len },
                |m: &mut StringRules| { &mut m.min_len },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "max_len",
                |m: &StringRules| { &m.max_len },
                |m: &mut StringRules| { &mut m.max_len },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "len_bytes",
                |m: &StringRules| { &m.len_bytes },
                |m: &mut StringRules| { &mut m.len_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "min_bytes",
                |m: &StringRules| { &m.min_bytes },
                |m: &mut StringRules| { &mut m.min_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "max_bytes",
                |m: &StringRules| { &m.max_bytes },
                |m: &mut StringRules| { &mut m.max_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pattern",
                |m: &StringRules| { &m.pattern },
                |m: &mut StringRules| { &mut m.pattern },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "prefix",
                |m: &StringRules| { &m.prefix },
                |m: &mut StringRules| { &mut m.prefix },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "suffix",
                |m: &StringRules| { &m.suffix },
                |m: &mut StringRules| { &mut m.suffix },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "contains",
                |m: &StringRules| { &m.contains },
                |m: &mut StringRules| { &mut m.contains },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "not_contains",
                |m: &StringRules| { &m.not_contains },
                |m: &mut StringRules| { &mut m.not_contains },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "in",
                |m: &StringRules| { &m.field_in },
                |m: &mut StringRules| { &mut m.field_in },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "not_in",
                |m: &StringRules| { &m.not_in },
                |m: &mut StringRules| { &mut m.not_in },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "email",
                StringRules::has_email,
                StringRules::get_email,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "hostname",
                StringRules::has_hostname,
                StringRules::get_hostname,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "ip",
                StringRules::has_ip,
                StringRules::get_ip,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "ipv4",
                StringRules::has_ipv4,
                StringRules::get_ipv4,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "ipv6",
                StringRules::has_ipv6,
                StringRules::get_ipv6,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "uri",
                StringRules::has_uri,
                StringRules::get_uri,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "uri_ref",
                StringRules::has_uri_ref,
                StringRules::get_uri_ref,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "address",
                StringRules::has_address,
                StringRules::get_address,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "uuid",
                StringRules::has_uuid,
                StringRules::get_uuid,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor::<_, KnownRegex>(
                "well_known_regex",
                StringRules::has_well_known_regex,
                StringRules::get_well_known_regex,
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "strict",
                |m: &StringRules| { &m.strict },
                |m: &mut StringRules| { &mut m.strict },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StringRules>(
                "StringRules",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StringRules {
        static instance: ::protobuf::rt::LazyV2<StringRules> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StringRules::new)
    }
}

impl ::protobuf::Clear for StringRules {
    fn clear(&mut self) {
        self.field_const.clear();
        self.len = ::std::option::Option::None;
        self.min_len = ::std::option::Option::None;
        self.max_len = ::std::option::Option::None;
        self.len_bytes = ::std::option::Option::None;
        self.min_bytes = ::std::option::Option::None;
        self.max_bytes = ::std::option::Option::None;
        self.pattern.clear();
        self.prefix.clear();
        self.suffix.clear();
        self.contains.clear();
        self.not_contains.clear();
        self.field_in.clear();
        self.not_in.clear();
        self.well_known = ::std::option::Option::None;
        self.well_known = ::std::option::Option::None;
        self.well_known = ::std::option::Option::None;
        self.well_known = ::std::option::Option::None;
        self.well_known = ::std::option::Option::None;
        self.well_known = ::std::option::Option::None;
        self.well_known = ::std::option::Option::None;
        self.well_known = ::std::option::Option::None;
        self.well_known = ::std::option::Option::None;
        self.well_known = ::std::option::Option::None;
        self.strict = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StringRules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StringRules {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BytesRules {
    // message fields
    field_const: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    len: ::std::option::Option<u64>,
    min_len: ::std::option::Option<u64>,
    max_len: ::std::option::Option<u64>,
    pattern: ::protobuf::SingularField<::std::string::String>,
    prefix: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    suffix: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    contains: ::protobuf::SingularField<::std::vec::Vec<u8>>,
    pub field_in: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub not_in: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // message oneof groups
    pub well_known: ::std::option::Option<BytesRules_oneof_well_known>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BytesRules {
    fn default() -> &'a BytesRules {
        <BytesRules as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum BytesRules_oneof_well_known {
    ip(bool),
    ipv4(bool),
    ipv6(bool),
}

impl BytesRules {
    pub fn new() -> BytesRules {
        ::std::default::Default::default()
    }

    // optional bytes const = 1;


    pub fn get_field_const(&self) -> &[u8] {
        match self.field_const.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_field_const(&mut self) {
        self.field_const.clear();
    }

    pub fn has_field_const(&self) -> bool {
        self.field_const.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_const(&mut self, v: ::std::vec::Vec<u8>) {
        self.field_const = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_const(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.field_const.is_none() {
            self.field_const.set_default();
        }
        self.field_const.as_mut().unwrap()
    }

    // Take field
    pub fn take_field_const(&mut self) -> ::std::vec::Vec<u8> {
        self.field_const.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional uint64 len = 13;


    pub fn get_len(&self) -> u64 {
        self.len.unwrap_or(0)
    }
    pub fn clear_len(&mut self) {
        self.len = ::std::option::Option::None;
    }

    pub fn has_len(&self) -> bool {
        self.len.is_some()
    }

    // Param is passed by value, moved
    pub fn set_len(&mut self, v: u64) {
        self.len = ::std::option::Option::Some(v);
    }

    // optional uint64 min_len = 2;


    pub fn get_min_len(&self) -> u64 {
        self.min_len.unwrap_or(0)
    }
    pub fn clear_min_len(&mut self) {
        self.min_len = ::std::option::Option::None;
    }

    pub fn has_min_len(&self) -> bool {
        self.min_len.is_some()
    }

    // Param is passed by value, moved
    pub fn set_min_len(&mut self, v: u64) {
        self.min_len = ::std::option::Option::Some(v);
    }

    // optional uint64 max_len = 3;


    pub fn get_max_len(&self) -> u64 {
        self.max_len.unwrap_or(0)
    }
    pub fn clear_max_len(&mut self) {
        self.max_len = ::std::option::Option::None;
    }

    pub fn has_max_len(&self) -> bool {
        self.max_len.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_len(&mut self, v: u64) {
        self.max_len = ::std::option::Option::Some(v);
    }

    // optional string pattern = 4;


    pub fn get_pattern(&self) -> &str {
        match self.pattern.as_ref() {
            Some(v) => &v,
            None => "",
        }
    }
    pub fn clear_pattern(&mut self) {
        self.pattern.clear();
    }

    pub fn has_pattern(&self) -> bool {
        self.pattern.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pattern(&mut self, v: ::std::string::String) {
        self.pattern = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pattern(&mut self) -> &mut ::std::string::String {
        if self.pattern.is_none() {
            self.pattern.set_default();
        }
        self.pattern.as_mut().unwrap()
    }

    // Take field
    pub fn take_pattern(&mut self) -> ::std::string::String {
        self.pattern.take().unwrap_or_else(|| ::std::string::String::new())
    }

    // optional bytes prefix = 5;


    pub fn get_prefix(&self) -> &[u8] {
        match self.prefix.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_prefix(&mut self) {
        self.prefix.clear();
    }

    pub fn has_prefix(&self) -> bool {
        self.prefix.is_some()
    }

    // Param is passed by value, moved
    pub fn set_prefix(&mut self, v: ::std::vec::Vec<u8>) {
        self.prefix = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prefix(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.prefix.is_none() {
            self.prefix.set_default();
        }
        self.prefix.as_mut().unwrap()
    }

    // Take field
    pub fn take_prefix(&mut self) -> ::std::vec::Vec<u8> {
        self.prefix.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes suffix = 6;


    pub fn get_suffix(&self) -> &[u8] {
        match self.suffix.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_suffix(&mut self) {
        self.suffix.clear();
    }

    pub fn has_suffix(&self) -> bool {
        self.suffix.is_some()
    }

    // Param is passed by value, moved
    pub fn set_suffix(&mut self, v: ::std::vec::Vec<u8>) {
        self.suffix = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_suffix(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.suffix.is_none() {
            self.suffix.set_default();
        }
        self.suffix.as_mut().unwrap()
    }

    // Take field
    pub fn take_suffix(&mut self) -> ::std::vec::Vec<u8> {
        self.suffix.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // optional bytes contains = 7;


    pub fn get_contains(&self) -> &[u8] {
        match self.contains.as_ref() {
            Some(v) => &v,
            None => &[],
        }
    }
    pub fn clear_contains(&mut self) {
        self.contains.clear();
    }

    pub fn has_contains(&self) -> bool {
        self.contains.is_some()
    }

    // Param is passed by value, moved
    pub fn set_contains(&mut self, v: ::std::vec::Vec<u8>) {
        self.contains = ::protobuf::SingularField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contains(&mut self) -> &mut ::std::vec::Vec<u8> {
        if self.contains.is_none() {
            self.contains.set_default();
        }
        self.contains.as_mut().unwrap()
    }

    // Take field
    pub fn take_contains(&mut self) -> ::std::vec::Vec<u8> {
        self.contains.take().unwrap_or_else(|| ::std::vec::Vec::new())
    }

    // repeated bytes in = 8;


    pub fn get_field_in(&self) -> &[::std::vec::Vec<u8>] {
        &self.field_in
    }
    pub fn clear_field_in(&mut self) {
        self.field_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_in(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.field_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_field_in(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.field_in
    }

    // Take field
    pub fn take_field_in(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.field_in, ::protobuf::RepeatedField::new())
    }

    // repeated bytes not_in = 9;


    pub fn get_not_in(&self) -> &[::std::vec::Vec<u8>] {
        &self.not_in
    }
    pub fn clear_not_in(&mut self) {
        self.not_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_not_in(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.not_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_not_in(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.not_in
    }

    // Take field
    pub fn take_not_in(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.not_in, ::protobuf::RepeatedField::new())
    }

    // optional bool ip = 10;


    pub fn get_ip(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(BytesRules_oneof_well_known::ip(v)) => v,
            _ => false,
        }
    }
    pub fn clear_ip(&mut self) {
        self.well_known = ::std::option::Option::None;
    }

    pub fn has_ip(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(BytesRules_oneof_well_known::ip(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ip(&mut self, v: bool) {
        self.well_known = ::std::option::Option::Some(BytesRules_oneof_well_known::ip(v))
    }

    // optional bool ipv4 = 11;


    pub fn get_ipv4(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(BytesRules_oneof_well_known::ipv4(v)) => v,
            _ => false,
        }
    }
    pub fn clear_ipv4(&mut self) {
        self.well_known = ::std::option::Option::None;
    }

    pub fn has_ipv4(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(BytesRules_oneof_well_known::ipv4(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ipv4(&mut self, v: bool) {
        self.well_known = ::std::option::Option::Some(BytesRules_oneof_well_known::ipv4(v))
    }

    // optional bool ipv6 = 12;


    pub fn get_ipv6(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(BytesRules_oneof_well_known::ipv6(v)) => v,
            _ => false,
        }
    }
    pub fn clear_ipv6(&mut self) {
        self.well_known = ::std::option::Option::None;
    }

    pub fn has_ipv6(&self) -> bool {
        match self.well_known {
            ::std::option::Option::Some(BytesRules_oneof_well_known::ipv6(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ipv6(&mut self, v: bool) {
        self.well_known = ::std::option::Option::Some(BytesRules_oneof_well_known::ipv6(v))
    }
}

impl ::protobuf::Message for BytesRules {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.field_const)?;
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.len = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.min_len = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.max_len = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_string_into(wire_type, is, &mut self.pattern)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.prefix)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.suffix)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_bytes_into(wire_type, is, &mut self.contains)?;
                },
                8 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.field_in)?;
                },
                9 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.not_in)?;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.well_known = ::std::option::Option::Some(BytesRules_oneof_well_known::ip(is.read_bool()?));
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.well_known = ::std::option::Option::Some(BytesRules_oneof_well_known::ipv4(is.read_bool()?));
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.well_known = ::std::option::Option::Some(BytesRules_oneof_well_known::ipv6(is.read_bool()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.field_const.as_ref() {
            my_size += ::protobuf::rt::bytes_size(1, &v);
        }
        if let Some(v) = self.len {
            my_size += ::protobuf::rt::value_size(13, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.min_len {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.max_len {
            my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.pattern.as_ref() {
            my_size += ::protobuf::rt::string_size(4, &v);
        }
        if let Some(ref v) = self.prefix.as_ref() {
            my_size += ::protobuf::rt::bytes_size(5, &v);
        }
        if let Some(ref v) = self.suffix.as_ref() {
            my_size += ::protobuf::rt::bytes_size(6, &v);
        }
        if let Some(ref v) = self.contains.as_ref() {
            my_size += ::protobuf::rt::bytes_size(7, &v);
        }
        for value in &self.field_in {
            my_size += ::protobuf::rt::bytes_size(8, &value);
        };
        for value in &self.not_in {
            my_size += ::protobuf::rt::bytes_size(9, &value);
        };
        if let ::std::option::Option::Some(ref v) = self.well_known {
            match v {
                &BytesRules_oneof_well_known::ip(v) => {
                    my_size += 2;
                },
                &BytesRules_oneof_well_known::ipv4(v) => {
                    my_size += 2;
                },
                &BytesRules_oneof_well_known::ipv6(v) => {
                    my_size += 2;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.field_const.as_ref() {
            os.write_bytes(1, &v)?;
        }
        if let Some(v) = self.len {
            os.write_uint64(13, v)?;
        }
        if let Some(v) = self.min_len {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.max_len {
            os.write_uint64(3, v)?;
        }
        if let Some(ref v) = self.pattern.as_ref() {
            os.write_string(4, &v)?;
        }
        if let Some(ref v) = self.prefix.as_ref() {
            os.write_bytes(5, &v)?;
        }
        if let Some(ref v) = self.suffix.as_ref() {
            os.write_bytes(6, &v)?;
        }
        if let Some(ref v) = self.contains.as_ref() {
            os.write_bytes(7, &v)?;
        }
        for v in &self.field_in {
            os.write_bytes(8, &v)?;
        };
        for v in &self.not_in {
            os.write_bytes(9, &v)?;
        };
        if let ::std::option::Option::Some(ref v) = self.well_known {
            match v {
                &BytesRules_oneof_well_known::ip(v) => {
                    os.write_bool(10, v)?;
                },
                &BytesRules_oneof_well_known::ipv4(v) => {
                    os.write_bool(11, v)?;
                },
                &BytesRules_oneof_well_known::ipv6(v) => {
                    os.write_bool(12, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BytesRules {
        BytesRules::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "const",
                |m: &BytesRules| { &m.field_const },
                |m: &mut BytesRules| { &mut m.field_const },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "len",
                |m: &BytesRules| { &m.len },
                |m: &mut BytesRules| { &mut m.len },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "min_len",
                |m: &BytesRules| { &m.min_len },
                |m: &mut BytesRules| { &mut m.min_len },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "max_len",
                |m: &BytesRules| { &m.max_len },
                |m: &mut BytesRules| { &mut m.max_len },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pattern",
                |m: &BytesRules| { &m.pattern },
                |m: &mut BytesRules| { &mut m.pattern },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "prefix",
                |m: &BytesRules| { &m.prefix },
                |m: &mut BytesRules| { &mut m.prefix },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "suffix",
                |m: &BytesRules| { &m.suffix },
                |m: &mut BytesRules| { &mut m.suffix },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "contains",
                |m: &BytesRules| { &m.contains },
                |m: &mut BytesRules| { &mut m.contains },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "in",
                |m: &BytesRules| { &m.field_in },
                |m: &mut BytesRules| { &mut m.field_in },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "not_in",
                |m: &BytesRules| { &m.not_in },
                |m: &mut BytesRules| { &mut m.not_in },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "ip",
                BytesRules::has_ip,
                BytesRules::get_ip,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "ipv4",
                BytesRules::has_ipv4,
                BytesRules::get_ipv4,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "ipv6",
                BytesRules::has_ipv6,
                BytesRules::get_ipv6,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BytesRules>(
                "BytesRules",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BytesRules {
        static instance: ::protobuf::rt::LazyV2<BytesRules> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BytesRules::new)
    }
}

impl ::protobuf::Clear for BytesRules {
    fn clear(&mut self) {
        self.field_const.clear();
        self.len = ::std::option::Option::None;
        self.min_len = ::std::option::Option::None;
        self.max_len = ::std::option::Option::None;
        self.pattern.clear();
        self.prefix.clear();
        self.suffix.clear();
        self.contains.clear();
        self.field_in.clear();
        self.not_in.clear();
        self.well_known = ::std::option::Option::None;
        self.well_known = ::std::option::Option::None;
        self.well_known = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BytesRules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BytesRules {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EnumRules {
    // message fields
    field_const: ::std::option::Option<i32>,
    defined_only: ::std::option::Option<bool>,
    pub field_in: ::std::vec::Vec<i32>,
    pub not_in: ::std::vec::Vec<i32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EnumRules {
    fn default() -> &'a EnumRules {
        <EnumRules as ::protobuf::Message>::default_instance()
    }
}

impl EnumRules {
    pub fn new() -> EnumRules {
        ::std::default::Default::default()
    }

    // optional int32 const = 1;


    pub fn get_field_const(&self) -> i32 {
        self.field_const.unwrap_or(0)
    }
    pub fn clear_field_const(&mut self) {
        self.field_const = ::std::option::Option::None;
    }

    pub fn has_field_const(&self) -> bool {
        self.field_const.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_const(&mut self, v: i32) {
        self.field_const = ::std::option::Option::Some(v);
    }

    // optional bool defined_only = 2;


    pub fn get_defined_only(&self) -> bool {
        self.defined_only.unwrap_or(false)
    }
    pub fn clear_defined_only(&mut self) {
        self.defined_only = ::std::option::Option::None;
    }

    pub fn has_defined_only(&self) -> bool {
        self.defined_only.is_some()
    }

    // Param is passed by value, moved
    pub fn set_defined_only(&mut self, v: bool) {
        self.defined_only = ::std::option::Option::Some(v);
    }

    // repeated int32 in = 3;


    pub fn get_field_in(&self) -> &[i32] {
        &self.field_in
    }
    pub fn clear_field_in(&mut self) {
        self.field_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_in(&mut self, v: ::std::vec::Vec<i32>) {
        self.field_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_field_in(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.field_in
    }

    // Take field
    pub fn take_field_in(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.field_in, ::std::vec::Vec::new())
    }

    // repeated int32 not_in = 4;


    pub fn get_not_in(&self) -> &[i32] {
        &self.not_in
    }
    pub fn clear_not_in(&mut self) {
        self.not_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_not_in(&mut self, v: ::std::vec::Vec<i32>) {
        self.not_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_not_in(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.not_in
    }

    // Take field
    pub fn take_not_in(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.not_in, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for EnumRules {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.field_const = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.defined_only = ::std::option::Option::Some(tmp);
                },
                3 => {
                    ::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.field_in)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.not_in)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_const {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.defined_only {
            my_size += 2;
        }
        for value in &self.field_in {
            my_size += ::protobuf::rt::value_size(3, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.not_in {
            my_size += ::protobuf::rt::value_size(4, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_const {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.defined_only {
            os.write_bool(2, v)?;
        }
        for v in &self.field_in {
            os.write_int32(3, *v)?;
        };
        for v in &self.not_in {
            os.write_int32(4, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EnumRules {
        EnumRules::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "const",
                |m: &EnumRules| { &m.field_const },
                |m: &mut EnumRules| { &mut m.field_const },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "defined_only",
                |m: &EnumRules| { &m.defined_only },
                |m: &mut EnumRules| { &mut m.defined_only },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "in",
                |m: &EnumRules| { &m.field_in },
                |m: &mut EnumRules| { &mut m.field_in },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "not_in",
                |m: &EnumRules| { &m.not_in },
                |m: &mut EnumRules| { &mut m.not_in },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EnumRules>(
                "EnumRules",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EnumRules {
        static instance: ::protobuf::rt::LazyV2<EnumRules> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EnumRules::new)
    }
}

impl ::protobuf::Clear for EnumRules {
    fn clear(&mut self) {
        self.field_const = ::std::option::Option::None;
        self.defined_only = ::std::option::Option::None;
        self.field_in.clear();
        self.not_in.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EnumRules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EnumRules {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MessageRules {
    // message fields
    skip: ::std::option::Option<bool>,
    required: ::std::option::Option<bool>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MessageRules {
    fn default() -> &'a MessageRules {
        <MessageRules as ::protobuf::Message>::default_instance()
    }
}

impl MessageRules {
    pub fn new() -> MessageRules {
        ::std::default::Default::default()
    }

    // optional bool skip = 1;


    pub fn get_skip(&self) -> bool {
        self.skip.unwrap_or(false)
    }
    pub fn clear_skip(&mut self) {
        self.skip = ::std::option::Option::None;
    }

    pub fn has_skip(&self) -> bool {
        self.skip.is_some()
    }

    // Param is passed by value, moved
    pub fn set_skip(&mut self, v: bool) {
        self.skip = ::std::option::Option::Some(v);
    }

    // optional bool required = 2;


    pub fn get_required(&self) -> bool {
        self.required.unwrap_or(false)
    }
    pub fn clear_required(&mut self) {
        self.required = ::std::option::Option::None;
    }

    pub fn has_required(&self) -> bool {
        self.required.is_some()
    }

    // Param is passed by value, moved
    pub fn set_required(&mut self, v: bool) {
        self.required = ::std::option::Option::Some(v);
    }
}

impl ::protobuf::Message for MessageRules {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.skip = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.required = ::std::option::Option::Some(tmp);
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.skip {
            my_size += 2;
        }
        if let Some(v) = self.required {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.skip {
            os.write_bool(1, v)?;
        }
        if let Some(v) = self.required {
            os.write_bool(2, v)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MessageRules {
        MessageRules::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "skip",
                |m: &MessageRules| { &m.skip },
                |m: &mut MessageRules| { &mut m.skip },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "required",
                |m: &MessageRules| { &m.required },
                |m: &mut MessageRules| { &mut m.required },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MessageRules>(
                "MessageRules",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MessageRules {
        static instance: ::protobuf::rt::LazyV2<MessageRules> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MessageRules::new)
    }
}

impl ::protobuf::Clear for MessageRules {
    fn clear(&mut self) {
        self.skip = ::std::option::Option::None;
        self.required = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MessageRules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageRules {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RepeatedRules {
    // message fields
    min_items: ::std::option::Option<u64>,
    max_items: ::std::option::Option<u64>,
    unique: ::std::option::Option<bool>,
    pub items: ::protobuf::SingularPtrField<FieldRules>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RepeatedRules {
    fn default() -> &'a RepeatedRules {
        <RepeatedRules as ::protobuf::Message>::default_instance()
    }
}

impl RepeatedRules {
    pub fn new() -> RepeatedRules {
        ::std::default::Default::default()
    }

    // optional uint64 min_items = 1;


    pub fn get_min_items(&self) -> u64 {
        self.min_items.unwrap_or(0)
    }
    pub fn clear_min_items(&mut self) {
        self.min_items = ::std::option::Option::None;
    }

    pub fn has_min_items(&self) -> bool {
        self.min_items.is_some()
    }

    // Param is passed by value, moved
    pub fn set_min_items(&mut self, v: u64) {
        self.min_items = ::std::option::Option::Some(v);
    }

    // optional uint64 max_items = 2;


    pub fn get_max_items(&self) -> u64 {
        self.max_items.unwrap_or(0)
    }
    pub fn clear_max_items(&mut self) {
        self.max_items = ::std::option::Option::None;
    }

    pub fn has_max_items(&self) -> bool {
        self.max_items.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_items(&mut self, v: u64) {
        self.max_items = ::std::option::Option::Some(v);
    }

    // optional bool unique = 3;


    pub fn get_unique(&self) -> bool {
        self.unique.unwrap_or(false)
    }
    pub fn clear_unique(&mut self) {
        self.unique = ::std::option::Option::None;
    }

    pub fn has_unique(&self) -> bool {
        self.unique.is_some()
    }

    // Param is passed by value, moved
    pub fn set_unique(&mut self, v: bool) {
        self.unique = ::std::option::Option::Some(v);
    }

    // optional .validate.FieldRules items = 4;


    pub fn get_items(&self) -> &FieldRules {
        self.items.as_ref().unwrap_or_else(|| <FieldRules as ::protobuf::Message>::default_instance())
    }
    pub fn clear_items(&mut self) {
        self.items.clear();
    }

    pub fn has_items(&self) -> bool {
        self.items.is_some()
    }

    // Param is passed by value, moved
    pub fn set_items(&mut self, v: FieldRules) {
        self.items = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_items(&mut self) -> &mut FieldRules {
        if self.items.is_none() {
            self.items.set_default();
        }
        self.items.as_mut().unwrap()
    }

    // Take field
    pub fn take_items(&mut self) -> FieldRules {
        self.items.take().unwrap_or_else(|| FieldRules::new())
    }
}

impl ::protobuf::Message for RepeatedRules {
    fn is_initialized(&self) -> bool {
        for v in &self.items {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.min_items = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.max_items = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.unique = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.items)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.min_items {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.max_items {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.unique {
            my_size += 2;
        }
        if let Some(ref v) = self.items.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.min_items {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.max_items {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.unique {
            os.write_bool(3, v)?;
        }
        if let Some(ref v) = self.items.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RepeatedRules {
        RepeatedRules::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "min_items",
                |m: &RepeatedRules| { &m.min_items },
                |m: &mut RepeatedRules| { &mut m.min_items },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "max_items",
                |m: &RepeatedRules| { &m.max_items },
                |m: &mut RepeatedRules| { &mut m.max_items },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "unique",
                |m: &RepeatedRules| { &m.unique },
                |m: &mut RepeatedRules| { &mut m.unique },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FieldRules>>(
                "items",
                |m: &RepeatedRules| { &m.items },
                |m: &mut RepeatedRules| { &mut m.items },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RepeatedRules>(
                "RepeatedRules",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RepeatedRules {
        static instance: ::protobuf::rt::LazyV2<RepeatedRules> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RepeatedRules::new)
    }
}

impl ::protobuf::Clear for RepeatedRules {
    fn clear(&mut self) {
        self.min_items = ::std::option::Option::None;
        self.max_items = ::std::option::Option::None;
        self.unique = ::std::option::Option::None;
        self.items.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RepeatedRules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RepeatedRules {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MapRules {
    // message fields
    min_pairs: ::std::option::Option<u64>,
    max_pairs: ::std::option::Option<u64>,
    no_sparse: ::std::option::Option<bool>,
    pub keys: ::protobuf::SingularPtrField<FieldRules>,
    pub values: ::protobuf::SingularPtrField<FieldRules>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MapRules {
    fn default() -> &'a MapRules {
        <MapRules as ::protobuf::Message>::default_instance()
    }
}

impl MapRules {
    pub fn new() -> MapRules {
        ::std::default::Default::default()
    }

    // optional uint64 min_pairs = 1;


    pub fn get_min_pairs(&self) -> u64 {
        self.min_pairs.unwrap_or(0)
    }
    pub fn clear_min_pairs(&mut self) {
        self.min_pairs = ::std::option::Option::None;
    }

    pub fn has_min_pairs(&self) -> bool {
        self.min_pairs.is_some()
    }

    // Param is passed by value, moved
    pub fn set_min_pairs(&mut self, v: u64) {
        self.min_pairs = ::std::option::Option::Some(v);
    }

    // optional uint64 max_pairs = 2;


    pub fn get_max_pairs(&self) -> u64 {
        self.max_pairs.unwrap_or(0)
    }
    pub fn clear_max_pairs(&mut self) {
        self.max_pairs = ::std::option::Option::None;
    }

    pub fn has_max_pairs(&self) -> bool {
        self.max_pairs.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_pairs(&mut self, v: u64) {
        self.max_pairs = ::std::option::Option::Some(v);
    }

    // optional bool no_sparse = 3;


    pub fn get_no_sparse(&self) -> bool {
        self.no_sparse.unwrap_or(false)
    }
    pub fn clear_no_sparse(&mut self) {
        self.no_sparse = ::std::option::Option::None;
    }

    pub fn has_no_sparse(&self) -> bool {
        self.no_sparse.is_some()
    }

    // Param is passed by value, moved
    pub fn set_no_sparse(&mut self, v: bool) {
        self.no_sparse = ::std::option::Option::Some(v);
    }

    // optional .validate.FieldRules keys = 4;


    pub fn get_keys(&self) -> &FieldRules {
        self.keys.as_ref().unwrap_or_else(|| <FieldRules as ::protobuf::Message>::default_instance())
    }
    pub fn clear_keys(&mut self) {
        self.keys.clear();
    }

    pub fn has_keys(&self) -> bool {
        self.keys.is_some()
    }

    // Param is passed by value, moved
    pub fn set_keys(&mut self, v: FieldRules) {
        self.keys = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_keys(&mut self) -> &mut FieldRules {
        if self.keys.is_none() {
            self.keys.set_default();
        }
        self.keys.as_mut().unwrap()
    }

    // Take field
    pub fn take_keys(&mut self) -> FieldRules {
        self.keys.take().unwrap_or_else(|| FieldRules::new())
    }

    // optional .validate.FieldRules values = 5;


    pub fn get_values(&self) -> &FieldRules {
        self.values.as_ref().unwrap_or_else(|| <FieldRules as ::protobuf::Message>::default_instance())
    }
    pub fn clear_values(&mut self) {
        self.values.clear();
    }

    pub fn has_values(&self) -> bool {
        self.values.is_some()
    }

    // Param is passed by value, moved
    pub fn set_values(&mut self, v: FieldRules) {
        self.values = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_values(&mut self) -> &mut FieldRules {
        if self.values.is_none() {
            self.values.set_default();
        }
        self.values.as_mut().unwrap()
    }

    // Take field
    pub fn take_values(&mut self) -> FieldRules {
        self.values.take().unwrap_or_else(|| FieldRules::new())
    }
}

impl ::protobuf::Message for MapRules {
    fn is_initialized(&self) -> bool {
        for v in &self.keys {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.values {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.min_pairs = ::std::option::Option::Some(tmp);
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.max_pairs = ::std::option::Option::Some(tmp);
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.no_sparse = ::std::option::Option::Some(tmp);
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.keys)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.values)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.min_pairs {
            my_size += ::protobuf::rt::value_size(1, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.max_pairs {
            my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.no_sparse {
            my_size += 2;
        }
        if let Some(ref v) = self.keys.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.values.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.min_pairs {
            os.write_uint64(1, v)?;
        }
        if let Some(v) = self.max_pairs {
            os.write_uint64(2, v)?;
        }
        if let Some(v) = self.no_sparse {
            os.write_bool(3, v)?;
        }
        if let Some(ref v) = self.keys.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.values.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MapRules {
        MapRules::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "min_pairs",
                |m: &MapRules| { &m.min_pairs },
                |m: &mut MapRules| { &mut m.min_pairs },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "max_pairs",
                |m: &MapRules| { &m.max_pairs },
                |m: &mut MapRules| { &mut m.max_pairs },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "no_sparse",
                |m: &MapRules| { &m.no_sparse },
                |m: &mut MapRules| { &mut m.no_sparse },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FieldRules>>(
                "keys",
                |m: &MapRules| { &m.keys },
                |m: &mut MapRules| { &mut m.keys },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FieldRules>>(
                "values",
                |m: &MapRules| { &m.values },
                |m: &mut MapRules| { &mut m.values },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MapRules>(
                "MapRules",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MapRules {
        static instance: ::protobuf::rt::LazyV2<MapRules> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MapRules::new)
    }
}

impl ::protobuf::Clear for MapRules {
    fn clear(&mut self) {
        self.min_pairs = ::std::option::Option::None;
        self.max_pairs = ::std::option::Option::None;
        self.no_sparse = ::std::option::Option::None;
        self.keys.clear();
        self.values.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MapRules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MapRules {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AnyRules {
    // message fields
    required: ::std::option::Option<bool>,
    pub field_in: ::protobuf::RepeatedField<::std::string::String>,
    pub not_in: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AnyRules {
    fn default() -> &'a AnyRules {
        <AnyRules as ::protobuf::Message>::default_instance()
    }
}

impl AnyRules {
    pub fn new() -> AnyRules {
        ::std::default::Default::default()
    }

    // optional bool required = 1;


    pub fn get_required(&self) -> bool {
        self.required.unwrap_or(false)
    }
    pub fn clear_required(&mut self) {
        self.required = ::std::option::Option::None;
    }

    pub fn has_required(&self) -> bool {
        self.required.is_some()
    }

    // Param is passed by value, moved
    pub fn set_required(&mut self, v: bool) {
        self.required = ::std::option::Option::Some(v);
    }

    // repeated string in = 2;


    pub fn get_field_in(&self) -> &[::std::string::String] {
        &self.field_in
    }
    pub fn clear_field_in(&mut self) {
        self.field_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_in(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.field_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_field_in(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.field_in
    }

    // Take field
    pub fn take_field_in(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.field_in, ::protobuf::RepeatedField::new())
    }

    // repeated string not_in = 3;


    pub fn get_not_in(&self) -> &[::std::string::String] {
        &self.not_in
    }
    pub fn clear_not_in(&mut self) {
        self.not_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_not_in(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.not_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_not_in(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.not_in
    }

    // Take field
    pub fn take_not_in(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.not_in, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AnyRules {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.required = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.field_in)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.not_in)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.required {
            my_size += 2;
        }
        for value in &self.field_in {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in &self.not_in {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.required {
            os.write_bool(1, v)?;
        }
        for v in &self.field_in {
            os.write_string(2, &v)?;
        };
        for v in &self.not_in {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AnyRules {
        AnyRules::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "required",
                |m: &AnyRules| { &m.required },
                |m: &mut AnyRules| { &mut m.required },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "in",
                |m: &AnyRules| { &m.field_in },
                |m: &mut AnyRules| { &mut m.field_in },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "not_in",
                |m: &AnyRules| { &m.not_in },
                |m: &mut AnyRules| { &mut m.not_in },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AnyRules>(
                "AnyRules",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AnyRules {
        static instance: ::protobuf::rt::LazyV2<AnyRules> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AnyRules::new)
    }
}

impl ::protobuf::Clear for AnyRules {
    fn clear(&mut self) {
        self.required = ::std::option::Option::None;
        self.field_in.clear();
        self.not_in.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AnyRules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AnyRules {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DurationRules {
    // message fields
    required: ::std::option::Option<bool>,
    pub field_const: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub lt: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub lte: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub gt: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub gte: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub field_in: ::protobuf::RepeatedField<::protobuf::well_known_types::Duration>,
    pub not_in: ::protobuf::RepeatedField<::protobuf::well_known_types::Duration>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DurationRules {
    fn default() -> &'a DurationRules {
        <DurationRules as ::protobuf::Message>::default_instance()
    }
}

impl DurationRules {
    pub fn new() -> DurationRules {
        ::std::default::Default::default()
    }

    // optional bool required = 1;


    pub fn get_required(&self) -> bool {
        self.required.unwrap_or(false)
    }
    pub fn clear_required(&mut self) {
        self.required = ::std::option::Option::None;
    }

    pub fn has_required(&self) -> bool {
        self.required.is_some()
    }

    // Param is passed by value, moved
    pub fn set_required(&mut self, v: bool) {
        self.required = ::std::option::Option::Some(v);
    }

    // optional .google.protobuf.Duration const = 2;


    pub fn get_field_const(&self) -> &::protobuf::well_known_types::Duration {
        self.field_const.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_field_const(&mut self) {
        self.field_const.clear();
    }

    pub fn has_field_const(&self) -> bool {
        self.field_const.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_const(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.field_const = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_const(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.field_const.is_none() {
            self.field_const.set_default();
        }
        self.field_const.as_mut().unwrap()
    }

    // Take field
    pub fn take_field_const(&mut self) -> ::protobuf::well_known_types::Duration {
        self.field_const.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // optional .google.protobuf.Duration lt = 3;


    pub fn get_lt(&self) -> &::protobuf::well_known_types::Duration {
        self.lt.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_lt(&mut self) {
        self.lt.clear();
    }

    pub fn has_lt(&self) -> bool {
        self.lt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lt(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.lt = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lt(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.lt.is_none() {
            self.lt.set_default();
        }
        self.lt.as_mut().unwrap()
    }

    // Take field
    pub fn take_lt(&mut self) -> ::protobuf::well_known_types::Duration {
        self.lt.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // optional .google.protobuf.Duration lte = 4;


    pub fn get_lte(&self) -> &::protobuf::well_known_types::Duration {
        self.lte.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_lte(&mut self) {
        self.lte.clear();
    }

    pub fn has_lte(&self) -> bool {
        self.lte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lte(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.lte = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lte(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.lte.is_none() {
            self.lte.set_default();
        }
        self.lte.as_mut().unwrap()
    }

    // Take field
    pub fn take_lte(&mut self) -> ::protobuf::well_known_types::Duration {
        self.lte.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // optional .google.protobuf.Duration gt = 5;


    pub fn get_gt(&self) -> &::protobuf::well_known_types::Duration {
        self.gt.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_gt(&mut self) {
        self.gt.clear();
    }

    pub fn has_gt(&self) -> bool {
        self.gt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gt(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.gt = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gt(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.gt.is_none() {
            self.gt.set_default();
        }
        self.gt.as_mut().unwrap()
    }

    // Take field
    pub fn take_gt(&mut self) -> ::protobuf::well_known_types::Duration {
        self.gt.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // optional .google.protobuf.Duration gte = 6;


    pub fn get_gte(&self) -> &::protobuf::well_known_types::Duration {
        self.gte.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_gte(&mut self) {
        self.gte.clear();
    }

    pub fn has_gte(&self) -> bool {
        self.gte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gte(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.gte = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gte(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.gte.is_none() {
            self.gte.set_default();
        }
        self.gte.as_mut().unwrap()
    }

    // Take field
    pub fn take_gte(&mut self) -> ::protobuf::well_known_types::Duration {
        self.gte.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // repeated .google.protobuf.Duration in = 7;


    pub fn get_field_in(&self) -> &[::protobuf::well_known_types::Duration] {
        &self.field_in
    }
    pub fn clear_field_in(&mut self) {
        self.field_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_in(&mut self, v: ::protobuf::RepeatedField<::protobuf::well_known_types::Duration>) {
        self.field_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_field_in(&mut self) -> &mut ::protobuf::RepeatedField<::protobuf::well_known_types::Duration> {
        &mut self.field_in
    }

    // Take field
    pub fn take_field_in(&mut self) -> ::protobuf::RepeatedField<::protobuf::well_known_types::Duration> {
        ::std::mem::replace(&mut self.field_in, ::protobuf::RepeatedField::new())
    }

    // repeated .google.protobuf.Duration not_in = 8;


    pub fn get_not_in(&self) -> &[::protobuf::well_known_types::Duration] {
        &self.not_in
    }
    pub fn clear_not_in(&mut self) {
        self.not_in.clear();
    }

    // Param is passed by value, moved
    pub fn set_not_in(&mut self, v: ::protobuf::RepeatedField<::protobuf::well_known_types::Duration>) {
        self.not_in = v;
    }

    // Mutable pointer to the field.
    pub fn mut_not_in(&mut self) -> &mut ::protobuf::RepeatedField<::protobuf::well_known_types::Duration> {
        &mut self.not_in
    }

    // Take field
    pub fn take_not_in(&mut self) -> ::protobuf::RepeatedField<::protobuf::well_known_types::Duration> {
        ::std::mem::replace(&mut self.not_in, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for DurationRules {
    fn is_initialized(&self) -> bool {
        for v in &self.field_const {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.lt {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.lte {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.gt {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.gte {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.field_in {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.not_in {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.required = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.field_const)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.lt)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.lte)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.gt)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.gte)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.field_in)?;
                },
                8 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.not_in)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.required {
            my_size += 2;
        }
        if let Some(ref v) = self.field_const.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.lt.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.lte.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.gt.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.gte.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.field_in {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.not_in {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.required {
            os.write_bool(1, v)?;
        }
        if let Some(ref v) = self.field_const.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.lt.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.lte.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.gt.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.gte.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.field_in {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.not_in {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DurationRules {
        DurationRules::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "required",
                |m: &DurationRules| { &m.required },
                |m: &mut DurationRules| { &mut m.required },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "const",
                |m: &DurationRules| { &m.field_const },
                |m: &mut DurationRules| { &mut m.field_const },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "lt",
                |m: &DurationRules| { &m.lt },
                |m: &mut DurationRules| { &mut m.lt },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "lte",
                |m: &DurationRules| { &m.lte },
                |m: &mut DurationRules| { &mut m.lte },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "gt",
                |m: &DurationRules| { &m.gt },
                |m: &mut DurationRules| { &mut m.gt },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "gte",
                |m: &DurationRules| { &m.gte },
                |m: &mut DurationRules| { &mut m.gte },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "in",
                |m: &DurationRules| { &m.field_in },
                |m: &mut DurationRules| { &mut m.field_in },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "not_in",
                |m: &DurationRules| { &m.not_in },
                |m: &mut DurationRules| { &mut m.not_in },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DurationRules>(
                "DurationRules",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DurationRules {
        static instance: ::protobuf::rt::LazyV2<DurationRules> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DurationRules::new)
    }
}

impl ::protobuf::Clear for DurationRules {
    fn clear(&mut self) {
        self.required = ::std::option::Option::None;
        self.field_const.clear();
        self.lt.clear();
        self.lte.clear();
        self.gt.clear();
        self.gte.clear();
        self.field_in.clear();
        self.not_in.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DurationRules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DurationRules {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TimestampRules {
    // message fields
    required: ::std::option::Option<bool>,
    pub field_const: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub lt: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub lte: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub gt: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub gte: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    lt_now: ::std::option::Option<bool>,
    gt_now: ::std::option::Option<bool>,
    pub within: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TimestampRules {
    fn default() -> &'a TimestampRules {
        <TimestampRules as ::protobuf::Message>::default_instance()
    }
}

impl TimestampRules {
    pub fn new() -> TimestampRules {
        ::std::default::Default::default()
    }

    // optional bool required = 1;


    pub fn get_required(&self) -> bool {
        self.required.unwrap_or(false)
    }
    pub fn clear_required(&mut self) {
        self.required = ::std::option::Option::None;
    }

    pub fn has_required(&self) -> bool {
        self.required.is_some()
    }

    // Param is passed by value, moved
    pub fn set_required(&mut self, v: bool) {
        self.required = ::std::option::Option::Some(v);
    }

    // optional .google.protobuf.Timestamp const = 2;


    pub fn get_field_const(&self) -> &::protobuf::well_known_types::Timestamp {
        self.field_const.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_field_const(&mut self) {
        self.field_const.clear();
    }

    pub fn has_field_const(&self) -> bool {
        self.field_const.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_const(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.field_const = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_const(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.field_const.is_none() {
            self.field_const.set_default();
        }
        self.field_const.as_mut().unwrap()
    }

    // Take field
    pub fn take_field_const(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.field_const.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // optional .google.protobuf.Timestamp lt = 3;


    pub fn get_lt(&self) -> &::protobuf::well_known_types::Timestamp {
        self.lt.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_lt(&mut self) {
        self.lt.clear();
    }

    pub fn has_lt(&self) -> bool {
        self.lt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lt(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.lt = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lt(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.lt.is_none() {
            self.lt.set_default();
        }
        self.lt.as_mut().unwrap()
    }

    // Take field
    pub fn take_lt(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.lt.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // optional .google.protobuf.Timestamp lte = 4;


    pub fn get_lte(&self) -> &::protobuf::well_known_types::Timestamp {
        self.lte.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_lte(&mut self) {
        self.lte.clear();
    }

    pub fn has_lte(&self) -> bool {
        self.lte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lte(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.lte = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lte(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.lte.is_none() {
            self.lte.set_default();
        }
        self.lte.as_mut().unwrap()
    }

    // Take field
    pub fn take_lte(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.lte.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // optional .google.protobuf.Timestamp gt = 5;


    pub fn get_gt(&self) -> &::protobuf::well_known_types::Timestamp {
        self.gt.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_gt(&mut self) {
        self.gt.clear();
    }

    pub fn has_gt(&self) -> bool {
        self.gt.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gt(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.gt = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gt(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.gt.is_none() {
            self.gt.set_default();
        }
        self.gt.as_mut().unwrap()
    }

    // Take field
    pub fn take_gt(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.gt.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // optional .google.protobuf.Timestamp gte = 6;


    pub fn get_gte(&self) -> &::protobuf::well_known_types::Timestamp {
        self.gte.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_gte(&mut self) {
        self.gte.clear();
    }

    pub fn has_gte(&self) -> bool {
        self.gte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gte(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.gte = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gte(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.gte.is_none() {
            self.gte.set_default();
        }
        self.gte.as_mut().unwrap()
    }

    // Take field
    pub fn take_gte(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.gte.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // optional bool lt_now = 7;


    pub fn get_lt_now(&self) -> bool {
        self.lt_now.unwrap_or(false)
    }
    pub fn clear_lt_now(&mut self) {
        self.lt_now = ::std::option::Option::None;
    }

    pub fn has_lt_now(&self) -> bool {
        self.lt_now.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lt_now(&mut self, v: bool) {
        self.lt_now = ::std::option::Option::Some(v);
    }

    // optional bool gt_now = 8;


    pub fn get_gt_now(&self) -> bool {
        self.gt_now.unwrap_or(false)
    }
    pub fn clear_gt_now(&mut self) {
        self.gt_now = ::std::option::Option::None;
    }

    pub fn has_gt_now(&self) -> bool {
        self.gt_now.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gt_now(&mut self, v: bool) {
        self.gt_now = ::std::option::Option::Some(v);
    }

    // optional .google.protobuf.Duration within = 9;


    pub fn get_within(&self) -> &::protobuf::well_known_types::Duration {
        self.within.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_within(&mut self) {
        self.within.clear();
    }

    pub fn has_within(&self) -> bool {
        self.within.is_some()
    }

    // Param is passed by value, moved
    pub fn set_within(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.within = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_within(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.within.is_none() {
            self.within.set_default();
        }
        self.within.as_mut().unwrap()
    }

    // Take field
    pub fn take_within(&mut self) -> ::protobuf::well_known_types::Duration {
        self.within.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }
}

impl ::protobuf::Message for TimestampRules {
    fn is_initialized(&self) -> bool {
        for v in &self.field_const {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.lt {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.lte {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.gt {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.gte {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.within {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.required = ::std::option::Option::Some(tmp);
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.field_const)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.lt)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.lte)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.gt)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.gte)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.lt_now = ::std::option::Option::Some(tmp);
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.gt_now = ::std::option::Option::Some(tmp);
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.within)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.required {
            my_size += 2;
        }
        if let Some(ref v) = self.field_const.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.lt.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.lte.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.gt.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.gte.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.lt_now {
            my_size += 2;
        }
        if let Some(v) = self.gt_now {
            my_size += 2;
        }
        if let Some(ref v) = self.within.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.required {
            os.write_bool(1, v)?;
        }
        if let Some(ref v) = self.field_const.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.lt.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.lte.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.gt.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.gte.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.lt_now {
            os.write_bool(7, v)?;
        }
        if let Some(v) = self.gt_now {
            os.write_bool(8, v)?;
        }
        if let Some(ref v) = self.within.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TimestampRules {
        TimestampRules::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "required",
                |m: &TimestampRules| { &m.required },
                |m: &mut TimestampRules| { &mut m.required },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "const",
                |m: &TimestampRules| { &m.field_const },
                |m: &mut TimestampRules| { &mut m.field_const },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "lt",
                |m: &TimestampRules| { &m.lt },
                |m: &mut TimestampRules| { &mut m.lt },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "lte",
                |m: &TimestampRules| { &m.lte },
                |m: &mut TimestampRules| { &mut m.lte },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "gt",
                |m: &TimestampRules| { &m.gt },
                |m: &mut TimestampRules| { &mut m.gt },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "gte",
                |m: &TimestampRules| { &m.gte },
                |m: &mut TimestampRules| { &mut m.gte },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "lt_now",
                |m: &TimestampRules| { &m.lt_now },
                |m: &mut TimestampRules| { &mut m.lt_now },
            ));
            fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "gt_now",
                |m: &TimestampRules| { &m.gt_now },
                |m: &mut TimestampRules| { &mut m.gt_now },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "within",
                |m: &TimestampRules| { &m.within },
                |m: &mut TimestampRules| { &mut m.within },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TimestampRules>(
                "TimestampRules",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TimestampRules {
        static instance: ::protobuf::rt::LazyV2<TimestampRules> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TimestampRules::new)
    }
}

impl ::protobuf::Clear for TimestampRules {
    fn clear(&mut self) {
        self.required = ::std::option::Option::None;
        self.field_const.clear();
        self.lt.clear();
        self.lte.clear();
        self.gt.clear();
        self.gte.clear();
        self.lt_now = ::std::option::Option::None;
        self.gt_now = ::std::option::Option::None;
        self.within.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TimestampRules {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TimestampRules {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum KnownRegex {
    UNKNOWN = 0,
    HTTP_HEADER_NAME = 1,
    HTTP_HEADER_VALUE = 2,
}

impl ::protobuf::ProtobufEnum for KnownRegex {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<KnownRegex> {
        match value {
            0 => ::std::option::Option::Some(KnownRegex::UNKNOWN),
            1 => ::std::option::Option::Some(KnownRegex::HTTP_HEADER_NAME),
            2 => ::std::option::Option::Some(KnownRegex::HTTP_HEADER_VALUE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [KnownRegex] = &[
            KnownRegex::UNKNOWN,
            KnownRegex::HTTP_HEADER_NAME,
            KnownRegex::HTTP_HEADER_VALUE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<KnownRegex>("KnownRegex", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for KnownRegex {
}

impl ::std::default::Default for KnownRegex {
    fn default() -> Self {
        KnownRegex::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for KnownRegex {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

/// Extension fields
pub mod exts {

    pub const disabled: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, ::protobuf::types::ProtobufTypeBool> = ::protobuf::ext::ExtFieldOptional { field_number: 1071, phantom: ::std::marker::PhantomData };

    pub const ignored: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, ::protobuf::types::ProtobufTypeBool> = ::protobuf::ext::ExtFieldOptional { field_number: 1072, phantom: ::std::marker::PhantomData };

    pub const required: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::OneofOptions, ::protobuf::types::ProtobufTypeBool> = ::protobuf::ext::ExtFieldOptional { field_number: 1071, phantom: ::std::marker::PhantomData };

    pub const rules: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, ::protobuf::types::ProtobufTypeMessage<super::FieldRules>> = ::protobuf::ext::ExtFieldOptional { field_number: 1071, phantom: ::std::marker::PhantomData };
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17validate/validate.proto\x12\x08validate\x1a\x20google/protobuf/des\
    criptor.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fgoogle/protob\
    uf/timestamp.proto\"\xc8\x08\n\nFieldRules\x120\n\x07message\x18\x11\x20\
    \x01(\x0b2\x16.validate.MessageRulesR\x07message\x12,\n\x05float\x18\x01\
    \x20\x01(\x0b2\x14.validate.FloatRulesH\0R\x05float\x12/\n\x06double\x18\
    \x02\x20\x01(\x0b2\x15.validate.DoubleRulesH\0R\x06double\x12,\n\x05int3\
    2\x18\x03\x20\x01(\x0b2\x14.validate.Int32RulesH\0R\x05int32\x12,\n\x05i\
    nt64\x18\x04\x20\x01(\x0b2\x14.validate.Int64RulesH\0R\x05int64\x12/\n\
    \x06uint32\x18\x05\x20\x01(\x0b2\x15.validate.UInt32RulesH\0R\x06uint32\
    \x12/\n\x06uint64\x18\x06\x20\x01(\x0b2\x15.validate.UInt64RulesH\0R\x06\
    uint64\x12/\n\x06sint32\x18\x07\x20\x01(\x0b2\x15.validate.SInt32RulesH\
    \0R\x06sint32\x12/\n\x06sint64\x18\x08\x20\x01(\x0b2\x15.validate.SInt64\
    RulesH\0R\x06sint64\x122\n\x07fixed32\x18\t\x20\x01(\x0b2\x16.validate.F\
    ixed32RulesH\0R\x07fixed32\x122\n\x07fixed64\x18\n\x20\x01(\x0b2\x16.val\
    idate.Fixed64RulesH\0R\x07fixed64\x125\n\x08sfixed32\x18\x0b\x20\x01(\
    \x0b2\x17.validate.SFixed32RulesH\0R\x08sfixed32\x125\n\x08sfixed64\x18\
    \x0c\x20\x01(\x0b2\x17.validate.SFixed64RulesH\0R\x08sfixed64\x12)\n\x04\
    bool\x18\r\x20\x01(\x0b2\x13.validate.BoolRulesH\0R\x04bool\x12/\n\x06st\
    ring\x18\x0e\x20\x01(\x0b2\x15.validate.StringRulesH\0R\x06string\x12,\n\
    \x05bytes\x18\x0f\x20\x01(\x0b2\x14.validate.BytesRulesH\0R\x05bytes\x12\
    )\n\x04enum\x18\x10\x20\x01(\x0b2\x13.validate.EnumRulesH\0R\x04enum\x12\
    5\n\x08repeated\x18\x12\x20\x01(\x0b2\x17.validate.RepeatedRulesH\0R\x08\
    repeated\x12&\n\x03map\x18\x13\x20\x01(\x0b2\x12.validate.MapRulesH\0R\
    \x03map\x12&\n\x03any\x18\x14\x20\x01(\x0b2\x12.validate.AnyRulesH\0R\
    \x03any\x125\n\x08duration\x18\x15\x20\x01(\x0b2\x17.validate.DurationRu\
    lesH\0R\x08duration\x128\n\ttimestamp\x18\x16\x20\x01(\x0b2\x18.validate\
    .TimestampRulesH\0R\ttimestampB\x06\n\x04type\"\x8d\x01\n\nFloatRules\
    \x12\x14\n\x05const\x18\x01\x20\x01(\x02R\x05const\x12\x0e\n\x02lt\x18\
    \x02\x20\x01(\x02R\x02lt\x12\x10\n\x03lte\x18\x03\x20\x01(\x02R\x03lte\
    \x12\x0e\n\x02gt\x18\x04\x20\x01(\x02R\x02gt\x12\x10\n\x03gte\x18\x05\
    \x20\x01(\x02R\x03gte\x12\x0e\n\x02in\x18\x06\x20\x03(\x02R\x02in\x12\
    \x15\n\x06not_in\x18\x07\x20\x03(\x02R\x05notIn\"\x8e\x01\n\x0bDoubleRul\
    es\x12\x14\n\x05const\x18\x01\x20\x01(\x01R\x05const\x12\x0e\n\x02lt\x18\
    \x02\x20\x01(\x01R\x02lt\x12\x10\n\x03lte\x18\x03\x20\x01(\x01R\x03lte\
    \x12\x0e\n\x02gt\x18\x04\x20\x01(\x01R\x02gt\x12\x10\n\x03gte\x18\x05\
    \x20\x01(\x01R\x03gte\x12\x0e\n\x02in\x18\x06\x20\x03(\x01R\x02in\x12\
    \x15\n\x06not_in\x18\x07\x20\x03(\x01R\x05notIn\"\x8d\x01\n\nInt32Rules\
    \x12\x14\n\x05const\x18\x01\x20\x01(\x05R\x05const\x12\x0e\n\x02lt\x18\
    \x02\x20\x01(\x05R\x02lt\x12\x10\n\x03lte\x18\x03\x20\x01(\x05R\x03lte\
    \x12\x0e\n\x02gt\x18\x04\x20\x01(\x05R\x02gt\x12\x10\n\x03gte\x18\x05\
    \x20\x01(\x05R\x03gte\x12\x0e\n\x02in\x18\x06\x20\x03(\x05R\x02in\x12\
    \x15\n\x06not_in\x18\x07\x20\x03(\x05R\x05notIn\"\x8d\x01\n\nInt64Rules\
    \x12\x14\n\x05const\x18\x01\x20\x01(\x03R\x05const\x12\x0e\n\x02lt\x18\
    \x02\x20\x01(\x03R\x02lt\x12\x10\n\x03lte\x18\x03\x20\x01(\x03R\x03lte\
    \x12\x0e\n\x02gt\x18\x04\x20\x01(\x03R\x02gt\x12\x10\n\x03gte\x18\x05\
    \x20\x01(\x03R\x03gte\x12\x0e\n\x02in\x18\x06\x20\x03(\x03R\x02in\x12\
    \x15\n\x06not_in\x18\x07\x20\x03(\x03R\x05notIn\"\x8e\x01\n\x0bUInt32Rul\
    es\x12\x14\n\x05const\x18\x01\x20\x01(\rR\x05const\x12\x0e\n\x02lt\x18\
    \x02\x20\x01(\rR\x02lt\x12\x10\n\x03lte\x18\x03\x20\x01(\rR\x03lte\x12\
    \x0e\n\x02gt\x18\x04\x20\x01(\rR\x02gt\x12\x10\n\x03gte\x18\x05\x20\x01(\
    \rR\x03gte\x12\x0e\n\x02in\x18\x06\x20\x03(\rR\x02in\x12\x15\n\x06not_in\
    \x18\x07\x20\x03(\rR\x05notIn\"\x8e\x01\n\x0bUInt64Rules\x12\x14\n\x05co\
    nst\x18\x01\x20\x01(\x04R\x05const\x12\x0e\n\x02lt\x18\x02\x20\x01(\x04R\
    \x02lt\x12\x10\n\x03lte\x18\x03\x20\x01(\x04R\x03lte\x12\x0e\n\x02gt\x18\
    \x04\x20\x01(\x04R\x02gt\x12\x10\n\x03gte\x18\x05\x20\x01(\x04R\x03gte\
    \x12\x0e\n\x02in\x18\x06\x20\x03(\x04R\x02in\x12\x15\n\x06not_in\x18\x07\
    \x20\x03(\x04R\x05notIn\"\x8e\x01\n\x0bSInt32Rules\x12\x14\n\x05const\
    \x18\x01\x20\x01(\x11R\x05const\x12\x0e\n\x02lt\x18\x02\x20\x01(\x11R\
    \x02lt\x12\x10\n\x03lte\x18\x03\x20\x01(\x11R\x03lte\x12\x0e\n\x02gt\x18\
    \x04\x20\x01(\x11R\x02gt\x12\x10\n\x03gte\x18\x05\x20\x01(\x11R\x03gte\
    \x12\x0e\n\x02in\x18\x06\x20\x03(\x11R\x02in\x12\x15\n\x06not_in\x18\x07\
    \x20\x03(\x11R\x05notIn\"\x8e\x01\n\x0bSInt64Rules\x12\x14\n\x05const\
    \x18\x01\x20\x01(\x12R\x05const\x12\x0e\n\x02lt\x18\x02\x20\x01(\x12R\
    \x02lt\x12\x10\n\x03lte\x18\x03\x20\x01(\x12R\x03lte\x12\x0e\n\x02gt\x18\
    \x04\x20\x01(\x12R\x02gt\x12\x10\n\x03gte\x18\x05\x20\x01(\x12R\x03gte\
    \x12\x0e\n\x02in\x18\x06\x20\x03(\x12R\x02in\x12\x15\n\x06not_in\x18\x07\
    \x20\x03(\x12R\x05notIn\"\x8f\x01\n\x0cFixed32Rules\x12\x14\n\x05const\
    \x18\x01\x20\x01(\x07R\x05const\x12\x0e\n\x02lt\x18\x02\x20\x01(\x07R\
    \x02lt\x12\x10\n\x03lte\x18\x03\x20\x01(\x07R\x03lte\x12\x0e\n\x02gt\x18\
    \x04\x20\x01(\x07R\x02gt\x12\x10\n\x03gte\x18\x05\x20\x01(\x07R\x03gte\
    \x12\x0e\n\x02in\x18\x06\x20\x03(\x07R\x02in\x12\x15\n\x06not_in\x18\x07\
    \x20\x03(\x07R\x05notIn\"\x8f\x01\n\x0cFixed64Rules\x12\x14\n\x05const\
    \x18\x01\x20\x01(\x06R\x05const\x12\x0e\n\x02lt\x18\x02\x20\x01(\x06R\
    \x02lt\x12\x10\n\x03lte\x18\x03\x20\x01(\x06R\x03lte\x12\x0e\n\x02gt\x18\
    \x04\x20\x01(\x06R\x02gt\x12\x10\n\x03gte\x18\x05\x20\x01(\x06R\x03gte\
    \x12\x0e\n\x02in\x18\x06\x20\x03(\x06R\x02in\x12\x15\n\x06not_in\x18\x07\
    \x20\x03(\x06R\x05notIn\"\x90\x01\n\rSFixed32Rules\x12\x14\n\x05const\
    \x18\x01\x20\x01(\x0fR\x05const\x12\x0e\n\x02lt\x18\x02\x20\x01(\x0fR\
    \x02lt\x12\x10\n\x03lte\x18\x03\x20\x01(\x0fR\x03lte\x12\x0e\n\x02gt\x18\
    \x04\x20\x01(\x0fR\x02gt\x12\x10\n\x03gte\x18\x05\x20\x01(\x0fR\x03gte\
    \x12\x0e\n\x02in\x18\x06\x20\x03(\x0fR\x02in\x12\x15\n\x06not_in\x18\x07\
    \x20\x03(\x0fR\x05notIn\"\x90\x01\n\rSFixed64Rules\x12\x14\n\x05const\
    \x18\x01\x20\x01(\x10R\x05const\x12\x0e\n\x02lt\x18\x02\x20\x01(\x10R\
    \x02lt\x12\x10\n\x03lte\x18\x03\x20\x01(\x10R\x03lte\x12\x0e\n\x02gt\x18\
    \x04\x20\x01(\x10R\x02gt\x12\x10\n\x03gte\x18\x05\x20\x01(\x10R\x03gte\
    \x12\x0e\n\x02in\x18\x06\x20\x03(\x10R\x02in\x12\x15\n\x06not_in\x18\x07\
    \x20\x03(\x10R\x05notIn\"!\n\tBoolRules\x12\x14\n\x05const\x18\x01\x20\
    \x01(\x08R\x05const\"\xb1\x05\n\x0bStringRules\x12\x14\n\x05const\x18\
    \x01\x20\x01(\tR\x05const\x12\x10\n\x03len\x18\x13\x20\x01(\x04R\x03len\
    \x12\x17\n\x07min_len\x18\x02\x20\x01(\x04R\x06minLen\x12\x17\n\x07max_l\
    en\x18\x03\x20\x01(\x04R\x06maxLen\x12\x1b\n\tlen_bytes\x18\x14\x20\x01(\
    \x04R\x08lenBytes\x12\x1b\n\tmin_bytes\x18\x04\x20\x01(\x04R\x08minBytes\
    \x12\x1b\n\tmax_bytes\x18\x05\x20\x01(\x04R\x08maxBytes\x12\x18\n\x07pat\
    tern\x18\x06\x20\x01(\tR\x07pattern\x12\x16\n\x06prefix\x18\x07\x20\x01(\
    \tR\x06prefix\x12\x16\n\x06suffix\x18\x08\x20\x01(\tR\x06suffix\x12\x1a\
    \n\x08contains\x18\t\x20\x01(\tR\x08contains\x12!\n\x0cnot_contains\x18\
    \x17\x20\x01(\tR\x0bnotContains\x12\x0e\n\x02in\x18\n\x20\x03(\tR\x02in\
    \x12\x15\n\x06not_in\x18\x0b\x20\x03(\tR\x05notIn\x12\x16\n\x05email\x18\
    \x0c\x20\x01(\x08H\0R\x05email\x12\x1c\n\x08hostname\x18\r\x20\x01(\x08H\
    \0R\x08hostname\x12\x10\n\x02ip\x18\x0e\x20\x01(\x08H\0R\x02ip\x12\x14\n\
    \x04ipv4\x18\x0f\x20\x01(\x08H\0R\x04ipv4\x12\x14\n\x04ipv6\x18\x10\x20\
    \x01(\x08H\0R\x04ipv6\x12\x12\n\x03uri\x18\x11\x20\x01(\x08H\0R\x03uri\
    \x12\x19\n\x07uri_ref\x18\x12\x20\x01(\x08H\0R\x06uriRef\x12\x1a\n\x07ad\
    dress\x18\x15\x20\x01(\x08H\0R\x07address\x12\x14\n\x04uuid\x18\x16\x20\
    \x01(\x08H\0R\x04uuid\x12@\n\x10well_known_regex\x18\x18\x20\x01(\x0e2\
    \x14.validate.KnownRegexH\0R\x0ewellKnownRegex\x12\x1c\n\x06strict\x18\
    \x19\x20\x01(\x08:\x04trueR\x06strictB\x0c\n\nwell_known\"\xbf\x02\n\nBy\
    tesRules\x12\x14\n\x05const\x18\x01\x20\x01(\x0cR\x05const\x12\x10\n\x03\
    len\x18\r\x20\x01(\x04R\x03len\x12\x17\n\x07min_len\x18\x02\x20\x01(\x04\
    R\x06minLen\x12\x17\n\x07max_len\x18\x03\x20\x01(\x04R\x06maxLen\x12\x18\
    \n\x07pattern\x18\x04\x20\x01(\tR\x07pattern\x12\x16\n\x06prefix\x18\x05\
    \x20\x01(\x0cR\x06prefix\x12\x16\n\x06suffix\x18\x06\x20\x01(\x0cR\x06su\
    ffix\x12\x1a\n\x08contains\x18\x07\x20\x01(\x0cR\x08contains\x12\x0e\n\
    \x02in\x18\x08\x20\x03(\x0cR\x02in\x12\x15\n\x06not_in\x18\t\x20\x03(\
    \x0cR\x05notIn\x12\x10\n\x02ip\x18\n\x20\x01(\x08H\0R\x02ip\x12\x14\n\
    \x04ipv4\x18\x0b\x20\x01(\x08H\0R\x04ipv4\x12\x14\n\x04ipv6\x18\x0c\x20\
    \x01(\x08H\0R\x04ipv6B\x0c\n\nwell_known\"k\n\tEnumRules\x12\x14\n\x05co\
    nst\x18\x01\x20\x01(\x05R\x05const\x12!\n\x0cdefined_only\x18\x02\x20\
    \x01(\x08R\x0bdefinedOnly\x12\x0e\n\x02in\x18\x03\x20\x03(\x05R\x02in\
    \x12\x15\n\x06not_in\x18\x04\x20\x03(\x05R\x05notIn\">\n\x0cMessageRules\
    \x12\x12\n\x04skip\x18\x01\x20\x01(\x08R\x04skip\x12\x1a\n\x08required\
    \x18\x02\x20\x01(\x08R\x08required\"\x8d\x01\n\rRepeatedRules\x12\x1b\n\
    \tmin_items\x18\x01\x20\x01(\x04R\x08minItems\x12\x1b\n\tmax_items\x18\
    \x02\x20\x01(\x04R\x08maxItems\x12\x16\n\x06unique\x18\x03\x20\x01(\x08R\
    \x06unique\x12*\n\x05items\x18\x04\x20\x01(\x0b2\x14.validate.FieldRules\
    R\x05items\"\xb9\x01\n\x08MapRules\x12\x1b\n\tmin_pairs\x18\x01\x20\x01(\
    \x04R\x08minPairs\x12\x1b\n\tmax_pairs\x18\x02\x20\x01(\x04R\x08maxPairs\
    \x12\x1b\n\tno_sparse\x18\x03\x20\x01(\x08R\x08noSparse\x12(\n\x04keys\
    \x18\x04\x20\x01(\x0b2\x14.validate.FieldRulesR\x04keys\x12,\n\x06values\
    \x18\x05\x20\x01(\x0b2\x14.validate.FieldRulesR\x06values\"M\n\x08AnyRul\
    es\x12\x1a\n\x08required\x18\x01\x20\x01(\x08R\x08required\x12\x0e\n\x02\
    in\x18\x02\x20\x03(\tR\x02in\x12\x15\n\x06not_in\x18\x03\x20\x03(\tR\x05\
    notIn\"\xe9\x02\n\rDurationRules\x12\x1a\n\x08required\x18\x01\x20\x01(\
    \x08R\x08required\x12/\n\x05const\x18\x02\x20\x01(\x0b2\x19.google.proto\
    buf.DurationR\x05const\x12)\n\x02lt\x18\x03\x20\x01(\x0b2\x19.google.pro\
    tobuf.DurationR\x02lt\x12+\n\x03lte\x18\x04\x20\x01(\x0b2\x19.google.pro\
    tobuf.DurationR\x03lte\x12)\n\x02gt\x18\x05\x20\x01(\x0b2\x19.google.pro\
    tobuf.DurationR\x02gt\x12+\n\x03gte\x18\x06\x20\x01(\x0b2\x19.google.pro\
    tobuf.DurationR\x03gte\x12)\n\x02in\x18\x07\x20\x03(\x0b2\x19.google.pro\
    tobuf.DurationR\x02in\x120\n\x06not_in\x18\x08\x20\x03(\x0b2\x19.google.\
    protobuf.DurationR\x05notIn\"\xf3\x02\n\x0eTimestampRules\x12\x1a\n\x08r\
    equired\x18\x01\x20\x01(\x08R\x08required\x120\n\x05const\x18\x02\x20\
    \x01(\x0b2\x1a.google.protobuf.TimestampR\x05const\x12*\n\x02lt\x18\x03\
    \x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x02lt\x12,\n\x03lte\x18\
    \x04\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x03lte\x12*\n\x02gt\
    \x18\x05\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x02gt\x12,\n\x03gt\
    e\x18\x06\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x03gte\x12\x15\n\
    \x06lt_now\x18\x07\x20\x01(\x08R\x05ltNow\x12\x15\n\x06gt_now\x18\x08\
    \x20\x01(\x08R\x05gtNow\x121\n\x06within\x18\t\x20\x01(\x0b2\x19.google.\
    protobuf.DurationR\x06within*F\n\nKnownRegex\x12\x0b\n\x07UNKNOWN\x10\0\
    \x12\x14\n\x10HTTP_HEADER_NAME\x10\x01\x12\x15\n\x11HTTP_HEADER_VALUE\
    \x10\x02:<\n\x08disabled\x18\xaf\x08\x20\x01(\x08\x12\x1f.google.protobu\
    f.MessageOptionsR\x08disabled::\n\x07ignored\x18\xb0\x08\x20\x01(\x08\
    \x12\x1f.google.protobuf.MessageOptionsR\x07ignored::\n\x08required\x18\
    \xaf\x08\x20\x01(\x08\x12\x1d.google.protobuf.OneofOptionsR\x08required:\
    J\n\x05rules\x18\xaf\x08\x20\x01(\x0b2\x14.validate.FieldRules\x12\x1d.g\
    oogle.protobuf.FieldOptionsR\x05rulesBP\n\x1aio.envoyproxy.pgv.validateZ\
    2github.com/envoyproxy/protoc-gen-validate/validate\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
