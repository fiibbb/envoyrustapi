// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `xds/core/v3/resource_locator.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct ResourceLocator {
    // message fields
    pub scheme: ResourceLocator_Scheme,
    pub id: ::std::string::String,
    pub authority: ::std::string::String,
    pub resource_type: ::std::string::String,
    pub directives: ::protobuf::RepeatedField<ResourceLocator_Directive>,
    // message oneof groups
    pub context_param_specifier: ::std::option::Option<ResourceLocator_oneof_context_param_specifier>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ResourceLocator {
    fn default() -> &'a ResourceLocator {
        <ResourceLocator as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ResourceLocator_oneof_context_param_specifier {
    exact_context(super::context_params::ContextParams),
}

impl ResourceLocator {
    pub fn new() -> ResourceLocator {
        ::std::default::Default::default()
    }

    // .xds.core.v3.ResourceLocator.Scheme scheme = 1;


    pub fn get_scheme(&self) -> ResourceLocator_Scheme {
        self.scheme
    }
    pub fn clear_scheme(&mut self) {
        self.scheme = ResourceLocator_Scheme::XDSTP;
    }

    // Param is passed by value, moved
    pub fn set_scheme(&mut self, v: ResourceLocator_Scheme) {
        self.scheme = v;
    }

    // string id = 2;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string authority = 3;


    pub fn get_authority(&self) -> &str {
        &self.authority
    }
    pub fn clear_authority(&mut self) {
        self.authority.clear();
    }

    // Param is passed by value, moved
    pub fn set_authority(&mut self, v: ::std::string::String) {
        self.authority = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_authority(&mut self) -> &mut ::std::string::String {
        &mut self.authority
    }

    // Take field
    pub fn take_authority(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.authority, ::std::string::String::new())
    }

    // string resource_type = 4;


    pub fn get_resource_type(&self) -> &str {
        &self.resource_type
    }
    pub fn clear_resource_type(&mut self) {
        self.resource_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_resource_type(&mut self, v: ::std::string::String) {
        self.resource_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource_type(&mut self) -> &mut ::std::string::String {
        &mut self.resource_type
    }

    // Take field
    pub fn take_resource_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.resource_type, ::std::string::String::new())
    }

    // .xds.core.v3.ContextParams exact_context = 5;


    pub fn get_exact_context(&self) -> &super::context_params::ContextParams {
        match self.context_param_specifier {
            ::std::option::Option::Some(ResourceLocator_oneof_context_param_specifier::exact_context(ref v)) => v,
            _ => <super::context_params::ContextParams as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_exact_context(&mut self) {
        self.context_param_specifier = ::std::option::Option::None;
    }

    pub fn has_exact_context(&self) -> bool {
        match self.context_param_specifier {
            ::std::option::Option::Some(ResourceLocator_oneof_context_param_specifier::exact_context(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_exact_context(&mut self, v: super::context_params::ContextParams) {
        self.context_param_specifier = ::std::option::Option::Some(ResourceLocator_oneof_context_param_specifier::exact_context(v))
    }

    // Mutable pointer to the field.
    pub fn mut_exact_context(&mut self) -> &mut super::context_params::ContextParams {
        if let ::std::option::Option::Some(ResourceLocator_oneof_context_param_specifier::exact_context(_)) = self.context_param_specifier {
        } else {
            self.context_param_specifier = ::std::option::Option::Some(ResourceLocator_oneof_context_param_specifier::exact_context(super::context_params::ContextParams::new()));
        }
        match self.context_param_specifier {
            ::std::option::Option::Some(ResourceLocator_oneof_context_param_specifier::exact_context(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_exact_context(&mut self) -> super::context_params::ContextParams {
        if self.has_exact_context() {
            match self.context_param_specifier.take() {
                ::std::option::Option::Some(ResourceLocator_oneof_context_param_specifier::exact_context(v)) => v,
                _ => panic!(),
            }
        } else {
            super::context_params::ContextParams::new()
        }
    }

    // repeated .xds.core.v3.ResourceLocator.Directive directives = 6;


    pub fn get_directives(&self) -> &[ResourceLocator_Directive] {
        &self.directives
    }
    pub fn clear_directives(&mut self) {
        self.directives.clear();
    }

    // Param is passed by value, moved
    pub fn set_directives(&mut self, v: ::protobuf::RepeatedField<ResourceLocator_Directive>) {
        self.directives = v;
    }

    // Mutable pointer to the field.
    pub fn mut_directives(&mut self) -> &mut ::protobuf::RepeatedField<ResourceLocator_Directive> {
        &mut self.directives
    }

    // Take field
    pub fn take_directives(&mut self) -> ::protobuf::RepeatedField<ResourceLocator_Directive> {
        ::std::mem::replace(&mut self.directives, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ResourceLocator {
    fn is_initialized(&self) -> bool {
        if let Some(ResourceLocator_oneof_context_param_specifier::exact_context(ref v)) = self.context_param_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.directives {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.scheme, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.authority)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.resource_type)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.context_param_specifier = ::std::option::Option::Some(ResourceLocator_oneof_context_param_specifier::exact_context(is.read_message()?));
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.directives)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.scheme != ResourceLocator_Scheme::XDSTP {
            my_size += ::protobuf::rt::enum_size(1, self.scheme);
        }
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.id);
        }
        if !self.authority.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.authority);
        }
        if !self.resource_type.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.resource_type);
        }
        for value in &self.directives {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let ::std::option::Option::Some(ref v) = self.context_param_specifier {
            match v {
                &ResourceLocator_oneof_context_param_specifier::exact_context(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.scheme != ResourceLocator_Scheme::XDSTP {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.scheme))?;
        }
        if !self.id.is_empty() {
            os.write_string(2, &self.id)?;
        }
        if !self.authority.is_empty() {
            os.write_string(3, &self.authority)?;
        }
        if !self.resource_type.is_empty() {
            os.write_string(4, &self.resource_type)?;
        }
        for v in &self.directives {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let ::std::option::Option::Some(ref v) = self.context_param_specifier {
            match v {
                &ResourceLocator_oneof_context_param_specifier::exact_context(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResourceLocator {
        ResourceLocator::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ResourceLocator_Scheme>>(
                "scheme",
                |m: &ResourceLocator| { &m.scheme },
                |m: &mut ResourceLocator| { &mut m.scheme },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &ResourceLocator| { &m.id },
                |m: &mut ResourceLocator| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "authority",
                |m: &ResourceLocator| { &m.authority },
                |m: &mut ResourceLocator| { &mut m.authority },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "resource_type",
                |m: &ResourceLocator| { &m.resource_type },
                |m: &mut ResourceLocator| { &mut m.resource_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::context_params::ContextParams>(
                "exact_context",
                ResourceLocator::has_exact_context,
                ResourceLocator::get_exact_context,
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ResourceLocator_Directive>>(
                "directives",
                |m: &ResourceLocator| { &m.directives },
                |m: &mut ResourceLocator| { &mut m.directives },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ResourceLocator>(
                "ResourceLocator",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ResourceLocator {
        static instance: ::protobuf::rt::LazyV2<ResourceLocator> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ResourceLocator::new)
    }
}

impl ::protobuf::Clear for ResourceLocator {
    fn clear(&mut self) {
        self.scheme = ResourceLocator_Scheme::XDSTP;
        self.id.clear();
        self.authority.clear();
        self.resource_type.clear();
        self.context_param_specifier = ::std::option::Option::None;
        self.directives.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResourceLocator {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResourceLocator {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ResourceLocator_Directive {
    // message oneof groups
    pub directive: ::std::option::Option<ResourceLocator_Directive_oneof_directive>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ResourceLocator_Directive {
    fn default() -> &'a ResourceLocator_Directive {
        <ResourceLocator_Directive as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ResourceLocator_Directive_oneof_directive {
    alt(ResourceLocator),
    entry(::std::string::String),
}

impl ResourceLocator_Directive {
    pub fn new() -> ResourceLocator_Directive {
        ::std::default::Default::default()
    }

    // .xds.core.v3.ResourceLocator alt = 1;


    pub fn get_alt(&self) -> &ResourceLocator {
        match self.directive {
            ::std::option::Option::Some(ResourceLocator_Directive_oneof_directive::alt(ref v)) => v,
            _ => <ResourceLocator as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_alt(&mut self) {
        self.directive = ::std::option::Option::None;
    }

    pub fn has_alt(&self) -> bool {
        match self.directive {
            ::std::option::Option::Some(ResourceLocator_Directive_oneof_directive::alt(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_alt(&mut self, v: ResourceLocator) {
        self.directive = ::std::option::Option::Some(ResourceLocator_Directive_oneof_directive::alt(v))
    }

    // Mutable pointer to the field.
    pub fn mut_alt(&mut self) -> &mut ResourceLocator {
        if let ::std::option::Option::Some(ResourceLocator_Directive_oneof_directive::alt(_)) = self.directive {
        } else {
            self.directive = ::std::option::Option::Some(ResourceLocator_Directive_oneof_directive::alt(ResourceLocator::new()));
        }
        match self.directive {
            ::std::option::Option::Some(ResourceLocator_Directive_oneof_directive::alt(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_alt(&mut self) -> ResourceLocator {
        if self.has_alt() {
            match self.directive.take() {
                ::std::option::Option::Some(ResourceLocator_Directive_oneof_directive::alt(v)) => v,
                _ => panic!(),
            }
        } else {
            ResourceLocator::new()
        }
    }

    // string entry = 2;


    pub fn get_entry(&self) -> &str {
        match self.directive {
            ::std::option::Option::Some(ResourceLocator_Directive_oneof_directive::entry(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_entry(&mut self) {
        self.directive = ::std::option::Option::None;
    }

    pub fn has_entry(&self) -> bool {
        match self.directive {
            ::std::option::Option::Some(ResourceLocator_Directive_oneof_directive::entry(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_entry(&mut self, v: ::std::string::String) {
        self.directive = ::std::option::Option::Some(ResourceLocator_Directive_oneof_directive::entry(v))
    }

    // Mutable pointer to the field.
    pub fn mut_entry(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(ResourceLocator_Directive_oneof_directive::entry(_)) = self.directive {
        } else {
            self.directive = ::std::option::Option::Some(ResourceLocator_Directive_oneof_directive::entry(::std::string::String::new()));
        }
        match self.directive {
            ::std::option::Option::Some(ResourceLocator_Directive_oneof_directive::entry(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_entry(&mut self) -> ::std::string::String {
        if self.has_entry() {
            match self.directive.take() {
                ::std::option::Option::Some(ResourceLocator_Directive_oneof_directive::entry(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }
}

impl ::protobuf::Message for ResourceLocator_Directive {
    fn is_initialized(&self) -> bool {
        if let Some(ResourceLocator_Directive_oneof_directive::alt(ref v)) = self.directive {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.directive = ::std::option::Option::Some(ResourceLocator_Directive_oneof_directive::alt(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.directive = ::std::option::Option::Some(ResourceLocator_Directive_oneof_directive::entry(is.read_string()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.directive {
            match v {
                &ResourceLocator_Directive_oneof_directive::alt(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ResourceLocator_Directive_oneof_directive::entry(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.directive {
            match v {
                &ResourceLocator_Directive_oneof_directive::alt(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ResourceLocator_Directive_oneof_directive::entry(ref v) => {
                    os.write_string(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResourceLocator_Directive {
        ResourceLocator_Directive::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ResourceLocator>(
                "alt",
                ResourceLocator_Directive::has_alt,
                ResourceLocator_Directive::get_alt,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "entry",
                ResourceLocator_Directive::has_entry,
                ResourceLocator_Directive::get_entry,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ResourceLocator_Directive>(
                "ResourceLocator.Directive",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ResourceLocator_Directive {
        static instance: ::protobuf::rt::LazyV2<ResourceLocator_Directive> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ResourceLocator_Directive::new)
    }
}

impl ::protobuf::Clear for ResourceLocator_Directive {
    fn clear(&mut self) {
        self.directive = ::std::option::Option::None;
        self.directive = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResourceLocator_Directive {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResourceLocator_Directive {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ResourceLocator_Scheme {
    XDSTP = 0,
    HTTP = 1,
    FILE = 2,
}

impl ::protobuf::ProtobufEnum for ResourceLocator_Scheme {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ResourceLocator_Scheme> {
        match value {
            0 => ::std::option::Option::Some(ResourceLocator_Scheme::XDSTP),
            1 => ::std::option::Option::Some(ResourceLocator_Scheme::HTTP),
            2 => ::std::option::Option::Some(ResourceLocator_Scheme::FILE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ResourceLocator_Scheme] = &[
            ResourceLocator_Scheme::XDSTP,
            ResourceLocator_Scheme::HTTP,
            ResourceLocator_Scheme::FILE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ResourceLocator_Scheme>("ResourceLocator.Scheme", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ResourceLocator_Scheme {
}

impl ::std::default::Default for ResourceLocator_Scheme {
    fn default() -> Self {
        ResourceLocator_Scheme::XDSTP
    }
}

impl ::protobuf::reflect::ProtobufValue for ResourceLocator_Scheme {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"xds/core/v3/resource_locator.proto\x12\x0bxds.core.v3\x1a\x1dudpa/an\
    notations/status.proto\x1a\x20xds/core/v3/context_params.proto\x1a\x17va\
    lidate/validate.proto\"\x8e\x04\n\x0fResourceLocator\x12E\n\x06scheme\
    \x18\x01\x20\x01(\x0e2#.xds.core.v3.ResourceLocator.SchemeR\x06schemeB\
    \x08\xfaB\x05\x82\x01\x02\x10\x01\x12\x0e\n\x02id\x18\x02\x20\x01(\tR\
    \x02id\x12\x1c\n\tauthority\x18\x03\x20\x01(\tR\tauthority\x12,\n\rresou\
    rce_type\x18\x04\x20\x01(\tR\x0cresourceTypeB\x07\xfaB\x04r\x02\x10\x01\
    \x12A\n\rexact_context\x18\x05\x20\x01(\x0b2\x1a.xds.core.v3.ContextPara\
    msH\0R\x0cexactContext\x12F\n\ndirectives\x18\x06\x20\x03(\x0b2&.xds.cor\
    e.v3.ResourceLocator.DirectiveR\ndirectives\x1a\x88\x01\n\tDirective\x12\
    0\n\x03alt\x18\x01\x20\x01(\x0b2\x1c.xds.core.v3.ResourceLocatorH\0R\x03\
    alt\x127\n\x05entry\x18\x02\x20\x01(\tH\0R\x05entryB\x1f\xfaB\x1cr\x1a\
    \x10\x012\x16^[0-9a-zA-Z_\\-\\./~:]+$B\x10\n\tdirective\x12\x03\xf8B\x01\
    \"'\n\x06Scheme\x12\t\n\x05XDSTP\x10\0\x12\x08\n\x04HTTP\x10\x01\x12\x08\
    \n\x04FILE\x10\x02B\x19\n\x17context_param_specifierB=\n\x1bcom.github.u\
    dpa.xds.core.v3B\x14ResourceLocatorProtoP\x01\xba\x80\xc8\xd1\x06\x02\
    \x08\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
