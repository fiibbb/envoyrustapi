// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/admin/v4alpha/clusters.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct Clusters {
    // message fields
    pub cluster_statuses: ::protobuf::RepeatedField<ClusterStatus>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Clusters {
    fn default() -> &'a Clusters {
        <Clusters as ::protobuf::Message>::default_instance()
    }
}

impl Clusters {
    pub fn new() -> Clusters {
        ::std::default::Default::default()
    }

    // repeated .envoy.admin.v4alpha.ClusterStatus cluster_statuses = 1;


    pub fn get_cluster_statuses(&self) -> &[ClusterStatus] {
        &self.cluster_statuses
    }
    pub fn clear_cluster_statuses(&mut self) {
        self.cluster_statuses.clear();
    }

    // Param is passed by value, moved
    pub fn set_cluster_statuses(&mut self, v: ::protobuf::RepeatedField<ClusterStatus>) {
        self.cluster_statuses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cluster_statuses(&mut self) -> &mut ::protobuf::RepeatedField<ClusterStatus> {
        &mut self.cluster_statuses
    }

    // Take field
    pub fn take_cluster_statuses(&mut self) -> ::protobuf::RepeatedField<ClusterStatus> {
        ::std::mem::replace(&mut self.cluster_statuses, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Clusters {
    fn is_initialized(&self) -> bool {
        for v in &self.cluster_statuses {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cluster_statuses)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.cluster_statuses {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.cluster_statuses {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Clusters {
        Clusters::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ClusterStatus>>(
                "cluster_statuses",
                |m: &Clusters| { &m.cluster_statuses },
                |m: &mut Clusters| { &mut m.cluster_statuses },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Clusters>(
                "Clusters",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Clusters {
        static instance: ::protobuf::rt::LazyV2<Clusters> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Clusters::new)
    }
}

impl ::protobuf::Clear for Clusters {
    fn clear(&mut self) {
        self.cluster_statuses.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Clusters {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Clusters {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClusterStatus {
    // message fields
    pub name: ::std::string::String,
    pub added_via_api: bool,
    pub success_rate_ejection_threshold: ::protobuf::SingularPtrField<super::percent::Percent>,
    pub host_statuses: ::protobuf::RepeatedField<HostStatus>,
    pub local_origin_success_rate_ejection_threshold: ::protobuf::SingularPtrField<super::percent::Percent>,
    pub circuit_breakers: ::protobuf::SingularPtrField<super::circuit_breaker::CircuitBreakers>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClusterStatus {
    fn default() -> &'a ClusterStatus {
        <ClusterStatus as ::protobuf::Message>::default_instance()
    }
}

impl ClusterStatus {
    pub fn new() -> ClusterStatus {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // bool added_via_api = 2;


    pub fn get_added_via_api(&self) -> bool {
        self.added_via_api
    }
    pub fn clear_added_via_api(&mut self) {
        self.added_via_api = false;
    }

    // Param is passed by value, moved
    pub fn set_added_via_api(&mut self, v: bool) {
        self.added_via_api = v;
    }

    // .envoy.type.v3.Percent success_rate_ejection_threshold = 3;


    pub fn get_success_rate_ejection_threshold(&self) -> &super::percent::Percent {
        self.success_rate_ejection_threshold.as_ref().unwrap_or_else(|| <super::percent::Percent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_success_rate_ejection_threshold(&mut self) {
        self.success_rate_ejection_threshold.clear();
    }

    pub fn has_success_rate_ejection_threshold(&self) -> bool {
        self.success_rate_ejection_threshold.is_some()
    }

    // Param is passed by value, moved
    pub fn set_success_rate_ejection_threshold(&mut self, v: super::percent::Percent) {
        self.success_rate_ejection_threshold = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_success_rate_ejection_threshold(&mut self) -> &mut super::percent::Percent {
        if self.success_rate_ejection_threshold.is_none() {
            self.success_rate_ejection_threshold.set_default();
        }
        self.success_rate_ejection_threshold.as_mut().unwrap()
    }

    // Take field
    pub fn take_success_rate_ejection_threshold(&mut self) -> super::percent::Percent {
        self.success_rate_ejection_threshold.take().unwrap_or_else(|| super::percent::Percent::new())
    }

    // repeated .envoy.admin.v4alpha.HostStatus host_statuses = 4;


    pub fn get_host_statuses(&self) -> &[HostStatus] {
        &self.host_statuses
    }
    pub fn clear_host_statuses(&mut self) {
        self.host_statuses.clear();
    }

    // Param is passed by value, moved
    pub fn set_host_statuses(&mut self, v: ::protobuf::RepeatedField<HostStatus>) {
        self.host_statuses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_host_statuses(&mut self) -> &mut ::protobuf::RepeatedField<HostStatus> {
        &mut self.host_statuses
    }

    // Take field
    pub fn take_host_statuses(&mut self) -> ::protobuf::RepeatedField<HostStatus> {
        ::std::mem::replace(&mut self.host_statuses, ::protobuf::RepeatedField::new())
    }

    // .envoy.type.v3.Percent local_origin_success_rate_ejection_threshold = 5;


    pub fn get_local_origin_success_rate_ejection_threshold(&self) -> &super::percent::Percent {
        self.local_origin_success_rate_ejection_threshold.as_ref().unwrap_or_else(|| <super::percent::Percent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_local_origin_success_rate_ejection_threshold(&mut self) {
        self.local_origin_success_rate_ejection_threshold.clear();
    }

    pub fn has_local_origin_success_rate_ejection_threshold(&self) -> bool {
        self.local_origin_success_rate_ejection_threshold.is_some()
    }

    // Param is passed by value, moved
    pub fn set_local_origin_success_rate_ejection_threshold(&mut self, v: super::percent::Percent) {
        self.local_origin_success_rate_ejection_threshold = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_local_origin_success_rate_ejection_threshold(&mut self) -> &mut super::percent::Percent {
        if self.local_origin_success_rate_ejection_threshold.is_none() {
            self.local_origin_success_rate_ejection_threshold.set_default();
        }
        self.local_origin_success_rate_ejection_threshold.as_mut().unwrap()
    }

    // Take field
    pub fn take_local_origin_success_rate_ejection_threshold(&mut self) -> super::percent::Percent {
        self.local_origin_success_rate_ejection_threshold.take().unwrap_or_else(|| super::percent::Percent::new())
    }

    // .envoy.config.cluster.v4alpha.CircuitBreakers circuit_breakers = 6;


    pub fn get_circuit_breakers(&self) -> &super::circuit_breaker::CircuitBreakers {
        self.circuit_breakers.as_ref().unwrap_or_else(|| <super::circuit_breaker::CircuitBreakers as ::protobuf::Message>::default_instance())
    }
    pub fn clear_circuit_breakers(&mut self) {
        self.circuit_breakers.clear();
    }

    pub fn has_circuit_breakers(&self) -> bool {
        self.circuit_breakers.is_some()
    }

    // Param is passed by value, moved
    pub fn set_circuit_breakers(&mut self, v: super::circuit_breaker::CircuitBreakers) {
        self.circuit_breakers = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_circuit_breakers(&mut self) -> &mut super::circuit_breaker::CircuitBreakers {
        if self.circuit_breakers.is_none() {
            self.circuit_breakers.set_default();
        }
        self.circuit_breakers.as_mut().unwrap()
    }

    // Take field
    pub fn take_circuit_breakers(&mut self) -> super::circuit_breaker::CircuitBreakers {
        self.circuit_breakers.take().unwrap_or_else(|| super::circuit_breaker::CircuitBreakers::new())
    }
}

impl ::protobuf::Message for ClusterStatus {
    fn is_initialized(&self) -> bool {
        for v in &self.success_rate_ejection_threshold {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.host_statuses {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.local_origin_success_rate_ejection_threshold {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.circuit_breakers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.added_via_api = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.success_rate_ejection_threshold)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.host_statuses)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.local_origin_success_rate_ejection_threshold)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.circuit_breakers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.added_via_api != false {
            my_size += 2;
        }
        if let Some(ref v) = self.success_rate_ejection_threshold.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.host_statuses {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.local_origin_success_rate_ejection_threshold.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.circuit_breakers.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.added_via_api != false {
            os.write_bool(2, self.added_via_api)?;
        }
        if let Some(ref v) = self.success_rate_ejection_threshold.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.host_statuses {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.local_origin_success_rate_ejection_threshold.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.circuit_breakers.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClusterStatus {
        ClusterStatus::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &ClusterStatus| { &m.name },
                |m: &mut ClusterStatus| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "added_via_api",
                |m: &ClusterStatus| { &m.added_via_api },
                |m: &mut ClusterStatus| { &mut m.added_via_api },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::percent::Percent>>(
                "success_rate_ejection_threshold",
                |m: &ClusterStatus| { &m.success_rate_ejection_threshold },
                |m: &mut ClusterStatus| { &mut m.success_rate_ejection_threshold },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HostStatus>>(
                "host_statuses",
                |m: &ClusterStatus| { &m.host_statuses },
                |m: &mut ClusterStatus| { &mut m.host_statuses },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::percent::Percent>>(
                "local_origin_success_rate_ejection_threshold",
                |m: &ClusterStatus| { &m.local_origin_success_rate_ejection_threshold },
                |m: &mut ClusterStatus| { &mut m.local_origin_success_rate_ejection_threshold },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::circuit_breaker::CircuitBreakers>>(
                "circuit_breakers",
                |m: &ClusterStatus| { &m.circuit_breakers },
                |m: &mut ClusterStatus| { &mut m.circuit_breakers },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClusterStatus>(
                "ClusterStatus",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClusterStatus {
        static instance: ::protobuf::rt::LazyV2<ClusterStatus> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClusterStatus::new)
    }
}

impl ::protobuf::Clear for ClusterStatus {
    fn clear(&mut self) {
        self.name.clear();
        self.added_via_api = false;
        self.success_rate_ejection_threshold.clear();
        self.host_statuses.clear();
        self.local_origin_success_rate_ejection_threshold.clear();
        self.circuit_breakers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClusterStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClusterStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HostStatus {
    // message fields
    pub address: ::protobuf::SingularPtrField<super::address::Address>,
    pub stats: ::protobuf::RepeatedField<super::metrics::SimpleMetric>,
    pub health_status: ::protobuf::SingularPtrField<HostHealthStatus>,
    pub success_rate: ::protobuf::SingularPtrField<super::percent::Percent>,
    pub weight: u32,
    pub hostname: ::std::string::String,
    pub priority: u32,
    pub local_origin_success_rate: ::protobuf::SingularPtrField<super::percent::Percent>,
    pub locality: ::protobuf::SingularPtrField<super::base::Locality>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HostStatus {
    fn default() -> &'a HostStatus {
        <HostStatus as ::protobuf::Message>::default_instance()
    }
}

impl HostStatus {
    pub fn new() -> HostStatus {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v4alpha.Address address = 1;


    pub fn get_address(&self) -> &super::address::Address {
        self.address.as_ref().unwrap_or_else(|| <super::address::Address as ::protobuf::Message>::default_instance())
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: super::address::Address) {
        self.address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut super::address::Address {
        if self.address.is_none() {
            self.address.set_default();
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> super::address::Address {
        self.address.take().unwrap_or_else(|| super::address::Address::new())
    }

    // repeated .envoy.admin.v4alpha.SimpleMetric stats = 2;


    pub fn get_stats(&self) -> &[super::metrics::SimpleMetric] {
        &self.stats
    }
    pub fn clear_stats(&mut self) {
        self.stats.clear();
    }

    // Param is passed by value, moved
    pub fn set_stats(&mut self, v: ::protobuf::RepeatedField<super::metrics::SimpleMetric>) {
        self.stats = v;
    }

    // Mutable pointer to the field.
    pub fn mut_stats(&mut self) -> &mut ::protobuf::RepeatedField<super::metrics::SimpleMetric> {
        &mut self.stats
    }

    // Take field
    pub fn take_stats(&mut self) -> ::protobuf::RepeatedField<super::metrics::SimpleMetric> {
        ::std::mem::replace(&mut self.stats, ::protobuf::RepeatedField::new())
    }

    // .envoy.admin.v4alpha.HostHealthStatus health_status = 3;


    pub fn get_health_status(&self) -> &HostHealthStatus {
        self.health_status.as_ref().unwrap_or_else(|| <HostHealthStatus as ::protobuf::Message>::default_instance())
    }
    pub fn clear_health_status(&mut self) {
        self.health_status.clear();
    }

    pub fn has_health_status(&self) -> bool {
        self.health_status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_health_status(&mut self, v: HostHealthStatus) {
        self.health_status = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_health_status(&mut self) -> &mut HostHealthStatus {
        if self.health_status.is_none() {
            self.health_status.set_default();
        }
        self.health_status.as_mut().unwrap()
    }

    // Take field
    pub fn take_health_status(&mut self) -> HostHealthStatus {
        self.health_status.take().unwrap_or_else(|| HostHealthStatus::new())
    }

    // .envoy.type.v3.Percent success_rate = 4;


    pub fn get_success_rate(&self) -> &super::percent::Percent {
        self.success_rate.as_ref().unwrap_or_else(|| <super::percent::Percent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_success_rate(&mut self) {
        self.success_rate.clear();
    }

    pub fn has_success_rate(&self) -> bool {
        self.success_rate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_success_rate(&mut self, v: super::percent::Percent) {
        self.success_rate = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_success_rate(&mut self) -> &mut super::percent::Percent {
        if self.success_rate.is_none() {
            self.success_rate.set_default();
        }
        self.success_rate.as_mut().unwrap()
    }

    // Take field
    pub fn take_success_rate(&mut self) -> super::percent::Percent {
        self.success_rate.take().unwrap_or_else(|| super::percent::Percent::new())
    }

    // uint32 weight = 5;


    pub fn get_weight(&self) -> u32 {
        self.weight
    }
    pub fn clear_weight(&mut self) {
        self.weight = 0;
    }

    // Param is passed by value, moved
    pub fn set_weight(&mut self, v: u32) {
        self.weight = v;
    }

    // string hostname = 6;


    pub fn get_hostname(&self) -> &str {
        &self.hostname
    }
    pub fn clear_hostname(&mut self) {
        self.hostname.clear();
    }

    // Param is passed by value, moved
    pub fn set_hostname(&mut self, v: ::std::string::String) {
        self.hostname = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hostname(&mut self) -> &mut ::std::string::String {
        &mut self.hostname
    }

    // Take field
    pub fn take_hostname(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hostname, ::std::string::String::new())
    }

    // uint32 priority = 7;


    pub fn get_priority(&self) -> u32 {
        self.priority
    }
    pub fn clear_priority(&mut self) {
        self.priority = 0;
    }

    // Param is passed by value, moved
    pub fn set_priority(&mut self, v: u32) {
        self.priority = v;
    }

    // .envoy.type.v3.Percent local_origin_success_rate = 8;


    pub fn get_local_origin_success_rate(&self) -> &super::percent::Percent {
        self.local_origin_success_rate.as_ref().unwrap_or_else(|| <super::percent::Percent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_local_origin_success_rate(&mut self) {
        self.local_origin_success_rate.clear();
    }

    pub fn has_local_origin_success_rate(&self) -> bool {
        self.local_origin_success_rate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_local_origin_success_rate(&mut self, v: super::percent::Percent) {
        self.local_origin_success_rate = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_local_origin_success_rate(&mut self) -> &mut super::percent::Percent {
        if self.local_origin_success_rate.is_none() {
            self.local_origin_success_rate.set_default();
        }
        self.local_origin_success_rate.as_mut().unwrap()
    }

    // Take field
    pub fn take_local_origin_success_rate(&mut self) -> super::percent::Percent {
        self.local_origin_success_rate.take().unwrap_or_else(|| super::percent::Percent::new())
    }

    // .envoy.config.core.v4alpha.Locality locality = 9;


    pub fn get_locality(&self) -> &super::base::Locality {
        self.locality.as_ref().unwrap_or_else(|| <super::base::Locality as ::protobuf::Message>::default_instance())
    }
    pub fn clear_locality(&mut self) {
        self.locality.clear();
    }

    pub fn has_locality(&self) -> bool {
        self.locality.is_some()
    }

    // Param is passed by value, moved
    pub fn set_locality(&mut self, v: super::base::Locality) {
        self.locality = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_locality(&mut self) -> &mut super::base::Locality {
        if self.locality.is_none() {
            self.locality.set_default();
        }
        self.locality.as_mut().unwrap()
    }

    // Take field
    pub fn take_locality(&mut self) -> super::base::Locality {
        self.locality.take().unwrap_or_else(|| super::base::Locality::new())
    }
}

impl ::protobuf::Message for HostStatus {
    fn is_initialized(&self) -> bool {
        for v in &self.address {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.stats {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.health_status {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.success_rate {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.local_origin_success_rate {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.locality {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.stats)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.health_status)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.success_rate)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.weight = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hostname)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.priority = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.local_origin_success_rate)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.locality)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.stats {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.health_status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.success_rate.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.weight != 0 {
            my_size += ::protobuf::rt::value_size(5, self.weight, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.hostname.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.hostname);
        }
        if self.priority != 0 {
            my_size += ::protobuf::rt::value_size(7, self.priority, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.local_origin_success_rate.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.locality.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.address.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.stats {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.health_status.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.success_rate.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.weight != 0 {
            os.write_uint32(5, self.weight)?;
        }
        if !self.hostname.is_empty() {
            os.write_string(6, &self.hostname)?;
        }
        if self.priority != 0 {
            os.write_uint32(7, self.priority)?;
        }
        if let Some(ref v) = self.local_origin_success_rate.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.locality.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HostStatus {
        HostStatus::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::address::Address>>(
                "address",
                |m: &HostStatus| { &m.address },
                |m: &mut HostStatus| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::metrics::SimpleMetric>>(
                "stats",
                |m: &HostStatus| { &m.stats },
                |m: &mut HostStatus| { &mut m.stats },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HostHealthStatus>>(
                "health_status",
                |m: &HostStatus| { &m.health_status },
                |m: &mut HostStatus| { &mut m.health_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::percent::Percent>>(
                "success_rate",
                |m: &HostStatus| { &m.success_rate },
                |m: &mut HostStatus| { &mut m.success_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "weight",
                |m: &HostStatus| { &m.weight },
                |m: &mut HostStatus| { &mut m.weight },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "hostname",
                |m: &HostStatus| { &m.hostname },
                |m: &mut HostStatus| { &mut m.hostname },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "priority",
                |m: &HostStatus| { &m.priority },
                |m: &mut HostStatus| { &mut m.priority },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::percent::Percent>>(
                "local_origin_success_rate",
                |m: &HostStatus| { &m.local_origin_success_rate },
                |m: &mut HostStatus| { &mut m.local_origin_success_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Locality>>(
                "locality",
                |m: &HostStatus| { &m.locality },
                |m: &mut HostStatus| { &mut m.locality },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HostStatus>(
                "HostStatus",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HostStatus {
        static instance: ::protobuf::rt::LazyV2<HostStatus> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HostStatus::new)
    }
}

impl ::protobuf::Clear for HostStatus {
    fn clear(&mut self) {
        self.address.clear();
        self.stats.clear();
        self.health_status.clear();
        self.success_rate.clear();
        self.weight = 0;
        self.hostname.clear();
        self.priority = 0;
        self.local_origin_success_rate.clear();
        self.locality.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HostStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HostStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HostHealthStatus {
    // message fields
    pub failed_active_health_check: bool,
    pub failed_outlier_check: bool,
    pub failed_active_degraded_check: bool,
    pub pending_dynamic_removal: bool,
    pub pending_active_hc: bool,
    pub eds_health_status: super::health_check::HealthStatus,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HostHealthStatus {
    fn default() -> &'a HostHealthStatus {
        <HostHealthStatus as ::protobuf::Message>::default_instance()
    }
}

impl HostHealthStatus {
    pub fn new() -> HostHealthStatus {
        ::std::default::Default::default()
    }

    // bool failed_active_health_check = 1;


    pub fn get_failed_active_health_check(&self) -> bool {
        self.failed_active_health_check
    }
    pub fn clear_failed_active_health_check(&mut self) {
        self.failed_active_health_check = false;
    }

    // Param is passed by value, moved
    pub fn set_failed_active_health_check(&mut self, v: bool) {
        self.failed_active_health_check = v;
    }

    // bool failed_outlier_check = 2;


    pub fn get_failed_outlier_check(&self) -> bool {
        self.failed_outlier_check
    }
    pub fn clear_failed_outlier_check(&mut self) {
        self.failed_outlier_check = false;
    }

    // Param is passed by value, moved
    pub fn set_failed_outlier_check(&mut self, v: bool) {
        self.failed_outlier_check = v;
    }

    // bool failed_active_degraded_check = 4;


    pub fn get_failed_active_degraded_check(&self) -> bool {
        self.failed_active_degraded_check
    }
    pub fn clear_failed_active_degraded_check(&mut self) {
        self.failed_active_degraded_check = false;
    }

    // Param is passed by value, moved
    pub fn set_failed_active_degraded_check(&mut self, v: bool) {
        self.failed_active_degraded_check = v;
    }

    // bool pending_dynamic_removal = 5;


    pub fn get_pending_dynamic_removal(&self) -> bool {
        self.pending_dynamic_removal
    }
    pub fn clear_pending_dynamic_removal(&mut self) {
        self.pending_dynamic_removal = false;
    }

    // Param is passed by value, moved
    pub fn set_pending_dynamic_removal(&mut self, v: bool) {
        self.pending_dynamic_removal = v;
    }

    // bool pending_active_hc = 6;


    pub fn get_pending_active_hc(&self) -> bool {
        self.pending_active_hc
    }
    pub fn clear_pending_active_hc(&mut self) {
        self.pending_active_hc = false;
    }

    // Param is passed by value, moved
    pub fn set_pending_active_hc(&mut self, v: bool) {
        self.pending_active_hc = v;
    }

    // .envoy.config.core.v4alpha.HealthStatus eds_health_status = 3;


    pub fn get_eds_health_status(&self) -> super::health_check::HealthStatus {
        self.eds_health_status
    }
    pub fn clear_eds_health_status(&mut self) {
        self.eds_health_status = super::health_check::HealthStatus::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_eds_health_status(&mut self, v: super::health_check::HealthStatus) {
        self.eds_health_status = v;
    }
}

impl ::protobuf::Message for HostHealthStatus {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.failed_active_health_check = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.failed_outlier_check = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.failed_active_degraded_check = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.pending_dynamic_removal = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.pending_active_hc = tmp;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.eds_health_status, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.failed_active_health_check != false {
            my_size += 2;
        }
        if self.failed_outlier_check != false {
            my_size += 2;
        }
        if self.failed_active_degraded_check != false {
            my_size += 2;
        }
        if self.pending_dynamic_removal != false {
            my_size += 2;
        }
        if self.pending_active_hc != false {
            my_size += 2;
        }
        if self.eds_health_status != super::health_check::HealthStatus::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(3, self.eds_health_status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.failed_active_health_check != false {
            os.write_bool(1, self.failed_active_health_check)?;
        }
        if self.failed_outlier_check != false {
            os.write_bool(2, self.failed_outlier_check)?;
        }
        if self.failed_active_degraded_check != false {
            os.write_bool(4, self.failed_active_degraded_check)?;
        }
        if self.pending_dynamic_removal != false {
            os.write_bool(5, self.pending_dynamic_removal)?;
        }
        if self.pending_active_hc != false {
            os.write_bool(6, self.pending_active_hc)?;
        }
        if self.eds_health_status != super::health_check::HealthStatus::UNKNOWN {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.eds_health_status))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HostHealthStatus {
        HostHealthStatus::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "failed_active_health_check",
                |m: &HostHealthStatus| { &m.failed_active_health_check },
                |m: &mut HostHealthStatus| { &mut m.failed_active_health_check },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "failed_outlier_check",
                |m: &HostHealthStatus| { &m.failed_outlier_check },
                |m: &mut HostHealthStatus| { &mut m.failed_outlier_check },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "failed_active_degraded_check",
                |m: &HostHealthStatus| { &m.failed_active_degraded_check },
                |m: &mut HostHealthStatus| { &mut m.failed_active_degraded_check },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "pending_dynamic_removal",
                |m: &HostHealthStatus| { &m.pending_dynamic_removal },
                |m: &mut HostHealthStatus| { &mut m.pending_dynamic_removal },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "pending_active_hc",
                |m: &HostHealthStatus| { &m.pending_active_hc },
                |m: &mut HostHealthStatus| { &mut m.pending_active_hc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::health_check::HealthStatus>>(
                "eds_health_status",
                |m: &HostHealthStatus| { &m.eds_health_status },
                |m: &mut HostHealthStatus| { &mut m.eds_health_status },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HostHealthStatus>(
                "HostHealthStatus",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HostHealthStatus {
        static instance: ::protobuf::rt::LazyV2<HostHealthStatus> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HostHealthStatus::new)
    }
}

impl ::protobuf::Clear for HostHealthStatus {
    fn clear(&mut self) {
        self.failed_active_health_check = false;
        self.failed_outlier_check = false;
        self.failed_active_degraded_check = false;
        self.pending_dynamic_removal = false;
        self.pending_active_hc = false;
        self.eds_health_status = super::health_check::HealthStatus::UNKNOWN;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HostHealthStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HostHealthStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"envoy/admin/v4alpha/clusters.proto\x12\x13envoy.admin.v4alpha\x1a!en\
    voy/admin/v4alpha/metrics.proto\x1a2envoy/config/cluster/v4alpha/circuit\
    _breaker.proto\x1a'envoy/config/core/v4alpha/address.proto\x1a$envoy/con\
    fig/core/v4alpha/base.proto\x1a,envoy/config/core/v4alpha/health_check.p\
    roto\x1a\x1benvoy/type/v3/percent.proto\x1a\x1dudpa/annotations/status.p\
    roto\x1a!udpa/annotations/versioning.proto\"y\n\x08Clusters\x12M\n\x10cl\
    uster_statuses\x18\x01\x20\x03(\x0b2\".envoy.admin.v4alpha.ClusterStatus\
    R\x0fclusterStatuses:\x1e\x9a\xc5\x88\x1e\x19\n\x17envoy.admin.v3.Cluste\
    rs\"\xe2\x03\n\rClusterStatus\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04n\
    ame\x12\"\n\radded_via_api\x18\x02\x20\x01(\x08R\x0baddedViaApi\x12]\n\
    \x1fsuccess_rate_ejection_threshold\x18\x03\x20\x01(\x0b2\x16.envoy.type\
    .v3.PercentR\x1csuccessRateEjectionThreshold\x12D\n\rhost_statuses\x18\
    \x04\x20\x03(\x0b2\x1f.envoy.admin.v4alpha.HostStatusR\x0chostStatuses\
    \x12u\n,local_origin_success_rate_ejection_threshold\x18\x05\x20\x01(\
    \x0b2\x16.envoy.type.v3.PercentR'localOriginSuccessRateEjectionThreshold\
    \x12X\n\x10circuit_breakers\x18\x06\x20\x01(\x0b2-.envoy.config.cluster.\
    v4alpha.CircuitBreakersR\x0fcircuitBreakers:#\x9a\xc5\x88\x1e\x1e\n\x1ce\
    nvoy.admin.v3.ClusterStatus\"\x90\x04\n\nHostStatus\x12<\n\x07address\
    \x18\x01\x20\x01(\x0b2\".envoy.config.core.v4alpha.AddressR\x07address\
    \x127\n\x05stats\x18\x02\x20\x03(\x0b2!.envoy.admin.v4alpha.SimpleMetric\
    R\x05stats\x12J\n\rhealth_status\x18\x03\x20\x01(\x0b2%.envoy.admin.v4al\
    pha.HostHealthStatusR\x0chealthStatus\x129\n\x0csuccess_rate\x18\x04\x20\
    \x01(\x0b2\x16.envoy.type.v3.PercentR\x0bsuccessRate\x12\x16\n\x06weight\
    \x18\x05\x20\x01(\rR\x06weight\x12\x1a\n\x08hostname\x18\x06\x20\x01(\tR\
    \x08hostname\x12\x1a\n\x08priority\x18\x07\x20\x01(\rR\x08priority\x12Q\
    \n\x19local_origin_success_rate\x18\x08\x20\x01(\x0b2\x16.envoy.type.v3.\
    PercentR\x16localOriginSuccessRate\x12?\n\x08locality\x18\t\x20\x01(\x0b\
    2#.envoy.config.core.v4alpha.LocalityR\x08locality:\x20\x9a\xc5\x88\x1e\
    \x1b\n\x19envoy.admin.v3.HostStatus\"\xa3\x03\n\x10HostHealthStatus\x12;\
    \n\x1afailed_active_health_check\x18\x01\x20\x01(\x08R\x17failedActiveHe\
    althCheck\x120\n\x14failed_outlier_check\x18\x02\x20\x01(\x08R\x12failed\
    OutlierCheck\x12?\n\x1cfailed_active_degraded_check\x18\x04\x20\x01(\x08\
    R\x19failedActiveDegradedCheck\x126\n\x17pending_dynamic_removal\x18\x05\
    \x20\x01(\x08R\x15pendingDynamicRemoval\x12*\n\x11pending_active_hc\x18\
    \x06\x20\x01(\x08R\x0fpendingActiveHc\x12S\n\x11eds_health_status\x18\
    \x03\x20\x01(\x0e2'.envoy.config.core.v4alpha.HealthStatusR\x0fedsHealth\
    Status:&\x9a\xc5\x88\x1e!\n\x1fenvoy.admin.v3.HostHealthStatusB<\n!io.en\
    voyproxy.envoy.admin.v4alphaB\rClustersProtoP\x01\xba\x80\xc8\xd1\x06\
    \x02\x10\x03b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
