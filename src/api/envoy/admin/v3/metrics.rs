// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/admin/v3/metrics.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct SimpleMetric {
    // message fields
    pub field_type: SimpleMetric_Type,
    pub value: u64,
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SimpleMetric {
    fn default() -> &'a SimpleMetric {
        <SimpleMetric as ::protobuf::Message>::default_instance()
    }
}

impl SimpleMetric {
    pub fn new() -> SimpleMetric {
        ::std::default::Default::default()
    }

    // .envoy.admin.v3.SimpleMetric.Type type = 1;


    pub fn get_field_type(&self) -> SimpleMetric_Type {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = SimpleMetric_Type::COUNTER;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: SimpleMetric_Type) {
        self.field_type = v;
    }

    // uint64 value = 2;


    pub fn get_value(&self) -> u64 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: u64) {
        self.value = v;
    }

    // string name = 3;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SimpleMetric {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.value = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != SimpleMetric_Type::COUNTER {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if self.value != 0 {
            my_size += ::protobuf::rt::value_size(2, self.value, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != SimpleMetric_Type::COUNTER {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if self.value != 0 {
            os.write_uint64(2, self.value)?;
        }
        if !self.name.is_empty() {
            os.write_string(3, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SimpleMetric {
        SimpleMetric::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<SimpleMetric_Type>>(
                "type",
                |m: &SimpleMetric| { &m.field_type },
                |m: &mut SimpleMetric| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "value",
                |m: &SimpleMetric| { &m.value },
                |m: &mut SimpleMetric| { &mut m.value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &SimpleMetric| { &m.name },
                |m: &mut SimpleMetric| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SimpleMetric>(
                "SimpleMetric",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SimpleMetric {
        static instance: ::protobuf::rt::LazyV2<SimpleMetric> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SimpleMetric::new)
    }
}

impl ::protobuf::Clear for SimpleMetric {
    fn clear(&mut self) {
        self.field_type = SimpleMetric_Type::COUNTER;
        self.value = 0;
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SimpleMetric {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SimpleMetric {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum SimpleMetric_Type {
    COUNTER = 0,
    GAUGE = 1,
}

impl ::protobuf::ProtobufEnum for SimpleMetric_Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SimpleMetric_Type> {
        match value {
            0 => ::std::option::Option::Some(SimpleMetric_Type::COUNTER),
            1 => ::std::option::Option::Some(SimpleMetric_Type::GAUGE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SimpleMetric_Type] = &[
            SimpleMetric_Type::COUNTER,
            SimpleMetric_Type::GAUGE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<SimpleMetric_Type>("SimpleMetric.Type", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for SimpleMetric_Type {
}

impl ::std::default::Default for SimpleMetric_Type {
    fn default() -> Self {
        SimpleMetric_Type::COUNTER
    }
}

impl ::protobuf::reflect::ProtobufValue for SimpleMetric_Type {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cenvoy/admin/v3/metrics.proto\x12\x0eenvoy.admin.v3\x1a\x1dudpa/ann\
    otations/status.proto\x1a!udpa/annotations/versioning.proto\"\xb8\x01\n\
    \x0cSimpleMetric\x125\n\x04type\x18\x01\x20\x01(\x0e2!.envoy.admin.v3.Si\
    mpleMetric.TypeR\x04type\x12\x14\n\x05value\x18\x02\x20\x01(\x04R\x05val\
    ue\x12\x12\n\x04name\x18\x03\x20\x01(\tR\x04name\"\x1e\n\x04Type\x12\x0b\
    \n\x07COUNTER\x10\0\x12\t\n\x05GAUGE\x10\x01:'\x9a\xc5\x88\x1e\"\n\x20en\
    voy.admin.v2alpha.SimpleMetricB6\n\x1cio.envoyproxy.envoy.admin.v3B\x0cM\
    etricsProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
