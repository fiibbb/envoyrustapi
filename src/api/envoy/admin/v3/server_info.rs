// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/admin/v3/server_info.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct ServerInfo {
    // message fields
    pub version: ::std::string::String,
    pub state: ServerInfo_State,
    pub uptime_current_epoch: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub uptime_all_epochs: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub hot_restart_version: ::std::string::String,
    pub command_line_options: ::protobuf::SingularPtrField<CommandLineOptions>,
    pub node: ::protobuf::SingularPtrField<super::base::Node>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ServerInfo {
    fn default() -> &'a ServerInfo {
        <ServerInfo as ::protobuf::Message>::default_instance()
    }
}

impl ServerInfo {
    pub fn new() -> ServerInfo {
        ::std::default::Default::default()
    }

    // string version = 1;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    // .envoy.admin.v3.ServerInfo.State state = 2;


    pub fn get_state(&self) -> ServerInfo_State {
        self.state
    }
    pub fn clear_state(&mut self) {
        self.state = ServerInfo_State::LIVE;
    }

    // Param is passed by value, moved
    pub fn set_state(&mut self, v: ServerInfo_State) {
        self.state = v;
    }

    // .google.protobuf.Duration uptime_current_epoch = 3;


    pub fn get_uptime_current_epoch(&self) -> &::protobuf::well_known_types::Duration {
        self.uptime_current_epoch.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_uptime_current_epoch(&mut self) {
        self.uptime_current_epoch.clear();
    }

    pub fn has_uptime_current_epoch(&self) -> bool {
        self.uptime_current_epoch.is_some()
    }

    // Param is passed by value, moved
    pub fn set_uptime_current_epoch(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.uptime_current_epoch = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uptime_current_epoch(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.uptime_current_epoch.is_none() {
            self.uptime_current_epoch.set_default();
        }
        self.uptime_current_epoch.as_mut().unwrap()
    }

    // Take field
    pub fn take_uptime_current_epoch(&mut self) -> ::protobuf::well_known_types::Duration {
        self.uptime_current_epoch.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.Duration uptime_all_epochs = 4;


    pub fn get_uptime_all_epochs(&self) -> &::protobuf::well_known_types::Duration {
        self.uptime_all_epochs.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_uptime_all_epochs(&mut self) {
        self.uptime_all_epochs.clear();
    }

    pub fn has_uptime_all_epochs(&self) -> bool {
        self.uptime_all_epochs.is_some()
    }

    // Param is passed by value, moved
    pub fn set_uptime_all_epochs(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.uptime_all_epochs = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uptime_all_epochs(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.uptime_all_epochs.is_none() {
            self.uptime_all_epochs.set_default();
        }
        self.uptime_all_epochs.as_mut().unwrap()
    }

    // Take field
    pub fn take_uptime_all_epochs(&mut self) -> ::protobuf::well_known_types::Duration {
        self.uptime_all_epochs.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // string hot_restart_version = 5;


    pub fn get_hot_restart_version(&self) -> &str {
        &self.hot_restart_version
    }
    pub fn clear_hot_restart_version(&mut self) {
        self.hot_restart_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_hot_restart_version(&mut self, v: ::std::string::String) {
        self.hot_restart_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hot_restart_version(&mut self) -> &mut ::std::string::String {
        &mut self.hot_restart_version
    }

    // Take field
    pub fn take_hot_restart_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hot_restart_version, ::std::string::String::new())
    }

    // .envoy.admin.v3.CommandLineOptions command_line_options = 6;


    pub fn get_command_line_options(&self) -> &CommandLineOptions {
        self.command_line_options.as_ref().unwrap_or_else(|| <CommandLineOptions as ::protobuf::Message>::default_instance())
    }
    pub fn clear_command_line_options(&mut self) {
        self.command_line_options.clear();
    }

    pub fn has_command_line_options(&self) -> bool {
        self.command_line_options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_command_line_options(&mut self, v: CommandLineOptions) {
        self.command_line_options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_command_line_options(&mut self) -> &mut CommandLineOptions {
        if self.command_line_options.is_none() {
            self.command_line_options.set_default();
        }
        self.command_line_options.as_mut().unwrap()
    }

    // Take field
    pub fn take_command_line_options(&mut self) -> CommandLineOptions {
        self.command_line_options.take().unwrap_or_else(|| CommandLineOptions::new())
    }

    // .envoy.config.core.v3.Node node = 7;


    pub fn get_node(&self) -> &super::base::Node {
        self.node.as_ref().unwrap_or_else(|| <super::base::Node as ::protobuf::Message>::default_instance())
    }
    pub fn clear_node(&mut self) {
        self.node.clear();
    }

    pub fn has_node(&self) -> bool {
        self.node.is_some()
    }

    // Param is passed by value, moved
    pub fn set_node(&mut self, v: super::base::Node) {
        self.node = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node(&mut self) -> &mut super::base::Node {
        if self.node.is_none() {
            self.node.set_default();
        }
        self.node.as_mut().unwrap()
    }

    // Take field
    pub fn take_node(&mut self) -> super::base::Node {
        self.node.take().unwrap_or_else(|| super::base::Node::new())
    }
}

impl ::protobuf::Message for ServerInfo {
    fn is_initialized(&self) -> bool {
        for v in &self.uptime_current_epoch {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.uptime_all_epochs {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.command_line_options {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.node {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.state, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.uptime_current_epoch)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.uptime_all_epochs)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hot_restart_version)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.command_line_options)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.node)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.version);
        }
        if self.state != ServerInfo_State::LIVE {
            my_size += ::protobuf::rt::enum_size(2, self.state);
        }
        if let Some(ref v) = self.uptime_current_epoch.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.uptime_all_epochs.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.hot_restart_version.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.hot_restart_version);
        }
        if let Some(ref v) = self.command_line_options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.node.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.version.is_empty() {
            os.write_string(1, &self.version)?;
        }
        if self.state != ServerInfo_State::LIVE {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.state))?;
        }
        if let Some(ref v) = self.uptime_current_epoch.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.uptime_all_epochs.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.hot_restart_version.is_empty() {
            os.write_string(5, &self.hot_restart_version)?;
        }
        if let Some(ref v) = self.command_line_options.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.node.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ServerInfo {
        ServerInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &ServerInfo| { &m.version },
                |m: &mut ServerInfo| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ServerInfo_State>>(
                "state",
                |m: &ServerInfo| { &m.state },
                |m: &mut ServerInfo| { &mut m.state },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "uptime_current_epoch",
                |m: &ServerInfo| { &m.uptime_current_epoch },
                |m: &mut ServerInfo| { &mut m.uptime_current_epoch },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "uptime_all_epochs",
                |m: &ServerInfo| { &m.uptime_all_epochs },
                |m: &mut ServerInfo| { &mut m.uptime_all_epochs },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "hot_restart_version",
                |m: &ServerInfo| { &m.hot_restart_version },
                |m: &mut ServerInfo| { &mut m.hot_restart_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CommandLineOptions>>(
                "command_line_options",
                |m: &ServerInfo| { &m.command_line_options },
                |m: &mut ServerInfo| { &mut m.command_line_options },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Node>>(
                "node",
                |m: &ServerInfo| { &m.node },
                |m: &mut ServerInfo| { &mut m.node },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ServerInfo>(
                "ServerInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ServerInfo {
        static instance: ::protobuf::rt::LazyV2<ServerInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ServerInfo::new)
    }
}

impl ::protobuf::Clear for ServerInfo {
    fn clear(&mut self) {
        self.version.clear();
        self.state = ServerInfo_State::LIVE;
        self.uptime_current_epoch.clear();
        self.uptime_all_epochs.clear();
        self.hot_restart_version.clear();
        self.command_line_options.clear();
        self.node.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ServerInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ServerInfo_State {
    LIVE = 0,
    DRAINING = 1,
    PRE_INITIALIZING = 2,
    INITIALIZING = 3,
}

impl ::protobuf::ProtobufEnum for ServerInfo_State {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ServerInfo_State> {
        match value {
            0 => ::std::option::Option::Some(ServerInfo_State::LIVE),
            1 => ::std::option::Option::Some(ServerInfo_State::DRAINING),
            2 => ::std::option::Option::Some(ServerInfo_State::PRE_INITIALIZING),
            3 => ::std::option::Option::Some(ServerInfo_State::INITIALIZING),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ServerInfo_State] = &[
            ServerInfo_State::LIVE,
            ServerInfo_State::DRAINING,
            ServerInfo_State::PRE_INITIALIZING,
            ServerInfo_State::INITIALIZING,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ServerInfo_State>("ServerInfo.State", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ServerInfo_State {
}

impl ::std::default::Default for ServerInfo_State {
    fn default() -> Self {
        ServerInfo_State::LIVE
    }
}

impl ::protobuf::reflect::ProtobufValue for ServerInfo_State {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CommandLineOptions {
    // message fields
    pub base_id: u64,
    pub use_dynamic_base_id: bool,
    pub base_id_path: ::std::string::String,
    pub concurrency: u32,
    pub config_path: ::std::string::String,
    pub config_yaml: ::std::string::String,
    pub allow_unknown_static_fields: bool,
    pub reject_unknown_dynamic_fields: bool,
    pub ignore_unknown_dynamic_fields: bool,
    pub admin_address_path: ::std::string::String,
    pub local_address_ip_version: CommandLineOptions_IpVersion,
    pub log_level: ::std::string::String,
    pub component_log_level: ::std::string::String,
    pub log_format: ::std::string::String,
    pub log_format_escaped: bool,
    pub log_path: ::std::string::String,
    pub service_cluster: ::std::string::String,
    pub service_node: ::std::string::String,
    pub service_zone: ::std::string::String,
    pub file_flush_interval: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub drain_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub drain_strategy: CommandLineOptions_DrainStrategy,
    pub parent_shutdown_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub mode: CommandLineOptions_Mode,
    pub disable_hot_restart: bool,
    pub enable_mutex_tracing: bool,
    pub restart_epoch: u32,
    pub cpuset_threads: bool,
    pub disabled_extensions: ::protobuf::RepeatedField<::std::string::String>,
    pub bootstrap_version: u32,
    pub enable_fine_grain_logging: bool,
    pub socket_path: ::std::string::String,
    pub socket_mode: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CommandLineOptions {
    fn default() -> &'a CommandLineOptions {
        <CommandLineOptions as ::protobuf::Message>::default_instance()
    }
}

impl CommandLineOptions {
    pub fn new() -> CommandLineOptions {
        ::std::default::Default::default()
    }

    // uint64 base_id = 1;


    pub fn get_base_id(&self) -> u64 {
        self.base_id
    }
    pub fn clear_base_id(&mut self) {
        self.base_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_base_id(&mut self, v: u64) {
        self.base_id = v;
    }

    // bool use_dynamic_base_id = 31;


    pub fn get_use_dynamic_base_id(&self) -> bool {
        self.use_dynamic_base_id
    }
    pub fn clear_use_dynamic_base_id(&mut self) {
        self.use_dynamic_base_id = false;
    }

    // Param is passed by value, moved
    pub fn set_use_dynamic_base_id(&mut self, v: bool) {
        self.use_dynamic_base_id = v;
    }

    // string base_id_path = 32;


    pub fn get_base_id_path(&self) -> &str {
        &self.base_id_path
    }
    pub fn clear_base_id_path(&mut self) {
        self.base_id_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_base_id_path(&mut self, v: ::std::string::String) {
        self.base_id_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_id_path(&mut self) -> &mut ::std::string::String {
        &mut self.base_id_path
    }

    // Take field
    pub fn take_base_id_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.base_id_path, ::std::string::String::new())
    }

    // uint32 concurrency = 2;


    pub fn get_concurrency(&self) -> u32 {
        self.concurrency
    }
    pub fn clear_concurrency(&mut self) {
        self.concurrency = 0;
    }

    // Param is passed by value, moved
    pub fn set_concurrency(&mut self, v: u32) {
        self.concurrency = v;
    }

    // string config_path = 3;


    pub fn get_config_path(&self) -> &str {
        &self.config_path
    }
    pub fn clear_config_path(&mut self) {
        self.config_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_config_path(&mut self, v: ::std::string::String) {
        self.config_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_config_path(&mut self) -> &mut ::std::string::String {
        &mut self.config_path
    }

    // Take field
    pub fn take_config_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.config_path, ::std::string::String::new())
    }

    // string config_yaml = 4;


    pub fn get_config_yaml(&self) -> &str {
        &self.config_yaml
    }
    pub fn clear_config_yaml(&mut self) {
        self.config_yaml.clear();
    }

    // Param is passed by value, moved
    pub fn set_config_yaml(&mut self, v: ::std::string::String) {
        self.config_yaml = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_config_yaml(&mut self) -> &mut ::std::string::String {
        &mut self.config_yaml
    }

    // Take field
    pub fn take_config_yaml(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.config_yaml, ::std::string::String::new())
    }

    // bool allow_unknown_static_fields = 5;


    pub fn get_allow_unknown_static_fields(&self) -> bool {
        self.allow_unknown_static_fields
    }
    pub fn clear_allow_unknown_static_fields(&mut self) {
        self.allow_unknown_static_fields = false;
    }

    // Param is passed by value, moved
    pub fn set_allow_unknown_static_fields(&mut self, v: bool) {
        self.allow_unknown_static_fields = v;
    }

    // bool reject_unknown_dynamic_fields = 26;


    pub fn get_reject_unknown_dynamic_fields(&self) -> bool {
        self.reject_unknown_dynamic_fields
    }
    pub fn clear_reject_unknown_dynamic_fields(&mut self) {
        self.reject_unknown_dynamic_fields = false;
    }

    // Param is passed by value, moved
    pub fn set_reject_unknown_dynamic_fields(&mut self, v: bool) {
        self.reject_unknown_dynamic_fields = v;
    }

    // bool ignore_unknown_dynamic_fields = 30;


    pub fn get_ignore_unknown_dynamic_fields(&self) -> bool {
        self.ignore_unknown_dynamic_fields
    }
    pub fn clear_ignore_unknown_dynamic_fields(&mut self) {
        self.ignore_unknown_dynamic_fields = false;
    }

    // Param is passed by value, moved
    pub fn set_ignore_unknown_dynamic_fields(&mut self, v: bool) {
        self.ignore_unknown_dynamic_fields = v;
    }

    // string admin_address_path = 6;


    pub fn get_admin_address_path(&self) -> &str {
        &self.admin_address_path
    }
    pub fn clear_admin_address_path(&mut self) {
        self.admin_address_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_admin_address_path(&mut self, v: ::std::string::String) {
        self.admin_address_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_admin_address_path(&mut self) -> &mut ::std::string::String {
        &mut self.admin_address_path
    }

    // Take field
    pub fn take_admin_address_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.admin_address_path, ::std::string::String::new())
    }

    // .envoy.admin.v3.CommandLineOptions.IpVersion local_address_ip_version = 7;


    pub fn get_local_address_ip_version(&self) -> CommandLineOptions_IpVersion {
        self.local_address_ip_version
    }
    pub fn clear_local_address_ip_version(&mut self) {
        self.local_address_ip_version = CommandLineOptions_IpVersion::v4;
    }

    // Param is passed by value, moved
    pub fn set_local_address_ip_version(&mut self, v: CommandLineOptions_IpVersion) {
        self.local_address_ip_version = v;
    }

    // string log_level = 8;


    pub fn get_log_level(&self) -> &str {
        &self.log_level
    }
    pub fn clear_log_level(&mut self) {
        self.log_level.clear();
    }

    // Param is passed by value, moved
    pub fn set_log_level(&mut self, v: ::std::string::String) {
        self.log_level = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_log_level(&mut self) -> &mut ::std::string::String {
        &mut self.log_level
    }

    // Take field
    pub fn take_log_level(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.log_level, ::std::string::String::new())
    }

    // string component_log_level = 9;


    pub fn get_component_log_level(&self) -> &str {
        &self.component_log_level
    }
    pub fn clear_component_log_level(&mut self) {
        self.component_log_level.clear();
    }

    // Param is passed by value, moved
    pub fn set_component_log_level(&mut self, v: ::std::string::String) {
        self.component_log_level = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_component_log_level(&mut self) -> &mut ::std::string::String {
        &mut self.component_log_level
    }

    // Take field
    pub fn take_component_log_level(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.component_log_level, ::std::string::String::new())
    }

    // string log_format = 10;


    pub fn get_log_format(&self) -> &str {
        &self.log_format
    }
    pub fn clear_log_format(&mut self) {
        self.log_format.clear();
    }

    // Param is passed by value, moved
    pub fn set_log_format(&mut self, v: ::std::string::String) {
        self.log_format = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_log_format(&mut self) -> &mut ::std::string::String {
        &mut self.log_format
    }

    // Take field
    pub fn take_log_format(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.log_format, ::std::string::String::new())
    }

    // bool log_format_escaped = 27;


    pub fn get_log_format_escaped(&self) -> bool {
        self.log_format_escaped
    }
    pub fn clear_log_format_escaped(&mut self) {
        self.log_format_escaped = false;
    }

    // Param is passed by value, moved
    pub fn set_log_format_escaped(&mut self, v: bool) {
        self.log_format_escaped = v;
    }

    // string log_path = 11;


    pub fn get_log_path(&self) -> &str {
        &self.log_path
    }
    pub fn clear_log_path(&mut self) {
        self.log_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_log_path(&mut self, v: ::std::string::String) {
        self.log_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_log_path(&mut self) -> &mut ::std::string::String {
        &mut self.log_path
    }

    // Take field
    pub fn take_log_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.log_path, ::std::string::String::new())
    }

    // string service_cluster = 13;


    pub fn get_service_cluster(&self) -> &str {
        &self.service_cluster
    }
    pub fn clear_service_cluster(&mut self) {
        self.service_cluster.clear();
    }

    // Param is passed by value, moved
    pub fn set_service_cluster(&mut self, v: ::std::string::String) {
        self.service_cluster = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_cluster(&mut self) -> &mut ::std::string::String {
        &mut self.service_cluster
    }

    // Take field
    pub fn take_service_cluster(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.service_cluster, ::std::string::String::new())
    }

    // string service_node = 14;


    pub fn get_service_node(&self) -> &str {
        &self.service_node
    }
    pub fn clear_service_node(&mut self) {
        self.service_node.clear();
    }

    // Param is passed by value, moved
    pub fn set_service_node(&mut self, v: ::std::string::String) {
        self.service_node = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_node(&mut self) -> &mut ::std::string::String {
        &mut self.service_node
    }

    // Take field
    pub fn take_service_node(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.service_node, ::std::string::String::new())
    }

    // string service_zone = 15;


    pub fn get_service_zone(&self) -> &str {
        &self.service_zone
    }
    pub fn clear_service_zone(&mut self) {
        self.service_zone.clear();
    }

    // Param is passed by value, moved
    pub fn set_service_zone(&mut self, v: ::std::string::String) {
        self.service_zone = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_zone(&mut self) -> &mut ::std::string::String {
        &mut self.service_zone
    }

    // Take field
    pub fn take_service_zone(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.service_zone, ::std::string::String::new())
    }

    // .google.protobuf.Duration file_flush_interval = 16;


    pub fn get_file_flush_interval(&self) -> &::protobuf::well_known_types::Duration {
        self.file_flush_interval.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_file_flush_interval(&mut self) {
        self.file_flush_interval.clear();
    }

    pub fn has_file_flush_interval(&self) -> bool {
        self.file_flush_interval.is_some()
    }

    // Param is passed by value, moved
    pub fn set_file_flush_interval(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.file_flush_interval = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_file_flush_interval(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.file_flush_interval.is_none() {
            self.file_flush_interval.set_default();
        }
        self.file_flush_interval.as_mut().unwrap()
    }

    // Take field
    pub fn take_file_flush_interval(&mut self) -> ::protobuf::well_known_types::Duration {
        self.file_flush_interval.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.Duration drain_time = 17;


    pub fn get_drain_time(&self) -> &::protobuf::well_known_types::Duration {
        self.drain_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_drain_time(&mut self) {
        self.drain_time.clear();
    }

    pub fn has_drain_time(&self) -> bool {
        self.drain_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_drain_time(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.drain_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_drain_time(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.drain_time.is_none() {
            self.drain_time.set_default();
        }
        self.drain_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_drain_time(&mut self) -> ::protobuf::well_known_types::Duration {
        self.drain_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .envoy.admin.v3.CommandLineOptions.DrainStrategy drain_strategy = 33;


    pub fn get_drain_strategy(&self) -> CommandLineOptions_DrainStrategy {
        self.drain_strategy
    }
    pub fn clear_drain_strategy(&mut self) {
        self.drain_strategy = CommandLineOptions_DrainStrategy::Gradual;
    }

    // Param is passed by value, moved
    pub fn set_drain_strategy(&mut self, v: CommandLineOptions_DrainStrategy) {
        self.drain_strategy = v;
    }

    // .google.protobuf.Duration parent_shutdown_time = 18;


    pub fn get_parent_shutdown_time(&self) -> &::protobuf::well_known_types::Duration {
        self.parent_shutdown_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_parent_shutdown_time(&mut self) {
        self.parent_shutdown_time.clear();
    }

    pub fn has_parent_shutdown_time(&self) -> bool {
        self.parent_shutdown_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_parent_shutdown_time(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.parent_shutdown_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent_shutdown_time(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.parent_shutdown_time.is_none() {
            self.parent_shutdown_time.set_default();
        }
        self.parent_shutdown_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_parent_shutdown_time(&mut self) -> ::protobuf::well_known_types::Duration {
        self.parent_shutdown_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .envoy.admin.v3.CommandLineOptions.Mode mode = 19;


    pub fn get_mode(&self) -> CommandLineOptions_Mode {
        self.mode
    }
    pub fn clear_mode(&mut self) {
        self.mode = CommandLineOptions_Mode::Serve;
    }

    // Param is passed by value, moved
    pub fn set_mode(&mut self, v: CommandLineOptions_Mode) {
        self.mode = v;
    }

    // bool disable_hot_restart = 22;


    pub fn get_disable_hot_restart(&self) -> bool {
        self.disable_hot_restart
    }
    pub fn clear_disable_hot_restart(&mut self) {
        self.disable_hot_restart = false;
    }

    // Param is passed by value, moved
    pub fn set_disable_hot_restart(&mut self, v: bool) {
        self.disable_hot_restart = v;
    }

    // bool enable_mutex_tracing = 23;


    pub fn get_enable_mutex_tracing(&self) -> bool {
        self.enable_mutex_tracing
    }
    pub fn clear_enable_mutex_tracing(&mut self) {
        self.enable_mutex_tracing = false;
    }

    // Param is passed by value, moved
    pub fn set_enable_mutex_tracing(&mut self, v: bool) {
        self.enable_mutex_tracing = v;
    }

    // uint32 restart_epoch = 24;


    pub fn get_restart_epoch(&self) -> u32 {
        self.restart_epoch
    }
    pub fn clear_restart_epoch(&mut self) {
        self.restart_epoch = 0;
    }

    // Param is passed by value, moved
    pub fn set_restart_epoch(&mut self, v: u32) {
        self.restart_epoch = v;
    }

    // bool cpuset_threads = 25;


    pub fn get_cpuset_threads(&self) -> bool {
        self.cpuset_threads
    }
    pub fn clear_cpuset_threads(&mut self) {
        self.cpuset_threads = false;
    }

    // Param is passed by value, moved
    pub fn set_cpuset_threads(&mut self, v: bool) {
        self.cpuset_threads = v;
    }

    // repeated string disabled_extensions = 28;


    pub fn get_disabled_extensions(&self) -> &[::std::string::String] {
        &self.disabled_extensions
    }
    pub fn clear_disabled_extensions(&mut self) {
        self.disabled_extensions.clear();
    }

    // Param is passed by value, moved
    pub fn set_disabled_extensions(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.disabled_extensions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_disabled_extensions(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.disabled_extensions
    }

    // Take field
    pub fn take_disabled_extensions(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.disabled_extensions, ::protobuf::RepeatedField::new())
    }

    // uint32 bootstrap_version = 29;


    pub fn get_bootstrap_version(&self) -> u32 {
        self.bootstrap_version
    }
    pub fn clear_bootstrap_version(&mut self) {
        self.bootstrap_version = 0;
    }

    // Param is passed by value, moved
    pub fn set_bootstrap_version(&mut self, v: u32) {
        self.bootstrap_version = v;
    }

    // bool enable_fine_grain_logging = 34;


    pub fn get_enable_fine_grain_logging(&self) -> bool {
        self.enable_fine_grain_logging
    }
    pub fn clear_enable_fine_grain_logging(&mut self) {
        self.enable_fine_grain_logging = false;
    }

    // Param is passed by value, moved
    pub fn set_enable_fine_grain_logging(&mut self, v: bool) {
        self.enable_fine_grain_logging = v;
    }

    // string socket_path = 35;


    pub fn get_socket_path(&self) -> &str {
        &self.socket_path
    }
    pub fn clear_socket_path(&mut self) {
        self.socket_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_socket_path(&mut self, v: ::std::string::String) {
        self.socket_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_socket_path(&mut self) -> &mut ::std::string::String {
        &mut self.socket_path
    }

    // Take field
    pub fn take_socket_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.socket_path, ::std::string::String::new())
    }

    // uint32 socket_mode = 36;


    pub fn get_socket_mode(&self) -> u32 {
        self.socket_mode
    }
    pub fn clear_socket_mode(&mut self) {
        self.socket_mode = 0;
    }

    // Param is passed by value, moved
    pub fn set_socket_mode(&mut self, v: u32) {
        self.socket_mode = v;
    }
}

impl ::protobuf::Message for CommandLineOptions {
    fn is_initialized(&self) -> bool {
        for v in &self.file_flush_interval {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.drain_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.parent_shutdown_time {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.base_id = tmp;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.use_dynamic_base_id = tmp;
                },
                32 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.base_id_path)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.concurrency = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.config_path)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.config_yaml)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.allow_unknown_static_fields = tmp;
                },
                26 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.reject_unknown_dynamic_fields = tmp;
                },
                30 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.ignore_unknown_dynamic_fields = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.admin_address_path)?;
                },
                7 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.local_address_ip_version, 7, &mut self.unknown_fields)?
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.log_level)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.component_log_level)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.log_format)?;
                },
                27 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.log_format_escaped = tmp;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.log_path)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.service_cluster)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.service_node)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.service_zone)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.file_flush_interval)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.drain_time)?;
                },
                33 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.drain_strategy, 33, &mut self.unknown_fields)?
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.parent_shutdown_time)?;
                },
                19 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.mode, 19, &mut self.unknown_fields)?
                },
                22 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.disable_hot_restart = tmp;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.enable_mutex_tracing = tmp;
                },
                24 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.restart_epoch = tmp;
                },
                25 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.cpuset_threads = tmp;
                },
                28 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.disabled_extensions)?;
                },
                29 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.bootstrap_version = tmp;
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.enable_fine_grain_logging = tmp;
                },
                35 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.socket_path)?;
                },
                36 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.socket_mode = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.base_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.base_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.use_dynamic_base_id != false {
            my_size += 3;
        }
        if !self.base_id_path.is_empty() {
            my_size += ::protobuf::rt::string_size(32, &self.base_id_path);
        }
        if self.concurrency != 0 {
            my_size += ::protobuf::rt::value_size(2, self.concurrency, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.config_path.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.config_path);
        }
        if !self.config_yaml.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.config_yaml);
        }
        if self.allow_unknown_static_fields != false {
            my_size += 2;
        }
        if self.reject_unknown_dynamic_fields != false {
            my_size += 3;
        }
        if self.ignore_unknown_dynamic_fields != false {
            my_size += 3;
        }
        if !self.admin_address_path.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.admin_address_path);
        }
        if self.local_address_ip_version != CommandLineOptions_IpVersion::v4 {
            my_size += ::protobuf::rt::enum_size(7, self.local_address_ip_version);
        }
        if !self.log_level.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.log_level);
        }
        if !self.component_log_level.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.component_log_level);
        }
        if !self.log_format.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.log_format);
        }
        if self.log_format_escaped != false {
            my_size += 3;
        }
        if !self.log_path.is_empty() {
            my_size += ::protobuf::rt::string_size(11, &self.log_path);
        }
        if !self.service_cluster.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.service_cluster);
        }
        if !self.service_node.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.service_node);
        }
        if !self.service_zone.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.service_zone);
        }
        if let Some(ref v) = self.file_flush_interval.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.drain_time.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.drain_strategy != CommandLineOptions_DrainStrategy::Gradual {
            my_size += ::protobuf::rt::enum_size(33, self.drain_strategy);
        }
        if let Some(ref v) = self.parent_shutdown_time.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.mode != CommandLineOptions_Mode::Serve {
            my_size += ::protobuf::rt::enum_size(19, self.mode);
        }
        if self.disable_hot_restart != false {
            my_size += 3;
        }
        if self.enable_mutex_tracing != false {
            my_size += 3;
        }
        if self.restart_epoch != 0 {
            my_size += ::protobuf::rt::value_size(24, self.restart_epoch, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cpuset_threads != false {
            my_size += 3;
        }
        for value in &self.disabled_extensions {
            my_size += ::protobuf::rt::string_size(28, &value);
        };
        if self.bootstrap_version != 0 {
            my_size += ::protobuf::rt::value_size(29, self.bootstrap_version, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.enable_fine_grain_logging != false {
            my_size += 3;
        }
        if !self.socket_path.is_empty() {
            my_size += ::protobuf::rt::string_size(35, &self.socket_path);
        }
        if self.socket_mode != 0 {
            my_size += ::protobuf::rt::value_size(36, self.socket_mode, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.base_id != 0 {
            os.write_uint64(1, self.base_id)?;
        }
        if self.use_dynamic_base_id != false {
            os.write_bool(31, self.use_dynamic_base_id)?;
        }
        if !self.base_id_path.is_empty() {
            os.write_string(32, &self.base_id_path)?;
        }
        if self.concurrency != 0 {
            os.write_uint32(2, self.concurrency)?;
        }
        if !self.config_path.is_empty() {
            os.write_string(3, &self.config_path)?;
        }
        if !self.config_yaml.is_empty() {
            os.write_string(4, &self.config_yaml)?;
        }
        if self.allow_unknown_static_fields != false {
            os.write_bool(5, self.allow_unknown_static_fields)?;
        }
        if self.reject_unknown_dynamic_fields != false {
            os.write_bool(26, self.reject_unknown_dynamic_fields)?;
        }
        if self.ignore_unknown_dynamic_fields != false {
            os.write_bool(30, self.ignore_unknown_dynamic_fields)?;
        }
        if !self.admin_address_path.is_empty() {
            os.write_string(6, &self.admin_address_path)?;
        }
        if self.local_address_ip_version != CommandLineOptions_IpVersion::v4 {
            os.write_enum(7, ::protobuf::ProtobufEnum::value(&self.local_address_ip_version))?;
        }
        if !self.log_level.is_empty() {
            os.write_string(8, &self.log_level)?;
        }
        if !self.component_log_level.is_empty() {
            os.write_string(9, &self.component_log_level)?;
        }
        if !self.log_format.is_empty() {
            os.write_string(10, &self.log_format)?;
        }
        if self.log_format_escaped != false {
            os.write_bool(27, self.log_format_escaped)?;
        }
        if !self.log_path.is_empty() {
            os.write_string(11, &self.log_path)?;
        }
        if !self.service_cluster.is_empty() {
            os.write_string(13, &self.service_cluster)?;
        }
        if !self.service_node.is_empty() {
            os.write_string(14, &self.service_node)?;
        }
        if !self.service_zone.is_empty() {
            os.write_string(15, &self.service_zone)?;
        }
        if let Some(ref v) = self.file_flush_interval.as_ref() {
            os.write_tag(16, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.drain_time.as_ref() {
            os.write_tag(17, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.drain_strategy != CommandLineOptions_DrainStrategy::Gradual {
            os.write_enum(33, ::protobuf::ProtobufEnum::value(&self.drain_strategy))?;
        }
        if let Some(ref v) = self.parent_shutdown_time.as_ref() {
            os.write_tag(18, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.mode != CommandLineOptions_Mode::Serve {
            os.write_enum(19, ::protobuf::ProtobufEnum::value(&self.mode))?;
        }
        if self.disable_hot_restart != false {
            os.write_bool(22, self.disable_hot_restart)?;
        }
        if self.enable_mutex_tracing != false {
            os.write_bool(23, self.enable_mutex_tracing)?;
        }
        if self.restart_epoch != 0 {
            os.write_uint32(24, self.restart_epoch)?;
        }
        if self.cpuset_threads != false {
            os.write_bool(25, self.cpuset_threads)?;
        }
        for v in &self.disabled_extensions {
            os.write_string(28, &v)?;
        };
        if self.bootstrap_version != 0 {
            os.write_uint32(29, self.bootstrap_version)?;
        }
        if self.enable_fine_grain_logging != false {
            os.write_bool(34, self.enable_fine_grain_logging)?;
        }
        if !self.socket_path.is_empty() {
            os.write_string(35, &self.socket_path)?;
        }
        if self.socket_mode != 0 {
            os.write_uint32(36, self.socket_mode)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommandLineOptions {
        CommandLineOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "base_id",
                |m: &CommandLineOptions| { &m.base_id },
                |m: &mut CommandLineOptions| { &mut m.base_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "use_dynamic_base_id",
                |m: &CommandLineOptions| { &m.use_dynamic_base_id },
                |m: &mut CommandLineOptions| { &mut m.use_dynamic_base_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "base_id_path",
                |m: &CommandLineOptions| { &m.base_id_path },
                |m: &mut CommandLineOptions| { &mut m.base_id_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "concurrency",
                |m: &CommandLineOptions| { &m.concurrency },
                |m: &mut CommandLineOptions| { &mut m.concurrency },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "config_path",
                |m: &CommandLineOptions| { &m.config_path },
                |m: &mut CommandLineOptions| { &mut m.config_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "config_yaml",
                |m: &CommandLineOptions| { &m.config_yaml },
                |m: &mut CommandLineOptions| { &mut m.config_yaml },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "allow_unknown_static_fields",
                |m: &CommandLineOptions| { &m.allow_unknown_static_fields },
                |m: &mut CommandLineOptions| { &mut m.allow_unknown_static_fields },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "reject_unknown_dynamic_fields",
                |m: &CommandLineOptions| { &m.reject_unknown_dynamic_fields },
                |m: &mut CommandLineOptions| { &mut m.reject_unknown_dynamic_fields },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "ignore_unknown_dynamic_fields",
                |m: &CommandLineOptions| { &m.ignore_unknown_dynamic_fields },
                |m: &mut CommandLineOptions| { &mut m.ignore_unknown_dynamic_fields },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "admin_address_path",
                |m: &CommandLineOptions| { &m.admin_address_path },
                |m: &mut CommandLineOptions| { &mut m.admin_address_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CommandLineOptions_IpVersion>>(
                "local_address_ip_version",
                |m: &CommandLineOptions| { &m.local_address_ip_version },
                |m: &mut CommandLineOptions| { &mut m.local_address_ip_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "log_level",
                |m: &CommandLineOptions| { &m.log_level },
                |m: &mut CommandLineOptions| { &mut m.log_level },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "component_log_level",
                |m: &CommandLineOptions| { &m.component_log_level },
                |m: &mut CommandLineOptions| { &mut m.component_log_level },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "log_format",
                |m: &CommandLineOptions| { &m.log_format },
                |m: &mut CommandLineOptions| { &mut m.log_format },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "log_format_escaped",
                |m: &CommandLineOptions| { &m.log_format_escaped },
                |m: &mut CommandLineOptions| { &mut m.log_format_escaped },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "log_path",
                |m: &CommandLineOptions| { &m.log_path },
                |m: &mut CommandLineOptions| { &mut m.log_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "service_cluster",
                |m: &CommandLineOptions| { &m.service_cluster },
                |m: &mut CommandLineOptions| { &mut m.service_cluster },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "service_node",
                |m: &CommandLineOptions| { &m.service_node },
                |m: &mut CommandLineOptions| { &mut m.service_node },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "service_zone",
                |m: &CommandLineOptions| { &m.service_zone },
                |m: &mut CommandLineOptions| { &mut m.service_zone },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "file_flush_interval",
                |m: &CommandLineOptions| { &m.file_flush_interval },
                |m: &mut CommandLineOptions| { &mut m.file_flush_interval },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "drain_time",
                |m: &CommandLineOptions| { &m.drain_time },
                |m: &mut CommandLineOptions| { &mut m.drain_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CommandLineOptions_DrainStrategy>>(
                "drain_strategy",
                |m: &CommandLineOptions| { &m.drain_strategy },
                |m: &mut CommandLineOptions| { &mut m.drain_strategy },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "parent_shutdown_time",
                |m: &CommandLineOptions| { &m.parent_shutdown_time },
                |m: &mut CommandLineOptions| { &mut m.parent_shutdown_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CommandLineOptions_Mode>>(
                "mode",
                |m: &CommandLineOptions| { &m.mode },
                |m: &mut CommandLineOptions| { &mut m.mode },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "disable_hot_restart",
                |m: &CommandLineOptions| { &m.disable_hot_restart },
                |m: &mut CommandLineOptions| { &mut m.disable_hot_restart },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "enable_mutex_tracing",
                |m: &CommandLineOptions| { &m.enable_mutex_tracing },
                |m: &mut CommandLineOptions| { &mut m.enable_mutex_tracing },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "restart_epoch",
                |m: &CommandLineOptions| { &m.restart_epoch },
                |m: &mut CommandLineOptions| { &mut m.restart_epoch },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "cpuset_threads",
                |m: &CommandLineOptions| { &m.cpuset_threads },
                |m: &mut CommandLineOptions| { &mut m.cpuset_threads },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "disabled_extensions",
                |m: &CommandLineOptions| { &m.disabled_extensions },
                |m: &mut CommandLineOptions| { &mut m.disabled_extensions },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "bootstrap_version",
                |m: &CommandLineOptions| { &m.bootstrap_version },
                |m: &mut CommandLineOptions| { &mut m.bootstrap_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "enable_fine_grain_logging",
                |m: &CommandLineOptions| { &m.enable_fine_grain_logging },
                |m: &mut CommandLineOptions| { &mut m.enable_fine_grain_logging },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "socket_path",
                |m: &CommandLineOptions| { &m.socket_path },
                |m: &mut CommandLineOptions| { &mut m.socket_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "socket_mode",
                |m: &CommandLineOptions| { &m.socket_mode },
                |m: &mut CommandLineOptions| { &mut m.socket_mode },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CommandLineOptions>(
                "CommandLineOptions",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CommandLineOptions {
        static instance: ::protobuf::rt::LazyV2<CommandLineOptions> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CommandLineOptions::new)
    }
}

impl ::protobuf::Clear for CommandLineOptions {
    fn clear(&mut self) {
        self.base_id = 0;
        self.use_dynamic_base_id = false;
        self.base_id_path.clear();
        self.concurrency = 0;
        self.config_path.clear();
        self.config_yaml.clear();
        self.allow_unknown_static_fields = false;
        self.reject_unknown_dynamic_fields = false;
        self.ignore_unknown_dynamic_fields = false;
        self.admin_address_path.clear();
        self.local_address_ip_version = CommandLineOptions_IpVersion::v4;
        self.log_level.clear();
        self.component_log_level.clear();
        self.log_format.clear();
        self.log_format_escaped = false;
        self.log_path.clear();
        self.service_cluster.clear();
        self.service_node.clear();
        self.service_zone.clear();
        self.file_flush_interval.clear();
        self.drain_time.clear();
        self.drain_strategy = CommandLineOptions_DrainStrategy::Gradual;
        self.parent_shutdown_time.clear();
        self.mode = CommandLineOptions_Mode::Serve;
        self.disable_hot_restart = false;
        self.enable_mutex_tracing = false;
        self.restart_epoch = 0;
        self.cpuset_threads = false;
        self.disabled_extensions.clear();
        self.bootstrap_version = 0;
        self.enable_fine_grain_logging = false;
        self.socket_path.clear();
        self.socket_mode = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CommandLineOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommandLineOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CommandLineOptions_IpVersion {
    v4 = 0,
    v6 = 1,
}

impl ::protobuf::ProtobufEnum for CommandLineOptions_IpVersion {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CommandLineOptions_IpVersion> {
        match value {
            0 => ::std::option::Option::Some(CommandLineOptions_IpVersion::v4),
            1 => ::std::option::Option::Some(CommandLineOptions_IpVersion::v6),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CommandLineOptions_IpVersion] = &[
            CommandLineOptions_IpVersion::v4,
            CommandLineOptions_IpVersion::v6,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<CommandLineOptions_IpVersion>("CommandLineOptions.IpVersion", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for CommandLineOptions_IpVersion {
}

impl ::std::default::Default for CommandLineOptions_IpVersion {
    fn default() -> Self {
        CommandLineOptions_IpVersion::v4
    }
}

impl ::protobuf::reflect::ProtobufValue for CommandLineOptions_IpVersion {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CommandLineOptions_Mode {
    Serve = 0,
    Validate = 1,
    InitOnly = 2,
}

impl ::protobuf::ProtobufEnum for CommandLineOptions_Mode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CommandLineOptions_Mode> {
        match value {
            0 => ::std::option::Option::Some(CommandLineOptions_Mode::Serve),
            1 => ::std::option::Option::Some(CommandLineOptions_Mode::Validate),
            2 => ::std::option::Option::Some(CommandLineOptions_Mode::InitOnly),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CommandLineOptions_Mode] = &[
            CommandLineOptions_Mode::Serve,
            CommandLineOptions_Mode::Validate,
            CommandLineOptions_Mode::InitOnly,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<CommandLineOptions_Mode>("CommandLineOptions.Mode", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for CommandLineOptions_Mode {
}

impl ::std::default::Default for CommandLineOptions_Mode {
    fn default() -> Self {
        CommandLineOptions_Mode::Serve
    }
}

impl ::protobuf::reflect::ProtobufValue for CommandLineOptions_Mode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CommandLineOptions_DrainStrategy {
    Gradual = 0,
    Immediate = 1,
}

impl ::protobuf::ProtobufEnum for CommandLineOptions_DrainStrategy {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CommandLineOptions_DrainStrategy> {
        match value {
            0 => ::std::option::Option::Some(CommandLineOptions_DrainStrategy::Gradual),
            1 => ::std::option::Option::Some(CommandLineOptions_DrainStrategy::Immediate),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CommandLineOptions_DrainStrategy] = &[
            CommandLineOptions_DrainStrategy::Gradual,
            CommandLineOptions_DrainStrategy::Immediate,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<CommandLineOptions_DrainStrategy>("CommandLineOptions.DrainStrategy", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for CommandLineOptions_DrainStrategy {
}

impl ::std::default::Default for CommandLineOptions_DrainStrategy {
    fn default() -> Self {
        CommandLineOptions_DrainStrategy::Gradual
    }
}

impl ::protobuf::reflect::ProtobufValue for CommandLineOptions_DrainStrategy {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20envoy/admin/v3/server_info.proto\x12\x0eenvoy.admin.v3\x1a\x1fenvo\
    y/config/core/v3/base.proto\x1a\x1egoogle/protobuf/duration.proto\x1a#en\
    voy/annotations/deprecation.proto\x1a\x1dudpa/annotations/status.proto\
    \x1a!udpa/annotations/versioning.proto\"\x98\x04\n\nServerInfo\x12\x18\n\
    \x07version\x18\x01\x20\x01(\tR\x07version\x126\n\x05state\x18\x02\x20\
    \x01(\x0e2\x20.envoy.admin.v3.ServerInfo.StateR\x05state\x12K\n\x14uptim\
    e_current_epoch\x18\x03\x20\x01(\x0b2\x19.google.protobuf.DurationR\x12u\
    ptimeCurrentEpoch\x12E\n\x11uptime_all_epochs\x18\x04\x20\x01(\x0b2\x19.\
    google.protobuf.DurationR\x0fuptimeAllEpochs\x12.\n\x13hot_restart_versi\
    on\x18\x05\x20\x01(\tR\x11hotRestartVersion\x12T\n\x14command_line_optio\
    ns\x18\x06\x20\x01(\x0b2\".envoy.admin.v3.CommandLineOptionsR\x12command\
    LineOptions\x12.\n\x04node\x18\x07\x20\x01(\x0b2\x1a.envoy.config.core.v\
    3.NodeR\x04node\"G\n\x05State\x12\x08\n\x04LIVE\x10\0\x12\x0c\n\x08DRAIN\
    ING\x10\x01\x12\x14\n\x10PRE_INITIALIZING\x10\x02\x12\x10\n\x0cINITIALIZ\
    ING\x10\x03:%\x9a\xc5\x88\x1e\x20\n\x1eenvoy.admin.v2alpha.ServerInfo\"\
    \xa8\x0e\n\x12CommandLineOptions\x12\x17\n\x07base_id\x18\x01\x20\x01(\
    \x04R\x06baseId\x12-\n\x13use_dynamic_base_id\x18\x1f\x20\x01(\x08R\x10u\
    seDynamicBaseId\x12\x20\n\x0cbase_id_path\x18\x20\x20\x01(\tR\nbaseIdPat\
    h\x12\x20\n\x0bconcurrency\x18\x02\x20\x01(\rR\x0bconcurrency\x12\x1f\n\
    \x0bconfig_path\x18\x03\x20\x01(\tR\nconfigPath\x12\x1f\n\x0bconfig_yaml\
    \x18\x04\x20\x01(\tR\nconfigYaml\x12=\n\x1ballow_unknown_static_fields\
    \x18\x05\x20\x01(\x08R\x18allowUnknownStaticFields\x12A\n\x1dreject_unkn\
    own_dynamic_fields\x18\x1a\x20\x01(\x08R\x1arejectUnknownDynamicFields\
    \x12A\n\x1dignore_unknown_dynamic_fields\x18\x1e\x20\x01(\x08R\x1aignore\
    UnknownDynamicFields\x12,\n\x12admin_address_path\x18\x06\x20\x01(\tR\
    \x10adminAddressPath\x12e\n\x18local_address_ip_version\x18\x07\x20\x01(\
    \x0e2,.envoy.admin.v3.CommandLineOptions.IpVersionR\x15localAddressIpVer\
    sion\x12\x1b\n\tlog_level\x18\x08\x20\x01(\tR\x08logLevel\x12.\n\x13comp\
    onent_log_level\x18\t\x20\x01(\tR\x11componentLogLevel\x12\x1d\n\nlog_fo\
    rmat\x18\n\x20\x01(\tR\tlogFormat\x12,\n\x12log_format_escaped\x18\x1b\
    \x20\x01(\x08R\x10logFormatEscaped\x12\x19\n\x08log_path\x18\x0b\x20\x01\
    (\tR\x07logPath\x12'\n\x0fservice_cluster\x18\r\x20\x01(\tR\x0eserviceCl\
    uster\x12!\n\x0cservice_node\x18\x0e\x20\x01(\tR\x0bserviceNode\x12!\n\
    \x0cservice_zone\x18\x0f\x20\x01(\tR\x0bserviceZone\x12I\n\x13file_flush\
    _interval\x18\x10\x20\x01(\x0b2\x19.google.protobuf.DurationR\x11fileFlu\
    shInterval\x128\n\ndrain_time\x18\x11\x20\x01(\x0b2\x19.google.protobuf.\
    DurationR\tdrainTime\x12W\n\x0edrain_strategy\x18!\x20\x01(\x0e20.envoy.\
    admin.v3.CommandLineOptions.DrainStrategyR\rdrainStrategy\x12K\n\x14pare\
    nt_shutdown_time\x18\x12\x20\x01(\x0b2\x19.google.protobuf.DurationR\x12\
    parentShutdownTime\x12;\n\x04mode\x18\x13\x20\x01(\x0e2'.envoy.admin.v3.\
    CommandLineOptions.ModeR\x04mode\x12.\n\x13disable_hot_restart\x18\x16\
    \x20\x01(\x08R\x11disableHotRestart\x120\n\x14enable_mutex_tracing\x18\
    \x17\x20\x01(\x08R\x12enableMutexTracing\x12#\n\rrestart_epoch\x18\x18\
    \x20\x01(\rR\x0crestartEpoch\x12%\n\x0ecpuset_threads\x18\x19\x20\x01(\
    \x08R\rcpusetThreads\x12/\n\x13disabled_extensions\x18\x1c\x20\x03(\tR\
    \x12disabledExtensions\x12+\n\x11bootstrap_version\x18\x1d\x20\x01(\rR\
    \x10bootstrapVersion\x129\n\x19enable_fine_grain_logging\x18\"\x20\x01(\
    \x08R\x16enableFineGrainLogging\x12\x1f\n\x0bsocket_path\x18#\x20\x01(\t\
    R\nsocketPath\x12\x1f\n\x0bsocket_mode\x18$\x20\x01(\rR\nsocketMode\"\
    \x1b\n\tIpVersion\x12\x06\n\x02v4\x10\0\x12\x06\n\x02v6\x10\x01\"-\n\x04\
    Mode\x12\t\n\x05Serve\x10\0\x12\x0c\n\x08Validate\x10\x01\x12\x0c\n\x08I\
    nitOnly\x10\x02\"+\n\rDrainStrategy\x12\x0b\n\x07Gradual\x10\0\x12\r\n\t\
    Immediate\x10\x01:-\x9a\xc5\x88\x1e(\n&envoy.admin.v2alpha.CommandLineOp\
    tionsJ\x04\x08\x0c\x10\rJ\x04\x08\x14\x10\x15J\x04\x08\x15\x10\x16R\tmax\
    _statsR\x10max_obj_name_lenB9\n\x1cio.envoyproxy.envoy.admin.v3B\x0fServ\
    erInfoProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
