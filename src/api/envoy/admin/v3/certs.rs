// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/admin/v3/certs.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct Certificates {
    // message fields
    pub certificates: ::protobuf::RepeatedField<Certificate>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Certificates {
    fn default() -> &'a Certificates {
        <Certificates as ::protobuf::Message>::default_instance()
    }
}

impl Certificates {
    pub fn new() -> Certificates {
        ::std::default::Default::default()
    }

    // repeated .envoy.admin.v3.Certificate certificates = 1;


    pub fn get_certificates(&self) -> &[Certificate] {
        &self.certificates
    }
    pub fn clear_certificates(&mut self) {
        self.certificates.clear();
    }

    // Param is passed by value, moved
    pub fn set_certificates(&mut self, v: ::protobuf::RepeatedField<Certificate>) {
        self.certificates = v;
    }

    // Mutable pointer to the field.
    pub fn mut_certificates(&mut self) -> &mut ::protobuf::RepeatedField<Certificate> {
        &mut self.certificates
    }

    // Take field
    pub fn take_certificates(&mut self) -> ::protobuf::RepeatedField<Certificate> {
        ::std::mem::replace(&mut self.certificates, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Certificates {
    fn is_initialized(&self) -> bool {
        for v in &self.certificates {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.certificates)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.certificates {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.certificates {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Certificates {
        Certificates::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Certificate>>(
                "certificates",
                |m: &Certificates| { &m.certificates },
                |m: &mut Certificates| { &mut m.certificates },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Certificates>(
                "Certificates",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Certificates {
        static instance: ::protobuf::rt::LazyV2<Certificates> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Certificates::new)
    }
}

impl ::protobuf::Clear for Certificates {
    fn clear(&mut self) {
        self.certificates.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Certificates {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Certificates {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Certificate {
    // message fields
    pub ca_cert: ::protobuf::RepeatedField<CertificateDetails>,
    pub cert_chain: ::protobuf::RepeatedField<CertificateDetails>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Certificate {
    fn default() -> &'a Certificate {
        <Certificate as ::protobuf::Message>::default_instance()
    }
}

impl Certificate {
    pub fn new() -> Certificate {
        ::std::default::Default::default()
    }

    // repeated .envoy.admin.v3.CertificateDetails ca_cert = 1;


    pub fn get_ca_cert(&self) -> &[CertificateDetails] {
        &self.ca_cert
    }
    pub fn clear_ca_cert(&mut self) {
        self.ca_cert.clear();
    }

    // Param is passed by value, moved
    pub fn set_ca_cert(&mut self, v: ::protobuf::RepeatedField<CertificateDetails>) {
        self.ca_cert = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ca_cert(&mut self) -> &mut ::protobuf::RepeatedField<CertificateDetails> {
        &mut self.ca_cert
    }

    // Take field
    pub fn take_ca_cert(&mut self) -> ::protobuf::RepeatedField<CertificateDetails> {
        ::std::mem::replace(&mut self.ca_cert, ::protobuf::RepeatedField::new())
    }

    // repeated .envoy.admin.v3.CertificateDetails cert_chain = 2;


    pub fn get_cert_chain(&self) -> &[CertificateDetails] {
        &self.cert_chain
    }
    pub fn clear_cert_chain(&mut self) {
        self.cert_chain.clear();
    }

    // Param is passed by value, moved
    pub fn set_cert_chain(&mut self, v: ::protobuf::RepeatedField<CertificateDetails>) {
        self.cert_chain = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cert_chain(&mut self) -> &mut ::protobuf::RepeatedField<CertificateDetails> {
        &mut self.cert_chain
    }

    // Take field
    pub fn take_cert_chain(&mut self) -> ::protobuf::RepeatedField<CertificateDetails> {
        ::std::mem::replace(&mut self.cert_chain, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Certificate {
    fn is_initialized(&self) -> bool {
        for v in &self.ca_cert {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.cert_chain {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.ca_cert)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cert_chain)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.ca_cert {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.cert_chain {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.ca_cert {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.cert_chain {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Certificate {
        Certificate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CertificateDetails>>(
                "ca_cert",
                |m: &Certificate| { &m.ca_cert },
                |m: &mut Certificate| { &mut m.ca_cert },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CertificateDetails>>(
                "cert_chain",
                |m: &Certificate| { &m.cert_chain },
                |m: &mut Certificate| { &mut m.cert_chain },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Certificate>(
                "Certificate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Certificate {
        static instance: ::protobuf::rt::LazyV2<Certificate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Certificate::new)
    }
}

impl ::protobuf::Clear for Certificate {
    fn clear(&mut self) {
        self.ca_cert.clear();
        self.cert_chain.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Certificate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Certificate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CertificateDetails {
    // message fields
    pub path: ::std::string::String,
    pub serial_number: ::std::string::String,
    pub subject_alt_names: ::protobuf::RepeatedField<SubjectAlternateName>,
    pub days_until_expiration: u64,
    pub valid_from: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub expiration_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub ocsp_details: ::protobuf::SingularPtrField<CertificateDetails_OcspDetails>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CertificateDetails {
    fn default() -> &'a CertificateDetails {
        <CertificateDetails as ::protobuf::Message>::default_instance()
    }
}

impl CertificateDetails {
    pub fn new() -> CertificateDetails {
        ::std::default::Default::default()
    }

    // string path = 1;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    // string serial_number = 2;


    pub fn get_serial_number(&self) -> &str {
        &self.serial_number
    }
    pub fn clear_serial_number(&mut self) {
        self.serial_number.clear();
    }

    // Param is passed by value, moved
    pub fn set_serial_number(&mut self, v: ::std::string::String) {
        self.serial_number = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_serial_number(&mut self) -> &mut ::std::string::String {
        &mut self.serial_number
    }

    // Take field
    pub fn take_serial_number(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.serial_number, ::std::string::String::new())
    }

    // repeated .envoy.admin.v3.SubjectAlternateName subject_alt_names = 3;


    pub fn get_subject_alt_names(&self) -> &[SubjectAlternateName] {
        &self.subject_alt_names
    }
    pub fn clear_subject_alt_names(&mut self) {
        self.subject_alt_names.clear();
    }

    // Param is passed by value, moved
    pub fn set_subject_alt_names(&mut self, v: ::protobuf::RepeatedField<SubjectAlternateName>) {
        self.subject_alt_names = v;
    }

    // Mutable pointer to the field.
    pub fn mut_subject_alt_names(&mut self) -> &mut ::protobuf::RepeatedField<SubjectAlternateName> {
        &mut self.subject_alt_names
    }

    // Take field
    pub fn take_subject_alt_names(&mut self) -> ::protobuf::RepeatedField<SubjectAlternateName> {
        ::std::mem::replace(&mut self.subject_alt_names, ::protobuf::RepeatedField::new())
    }

    // uint64 days_until_expiration = 4;


    pub fn get_days_until_expiration(&self) -> u64 {
        self.days_until_expiration
    }
    pub fn clear_days_until_expiration(&mut self) {
        self.days_until_expiration = 0;
    }

    // Param is passed by value, moved
    pub fn set_days_until_expiration(&mut self, v: u64) {
        self.days_until_expiration = v;
    }

    // .google.protobuf.Timestamp valid_from = 5;


    pub fn get_valid_from(&self) -> &::protobuf::well_known_types::Timestamp {
        self.valid_from.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_valid_from(&mut self) {
        self.valid_from.clear();
    }

    pub fn has_valid_from(&self) -> bool {
        self.valid_from.is_some()
    }

    // Param is passed by value, moved
    pub fn set_valid_from(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.valid_from = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_valid_from(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.valid_from.is_none() {
            self.valid_from.set_default();
        }
        self.valid_from.as_mut().unwrap()
    }

    // Take field
    pub fn take_valid_from(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.valid_from.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp expiration_time = 6;


    pub fn get_expiration_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.expiration_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_expiration_time(&mut self) {
        self.expiration_time.clear();
    }

    pub fn has_expiration_time(&self) -> bool {
        self.expiration_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expiration_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.expiration_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_expiration_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.expiration_time.is_none() {
            self.expiration_time.set_default();
        }
        self.expiration_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_expiration_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.expiration_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .envoy.admin.v3.CertificateDetails.OcspDetails ocsp_details = 7;


    pub fn get_ocsp_details(&self) -> &CertificateDetails_OcspDetails {
        self.ocsp_details.as_ref().unwrap_or_else(|| <CertificateDetails_OcspDetails as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ocsp_details(&mut self) {
        self.ocsp_details.clear();
    }

    pub fn has_ocsp_details(&self) -> bool {
        self.ocsp_details.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ocsp_details(&mut self, v: CertificateDetails_OcspDetails) {
        self.ocsp_details = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ocsp_details(&mut self) -> &mut CertificateDetails_OcspDetails {
        if self.ocsp_details.is_none() {
            self.ocsp_details.set_default();
        }
        self.ocsp_details.as_mut().unwrap()
    }

    // Take field
    pub fn take_ocsp_details(&mut self) -> CertificateDetails_OcspDetails {
        self.ocsp_details.take().unwrap_or_else(|| CertificateDetails_OcspDetails::new())
    }
}

impl ::protobuf::Message for CertificateDetails {
    fn is_initialized(&self) -> bool {
        for v in &self.subject_alt_names {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.valid_from {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.expiration_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ocsp_details {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.serial_number)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.subject_alt_names)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.days_until_expiration = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.valid_from)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.expiration_time)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ocsp_details)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        if !self.serial_number.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.serial_number);
        }
        for value in &self.subject_alt_names {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.days_until_expiration != 0 {
            my_size += ::protobuf::rt::value_size(4, self.days_until_expiration, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.valid_from.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.expiration_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.ocsp_details.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        if !self.serial_number.is_empty() {
            os.write_string(2, &self.serial_number)?;
        }
        for v in &self.subject_alt_names {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.days_until_expiration != 0 {
            os.write_uint64(4, self.days_until_expiration)?;
        }
        if let Some(ref v) = self.valid_from.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.expiration_time.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.ocsp_details.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CertificateDetails {
        CertificateDetails::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &CertificateDetails| { &m.path },
                |m: &mut CertificateDetails| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "serial_number",
                |m: &CertificateDetails| { &m.serial_number },
                |m: &mut CertificateDetails| { &mut m.serial_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SubjectAlternateName>>(
                "subject_alt_names",
                |m: &CertificateDetails| { &m.subject_alt_names },
                |m: &mut CertificateDetails| { &mut m.subject_alt_names },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "days_until_expiration",
                |m: &CertificateDetails| { &m.days_until_expiration },
                |m: &mut CertificateDetails| { &mut m.days_until_expiration },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "valid_from",
                |m: &CertificateDetails| { &m.valid_from },
                |m: &mut CertificateDetails| { &mut m.valid_from },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "expiration_time",
                |m: &CertificateDetails| { &m.expiration_time },
                |m: &mut CertificateDetails| { &mut m.expiration_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CertificateDetails_OcspDetails>>(
                "ocsp_details",
                |m: &CertificateDetails| { &m.ocsp_details },
                |m: &mut CertificateDetails| { &mut m.ocsp_details },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CertificateDetails>(
                "CertificateDetails",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CertificateDetails {
        static instance: ::protobuf::rt::LazyV2<CertificateDetails> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CertificateDetails::new)
    }
}

impl ::protobuf::Clear for CertificateDetails {
    fn clear(&mut self) {
        self.path.clear();
        self.serial_number.clear();
        self.subject_alt_names.clear();
        self.days_until_expiration = 0;
        self.valid_from.clear();
        self.expiration_time.clear();
        self.ocsp_details.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CertificateDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CertificateDetails {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CertificateDetails_OcspDetails {
    // message fields
    pub valid_from: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub expiration: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CertificateDetails_OcspDetails {
    fn default() -> &'a CertificateDetails_OcspDetails {
        <CertificateDetails_OcspDetails as ::protobuf::Message>::default_instance()
    }
}

impl CertificateDetails_OcspDetails {
    pub fn new() -> CertificateDetails_OcspDetails {
        ::std::default::Default::default()
    }

    // .google.protobuf.Timestamp valid_from = 1;


    pub fn get_valid_from(&self) -> &::protobuf::well_known_types::Timestamp {
        self.valid_from.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_valid_from(&mut self) {
        self.valid_from.clear();
    }

    pub fn has_valid_from(&self) -> bool {
        self.valid_from.is_some()
    }

    // Param is passed by value, moved
    pub fn set_valid_from(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.valid_from = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_valid_from(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.valid_from.is_none() {
            self.valid_from.set_default();
        }
        self.valid_from.as_mut().unwrap()
    }

    // Take field
    pub fn take_valid_from(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.valid_from.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Timestamp expiration = 2;


    pub fn get_expiration(&self) -> &::protobuf::well_known_types::Timestamp {
        self.expiration.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_expiration(&mut self) {
        self.expiration.clear();
    }

    pub fn has_expiration(&self) -> bool {
        self.expiration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_expiration(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.expiration = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_expiration(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.expiration.is_none() {
            self.expiration.set_default();
        }
        self.expiration.as_mut().unwrap()
    }

    // Take field
    pub fn take_expiration(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.expiration.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }
}

impl ::protobuf::Message for CertificateDetails_OcspDetails {
    fn is_initialized(&self) -> bool {
        for v in &self.valid_from {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.expiration {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.valid_from)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.expiration)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.valid_from.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.expiration.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.valid_from.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.expiration.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CertificateDetails_OcspDetails {
        CertificateDetails_OcspDetails::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "valid_from",
                |m: &CertificateDetails_OcspDetails| { &m.valid_from },
                |m: &mut CertificateDetails_OcspDetails| { &mut m.valid_from },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "expiration",
                |m: &CertificateDetails_OcspDetails| { &m.expiration },
                |m: &mut CertificateDetails_OcspDetails| { &mut m.expiration },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CertificateDetails_OcspDetails>(
                "CertificateDetails.OcspDetails",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CertificateDetails_OcspDetails {
        static instance: ::protobuf::rt::LazyV2<CertificateDetails_OcspDetails> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CertificateDetails_OcspDetails::new)
    }
}

impl ::protobuf::Clear for CertificateDetails_OcspDetails {
    fn clear(&mut self) {
        self.valid_from.clear();
        self.expiration.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CertificateDetails_OcspDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CertificateDetails_OcspDetails {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SubjectAlternateName {
    // message oneof groups
    pub name: ::std::option::Option<SubjectAlternateName_oneof_name>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SubjectAlternateName {
    fn default() -> &'a SubjectAlternateName {
        <SubjectAlternateName as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum SubjectAlternateName_oneof_name {
    dns(::std::string::String),
    uri(::std::string::String),
    ip_address(::std::string::String),
}

impl SubjectAlternateName {
    pub fn new() -> SubjectAlternateName {
        ::std::default::Default::default()
    }

    // string dns = 1;


    pub fn get_dns(&self) -> &str {
        match self.name {
            ::std::option::Option::Some(SubjectAlternateName_oneof_name::dns(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_dns(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_dns(&self) -> bool {
        match self.name {
            ::std::option::Option::Some(SubjectAlternateName_oneof_name::dns(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_dns(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(SubjectAlternateName_oneof_name::dns(v))
    }

    // Mutable pointer to the field.
    pub fn mut_dns(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(SubjectAlternateName_oneof_name::dns(_)) = self.name {
        } else {
            self.name = ::std::option::Option::Some(SubjectAlternateName_oneof_name::dns(::std::string::String::new()));
        }
        match self.name {
            ::std::option::Option::Some(SubjectAlternateName_oneof_name::dns(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_dns(&mut self) -> ::std::string::String {
        if self.has_dns() {
            match self.name.take() {
                ::std::option::Option::Some(SubjectAlternateName_oneof_name::dns(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string uri = 2;


    pub fn get_uri(&self) -> &str {
        match self.name {
            ::std::option::Option::Some(SubjectAlternateName_oneof_name::uri(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_uri(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_uri(&self) -> bool {
        match self.name {
            ::std::option::Option::Some(SubjectAlternateName_oneof_name::uri(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_uri(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(SubjectAlternateName_oneof_name::uri(v))
    }

    // Mutable pointer to the field.
    pub fn mut_uri(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(SubjectAlternateName_oneof_name::uri(_)) = self.name {
        } else {
            self.name = ::std::option::Option::Some(SubjectAlternateName_oneof_name::uri(::std::string::String::new()));
        }
        match self.name {
            ::std::option::Option::Some(SubjectAlternateName_oneof_name::uri(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_uri(&mut self) -> ::std::string::String {
        if self.has_uri() {
            match self.name.take() {
                ::std::option::Option::Some(SubjectAlternateName_oneof_name::uri(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string ip_address = 3;


    pub fn get_ip_address(&self) -> &str {
        match self.name {
            ::std::option::Option::Some(SubjectAlternateName_oneof_name::ip_address(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_ip_address(&mut self) {
        self.name = ::std::option::Option::None;
    }

    pub fn has_ip_address(&self) -> bool {
        match self.name {
            ::std::option::Option::Some(SubjectAlternateName_oneof_name::ip_address(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ip_address(&mut self, v: ::std::string::String) {
        self.name = ::std::option::Option::Some(SubjectAlternateName_oneof_name::ip_address(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ip_address(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(SubjectAlternateName_oneof_name::ip_address(_)) = self.name {
        } else {
            self.name = ::std::option::Option::Some(SubjectAlternateName_oneof_name::ip_address(::std::string::String::new()));
        }
        match self.name {
            ::std::option::Option::Some(SubjectAlternateName_oneof_name::ip_address(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ip_address(&mut self) -> ::std::string::String {
        if self.has_ip_address() {
            match self.name.take() {
                ::std::option::Option::Some(SubjectAlternateName_oneof_name::ip_address(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }
}

impl ::protobuf::Message for SubjectAlternateName {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.name = ::std::option::Option::Some(SubjectAlternateName_oneof_name::dns(is.read_string()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.name = ::std::option::Option::Some(SubjectAlternateName_oneof_name::uri(is.read_string()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.name = ::std::option::Option::Some(SubjectAlternateName_oneof_name::ip_address(is.read_string()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.name {
            match v {
                &SubjectAlternateName_oneof_name::dns(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
                &SubjectAlternateName_oneof_name::uri(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
                &SubjectAlternateName_oneof_name::ip_address(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.name {
            match v {
                &SubjectAlternateName_oneof_name::dns(ref v) => {
                    os.write_string(1, v)?;
                },
                &SubjectAlternateName_oneof_name::uri(ref v) => {
                    os.write_string(2, v)?;
                },
                &SubjectAlternateName_oneof_name::ip_address(ref v) => {
                    os.write_string(3, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubjectAlternateName {
        SubjectAlternateName::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "dns",
                SubjectAlternateName::has_dns,
                SubjectAlternateName::get_dns,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "uri",
                SubjectAlternateName::has_uri,
                SubjectAlternateName::get_uri,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "ip_address",
                SubjectAlternateName::has_ip_address,
                SubjectAlternateName::get_ip_address,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SubjectAlternateName>(
                "SubjectAlternateName",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SubjectAlternateName {
        static instance: ::protobuf::rt::LazyV2<SubjectAlternateName> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SubjectAlternateName::new)
    }
}

impl ::protobuf::Clear for SubjectAlternateName {
    fn clear(&mut self) {
        self.name = ::std::option::Option::None;
        self.name = ::std::option::Option::None;
        self.name = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SubjectAlternateName {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubjectAlternateName {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1aenvoy/admin/v3/certs.proto\x12\x0eenvoy.admin.v3\x1a\x1fgoogle/pro\
    tobuf/timestamp.proto\x1a\x1dudpa/annotations/status.proto\x1a!udpa/anno\
    tations/versioning.proto\"x\n\x0cCertificates\x12?\n\x0ccertificates\x18\
    \x01\x20\x03(\x0b2\x1b.envoy.admin.v3.CertificateR\x0ccertificates:'\x9a\
    \xc5\x88\x1e\"\n\x20envoy.admin.v2alpha.Certificates\"\xb5\x01\n\x0bCert\
    ificate\x12;\n\x07ca_cert\x18\x01\x20\x03(\x0b2\".envoy.admin.v3.Certifi\
    cateDetailsR\x06caCert\x12A\n\ncert_chain\x18\x02\x20\x03(\x0b2\".envoy.\
    admin.v3.CertificateDetailsR\tcertChain:&\x9a\xc5\x88\x1e!\n\x1fenvoy.ad\
    min.v2alpha.Certificate\"\xdc\x04\n\x12CertificateDetails\x12\x12\n\x04p\
    ath\x18\x01\x20\x01(\tR\x04path\x12#\n\rserial_number\x18\x02\x20\x01(\t\
    R\x0cserialNumber\x12P\n\x11subject_alt_names\x18\x03\x20\x03(\x0b2$.env\
    oy.admin.v3.SubjectAlternateNameR\x0fsubjectAltNames\x122\n\x15days_unti\
    l_expiration\x18\x04\x20\x01(\x04R\x13daysUntilExpiration\x129\n\nvalid_\
    from\x18\x05\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\tvalidFrom\x12\
    C\n\x0fexpiration_time\x18\x06\x20\x01(\x0b2\x1a.google.protobuf.Timesta\
    mpR\x0eexpirationTime\x12Q\n\x0cocsp_details\x18\x07\x20\x01(\x0b2..envo\
    y.admin.v3.CertificateDetails.OcspDetailsR\x0bocspDetails\x1a\x84\x01\n\
    \x0bOcspDetails\x129\n\nvalid_from\x18\x01\x20\x01(\x0b2\x1a.google.prot\
    obuf.TimestampR\tvalidFrom\x12:\n\nexpiration\x18\x02\x20\x01(\x0b2\x1a.\
    google.protobuf.TimestampR\nexpiration:-\x9a\xc5\x88\x1e(\n&envoy.admin.\
    v2alpha.CertificateDetails\"\x98\x01\n\x14SubjectAlternateName\x12\x12\n\
    \x03dns\x18\x01\x20\x01(\tH\0R\x03dns\x12\x12\n\x03uri\x18\x02\x20\x01(\
    \tH\0R\x03uri\x12\x1f\n\nip_address\x18\x03\x20\x01(\tH\0R\tipAddressB\
    \x06\n\x04name:/\x9a\xc5\x88\x1e*\n(envoy.admin.v2alpha.SubjectAlternate\
    NameB4\n\x1cio.envoyproxy.envoy.admin.v3B\nCertsProtoP\x01\xba\x80\xc8\
    \xd1\x06\x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
