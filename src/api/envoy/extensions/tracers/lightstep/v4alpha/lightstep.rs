// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/extensions/tracers/lightstep/v4alpha/lightstep.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct LightstepConfig {
    // message fields
    pub collector_cluster: ::std::string::String,
    pub access_token_file: ::std::string::String,
    pub propagation_modes: ::std::vec::Vec<LightstepConfig_PropagationMode>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LightstepConfig {
    fn default() -> &'a LightstepConfig {
        <LightstepConfig as ::protobuf::Message>::default_instance()
    }
}

impl LightstepConfig {
    pub fn new() -> LightstepConfig {
        ::std::default::Default::default()
    }

    // string collector_cluster = 1;


    pub fn get_collector_cluster(&self) -> &str {
        &self.collector_cluster
    }
    pub fn clear_collector_cluster(&mut self) {
        self.collector_cluster.clear();
    }

    // Param is passed by value, moved
    pub fn set_collector_cluster(&mut self, v: ::std::string::String) {
        self.collector_cluster = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_collector_cluster(&mut self) -> &mut ::std::string::String {
        &mut self.collector_cluster
    }

    // Take field
    pub fn take_collector_cluster(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.collector_cluster, ::std::string::String::new())
    }

    // string access_token_file = 2;


    pub fn get_access_token_file(&self) -> &str {
        &self.access_token_file
    }
    pub fn clear_access_token_file(&mut self) {
        self.access_token_file.clear();
    }

    // Param is passed by value, moved
    pub fn set_access_token_file(&mut self, v: ::std::string::String) {
        self.access_token_file = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_access_token_file(&mut self) -> &mut ::std::string::String {
        &mut self.access_token_file
    }

    // Take field
    pub fn take_access_token_file(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.access_token_file, ::std::string::String::new())
    }

    // repeated .envoy.extensions.tracers.lightstep.v4alpha.LightstepConfig.PropagationMode propagation_modes = 3;


    pub fn get_propagation_modes(&self) -> &[LightstepConfig_PropagationMode] {
        &self.propagation_modes
    }
    pub fn clear_propagation_modes(&mut self) {
        self.propagation_modes.clear();
    }

    // Param is passed by value, moved
    pub fn set_propagation_modes(&mut self, v: ::std::vec::Vec<LightstepConfig_PropagationMode>) {
        self.propagation_modes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_propagation_modes(&mut self) -> &mut ::std::vec::Vec<LightstepConfig_PropagationMode> {
        &mut self.propagation_modes
    }

    // Take field
    pub fn take_propagation_modes(&mut self) -> ::std::vec::Vec<LightstepConfig_PropagationMode> {
        ::std::mem::replace(&mut self.propagation_modes, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for LightstepConfig {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.collector_cluster)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.access_token_file)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(wire_type, is, &mut self.propagation_modes, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.collector_cluster.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.collector_cluster);
        }
        if !self.access_token_file.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.access_token_file);
        }
        for value in &self.propagation_modes {
            my_size += ::protobuf::rt::enum_size(3, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.collector_cluster.is_empty() {
            os.write_string(1, &self.collector_cluster)?;
        }
        if !self.access_token_file.is_empty() {
            os.write_string(2, &self.access_token_file)?;
        }
        for v in &self.propagation_modes {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(v))?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LightstepConfig {
        LightstepConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "collector_cluster",
                |m: &LightstepConfig| { &m.collector_cluster },
                |m: &mut LightstepConfig| { &mut m.collector_cluster },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "access_token_file",
                |m: &LightstepConfig| { &m.access_token_file },
                |m: &mut LightstepConfig| { &mut m.access_token_file },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeEnum<LightstepConfig_PropagationMode>>(
                "propagation_modes",
                |m: &LightstepConfig| { &m.propagation_modes },
                |m: &mut LightstepConfig| { &mut m.propagation_modes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LightstepConfig>(
                "LightstepConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LightstepConfig {
        static instance: ::protobuf::rt::LazyV2<LightstepConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LightstepConfig::new)
    }
}

impl ::protobuf::Clear for LightstepConfig {
    fn clear(&mut self) {
        self.collector_cluster.clear();
        self.access_token_file.clear();
        self.propagation_modes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LightstepConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LightstepConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum LightstepConfig_PropagationMode {
    ENVOY = 0,
    LIGHTSTEP = 1,
    B3 = 2,
    TRACE_CONTEXT = 3,
}

impl ::protobuf::ProtobufEnum for LightstepConfig_PropagationMode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<LightstepConfig_PropagationMode> {
        match value {
            0 => ::std::option::Option::Some(LightstepConfig_PropagationMode::ENVOY),
            1 => ::std::option::Option::Some(LightstepConfig_PropagationMode::LIGHTSTEP),
            2 => ::std::option::Option::Some(LightstepConfig_PropagationMode::B3),
            3 => ::std::option::Option::Some(LightstepConfig_PropagationMode::TRACE_CONTEXT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [LightstepConfig_PropagationMode] = &[
            LightstepConfig_PropagationMode::ENVOY,
            LightstepConfig_PropagationMode::LIGHTSTEP,
            LightstepConfig_PropagationMode::B3,
            LightstepConfig_PropagationMode::TRACE_CONTEXT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<LightstepConfig_PropagationMode>("LightstepConfig.PropagationMode", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for LightstepConfig_PropagationMode {
}

impl ::std::default::Default for LightstepConfig_PropagationMode {
    fn default() -> Self {
        LightstepConfig_PropagationMode::ENVOY
    }
}

impl ::protobuf::reflect::ProtobufValue for LightstepConfig_PropagationMode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n:envoy/extensions/tracers/lightstep/v4alpha/lightstep.proto\x12*envoy.\
    extensions.tracers.lightstep.v4alpha\x1a\x1dudpa/annotations/status.prot\
    o\x1a!udpa/annotations/versioning.proto\x1a\x17validate/validate.proto\"\
    \xfc\x02\n\x0fLightstepConfig\x124\n\x11collector_cluster\x18\x01\x20\
    \x01(\tR\x10collectorClusterB\x07\xfaB\x04r\x02\x10\x01\x123\n\x11access\
    _token_file\x18\x02\x20\x01(\tR\x0faccessTokenFileB\x07\xfaB\x04r\x02\
    \x10\x01\x12\x87\x01\n\x11propagation_modes\x18\x03\x20\x03(\x0e2K.envoy\
    .extensions.tracers.lightstep.v4alpha.LightstepConfig.PropagationModeR\
    \x10propagationModesB\r\xfaB\n\x92\x01\x07\"\x05\x82\x01\x02\x10\x01\"F\
    \n\x0fPropagationMode\x12\t\n\x05ENVOY\x10\0\x12\r\n\tLIGHTSTEP\x10\x01\
    \x12\x06\n\x02B3\x10\x02\x12\x11\n\rTRACE_CONTEXT\x10\x03:,\x9a\xc5\x88\
    \x1e'\n%envoy.config.trace.v3.LightstepConfigBT\n8io.envoyproxy.envoy.ex\
    tensions.tracers.lightstep.v4alphaB\x0eLightstepProtoP\x01\xba\x80\xc8\
    \xd1\x06\x02\x10\x03b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
