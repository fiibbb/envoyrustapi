// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/extensions/compression/gzip/compressor/v3/gzip.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct Gzip {
    // message fields
    pub memory_level: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub compression_level: Gzip_CompressionLevel,
    pub compression_strategy: Gzip_CompressionStrategy,
    pub window_bits: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub chunk_size: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Gzip {
    fn default() -> &'a Gzip {
        <Gzip as ::protobuf::Message>::default_instance()
    }
}

impl Gzip {
    pub fn new() -> Gzip {
        ::std::default::Default::default()
    }

    // .google.protobuf.UInt32Value memory_level = 1;


    pub fn get_memory_level(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.memory_level.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_memory_level(&mut self) {
        self.memory_level.clear();
    }

    pub fn has_memory_level(&self) -> bool {
        self.memory_level.is_some()
    }

    // Param is passed by value, moved
    pub fn set_memory_level(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.memory_level = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_memory_level(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.memory_level.is_none() {
            self.memory_level.set_default();
        }
        self.memory_level.as_mut().unwrap()
    }

    // Take field
    pub fn take_memory_level(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.memory_level.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionLevel compression_level = 2;


    pub fn get_compression_level(&self) -> Gzip_CompressionLevel {
        self.compression_level
    }
    pub fn clear_compression_level(&mut self) {
        self.compression_level = Gzip_CompressionLevel::DEFAULT_COMPRESSION;
    }

    // Param is passed by value, moved
    pub fn set_compression_level(&mut self, v: Gzip_CompressionLevel) {
        self.compression_level = v;
    }

    // .envoy.extensions.compression.gzip.compressor.v3.Gzip.CompressionStrategy compression_strategy = 3;


    pub fn get_compression_strategy(&self) -> Gzip_CompressionStrategy {
        self.compression_strategy
    }
    pub fn clear_compression_strategy(&mut self) {
        self.compression_strategy = Gzip_CompressionStrategy::DEFAULT_STRATEGY;
    }

    // Param is passed by value, moved
    pub fn set_compression_strategy(&mut self, v: Gzip_CompressionStrategy) {
        self.compression_strategy = v;
    }

    // .google.protobuf.UInt32Value window_bits = 4;


    pub fn get_window_bits(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.window_bits.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_window_bits(&mut self) {
        self.window_bits.clear();
    }

    pub fn has_window_bits(&self) -> bool {
        self.window_bits.is_some()
    }

    // Param is passed by value, moved
    pub fn set_window_bits(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.window_bits = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_window_bits(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.window_bits.is_none() {
            self.window_bits.set_default();
        }
        self.window_bits.as_mut().unwrap()
    }

    // Take field
    pub fn take_window_bits(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.window_bits.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.UInt32Value chunk_size = 5;


    pub fn get_chunk_size(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.chunk_size.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_chunk_size(&mut self) {
        self.chunk_size.clear();
    }

    pub fn has_chunk_size(&self) -> bool {
        self.chunk_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_chunk_size(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.chunk_size = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chunk_size(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.chunk_size.is_none() {
            self.chunk_size.set_default();
        }
        self.chunk_size.as_mut().unwrap()
    }

    // Take field
    pub fn take_chunk_size(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.chunk_size.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }
}

impl ::protobuf::Message for Gzip {
    fn is_initialized(&self) -> bool {
        for v in &self.memory_level {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.window_bits {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.chunk_size {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.memory_level)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.compression_level, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.compression_strategy, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.window_bits)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.chunk_size)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.memory_level.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.compression_level != Gzip_CompressionLevel::DEFAULT_COMPRESSION {
            my_size += ::protobuf::rt::enum_size(2, self.compression_level);
        }
        if self.compression_strategy != Gzip_CompressionStrategy::DEFAULT_STRATEGY {
            my_size += ::protobuf::rt::enum_size(3, self.compression_strategy);
        }
        if let Some(ref v) = self.window_bits.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.chunk_size.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.memory_level.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.compression_level != Gzip_CompressionLevel::DEFAULT_COMPRESSION {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.compression_level))?;
        }
        if self.compression_strategy != Gzip_CompressionStrategy::DEFAULT_STRATEGY {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.compression_strategy))?;
        }
        if let Some(ref v) = self.window_bits.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.chunk_size.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Gzip {
        Gzip::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "memory_level",
                |m: &Gzip| { &m.memory_level },
                |m: &mut Gzip| { &mut m.memory_level },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Gzip_CompressionLevel>>(
                "compression_level",
                |m: &Gzip| { &m.compression_level },
                |m: &mut Gzip| { &mut m.compression_level },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Gzip_CompressionStrategy>>(
                "compression_strategy",
                |m: &Gzip| { &m.compression_strategy },
                |m: &mut Gzip| { &mut m.compression_strategy },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "window_bits",
                |m: &Gzip| { &m.window_bits },
                |m: &mut Gzip| { &mut m.window_bits },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "chunk_size",
                |m: &Gzip| { &m.chunk_size },
                |m: &mut Gzip| { &mut m.chunk_size },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Gzip>(
                "Gzip",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Gzip {
        static instance: ::protobuf::rt::LazyV2<Gzip> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Gzip::new)
    }
}

impl ::protobuf::Clear for Gzip {
    fn clear(&mut self) {
        self.memory_level.clear();
        self.compression_level = Gzip_CompressionLevel::DEFAULT_COMPRESSION;
        self.compression_strategy = Gzip_CompressionStrategy::DEFAULT_STRATEGY;
        self.window_bits.clear();
        self.chunk_size.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Gzip {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Gzip {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Gzip_CompressionStrategy {
    DEFAULT_STRATEGY = 0,
    FILTERED = 1,
    HUFFMAN_ONLY = 2,
    RLE = 3,
    FIXED = 4,
}

impl ::protobuf::ProtobufEnum for Gzip_CompressionStrategy {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Gzip_CompressionStrategy> {
        match value {
            0 => ::std::option::Option::Some(Gzip_CompressionStrategy::DEFAULT_STRATEGY),
            1 => ::std::option::Option::Some(Gzip_CompressionStrategy::FILTERED),
            2 => ::std::option::Option::Some(Gzip_CompressionStrategy::HUFFMAN_ONLY),
            3 => ::std::option::Option::Some(Gzip_CompressionStrategy::RLE),
            4 => ::std::option::Option::Some(Gzip_CompressionStrategy::FIXED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Gzip_CompressionStrategy] = &[
            Gzip_CompressionStrategy::DEFAULT_STRATEGY,
            Gzip_CompressionStrategy::FILTERED,
            Gzip_CompressionStrategy::HUFFMAN_ONLY,
            Gzip_CompressionStrategy::RLE,
            Gzip_CompressionStrategy::FIXED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Gzip_CompressionStrategy>("Gzip.CompressionStrategy", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Gzip_CompressionStrategy {
}

impl ::std::default::Default for Gzip_CompressionStrategy {
    fn default() -> Self {
        Gzip_CompressionStrategy::DEFAULT_STRATEGY
    }
}

impl ::protobuf::reflect::ProtobufValue for Gzip_CompressionStrategy {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

// Note: you cannot use pattern matching for enums with allow_alias option
#[derive(Clone,Eq,Debug)]
pub enum Gzip_CompressionLevel {
    DEFAULT_COMPRESSION, // 0
    BEST_SPEED, // 1
    COMPRESSION_LEVEL_1, // 1
    COMPRESSION_LEVEL_2, // 2
    COMPRESSION_LEVEL_3, // 3
    COMPRESSION_LEVEL_4, // 4
    COMPRESSION_LEVEL_5, // 5
    COMPRESSION_LEVEL_6, // 6
    COMPRESSION_LEVEL_7, // 7
    COMPRESSION_LEVEL_8, // 8
    COMPRESSION_LEVEL_9, // 9
    BEST_COMPRESSION, // 9
}

impl ::std::cmp::PartialEq for Gzip_CompressionLevel {
    fn eq(&self, other: &Self) -> bool {
        ::protobuf::ProtobufEnum::value(self) == ::protobuf::ProtobufEnum::value(other)
    }
}

impl ::std::hash::Hash for Gzip_CompressionLevel {
    fn hash<H : ::std::hash::Hasher>(&self, state: &mut H) {
        state.write_i32(::protobuf::ProtobufEnum::value(self))
    }
}

impl ::protobuf::ProtobufEnum for Gzip_CompressionLevel {
    fn value(&self) -> i32 {
        match *self {
            Gzip_CompressionLevel::DEFAULT_COMPRESSION => 0,
            Gzip_CompressionLevel::BEST_SPEED => 1,
            Gzip_CompressionLevel::COMPRESSION_LEVEL_1 => 1,
            Gzip_CompressionLevel::COMPRESSION_LEVEL_2 => 2,
            Gzip_CompressionLevel::COMPRESSION_LEVEL_3 => 3,
            Gzip_CompressionLevel::COMPRESSION_LEVEL_4 => 4,
            Gzip_CompressionLevel::COMPRESSION_LEVEL_5 => 5,
            Gzip_CompressionLevel::COMPRESSION_LEVEL_6 => 6,
            Gzip_CompressionLevel::COMPRESSION_LEVEL_7 => 7,
            Gzip_CompressionLevel::COMPRESSION_LEVEL_8 => 8,
            Gzip_CompressionLevel::COMPRESSION_LEVEL_9 => 9,
            Gzip_CompressionLevel::BEST_COMPRESSION => 9,
        }
    }

    fn from_i32(value: i32) -> ::std::option::Option<Gzip_CompressionLevel> {
        match value {
            0 => ::std::option::Option::Some(Gzip_CompressionLevel::DEFAULT_COMPRESSION),
            1 => ::std::option::Option::Some(Gzip_CompressionLevel::BEST_SPEED),
            2 => ::std::option::Option::Some(Gzip_CompressionLevel::COMPRESSION_LEVEL_2),
            3 => ::std::option::Option::Some(Gzip_CompressionLevel::COMPRESSION_LEVEL_3),
            4 => ::std::option::Option::Some(Gzip_CompressionLevel::COMPRESSION_LEVEL_4),
            5 => ::std::option::Option::Some(Gzip_CompressionLevel::COMPRESSION_LEVEL_5),
            6 => ::std::option::Option::Some(Gzip_CompressionLevel::COMPRESSION_LEVEL_6),
            7 => ::std::option::Option::Some(Gzip_CompressionLevel::COMPRESSION_LEVEL_7),
            8 => ::std::option::Option::Some(Gzip_CompressionLevel::COMPRESSION_LEVEL_8),
            9 => ::std::option::Option::Some(Gzip_CompressionLevel::COMPRESSION_LEVEL_9),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Gzip_CompressionLevel] = &[
            Gzip_CompressionLevel::DEFAULT_COMPRESSION,
            Gzip_CompressionLevel::BEST_SPEED,
            Gzip_CompressionLevel::COMPRESSION_LEVEL_1,
            Gzip_CompressionLevel::COMPRESSION_LEVEL_2,
            Gzip_CompressionLevel::COMPRESSION_LEVEL_3,
            Gzip_CompressionLevel::COMPRESSION_LEVEL_4,
            Gzip_CompressionLevel::COMPRESSION_LEVEL_5,
            Gzip_CompressionLevel::COMPRESSION_LEVEL_6,
            Gzip_CompressionLevel::COMPRESSION_LEVEL_7,
            Gzip_CompressionLevel::COMPRESSION_LEVEL_8,
            Gzip_CompressionLevel::COMPRESSION_LEVEL_9,
            Gzip_CompressionLevel::BEST_COMPRESSION,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Gzip_CompressionLevel>("Gzip.CompressionLevel", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Gzip_CompressionLevel {
}

impl ::std::default::Default for Gzip_CompressionLevel {
    fn default() -> Self {
        Gzip_CompressionLevel::DEFAULT_COMPRESSION
    }
}

impl ::protobuf::reflect::ProtobufValue for Gzip_CompressionLevel {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n:envoy/extensions/compression/gzip/compressor/v3/gzip.proto\x12/envoy.\
    extensions.compression.gzip.compressor.v3\x1a\x1egoogle/protobuf/wrapper\
    s.proto\x1a\x1dudpa/annotations/status.proto\x1a!udpa/annotations/versio\
    ning.proto\x1a\x17validate/validate.proto\"\x89\x07\n\x04Gzip\x12J\n\x0c\
    memory_level\x18\x01\x20\x01(\x0b2\x1c.google.protobuf.UInt32ValueR\x0bm\
    emoryLevelB\t\xfaB\x06*\x04\x18\t(\x01\x12}\n\x11compression_level\x18\
    \x02\x20\x01(\x0e2F.envoy.extensions.compression.gzip.compressor.v3.Gzip\
    .CompressionLevelR\x10compressionLevelB\x08\xfaB\x05\x82\x01\x02\x10\x01\
    \x12\x86\x01\n\x14compression_strategy\x18\x03\x20\x01(\x0e2I.envoy.exte\
    nsions.compression.gzip.compressor.v3.Gzip.CompressionStrategyR\x13compr\
    essionStrategyB\x08\xfaB\x05\x82\x01\x02\x10\x01\x12H\n\x0bwindow_bits\
    \x18\x04\x20\x01(\x0b2\x1c.google.protobuf.UInt32ValueR\nwindowBitsB\t\
    \xfaB\x06*\x04\x18\x0f(\t\x12I\n\nchunk_size\x18\x05\x20\x01(\x0b2\x1c.g\
    oogle.protobuf.UInt32ValueR\tchunkSizeB\x0c\xfaB\t*\x07\x18\x80\x80\x04(\
    \x80\x20\"_\n\x13CompressionStrategy\x12\x14\n\x10DEFAULT_STRATEGY\x10\0\
    \x12\x0c\n\x08FILTERED\x10\x01\x12\x10\n\x0cHUFFMAN_ONLY\x10\x02\x12\x07\
    \n\x03RLE\x10\x03\x12\t\n\x05FIXED\x10\x04\"\xb6\x02\n\x10CompressionLev\
    el\x12\x17\n\x13DEFAULT_COMPRESSION\x10\0\x12\x0e\n\nBEST_SPEED\x10\x01\
    \x12\x17\n\x13COMPRESSION_LEVEL_1\x10\x01\x12\x17\n\x13COMPRESSION_LEVEL\
    _2\x10\x02\x12\x17\n\x13COMPRESSION_LEVEL_3\x10\x03\x12\x17\n\x13COMPRES\
    SION_LEVEL_4\x10\x04\x12\x17\n\x13COMPRESSION_LEVEL_5\x10\x05\x12\x17\n\
    \x13COMPRESSION_LEVEL_6\x10\x06\x12\x17\n\x13COMPRESSION_LEVEL_7\x10\x07\
    \x12\x17\n\x13COMPRESSION_LEVEL_8\x10\x08\x12\x17\n\x13COMPRESSION_LEVEL\
    _9\x10\t\x12\x14\n\x10BEST_COMPRESSION\x10\t\x1a\x02\x10\x01BT\n=io.envo\
    yproxy.envoy.extensions.compression.gzip.compressor.v3B\tGzipProtoP\x01\
    \xba\x80\xc8\xd1\x06\x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
