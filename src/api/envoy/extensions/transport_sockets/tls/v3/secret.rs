// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/extensions/transport_sockets/tls/v3/secret.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct GenericSecret {
    // message fields
    pub secret: ::protobuf::SingularPtrField<super::base::DataSource>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GenericSecret {
    fn default() -> &'a GenericSecret {
        <GenericSecret as ::protobuf::Message>::default_instance()
    }
}

impl GenericSecret {
    pub fn new() -> GenericSecret {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.DataSource secret = 1;


    pub fn get_secret(&self) -> &super::base::DataSource {
        self.secret.as_ref().unwrap_or_else(|| <super::base::DataSource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_secret(&mut self) {
        self.secret.clear();
    }

    pub fn has_secret(&self) -> bool {
        self.secret.is_some()
    }

    // Param is passed by value, moved
    pub fn set_secret(&mut self, v: super::base::DataSource) {
        self.secret = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_secret(&mut self) -> &mut super::base::DataSource {
        if self.secret.is_none() {
            self.secret.set_default();
        }
        self.secret.as_mut().unwrap()
    }

    // Take field
    pub fn take_secret(&mut self) -> super::base::DataSource {
        self.secret.take().unwrap_or_else(|| super::base::DataSource::new())
    }
}

impl ::protobuf::Message for GenericSecret {
    fn is_initialized(&self) -> bool {
        for v in &self.secret {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.secret)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.secret.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.secret.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GenericSecret {
        GenericSecret::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::DataSource>>(
                "secret",
                |m: &GenericSecret| { &m.secret },
                |m: &mut GenericSecret| { &mut m.secret },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GenericSecret>(
                "GenericSecret",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GenericSecret {
        static instance: ::protobuf::rt::LazyV2<GenericSecret> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GenericSecret::new)
    }
}

impl ::protobuf::Clear for GenericSecret {
    fn clear(&mut self) {
        self.secret.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GenericSecret {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenericSecret {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SdsSecretConfig {
    // message fields
    pub name: ::std::string::String,
    pub sds_config: ::protobuf::SingularPtrField<super::config_source::ConfigSource>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SdsSecretConfig {
    fn default() -> &'a SdsSecretConfig {
        <SdsSecretConfig as ::protobuf::Message>::default_instance()
    }
}

impl SdsSecretConfig {
    pub fn new() -> SdsSecretConfig {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .envoy.config.core.v3.ConfigSource sds_config = 2;


    pub fn get_sds_config(&self) -> &super::config_source::ConfigSource {
        self.sds_config.as_ref().unwrap_or_else(|| <super::config_source::ConfigSource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_sds_config(&mut self) {
        self.sds_config.clear();
    }

    pub fn has_sds_config(&self) -> bool {
        self.sds_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sds_config(&mut self, v: super::config_source::ConfigSource) {
        self.sds_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sds_config(&mut self) -> &mut super::config_source::ConfigSource {
        if self.sds_config.is_none() {
            self.sds_config.set_default();
        }
        self.sds_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_sds_config(&mut self) -> super::config_source::ConfigSource {
        self.sds_config.take().unwrap_or_else(|| super::config_source::ConfigSource::new())
    }
}

impl ::protobuf::Message for SdsSecretConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.sds_config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sds_config)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(ref v) = self.sds_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(ref v) = self.sds_config.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SdsSecretConfig {
        SdsSecretConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &SdsSecretConfig| { &m.name },
                |m: &mut SdsSecretConfig| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::config_source::ConfigSource>>(
                "sds_config",
                |m: &SdsSecretConfig| { &m.sds_config },
                |m: &mut SdsSecretConfig| { &mut m.sds_config },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SdsSecretConfig>(
                "SdsSecretConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SdsSecretConfig {
        static instance: ::protobuf::rt::LazyV2<SdsSecretConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SdsSecretConfig::new)
    }
}

impl ::protobuf::Clear for SdsSecretConfig {
    fn clear(&mut self) {
        self.name.clear();
        self.sds_config.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SdsSecretConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SdsSecretConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Secret {
    // message fields
    pub name: ::std::string::String,
    // message oneof groups
    pub field_type: ::std::option::Option<Secret_oneof_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Secret {
    fn default() -> &'a Secret {
        <Secret as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Secret_oneof_type {
    tls_certificate(super::common::TlsCertificate),
    session_ticket_keys(super::common::TlsSessionTicketKeys),
    validation_context(super::common::CertificateValidationContext),
    generic_secret(GenericSecret),
}

impl Secret {
    pub fn new() -> Secret {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .envoy.extensions.transport_sockets.tls.v3.TlsCertificate tls_certificate = 2;


    pub fn get_tls_certificate(&self) -> &super::common::TlsCertificate {
        match self.field_type {
            ::std::option::Option::Some(Secret_oneof_type::tls_certificate(ref v)) => v,
            _ => <super::common::TlsCertificate as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_tls_certificate(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_tls_certificate(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(Secret_oneof_type::tls_certificate(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_tls_certificate(&mut self, v: super::common::TlsCertificate) {
        self.field_type = ::std::option::Option::Some(Secret_oneof_type::tls_certificate(v))
    }

    // Mutable pointer to the field.
    pub fn mut_tls_certificate(&mut self) -> &mut super::common::TlsCertificate {
        if let ::std::option::Option::Some(Secret_oneof_type::tls_certificate(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(Secret_oneof_type::tls_certificate(super::common::TlsCertificate::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(Secret_oneof_type::tls_certificate(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_tls_certificate(&mut self) -> super::common::TlsCertificate {
        if self.has_tls_certificate() {
            match self.field_type.take() {
                ::std::option::Option::Some(Secret_oneof_type::tls_certificate(v)) => v,
                _ => panic!(),
            }
        } else {
            super::common::TlsCertificate::new()
        }
    }

    // .envoy.extensions.transport_sockets.tls.v3.TlsSessionTicketKeys session_ticket_keys = 3;


    pub fn get_session_ticket_keys(&self) -> &super::common::TlsSessionTicketKeys {
        match self.field_type {
            ::std::option::Option::Some(Secret_oneof_type::session_ticket_keys(ref v)) => v,
            _ => <super::common::TlsSessionTicketKeys as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_session_ticket_keys(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_session_ticket_keys(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(Secret_oneof_type::session_ticket_keys(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_session_ticket_keys(&mut self, v: super::common::TlsSessionTicketKeys) {
        self.field_type = ::std::option::Option::Some(Secret_oneof_type::session_ticket_keys(v))
    }

    // Mutable pointer to the field.
    pub fn mut_session_ticket_keys(&mut self) -> &mut super::common::TlsSessionTicketKeys {
        if let ::std::option::Option::Some(Secret_oneof_type::session_ticket_keys(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(Secret_oneof_type::session_ticket_keys(super::common::TlsSessionTicketKeys::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(Secret_oneof_type::session_ticket_keys(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_session_ticket_keys(&mut self) -> super::common::TlsSessionTicketKeys {
        if self.has_session_ticket_keys() {
            match self.field_type.take() {
                ::std::option::Option::Some(Secret_oneof_type::session_ticket_keys(v)) => v,
                _ => panic!(),
            }
        } else {
            super::common::TlsSessionTicketKeys::new()
        }
    }

    // .envoy.extensions.transport_sockets.tls.v3.CertificateValidationContext validation_context = 4;


    pub fn get_validation_context(&self) -> &super::common::CertificateValidationContext {
        match self.field_type {
            ::std::option::Option::Some(Secret_oneof_type::validation_context(ref v)) => v,
            _ => <super::common::CertificateValidationContext as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_validation_context(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_validation_context(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(Secret_oneof_type::validation_context(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_validation_context(&mut self, v: super::common::CertificateValidationContext) {
        self.field_type = ::std::option::Option::Some(Secret_oneof_type::validation_context(v))
    }

    // Mutable pointer to the field.
    pub fn mut_validation_context(&mut self) -> &mut super::common::CertificateValidationContext {
        if let ::std::option::Option::Some(Secret_oneof_type::validation_context(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(Secret_oneof_type::validation_context(super::common::CertificateValidationContext::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(Secret_oneof_type::validation_context(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_validation_context(&mut self) -> super::common::CertificateValidationContext {
        if self.has_validation_context() {
            match self.field_type.take() {
                ::std::option::Option::Some(Secret_oneof_type::validation_context(v)) => v,
                _ => panic!(),
            }
        } else {
            super::common::CertificateValidationContext::new()
        }
    }

    // .envoy.extensions.transport_sockets.tls.v3.GenericSecret generic_secret = 5;


    pub fn get_generic_secret(&self) -> &GenericSecret {
        match self.field_type {
            ::std::option::Option::Some(Secret_oneof_type::generic_secret(ref v)) => v,
            _ => <GenericSecret as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_generic_secret(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_generic_secret(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(Secret_oneof_type::generic_secret(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_generic_secret(&mut self, v: GenericSecret) {
        self.field_type = ::std::option::Option::Some(Secret_oneof_type::generic_secret(v))
    }

    // Mutable pointer to the field.
    pub fn mut_generic_secret(&mut self) -> &mut GenericSecret {
        if let ::std::option::Option::Some(Secret_oneof_type::generic_secret(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(Secret_oneof_type::generic_secret(GenericSecret::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(Secret_oneof_type::generic_secret(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_generic_secret(&mut self) -> GenericSecret {
        if self.has_generic_secret() {
            match self.field_type.take() {
                ::std::option::Option::Some(Secret_oneof_type::generic_secret(v)) => v,
                _ => panic!(),
            }
        } else {
            GenericSecret::new()
        }
    }
}

impl ::protobuf::Message for Secret {
    fn is_initialized(&self) -> bool {
        if let Some(Secret_oneof_type::tls_certificate(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Secret_oneof_type::session_ticket_keys(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Secret_oneof_type::validation_context(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Secret_oneof_type::generic_secret(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(Secret_oneof_type::tls_certificate(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(Secret_oneof_type::session_ticket_keys(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(Secret_oneof_type::validation_context(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(Secret_oneof_type::generic_secret(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let ::std::option::Option::Some(ref v) = self.field_type {
            match v {
                &Secret_oneof_type::tls_certificate(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Secret_oneof_type::session_ticket_keys(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Secret_oneof_type::validation_context(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Secret_oneof_type::generic_secret(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let ::std::option::Option::Some(ref v) = self.field_type {
            match v {
                &Secret_oneof_type::tls_certificate(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Secret_oneof_type::session_ticket_keys(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Secret_oneof_type::validation_context(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Secret_oneof_type::generic_secret(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Secret {
        Secret::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Secret| { &m.name },
                |m: &mut Secret| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::common::TlsCertificate>(
                "tls_certificate",
                Secret::has_tls_certificate,
                Secret::get_tls_certificate,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::common::TlsSessionTicketKeys>(
                "session_ticket_keys",
                Secret::has_session_ticket_keys,
                Secret::get_session_ticket_keys,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::common::CertificateValidationContext>(
                "validation_context",
                Secret::has_validation_context,
                Secret::get_validation_context,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, GenericSecret>(
                "generic_secret",
                Secret::has_generic_secret,
                Secret::get_generic_secret,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Secret>(
                "Secret",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Secret {
        static instance: ::protobuf::rt::LazyV2<Secret> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Secret::new)
    }
}

impl ::protobuf::Clear for Secret {
    fn clear(&mut self) {
        self.name.clear();
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.field_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Secret {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Secret {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n6envoy/extensions/transport_sockets/tls/v3/secret.proto\x12)envoy.exte\
    nsions.transport_sockets.tls.v3\x1a\x1fenvoy/config/core/v3/base.proto\
    \x1a(envoy/config/core/v3/config_source.proto\x1a6envoy/extensions/trans\
    port_sockets/tls/v3/common.proto\x1a\x1eudpa/annotations/migrate.proto\
    \x1a\x20udpa/annotations/sensitive.proto\x1a\x1dudpa/annotations/status.\
    proto\x1a!udpa/annotations/versioning.proto\x1a\x17validate/validate.pro\
    to\"y\n\rGenericSecret\x12@\n\x06secret\x18\x01\x20\x01(\x0b2\x20.envoy.\
    config.core.v3.DataSourceR\x06secretB\x06\xb8\xb7\x8b\xa4\x02\x01:&\x9a\
    \xc5\x88\x1e!\n\x1fenvoy.api.v2.auth.GenericSecret\"\x9b\x01\n\x0fSdsSec\
    retConfig\x12\x1b\n\x04name\x18\x01\x20\x01(\tR\x04nameB\x07\xfaB\x04r\
    \x02\x10\x01\x12A\n\nsds_config\x18\x02\x20\x01(\x0b2\".envoy.config.cor\
    e.v3.ConfigSourceR\tsdsConfig:(\x9a\xc5\x88\x1e#\n!envoy.api.v2.auth.Sds\
    SecretConfig\"\xfb\x03\n\x06Secret\x12\x12\n\x04name\x18\x01\x20\x01(\tR\
    \x04name\x12d\n\x0ftls_certificate\x18\x02\x20\x01(\x0b29.envoy.extensio\
    ns.transport_sockets.tls.v3.TlsCertificateH\0R\x0etlsCertificate\x12q\n\
    \x13session_ticket_keys\x18\x03\x20\x01(\x0b2?.envoy.extensions.transpor\
    t_sockets.tls.v3.TlsSessionTicketKeysH\0R\x11sessionTicketKeys\x12x\n\
    \x12validation_context\x18\x04\x20\x01(\x0b2G.envoy.extensions.transport\
    _sockets.tls.v3.CertificateValidationContextH\0R\x11validationContext\
    \x12a\n\x0egeneric_secret\x18\x05\x20\x01(\x0b28.envoy.extensions.transp\
    ort_sockets.tls.v3.GenericSecretH\0R\rgenericSecretB\x06\n\x04type:\x1f\
    \x9a\xc5\x88\x1e\x1a\n\x18envoy.api.v2.auth.SecretBP\n7io.envoyproxy.env\
    oy.extensions.transport_sockets.tls.v3B\x0bSecretProtoP\x01\xba\x80\xc8\
    \xd1\x06\x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
