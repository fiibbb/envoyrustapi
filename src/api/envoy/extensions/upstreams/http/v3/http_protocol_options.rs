// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/extensions/upstreams/http/v3/http_protocol_options.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct HttpProtocolOptions {
    // message fields
    pub common_http_protocol_options: ::protobuf::SingularPtrField<super::protocol::HttpProtocolOptions>,
    pub upstream_http_protocol_options: ::protobuf::SingularPtrField<super::protocol::UpstreamHttpProtocolOptions>,
    // message oneof groups
    pub upstream_protocol_options: ::std::option::Option<HttpProtocolOptions_oneof_upstream_protocol_options>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HttpProtocolOptions {
    fn default() -> &'a HttpProtocolOptions {
        <HttpProtocolOptions as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum HttpProtocolOptions_oneof_upstream_protocol_options {
    explicit_http_config(HttpProtocolOptions_ExplicitHttpConfig),
    use_downstream_protocol_config(HttpProtocolOptions_UseDownstreamHttpConfig),
}

impl HttpProtocolOptions {
    pub fn new() -> HttpProtocolOptions {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.HttpProtocolOptions common_http_protocol_options = 1;


    pub fn get_common_http_protocol_options(&self) -> &super::protocol::HttpProtocolOptions {
        self.common_http_protocol_options.as_ref().unwrap_or_else(|| <super::protocol::HttpProtocolOptions as ::protobuf::Message>::default_instance())
    }
    pub fn clear_common_http_protocol_options(&mut self) {
        self.common_http_protocol_options.clear();
    }

    pub fn has_common_http_protocol_options(&self) -> bool {
        self.common_http_protocol_options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_common_http_protocol_options(&mut self, v: super::protocol::HttpProtocolOptions) {
        self.common_http_protocol_options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_common_http_protocol_options(&mut self) -> &mut super::protocol::HttpProtocolOptions {
        if self.common_http_protocol_options.is_none() {
            self.common_http_protocol_options.set_default();
        }
        self.common_http_protocol_options.as_mut().unwrap()
    }

    // Take field
    pub fn take_common_http_protocol_options(&mut self) -> super::protocol::HttpProtocolOptions {
        self.common_http_protocol_options.take().unwrap_or_else(|| super::protocol::HttpProtocolOptions::new())
    }

    // .envoy.config.core.v3.UpstreamHttpProtocolOptions upstream_http_protocol_options = 2;


    pub fn get_upstream_http_protocol_options(&self) -> &super::protocol::UpstreamHttpProtocolOptions {
        self.upstream_http_protocol_options.as_ref().unwrap_or_else(|| <super::protocol::UpstreamHttpProtocolOptions as ::protobuf::Message>::default_instance())
    }
    pub fn clear_upstream_http_protocol_options(&mut self) {
        self.upstream_http_protocol_options.clear();
    }

    pub fn has_upstream_http_protocol_options(&self) -> bool {
        self.upstream_http_protocol_options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upstream_http_protocol_options(&mut self, v: super::protocol::UpstreamHttpProtocolOptions) {
        self.upstream_http_protocol_options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_upstream_http_protocol_options(&mut self) -> &mut super::protocol::UpstreamHttpProtocolOptions {
        if self.upstream_http_protocol_options.is_none() {
            self.upstream_http_protocol_options.set_default();
        }
        self.upstream_http_protocol_options.as_mut().unwrap()
    }

    // Take field
    pub fn take_upstream_http_protocol_options(&mut self) -> super::protocol::UpstreamHttpProtocolOptions {
        self.upstream_http_protocol_options.take().unwrap_or_else(|| super::protocol::UpstreamHttpProtocolOptions::new())
    }

    // .envoy.extensions.upstreams.http.v3.HttpProtocolOptions.ExplicitHttpConfig explicit_http_config = 3;


    pub fn get_explicit_http_config(&self) -> &HttpProtocolOptions_ExplicitHttpConfig {
        match self.upstream_protocol_options {
            ::std::option::Option::Some(HttpProtocolOptions_oneof_upstream_protocol_options::explicit_http_config(ref v)) => v,
            _ => <HttpProtocolOptions_ExplicitHttpConfig as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_explicit_http_config(&mut self) {
        self.upstream_protocol_options = ::std::option::Option::None;
    }

    pub fn has_explicit_http_config(&self) -> bool {
        match self.upstream_protocol_options {
            ::std::option::Option::Some(HttpProtocolOptions_oneof_upstream_protocol_options::explicit_http_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_explicit_http_config(&mut self, v: HttpProtocolOptions_ExplicitHttpConfig) {
        self.upstream_protocol_options = ::std::option::Option::Some(HttpProtocolOptions_oneof_upstream_protocol_options::explicit_http_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_explicit_http_config(&mut self) -> &mut HttpProtocolOptions_ExplicitHttpConfig {
        if let ::std::option::Option::Some(HttpProtocolOptions_oneof_upstream_protocol_options::explicit_http_config(_)) = self.upstream_protocol_options {
        } else {
            self.upstream_protocol_options = ::std::option::Option::Some(HttpProtocolOptions_oneof_upstream_protocol_options::explicit_http_config(HttpProtocolOptions_ExplicitHttpConfig::new()));
        }
        match self.upstream_protocol_options {
            ::std::option::Option::Some(HttpProtocolOptions_oneof_upstream_protocol_options::explicit_http_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_explicit_http_config(&mut self) -> HttpProtocolOptions_ExplicitHttpConfig {
        if self.has_explicit_http_config() {
            match self.upstream_protocol_options.take() {
                ::std::option::Option::Some(HttpProtocolOptions_oneof_upstream_protocol_options::explicit_http_config(v)) => v,
                _ => panic!(),
            }
        } else {
            HttpProtocolOptions_ExplicitHttpConfig::new()
        }
    }

    // .envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstreamHttpConfig use_downstream_protocol_config = 4;


    pub fn get_use_downstream_protocol_config(&self) -> &HttpProtocolOptions_UseDownstreamHttpConfig {
        match self.upstream_protocol_options {
            ::std::option::Option::Some(HttpProtocolOptions_oneof_upstream_protocol_options::use_downstream_protocol_config(ref v)) => v,
            _ => <HttpProtocolOptions_UseDownstreamHttpConfig as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_use_downstream_protocol_config(&mut self) {
        self.upstream_protocol_options = ::std::option::Option::None;
    }

    pub fn has_use_downstream_protocol_config(&self) -> bool {
        match self.upstream_protocol_options {
            ::std::option::Option::Some(HttpProtocolOptions_oneof_upstream_protocol_options::use_downstream_protocol_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_use_downstream_protocol_config(&mut self, v: HttpProtocolOptions_UseDownstreamHttpConfig) {
        self.upstream_protocol_options = ::std::option::Option::Some(HttpProtocolOptions_oneof_upstream_protocol_options::use_downstream_protocol_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_use_downstream_protocol_config(&mut self) -> &mut HttpProtocolOptions_UseDownstreamHttpConfig {
        if let ::std::option::Option::Some(HttpProtocolOptions_oneof_upstream_protocol_options::use_downstream_protocol_config(_)) = self.upstream_protocol_options {
        } else {
            self.upstream_protocol_options = ::std::option::Option::Some(HttpProtocolOptions_oneof_upstream_protocol_options::use_downstream_protocol_config(HttpProtocolOptions_UseDownstreamHttpConfig::new()));
        }
        match self.upstream_protocol_options {
            ::std::option::Option::Some(HttpProtocolOptions_oneof_upstream_protocol_options::use_downstream_protocol_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_use_downstream_protocol_config(&mut self) -> HttpProtocolOptions_UseDownstreamHttpConfig {
        if self.has_use_downstream_protocol_config() {
            match self.upstream_protocol_options.take() {
                ::std::option::Option::Some(HttpProtocolOptions_oneof_upstream_protocol_options::use_downstream_protocol_config(v)) => v,
                _ => panic!(),
            }
        } else {
            HttpProtocolOptions_UseDownstreamHttpConfig::new()
        }
    }
}

impl ::protobuf::Message for HttpProtocolOptions {
    fn is_initialized(&self) -> bool {
        for v in &self.common_http_protocol_options {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.upstream_http_protocol_options {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(HttpProtocolOptions_oneof_upstream_protocol_options::explicit_http_config(ref v)) = self.upstream_protocol_options {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(HttpProtocolOptions_oneof_upstream_protocol_options::use_downstream_protocol_config(ref v)) = self.upstream_protocol_options {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.common_http_protocol_options)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.upstream_http_protocol_options)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.upstream_protocol_options = ::std::option::Option::Some(HttpProtocolOptions_oneof_upstream_protocol_options::explicit_http_config(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.upstream_protocol_options = ::std::option::Option::Some(HttpProtocolOptions_oneof_upstream_protocol_options::use_downstream_protocol_config(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.common_http_protocol_options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.upstream_http_protocol_options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.upstream_protocol_options {
            match v {
                &HttpProtocolOptions_oneof_upstream_protocol_options::explicit_http_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &HttpProtocolOptions_oneof_upstream_protocol_options::use_downstream_protocol_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.common_http_protocol_options.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.upstream_http_protocol_options.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.upstream_protocol_options {
            match v {
                &HttpProtocolOptions_oneof_upstream_protocol_options::explicit_http_config(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &HttpProtocolOptions_oneof_upstream_protocol_options::use_downstream_protocol_config(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HttpProtocolOptions {
        HttpProtocolOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::protocol::HttpProtocolOptions>>(
                "common_http_protocol_options",
                |m: &HttpProtocolOptions| { &m.common_http_protocol_options },
                |m: &mut HttpProtocolOptions| { &mut m.common_http_protocol_options },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::protocol::UpstreamHttpProtocolOptions>>(
                "upstream_http_protocol_options",
                |m: &HttpProtocolOptions| { &m.upstream_http_protocol_options },
                |m: &mut HttpProtocolOptions| { &mut m.upstream_http_protocol_options },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, HttpProtocolOptions_ExplicitHttpConfig>(
                "explicit_http_config",
                HttpProtocolOptions::has_explicit_http_config,
                HttpProtocolOptions::get_explicit_http_config,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, HttpProtocolOptions_UseDownstreamHttpConfig>(
                "use_downstream_protocol_config",
                HttpProtocolOptions::has_use_downstream_protocol_config,
                HttpProtocolOptions::get_use_downstream_protocol_config,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HttpProtocolOptions>(
                "HttpProtocolOptions",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HttpProtocolOptions {
        static instance: ::protobuf::rt::LazyV2<HttpProtocolOptions> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HttpProtocolOptions::new)
    }
}

impl ::protobuf::Clear for HttpProtocolOptions {
    fn clear(&mut self) {
        self.common_http_protocol_options.clear();
        self.upstream_http_protocol_options.clear();
        self.upstream_protocol_options = ::std::option::Option::None;
        self.upstream_protocol_options = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HttpProtocolOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpProtocolOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HttpProtocolOptions_ExplicitHttpConfig {
    // message oneof groups
    pub protocol_config: ::std::option::Option<HttpProtocolOptions_ExplicitHttpConfig_oneof_protocol_config>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HttpProtocolOptions_ExplicitHttpConfig {
    fn default() -> &'a HttpProtocolOptions_ExplicitHttpConfig {
        <HttpProtocolOptions_ExplicitHttpConfig as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum HttpProtocolOptions_ExplicitHttpConfig_oneof_protocol_config {
    http_protocol_options(super::protocol::Http1ProtocolOptions),
    http2_protocol_options(super::protocol::Http2ProtocolOptions),
}

impl HttpProtocolOptions_ExplicitHttpConfig {
    pub fn new() -> HttpProtocolOptions_ExplicitHttpConfig {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.Http1ProtocolOptions http_protocol_options = 1;


    pub fn get_http_protocol_options(&self) -> &super::protocol::Http1ProtocolOptions {
        match self.protocol_config {
            ::std::option::Option::Some(HttpProtocolOptions_ExplicitHttpConfig_oneof_protocol_config::http_protocol_options(ref v)) => v,
            _ => <super::protocol::Http1ProtocolOptions as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_http_protocol_options(&mut self) {
        self.protocol_config = ::std::option::Option::None;
    }

    pub fn has_http_protocol_options(&self) -> bool {
        match self.protocol_config {
            ::std::option::Option::Some(HttpProtocolOptions_ExplicitHttpConfig_oneof_protocol_config::http_protocol_options(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_http_protocol_options(&mut self, v: super::protocol::Http1ProtocolOptions) {
        self.protocol_config = ::std::option::Option::Some(HttpProtocolOptions_ExplicitHttpConfig_oneof_protocol_config::http_protocol_options(v))
    }

    // Mutable pointer to the field.
    pub fn mut_http_protocol_options(&mut self) -> &mut super::protocol::Http1ProtocolOptions {
        if let ::std::option::Option::Some(HttpProtocolOptions_ExplicitHttpConfig_oneof_protocol_config::http_protocol_options(_)) = self.protocol_config {
        } else {
            self.protocol_config = ::std::option::Option::Some(HttpProtocolOptions_ExplicitHttpConfig_oneof_protocol_config::http_protocol_options(super::protocol::Http1ProtocolOptions::new()));
        }
        match self.protocol_config {
            ::std::option::Option::Some(HttpProtocolOptions_ExplicitHttpConfig_oneof_protocol_config::http_protocol_options(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_http_protocol_options(&mut self) -> super::protocol::Http1ProtocolOptions {
        if self.has_http_protocol_options() {
            match self.protocol_config.take() {
                ::std::option::Option::Some(HttpProtocolOptions_ExplicitHttpConfig_oneof_protocol_config::http_protocol_options(v)) => v,
                _ => panic!(),
            }
        } else {
            super::protocol::Http1ProtocolOptions::new()
        }
    }

    // .envoy.config.core.v3.Http2ProtocolOptions http2_protocol_options = 2;


    pub fn get_http2_protocol_options(&self) -> &super::protocol::Http2ProtocolOptions {
        match self.protocol_config {
            ::std::option::Option::Some(HttpProtocolOptions_ExplicitHttpConfig_oneof_protocol_config::http2_protocol_options(ref v)) => v,
            _ => <super::protocol::Http2ProtocolOptions as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_http2_protocol_options(&mut self) {
        self.protocol_config = ::std::option::Option::None;
    }

    pub fn has_http2_protocol_options(&self) -> bool {
        match self.protocol_config {
            ::std::option::Option::Some(HttpProtocolOptions_ExplicitHttpConfig_oneof_protocol_config::http2_protocol_options(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_http2_protocol_options(&mut self, v: super::protocol::Http2ProtocolOptions) {
        self.protocol_config = ::std::option::Option::Some(HttpProtocolOptions_ExplicitHttpConfig_oneof_protocol_config::http2_protocol_options(v))
    }

    // Mutable pointer to the field.
    pub fn mut_http2_protocol_options(&mut self) -> &mut super::protocol::Http2ProtocolOptions {
        if let ::std::option::Option::Some(HttpProtocolOptions_ExplicitHttpConfig_oneof_protocol_config::http2_protocol_options(_)) = self.protocol_config {
        } else {
            self.protocol_config = ::std::option::Option::Some(HttpProtocolOptions_ExplicitHttpConfig_oneof_protocol_config::http2_protocol_options(super::protocol::Http2ProtocolOptions::new()));
        }
        match self.protocol_config {
            ::std::option::Option::Some(HttpProtocolOptions_ExplicitHttpConfig_oneof_protocol_config::http2_protocol_options(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_http2_protocol_options(&mut self) -> super::protocol::Http2ProtocolOptions {
        if self.has_http2_protocol_options() {
            match self.protocol_config.take() {
                ::std::option::Option::Some(HttpProtocolOptions_ExplicitHttpConfig_oneof_protocol_config::http2_protocol_options(v)) => v,
                _ => panic!(),
            }
        } else {
            super::protocol::Http2ProtocolOptions::new()
        }
    }
}

impl ::protobuf::Message for HttpProtocolOptions_ExplicitHttpConfig {
    fn is_initialized(&self) -> bool {
        if let Some(HttpProtocolOptions_ExplicitHttpConfig_oneof_protocol_config::http_protocol_options(ref v)) = self.protocol_config {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(HttpProtocolOptions_ExplicitHttpConfig_oneof_protocol_config::http2_protocol_options(ref v)) = self.protocol_config {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.protocol_config = ::std::option::Option::Some(HttpProtocolOptions_ExplicitHttpConfig_oneof_protocol_config::http_protocol_options(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.protocol_config = ::std::option::Option::Some(HttpProtocolOptions_ExplicitHttpConfig_oneof_protocol_config::http2_protocol_options(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.protocol_config {
            match v {
                &HttpProtocolOptions_ExplicitHttpConfig_oneof_protocol_config::http_protocol_options(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &HttpProtocolOptions_ExplicitHttpConfig_oneof_protocol_config::http2_protocol_options(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.protocol_config {
            match v {
                &HttpProtocolOptions_ExplicitHttpConfig_oneof_protocol_config::http_protocol_options(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &HttpProtocolOptions_ExplicitHttpConfig_oneof_protocol_config::http2_protocol_options(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HttpProtocolOptions_ExplicitHttpConfig {
        HttpProtocolOptions_ExplicitHttpConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::protocol::Http1ProtocolOptions>(
                "http_protocol_options",
                HttpProtocolOptions_ExplicitHttpConfig::has_http_protocol_options,
                HttpProtocolOptions_ExplicitHttpConfig::get_http_protocol_options,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::protocol::Http2ProtocolOptions>(
                "http2_protocol_options",
                HttpProtocolOptions_ExplicitHttpConfig::has_http2_protocol_options,
                HttpProtocolOptions_ExplicitHttpConfig::get_http2_protocol_options,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HttpProtocolOptions_ExplicitHttpConfig>(
                "HttpProtocolOptions.ExplicitHttpConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HttpProtocolOptions_ExplicitHttpConfig {
        static instance: ::protobuf::rt::LazyV2<HttpProtocolOptions_ExplicitHttpConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HttpProtocolOptions_ExplicitHttpConfig::new)
    }
}

impl ::protobuf::Clear for HttpProtocolOptions_ExplicitHttpConfig {
    fn clear(&mut self) {
        self.protocol_config = ::std::option::Option::None;
        self.protocol_config = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HttpProtocolOptions_ExplicitHttpConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpProtocolOptions_ExplicitHttpConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HttpProtocolOptions_UseDownstreamHttpConfig {
    // message fields
    pub http_protocol_options: ::protobuf::SingularPtrField<super::protocol::Http1ProtocolOptions>,
    pub http2_protocol_options: ::protobuf::SingularPtrField<super::protocol::Http2ProtocolOptions>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HttpProtocolOptions_UseDownstreamHttpConfig {
    fn default() -> &'a HttpProtocolOptions_UseDownstreamHttpConfig {
        <HttpProtocolOptions_UseDownstreamHttpConfig as ::protobuf::Message>::default_instance()
    }
}

impl HttpProtocolOptions_UseDownstreamHttpConfig {
    pub fn new() -> HttpProtocolOptions_UseDownstreamHttpConfig {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.Http1ProtocolOptions http_protocol_options = 1;


    pub fn get_http_protocol_options(&self) -> &super::protocol::Http1ProtocolOptions {
        self.http_protocol_options.as_ref().unwrap_or_else(|| <super::protocol::Http1ProtocolOptions as ::protobuf::Message>::default_instance())
    }
    pub fn clear_http_protocol_options(&mut self) {
        self.http_protocol_options.clear();
    }

    pub fn has_http_protocol_options(&self) -> bool {
        self.http_protocol_options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_http_protocol_options(&mut self, v: super::protocol::Http1ProtocolOptions) {
        self.http_protocol_options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_http_protocol_options(&mut self) -> &mut super::protocol::Http1ProtocolOptions {
        if self.http_protocol_options.is_none() {
            self.http_protocol_options.set_default();
        }
        self.http_protocol_options.as_mut().unwrap()
    }

    // Take field
    pub fn take_http_protocol_options(&mut self) -> super::protocol::Http1ProtocolOptions {
        self.http_protocol_options.take().unwrap_or_else(|| super::protocol::Http1ProtocolOptions::new())
    }

    // .envoy.config.core.v3.Http2ProtocolOptions http2_protocol_options = 2;


    pub fn get_http2_protocol_options(&self) -> &super::protocol::Http2ProtocolOptions {
        self.http2_protocol_options.as_ref().unwrap_or_else(|| <super::protocol::Http2ProtocolOptions as ::protobuf::Message>::default_instance())
    }
    pub fn clear_http2_protocol_options(&mut self) {
        self.http2_protocol_options.clear();
    }

    pub fn has_http2_protocol_options(&self) -> bool {
        self.http2_protocol_options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_http2_protocol_options(&mut self, v: super::protocol::Http2ProtocolOptions) {
        self.http2_protocol_options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_http2_protocol_options(&mut self) -> &mut super::protocol::Http2ProtocolOptions {
        if self.http2_protocol_options.is_none() {
            self.http2_protocol_options.set_default();
        }
        self.http2_protocol_options.as_mut().unwrap()
    }

    // Take field
    pub fn take_http2_protocol_options(&mut self) -> super::protocol::Http2ProtocolOptions {
        self.http2_protocol_options.take().unwrap_or_else(|| super::protocol::Http2ProtocolOptions::new())
    }
}

impl ::protobuf::Message for HttpProtocolOptions_UseDownstreamHttpConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.http_protocol_options {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.http2_protocol_options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.http_protocol_options)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.http2_protocol_options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.http_protocol_options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.http2_protocol_options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.http_protocol_options.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.http2_protocol_options.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HttpProtocolOptions_UseDownstreamHttpConfig {
        HttpProtocolOptions_UseDownstreamHttpConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::protocol::Http1ProtocolOptions>>(
                "http_protocol_options",
                |m: &HttpProtocolOptions_UseDownstreamHttpConfig| { &m.http_protocol_options },
                |m: &mut HttpProtocolOptions_UseDownstreamHttpConfig| { &mut m.http_protocol_options },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::protocol::Http2ProtocolOptions>>(
                "http2_protocol_options",
                |m: &HttpProtocolOptions_UseDownstreamHttpConfig| { &m.http2_protocol_options },
                |m: &mut HttpProtocolOptions_UseDownstreamHttpConfig| { &mut m.http2_protocol_options },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HttpProtocolOptions_UseDownstreamHttpConfig>(
                "HttpProtocolOptions.UseDownstreamHttpConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HttpProtocolOptions_UseDownstreamHttpConfig {
        static instance: ::protobuf::rt::LazyV2<HttpProtocolOptions_UseDownstreamHttpConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HttpProtocolOptions_UseDownstreamHttpConfig::new)
    }
}

impl ::protobuf::Clear for HttpProtocolOptions_UseDownstreamHttpConfig {
    fn clear(&mut self) {
        self.http_protocol_options.clear();
        self.http2_protocol_options.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HttpProtocolOptions_UseDownstreamHttpConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpProtocolOptions_UseDownstreamHttpConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n>envoy/extensions/upstreams/http/v3/http_protocol_options.proto\x12\"e\
    nvoy.extensions.upstreams.http.v3\x1a#envoy/config/core/v3/protocol.prot\
    o\x1a\x1dudpa/annotations/status.proto\"\xfd\x07\n\x13HttpProtocolOption\
    s\x12j\n\x1ccommon_http_protocol_options\x18\x01\x20\x01(\x0b2).envoy.co\
    nfig.core.v3.HttpProtocolOptionsR\x19commonHttpProtocolOptions\x12v\n\
    \x1eupstream_http_protocol_options\x18\x02\x20\x01(\x0b21.envoy.config.c\
    ore.v3.UpstreamHttpProtocolOptionsR\x1bupstreamHttpProtocolOptions\x12~\
    \n\x14explicit_http_config\x18\x03\x20\x01(\x0b2J.envoy.extensions.upstr\
    eams.http.v3.HttpProtocolOptions.ExplicitHttpConfigH\0R\x12explicitHttpC\
    onfig\x12\x96\x01\n\x1euse_downstream_protocol_config\x18\x04\x20\x01(\
    \x0b2O.envoy.extensions.upstreams.http.v3.HttpProtocolOptions.UseDownstr\
    eamHttpConfigH\0R\x1buseDownstreamProtocolConfig\x1a\xed\x01\n\x12Explic\
    itHttpConfig\x12`\n\x15http_protocol_options\x18\x01\x20\x01(\x0b2*.envo\
    y.config.core.v3.Http1ProtocolOptionsH\0R\x13httpProtocolOptions\x12b\n\
    \x16http2_protocol_options\x18\x02\x20\x01(\x0b2*.envoy.config.core.v3.H\
    ttp2ProtocolOptionsH\0R\x14http2ProtocolOptionsB\x11\n\x0fprotocol_confi\
    g\x1a\xdb\x01\n\x17UseDownstreamHttpConfig\x12^\n\x15http_protocol_optio\
    ns\x18\x01\x20\x01(\x0b2*.envoy.config.core.v3.Http1ProtocolOptionsR\x13\
    httpProtocolOptions\x12`\n\x16http2_protocol_options\x18\x02\x20\x01(\
    \x0b2*.envoy.config.core.v3.Http2ProtocolOptionsR\x14http2ProtocolOption\
    sB\x1b\n\x19upstream_protocol_optionsBV\n0io.envoyproxy.envoy.extensions\
    .upstreams.http.v3B\x18HttpProtocolOptionsProtoP\x01\xba\x80\xc8\xd1\x06\
    \x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
