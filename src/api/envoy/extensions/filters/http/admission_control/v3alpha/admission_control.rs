// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/extensions/filters/http/admission_control/v3alpha/admission_control.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct AdmissionControl {
    // message fields
    pub enabled: ::protobuf::SingularPtrField<super::base::RuntimeFeatureFlag>,
    pub sampling_window: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub aggression: ::protobuf::SingularPtrField<super::base::RuntimeDouble>,
    pub sr_threshold: ::protobuf::SingularPtrField<super::base::RuntimePercent>,
    // message oneof groups
    pub evaluation_criteria: ::std::option::Option<AdmissionControl_oneof_evaluation_criteria>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AdmissionControl {
    fn default() -> &'a AdmissionControl {
        <AdmissionControl as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum AdmissionControl_oneof_evaluation_criteria {
    success_criteria(AdmissionControl_SuccessCriteria),
}

impl AdmissionControl {
    pub fn new() -> AdmissionControl {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.RuntimeFeatureFlag enabled = 1;


    pub fn get_enabled(&self) -> &super::base::RuntimeFeatureFlag {
        self.enabled.as_ref().unwrap_or_else(|| <super::base::RuntimeFeatureFlag as ::protobuf::Message>::default_instance())
    }
    pub fn clear_enabled(&mut self) {
        self.enabled.clear();
    }

    pub fn has_enabled(&self) -> bool {
        self.enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_enabled(&mut self, v: super::base::RuntimeFeatureFlag) {
        self.enabled = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_enabled(&mut self) -> &mut super::base::RuntimeFeatureFlag {
        if self.enabled.is_none() {
            self.enabled.set_default();
        }
        self.enabled.as_mut().unwrap()
    }

    // Take field
    pub fn take_enabled(&mut self) -> super::base::RuntimeFeatureFlag {
        self.enabled.take().unwrap_or_else(|| super::base::RuntimeFeatureFlag::new())
    }

    // .envoy.extensions.filters.http.admission_control.v3alpha.AdmissionControl.SuccessCriteria success_criteria = 2;


    pub fn get_success_criteria(&self) -> &AdmissionControl_SuccessCriteria {
        match self.evaluation_criteria {
            ::std::option::Option::Some(AdmissionControl_oneof_evaluation_criteria::success_criteria(ref v)) => v,
            _ => <AdmissionControl_SuccessCriteria as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_success_criteria(&mut self) {
        self.evaluation_criteria = ::std::option::Option::None;
    }

    pub fn has_success_criteria(&self) -> bool {
        match self.evaluation_criteria {
            ::std::option::Option::Some(AdmissionControl_oneof_evaluation_criteria::success_criteria(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_success_criteria(&mut self, v: AdmissionControl_SuccessCriteria) {
        self.evaluation_criteria = ::std::option::Option::Some(AdmissionControl_oneof_evaluation_criteria::success_criteria(v))
    }

    // Mutable pointer to the field.
    pub fn mut_success_criteria(&mut self) -> &mut AdmissionControl_SuccessCriteria {
        if let ::std::option::Option::Some(AdmissionControl_oneof_evaluation_criteria::success_criteria(_)) = self.evaluation_criteria {
        } else {
            self.evaluation_criteria = ::std::option::Option::Some(AdmissionControl_oneof_evaluation_criteria::success_criteria(AdmissionControl_SuccessCriteria::new()));
        }
        match self.evaluation_criteria {
            ::std::option::Option::Some(AdmissionControl_oneof_evaluation_criteria::success_criteria(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_success_criteria(&mut self) -> AdmissionControl_SuccessCriteria {
        if self.has_success_criteria() {
            match self.evaluation_criteria.take() {
                ::std::option::Option::Some(AdmissionControl_oneof_evaluation_criteria::success_criteria(v)) => v,
                _ => panic!(),
            }
        } else {
            AdmissionControl_SuccessCriteria::new()
        }
    }

    // .google.protobuf.Duration sampling_window = 3;


    pub fn get_sampling_window(&self) -> &::protobuf::well_known_types::Duration {
        self.sampling_window.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_sampling_window(&mut self) {
        self.sampling_window.clear();
    }

    pub fn has_sampling_window(&self) -> bool {
        self.sampling_window.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sampling_window(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.sampling_window = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sampling_window(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.sampling_window.is_none() {
            self.sampling_window.set_default();
        }
        self.sampling_window.as_mut().unwrap()
    }

    // Take field
    pub fn take_sampling_window(&mut self) -> ::protobuf::well_known_types::Duration {
        self.sampling_window.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .envoy.config.core.v3.RuntimeDouble aggression = 4;


    pub fn get_aggression(&self) -> &super::base::RuntimeDouble {
        self.aggression.as_ref().unwrap_or_else(|| <super::base::RuntimeDouble as ::protobuf::Message>::default_instance())
    }
    pub fn clear_aggression(&mut self) {
        self.aggression.clear();
    }

    pub fn has_aggression(&self) -> bool {
        self.aggression.is_some()
    }

    // Param is passed by value, moved
    pub fn set_aggression(&mut self, v: super::base::RuntimeDouble) {
        self.aggression = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_aggression(&mut self) -> &mut super::base::RuntimeDouble {
        if self.aggression.is_none() {
            self.aggression.set_default();
        }
        self.aggression.as_mut().unwrap()
    }

    // Take field
    pub fn take_aggression(&mut self) -> super::base::RuntimeDouble {
        self.aggression.take().unwrap_or_else(|| super::base::RuntimeDouble::new())
    }

    // .envoy.config.core.v3.RuntimePercent sr_threshold = 5;


    pub fn get_sr_threshold(&self) -> &super::base::RuntimePercent {
        self.sr_threshold.as_ref().unwrap_or_else(|| <super::base::RuntimePercent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_sr_threshold(&mut self) {
        self.sr_threshold.clear();
    }

    pub fn has_sr_threshold(&self) -> bool {
        self.sr_threshold.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sr_threshold(&mut self, v: super::base::RuntimePercent) {
        self.sr_threshold = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sr_threshold(&mut self) -> &mut super::base::RuntimePercent {
        if self.sr_threshold.is_none() {
            self.sr_threshold.set_default();
        }
        self.sr_threshold.as_mut().unwrap()
    }

    // Take field
    pub fn take_sr_threshold(&mut self) -> super::base::RuntimePercent {
        self.sr_threshold.take().unwrap_or_else(|| super::base::RuntimePercent::new())
    }
}

impl ::protobuf::Message for AdmissionControl {
    fn is_initialized(&self) -> bool {
        for v in &self.enabled {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(AdmissionControl_oneof_evaluation_criteria::success_criteria(ref v)) = self.evaluation_criteria {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.sampling_window {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.aggression {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sr_threshold {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.enabled)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.evaluation_criteria = ::std::option::Option::Some(AdmissionControl_oneof_evaluation_criteria::success_criteria(is.read_message()?));
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sampling_window)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.aggression)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sr_threshold)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.enabled.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.sampling_window.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.aggression.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.sr_threshold.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.evaluation_criteria {
            match v {
                &AdmissionControl_oneof_evaluation_criteria::success_criteria(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.enabled.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.sampling_window.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.aggression.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.sr_threshold.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.evaluation_criteria {
            match v {
                &AdmissionControl_oneof_evaluation_criteria::success_criteria(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AdmissionControl {
        AdmissionControl::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::RuntimeFeatureFlag>>(
                "enabled",
                |m: &AdmissionControl| { &m.enabled },
                |m: &mut AdmissionControl| { &mut m.enabled },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, AdmissionControl_SuccessCriteria>(
                "success_criteria",
                AdmissionControl::has_success_criteria,
                AdmissionControl::get_success_criteria,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "sampling_window",
                |m: &AdmissionControl| { &m.sampling_window },
                |m: &mut AdmissionControl| { &mut m.sampling_window },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::RuntimeDouble>>(
                "aggression",
                |m: &AdmissionControl| { &m.aggression },
                |m: &mut AdmissionControl| { &mut m.aggression },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::RuntimePercent>>(
                "sr_threshold",
                |m: &AdmissionControl| { &m.sr_threshold },
                |m: &mut AdmissionControl| { &mut m.sr_threshold },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AdmissionControl>(
                "AdmissionControl",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AdmissionControl {
        static instance: ::protobuf::rt::LazyV2<AdmissionControl> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AdmissionControl::new)
    }
}

impl ::protobuf::Clear for AdmissionControl {
    fn clear(&mut self) {
        self.enabled.clear();
        self.evaluation_criteria = ::std::option::Option::None;
        self.sampling_window.clear();
        self.aggression.clear();
        self.sr_threshold.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AdmissionControl {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AdmissionControl {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AdmissionControl_SuccessCriteria {
    // message fields
    pub http_criteria: ::protobuf::SingularPtrField<AdmissionControl_SuccessCriteria_HttpCriteria>,
    pub grpc_criteria: ::protobuf::SingularPtrField<AdmissionControl_SuccessCriteria_GrpcCriteria>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AdmissionControl_SuccessCriteria {
    fn default() -> &'a AdmissionControl_SuccessCriteria {
        <AdmissionControl_SuccessCriteria as ::protobuf::Message>::default_instance()
    }
}

impl AdmissionControl_SuccessCriteria {
    pub fn new() -> AdmissionControl_SuccessCriteria {
        ::std::default::Default::default()
    }

    // .envoy.extensions.filters.http.admission_control.v3alpha.AdmissionControl.SuccessCriteria.HttpCriteria http_criteria = 1;


    pub fn get_http_criteria(&self) -> &AdmissionControl_SuccessCriteria_HttpCriteria {
        self.http_criteria.as_ref().unwrap_or_else(|| <AdmissionControl_SuccessCriteria_HttpCriteria as ::protobuf::Message>::default_instance())
    }
    pub fn clear_http_criteria(&mut self) {
        self.http_criteria.clear();
    }

    pub fn has_http_criteria(&self) -> bool {
        self.http_criteria.is_some()
    }

    // Param is passed by value, moved
    pub fn set_http_criteria(&mut self, v: AdmissionControl_SuccessCriteria_HttpCriteria) {
        self.http_criteria = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_http_criteria(&mut self) -> &mut AdmissionControl_SuccessCriteria_HttpCriteria {
        if self.http_criteria.is_none() {
            self.http_criteria.set_default();
        }
        self.http_criteria.as_mut().unwrap()
    }

    // Take field
    pub fn take_http_criteria(&mut self) -> AdmissionControl_SuccessCriteria_HttpCriteria {
        self.http_criteria.take().unwrap_or_else(|| AdmissionControl_SuccessCriteria_HttpCriteria::new())
    }

    // .envoy.extensions.filters.http.admission_control.v3alpha.AdmissionControl.SuccessCriteria.GrpcCriteria grpc_criteria = 2;


    pub fn get_grpc_criteria(&self) -> &AdmissionControl_SuccessCriteria_GrpcCriteria {
        self.grpc_criteria.as_ref().unwrap_or_else(|| <AdmissionControl_SuccessCriteria_GrpcCriteria as ::protobuf::Message>::default_instance())
    }
    pub fn clear_grpc_criteria(&mut self) {
        self.grpc_criteria.clear();
    }

    pub fn has_grpc_criteria(&self) -> bool {
        self.grpc_criteria.is_some()
    }

    // Param is passed by value, moved
    pub fn set_grpc_criteria(&mut self, v: AdmissionControl_SuccessCriteria_GrpcCriteria) {
        self.grpc_criteria = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_grpc_criteria(&mut self) -> &mut AdmissionControl_SuccessCriteria_GrpcCriteria {
        if self.grpc_criteria.is_none() {
            self.grpc_criteria.set_default();
        }
        self.grpc_criteria.as_mut().unwrap()
    }

    // Take field
    pub fn take_grpc_criteria(&mut self) -> AdmissionControl_SuccessCriteria_GrpcCriteria {
        self.grpc_criteria.take().unwrap_or_else(|| AdmissionControl_SuccessCriteria_GrpcCriteria::new())
    }
}

impl ::protobuf::Message for AdmissionControl_SuccessCriteria {
    fn is_initialized(&self) -> bool {
        for v in &self.http_criteria {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.grpc_criteria {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.http_criteria)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.grpc_criteria)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.http_criteria.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.grpc_criteria.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.http_criteria.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.grpc_criteria.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AdmissionControl_SuccessCriteria {
        AdmissionControl_SuccessCriteria::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AdmissionControl_SuccessCriteria_HttpCriteria>>(
                "http_criteria",
                |m: &AdmissionControl_SuccessCriteria| { &m.http_criteria },
                |m: &mut AdmissionControl_SuccessCriteria| { &mut m.http_criteria },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AdmissionControl_SuccessCriteria_GrpcCriteria>>(
                "grpc_criteria",
                |m: &AdmissionControl_SuccessCriteria| { &m.grpc_criteria },
                |m: &mut AdmissionControl_SuccessCriteria| { &mut m.grpc_criteria },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AdmissionControl_SuccessCriteria>(
                "AdmissionControl.SuccessCriteria",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AdmissionControl_SuccessCriteria {
        static instance: ::protobuf::rt::LazyV2<AdmissionControl_SuccessCriteria> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AdmissionControl_SuccessCriteria::new)
    }
}

impl ::protobuf::Clear for AdmissionControl_SuccessCriteria {
    fn clear(&mut self) {
        self.http_criteria.clear();
        self.grpc_criteria.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AdmissionControl_SuccessCriteria {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AdmissionControl_SuccessCriteria {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AdmissionControl_SuccessCriteria_HttpCriteria {
    // message fields
    pub http_success_status: ::protobuf::RepeatedField<super::range::Int32Range>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AdmissionControl_SuccessCriteria_HttpCriteria {
    fn default() -> &'a AdmissionControl_SuccessCriteria_HttpCriteria {
        <AdmissionControl_SuccessCriteria_HttpCriteria as ::protobuf::Message>::default_instance()
    }
}

impl AdmissionControl_SuccessCriteria_HttpCriteria {
    pub fn new() -> AdmissionControl_SuccessCriteria_HttpCriteria {
        ::std::default::Default::default()
    }

    // repeated .envoy.type.v3.Int32Range http_success_status = 1;


    pub fn get_http_success_status(&self) -> &[super::range::Int32Range] {
        &self.http_success_status
    }
    pub fn clear_http_success_status(&mut self) {
        self.http_success_status.clear();
    }

    // Param is passed by value, moved
    pub fn set_http_success_status(&mut self, v: ::protobuf::RepeatedField<super::range::Int32Range>) {
        self.http_success_status = v;
    }

    // Mutable pointer to the field.
    pub fn mut_http_success_status(&mut self) -> &mut ::protobuf::RepeatedField<super::range::Int32Range> {
        &mut self.http_success_status
    }

    // Take field
    pub fn take_http_success_status(&mut self) -> ::protobuf::RepeatedField<super::range::Int32Range> {
        ::std::mem::replace(&mut self.http_success_status, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AdmissionControl_SuccessCriteria_HttpCriteria {
    fn is_initialized(&self) -> bool {
        for v in &self.http_success_status {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.http_success_status)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.http_success_status {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.http_success_status {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AdmissionControl_SuccessCriteria_HttpCriteria {
        AdmissionControl_SuccessCriteria_HttpCriteria::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::range::Int32Range>>(
                "http_success_status",
                |m: &AdmissionControl_SuccessCriteria_HttpCriteria| { &m.http_success_status },
                |m: &mut AdmissionControl_SuccessCriteria_HttpCriteria| { &mut m.http_success_status },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AdmissionControl_SuccessCriteria_HttpCriteria>(
                "AdmissionControl.SuccessCriteria.HttpCriteria",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AdmissionControl_SuccessCriteria_HttpCriteria {
        static instance: ::protobuf::rt::LazyV2<AdmissionControl_SuccessCriteria_HttpCriteria> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AdmissionControl_SuccessCriteria_HttpCriteria::new)
    }
}

impl ::protobuf::Clear for AdmissionControl_SuccessCriteria_HttpCriteria {
    fn clear(&mut self) {
        self.http_success_status.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AdmissionControl_SuccessCriteria_HttpCriteria {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AdmissionControl_SuccessCriteria_HttpCriteria {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AdmissionControl_SuccessCriteria_GrpcCriteria {
    // message fields
    pub grpc_success_status: ::std::vec::Vec<u32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AdmissionControl_SuccessCriteria_GrpcCriteria {
    fn default() -> &'a AdmissionControl_SuccessCriteria_GrpcCriteria {
        <AdmissionControl_SuccessCriteria_GrpcCriteria as ::protobuf::Message>::default_instance()
    }
}

impl AdmissionControl_SuccessCriteria_GrpcCriteria {
    pub fn new() -> AdmissionControl_SuccessCriteria_GrpcCriteria {
        ::std::default::Default::default()
    }

    // repeated uint32 grpc_success_status = 1;


    pub fn get_grpc_success_status(&self) -> &[u32] {
        &self.grpc_success_status
    }
    pub fn clear_grpc_success_status(&mut self) {
        self.grpc_success_status.clear();
    }

    // Param is passed by value, moved
    pub fn set_grpc_success_status(&mut self, v: ::std::vec::Vec<u32>) {
        self.grpc_success_status = v;
    }

    // Mutable pointer to the field.
    pub fn mut_grpc_success_status(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.grpc_success_status
    }

    // Take field
    pub fn take_grpc_success_status(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.grpc_success_status, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for AdmissionControl_SuccessCriteria_GrpcCriteria {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.grpc_success_status)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.grpc_success_status {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.grpc_success_status {
            os.write_uint32(1, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AdmissionControl_SuccessCriteria_GrpcCriteria {
        AdmissionControl_SuccessCriteria_GrpcCriteria::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "grpc_success_status",
                |m: &AdmissionControl_SuccessCriteria_GrpcCriteria| { &m.grpc_success_status },
                |m: &mut AdmissionControl_SuccessCriteria_GrpcCriteria| { &mut m.grpc_success_status },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AdmissionControl_SuccessCriteria_GrpcCriteria>(
                "AdmissionControl.SuccessCriteria.GrpcCriteria",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AdmissionControl_SuccessCriteria_GrpcCriteria {
        static instance: ::protobuf::rt::LazyV2<AdmissionControl_SuccessCriteria_GrpcCriteria> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AdmissionControl_SuccessCriteria_GrpcCriteria::new)
    }
}

impl ::protobuf::Clear for AdmissionControl_SuccessCriteria_GrpcCriteria {
    fn clear(&mut self) {
        self.grpc_success_status.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AdmissionControl_SuccessCriteria_GrpcCriteria {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AdmissionControl_SuccessCriteria_GrpcCriteria {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \nOenvoy/extensions/filters/http/admission_control/v3alpha/admission_con\
    trol.proto\x127envoy.extensions.filters.http.admission_control.v3alpha\
    \x1a\x1fenvoy/config/core/v3/base.proto\x1a\x19envoy/type/v3/range.proto\
    \x1a\x1cgoogle/api/annotations.proto\x1a\x1egoogle/protobuf/duration.pro\
    to\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x17google/rpc/status.proto\
    \x1a\x1eudpa/annotations/migrate.proto\x1a\x1dudpa/annotations/status.pr\
    oto\x1a\x17validate/validate.proto\"\xac\x07\n\x10AdmissionControl\x12B\
    \n\x07enabled\x18\x01\x20\x01(\x0b2(.envoy.config.core.v3.RuntimeFeature\
    FlagR\x07enabled\x12\x86\x01\n\x10success_criteria\x18\x02\x20\x01(\x0b2\
    Y.envoy.extensions.filters.http.admission_control.v3alpha.AdmissionContr\
    ol.SuccessCriteriaH\0R\x0fsuccessCriteria\x12B\n\x0fsampling_window\x18\
    \x03\x20\x01(\x0b2\x19.google.protobuf.DurationR\x0esamplingWindow\x12C\
    \n\naggression\x18\x04\x20\x01(\x0b2#.envoy.config.core.v3.RuntimeDouble\
    R\naggression\x12G\n\x0csr_threshold\x18\x05\x20\x01(\x0b2$.envoy.config\
    .core.v3.RuntimePercentR\x0bsrThreshold\x1a\xdc\x03\n\x0fSuccessCriteria\
    \x12\x8b\x01\n\rhttp_criteria\x18\x01\x20\x01(\x0b2f.envoy.extensions.fi\
    lters.http.admission_control.v3alpha.AdmissionControl.SuccessCriteria.Ht\
    tpCriteriaR\x0chttpCriteria\x12\x8b\x01\n\rgrpc_criteria\x18\x02\x20\x01\
    (\x0b2f.envoy.extensions.filters.http.admission_control.v3alpha.Admissio\
    nControl.SuccessCriteria.GrpcCriteriaR\x0cgrpcCriteria\x1ac\n\x0cHttpCri\
    teria\x12S\n\x13http_success_status\x18\x01\x20\x03(\x0b2\x19.envoy.type\
    .v3.Int32RangeR\x11httpSuccessStatusB\x08\xfaB\x05\x92\x01\x02\x08\x01\
    \x1aH\n\x0cGrpcCriteria\x128\n\x13grpc_success_status\x18\x01\x20\x03(\r\
    R\x11grpcSuccessStatusB\x08\xfaB\x05\x92\x01\x02\x08\x01B\x1a\n\x13evalu\
    ation_criteria\x12\x03\xf8B\x01Bp\nEio.envoyproxy.envoy.extensions.filte\
    rs.http.admission_control.v3alphaB\x15AdmissionControlProtoP\x01\xba\x80\
    \xc8\xd1\x06\x02\x08\x01\xba\x80\xc8\xd1\x06\x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
