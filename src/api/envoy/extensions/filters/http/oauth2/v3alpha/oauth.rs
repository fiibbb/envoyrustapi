// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/extensions/filters/http/oauth2/v3alpha/oauth.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct OAuth2Credentials {
    // message fields
    pub client_id: ::std::string::String,
    pub token_secret: ::protobuf::SingularPtrField<super::secret::SdsSecretConfig>,
    // message oneof groups
    pub token_formation: ::std::option::Option<OAuth2Credentials_oneof_token_formation>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OAuth2Credentials {
    fn default() -> &'a OAuth2Credentials {
        <OAuth2Credentials as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum OAuth2Credentials_oneof_token_formation {
    hmac_secret(super::secret::SdsSecretConfig),
}

impl OAuth2Credentials {
    pub fn new() -> OAuth2Credentials {
        ::std::default::Default::default()
    }

    // string client_id = 1;


    pub fn get_client_id(&self) -> &str {
        &self.client_id
    }
    pub fn clear_client_id(&mut self) {
        self.client_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_client_id(&mut self, v: ::std::string::String) {
        self.client_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_id(&mut self) -> &mut ::std::string::String {
        &mut self.client_id
    }

    // Take field
    pub fn take_client_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.client_id, ::std::string::String::new())
    }

    // .envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig token_secret = 2;


    pub fn get_token_secret(&self) -> &super::secret::SdsSecretConfig {
        self.token_secret.as_ref().unwrap_or_else(|| <super::secret::SdsSecretConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_token_secret(&mut self) {
        self.token_secret.clear();
    }

    pub fn has_token_secret(&self) -> bool {
        self.token_secret.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token_secret(&mut self, v: super::secret::SdsSecretConfig) {
        self.token_secret = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token_secret(&mut self) -> &mut super::secret::SdsSecretConfig {
        if self.token_secret.is_none() {
            self.token_secret.set_default();
        }
        self.token_secret.as_mut().unwrap()
    }

    // Take field
    pub fn take_token_secret(&mut self) -> super::secret::SdsSecretConfig {
        self.token_secret.take().unwrap_or_else(|| super::secret::SdsSecretConfig::new())
    }

    // .envoy.extensions.transport_sockets.tls.v3.SdsSecretConfig hmac_secret = 3;


    pub fn get_hmac_secret(&self) -> &super::secret::SdsSecretConfig {
        match self.token_formation {
            ::std::option::Option::Some(OAuth2Credentials_oneof_token_formation::hmac_secret(ref v)) => v,
            _ => <super::secret::SdsSecretConfig as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_hmac_secret(&mut self) {
        self.token_formation = ::std::option::Option::None;
    }

    pub fn has_hmac_secret(&self) -> bool {
        match self.token_formation {
            ::std::option::Option::Some(OAuth2Credentials_oneof_token_formation::hmac_secret(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_hmac_secret(&mut self, v: super::secret::SdsSecretConfig) {
        self.token_formation = ::std::option::Option::Some(OAuth2Credentials_oneof_token_formation::hmac_secret(v))
    }

    // Mutable pointer to the field.
    pub fn mut_hmac_secret(&mut self) -> &mut super::secret::SdsSecretConfig {
        if let ::std::option::Option::Some(OAuth2Credentials_oneof_token_formation::hmac_secret(_)) = self.token_formation {
        } else {
            self.token_formation = ::std::option::Option::Some(OAuth2Credentials_oneof_token_formation::hmac_secret(super::secret::SdsSecretConfig::new()));
        }
        match self.token_formation {
            ::std::option::Option::Some(OAuth2Credentials_oneof_token_formation::hmac_secret(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_hmac_secret(&mut self) -> super::secret::SdsSecretConfig {
        if self.has_hmac_secret() {
            match self.token_formation.take() {
                ::std::option::Option::Some(OAuth2Credentials_oneof_token_formation::hmac_secret(v)) => v,
                _ => panic!(),
            }
        } else {
            super::secret::SdsSecretConfig::new()
        }
    }
}

impl ::protobuf::Message for OAuth2Credentials {
    fn is_initialized(&self) -> bool {
        for v in &self.token_secret {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(OAuth2Credentials_oneof_token_formation::hmac_secret(ref v)) = self.token_formation {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.client_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.token_secret)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.token_formation = ::std::option::Option::Some(OAuth2Credentials_oneof_token_formation::hmac_secret(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.client_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.client_id);
        }
        if let Some(ref v) = self.token_secret.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.token_formation {
            match v {
                &OAuth2Credentials_oneof_token_formation::hmac_secret(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.client_id.is_empty() {
            os.write_string(1, &self.client_id)?;
        }
        if let Some(ref v) = self.token_secret.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.token_formation {
            match v {
                &OAuth2Credentials_oneof_token_formation::hmac_secret(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OAuth2Credentials {
        OAuth2Credentials::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "client_id",
                |m: &OAuth2Credentials| { &m.client_id },
                |m: &mut OAuth2Credentials| { &mut m.client_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::secret::SdsSecretConfig>>(
                "token_secret",
                |m: &OAuth2Credentials| { &m.token_secret },
                |m: &mut OAuth2Credentials| { &mut m.token_secret },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::secret::SdsSecretConfig>(
                "hmac_secret",
                OAuth2Credentials::has_hmac_secret,
                OAuth2Credentials::get_hmac_secret,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OAuth2Credentials>(
                "OAuth2Credentials",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OAuth2Credentials {
        static instance: ::protobuf::rt::LazyV2<OAuth2Credentials> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OAuth2Credentials::new)
    }
}

impl ::protobuf::Clear for OAuth2Credentials {
    fn clear(&mut self) {
        self.client_id.clear();
        self.token_secret.clear();
        self.token_formation = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OAuth2Credentials {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OAuth2Credentials {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OAuth2Config {
    // message fields
    pub token_endpoint: ::protobuf::SingularPtrField<super::http_uri::HttpUri>,
    pub authorization_endpoint: ::std::string::String,
    pub credentials: ::protobuf::SingularPtrField<OAuth2Credentials>,
    pub redirect_uri: ::std::string::String,
    pub redirect_path_matcher: ::protobuf::SingularPtrField<super::path::PathMatcher>,
    pub signout_path: ::protobuf::SingularPtrField<super::path::PathMatcher>,
    pub forward_bearer_token: bool,
    pub pass_through_matcher: ::protobuf::RepeatedField<super::route_components::HeaderMatcher>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OAuth2Config {
    fn default() -> &'a OAuth2Config {
        <OAuth2Config as ::protobuf::Message>::default_instance()
    }
}

impl OAuth2Config {
    pub fn new() -> OAuth2Config {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.HttpUri token_endpoint = 1;


    pub fn get_token_endpoint(&self) -> &super::http_uri::HttpUri {
        self.token_endpoint.as_ref().unwrap_or_else(|| <super::http_uri::HttpUri as ::protobuf::Message>::default_instance())
    }
    pub fn clear_token_endpoint(&mut self) {
        self.token_endpoint.clear();
    }

    pub fn has_token_endpoint(&self) -> bool {
        self.token_endpoint.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token_endpoint(&mut self, v: super::http_uri::HttpUri) {
        self.token_endpoint = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token_endpoint(&mut self) -> &mut super::http_uri::HttpUri {
        if self.token_endpoint.is_none() {
            self.token_endpoint.set_default();
        }
        self.token_endpoint.as_mut().unwrap()
    }

    // Take field
    pub fn take_token_endpoint(&mut self) -> super::http_uri::HttpUri {
        self.token_endpoint.take().unwrap_or_else(|| super::http_uri::HttpUri::new())
    }

    // string authorization_endpoint = 2;


    pub fn get_authorization_endpoint(&self) -> &str {
        &self.authorization_endpoint
    }
    pub fn clear_authorization_endpoint(&mut self) {
        self.authorization_endpoint.clear();
    }

    // Param is passed by value, moved
    pub fn set_authorization_endpoint(&mut self, v: ::std::string::String) {
        self.authorization_endpoint = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_authorization_endpoint(&mut self) -> &mut ::std::string::String {
        &mut self.authorization_endpoint
    }

    // Take field
    pub fn take_authorization_endpoint(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.authorization_endpoint, ::std::string::String::new())
    }

    // .envoy.extensions.filters.http.oauth2.v3alpha.OAuth2Credentials credentials = 3;


    pub fn get_credentials(&self) -> &OAuth2Credentials {
        self.credentials.as_ref().unwrap_or_else(|| <OAuth2Credentials as ::protobuf::Message>::default_instance())
    }
    pub fn clear_credentials(&mut self) {
        self.credentials.clear();
    }

    pub fn has_credentials(&self) -> bool {
        self.credentials.is_some()
    }

    // Param is passed by value, moved
    pub fn set_credentials(&mut self, v: OAuth2Credentials) {
        self.credentials = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_credentials(&mut self) -> &mut OAuth2Credentials {
        if self.credentials.is_none() {
            self.credentials.set_default();
        }
        self.credentials.as_mut().unwrap()
    }

    // Take field
    pub fn take_credentials(&mut self) -> OAuth2Credentials {
        self.credentials.take().unwrap_or_else(|| OAuth2Credentials::new())
    }

    // string redirect_uri = 4;


    pub fn get_redirect_uri(&self) -> &str {
        &self.redirect_uri
    }
    pub fn clear_redirect_uri(&mut self) {
        self.redirect_uri.clear();
    }

    // Param is passed by value, moved
    pub fn set_redirect_uri(&mut self, v: ::std::string::String) {
        self.redirect_uri = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_redirect_uri(&mut self) -> &mut ::std::string::String {
        &mut self.redirect_uri
    }

    // Take field
    pub fn take_redirect_uri(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.redirect_uri, ::std::string::String::new())
    }

    // .envoy.type.matcher.v3.PathMatcher redirect_path_matcher = 5;


    pub fn get_redirect_path_matcher(&self) -> &super::path::PathMatcher {
        self.redirect_path_matcher.as_ref().unwrap_or_else(|| <super::path::PathMatcher as ::protobuf::Message>::default_instance())
    }
    pub fn clear_redirect_path_matcher(&mut self) {
        self.redirect_path_matcher.clear();
    }

    pub fn has_redirect_path_matcher(&self) -> bool {
        self.redirect_path_matcher.is_some()
    }

    // Param is passed by value, moved
    pub fn set_redirect_path_matcher(&mut self, v: super::path::PathMatcher) {
        self.redirect_path_matcher = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_redirect_path_matcher(&mut self) -> &mut super::path::PathMatcher {
        if self.redirect_path_matcher.is_none() {
            self.redirect_path_matcher.set_default();
        }
        self.redirect_path_matcher.as_mut().unwrap()
    }

    // Take field
    pub fn take_redirect_path_matcher(&mut self) -> super::path::PathMatcher {
        self.redirect_path_matcher.take().unwrap_or_else(|| super::path::PathMatcher::new())
    }

    // .envoy.type.matcher.v3.PathMatcher signout_path = 6;


    pub fn get_signout_path(&self) -> &super::path::PathMatcher {
        self.signout_path.as_ref().unwrap_or_else(|| <super::path::PathMatcher as ::protobuf::Message>::default_instance())
    }
    pub fn clear_signout_path(&mut self) {
        self.signout_path.clear();
    }

    pub fn has_signout_path(&self) -> bool {
        self.signout_path.is_some()
    }

    // Param is passed by value, moved
    pub fn set_signout_path(&mut self, v: super::path::PathMatcher) {
        self.signout_path = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signout_path(&mut self) -> &mut super::path::PathMatcher {
        if self.signout_path.is_none() {
            self.signout_path.set_default();
        }
        self.signout_path.as_mut().unwrap()
    }

    // Take field
    pub fn take_signout_path(&mut self) -> super::path::PathMatcher {
        self.signout_path.take().unwrap_or_else(|| super::path::PathMatcher::new())
    }

    // bool forward_bearer_token = 7;


    pub fn get_forward_bearer_token(&self) -> bool {
        self.forward_bearer_token
    }
    pub fn clear_forward_bearer_token(&mut self) {
        self.forward_bearer_token = false;
    }

    // Param is passed by value, moved
    pub fn set_forward_bearer_token(&mut self, v: bool) {
        self.forward_bearer_token = v;
    }

    // repeated .envoy.config.route.v3.HeaderMatcher pass_through_matcher = 8;


    pub fn get_pass_through_matcher(&self) -> &[super::route_components::HeaderMatcher] {
        &self.pass_through_matcher
    }
    pub fn clear_pass_through_matcher(&mut self) {
        self.pass_through_matcher.clear();
    }

    // Param is passed by value, moved
    pub fn set_pass_through_matcher(&mut self, v: ::protobuf::RepeatedField<super::route_components::HeaderMatcher>) {
        self.pass_through_matcher = v;
    }

    // Mutable pointer to the field.
    pub fn mut_pass_through_matcher(&mut self) -> &mut ::protobuf::RepeatedField<super::route_components::HeaderMatcher> {
        &mut self.pass_through_matcher
    }

    // Take field
    pub fn take_pass_through_matcher(&mut self) -> ::protobuf::RepeatedField<super::route_components::HeaderMatcher> {
        ::std::mem::replace(&mut self.pass_through_matcher, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for OAuth2Config {
    fn is_initialized(&self) -> bool {
        for v in &self.token_endpoint {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.credentials {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.redirect_path_matcher {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.signout_path {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.pass_through_matcher {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.token_endpoint)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.authorization_endpoint)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.credentials)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.redirect_uri)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.redirect_path_matcher)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.signout_path)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.forward_bearer_token = tmp;
                },
                8 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.pass_through_matcher)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.token_endpoint.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.authorization_endpoint.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.authorization_endpoint);
        }
        if let Some(ref v) = self.credentials.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.redirect_uri.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.redirect_uri);
        }
        if let Some(ref v) = self.redirect_path_matcher.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.signout_path.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.forward_bearer_token != false {
            my_size += 2;
        }
        for value in &self.pass_through_matcher {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.token_endpoint.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.authorization_endpoint.is_empty() {
            os.write_string(2, &self.authorization_endpoint)?;
        }
        if let Some(ref v) = self.credentials.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.redirect_uri.is_empty() {
            os.write_string(4, &self.redirect_uri)?;
        }
        if let Some(ref v) = self.redirect_path_matcher.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.signout_path.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.forward_bearer_token != false {
            os.write_bool(7, self.forward_bearer_token)?;
        }
        for v in &self.pass_through_matcher {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OAuth2Config {
        OAuth2Config::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::http_uri::HttpUri>>(
                "token_endpoint",
                |m: &OAuth2Config| { &m.token_endpoint },
                |m: &mut OAuth2Config| { &mut m.token_endpoint },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "authorization_endpoint",
                |m: &OAuth2Config| { &m.authorization_endpoint },
                |m: &mut OAuth2Config| { &mut m.authorization_endpoint },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OAuth2Credentials>>(
                "credentials",
                |m: &OAuth2Config| { &m.credentials },
                |m: &mut OAuth2Config| { &mut m.credentials },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "redirect_uri",
                |m: &OAuth2Config| { &m.redirect_uri },
                |m: &mut OAuth2Config| { &mut m.redirect_uri },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::path::PathMatcher>>(
                "redirect_path_matcher",
                |m: &OAuth2Config| { &m.redirect_path_matcher },
                |m: &mut OAuth2Config| { &mut m.redirect_path_matcher },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::path::PathMatcher>>(
                "signout_path",
                |m: &OAuth2Config| { &m.signout_path },
                |m: &mut OAuth2Config| { &mut m.signout_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "forward_bearer_token",
                |m: &OAuth2Config| { &m.forward_bearer_token },
                |m: &mut OAuth2Config| { &mut m.forward_bearer_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::route_components::HeaderMatcher>>(
                "pass_through_matcher",
                |m: &OAuth2Config| { &m.pass_through_matcher },
                |m: &mut OAuth2Config| { &mut m.pass_through_matcher },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OAuth2Config>(
                "OAuth2Config",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OAuth2Config {
        static instance: ::protobuf::rt::LazyV2<OAuth2Config> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OAuth2Config::new)
    }
}

impl ::protobuf::Clear for OAuth2Config {
    fn clear(&mut self) {
        self.token_endpoint.clear();
        self.authorization_endpoint.clear();
        self.credentials.clear();
        self.redirect_uri.clear();
        self.redirect_path_matcher.clear();
        self.signout_path.clear();
        self.forward_bearer_token = false;
        self.pass_through_matcher.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OAuth2Config {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OAuth2Config {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OAuth2 {
    // message fields
    pub config: ::protobuf::SingularPtrField<OAuth2Config>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OAuth2 {
    fn default() -> &'a OAuth2 {
        <OAuth2 as ::protobuf::Message>::default_instance()
    }
}

impl OAuth2 {
    pub fn new() -> OAuth2 {
        ::std::default::Default::default()
    }

    // .envoy.extensions.filters.http.oauth2.v3alpha.OAuth2Config config = 1;


    pub fn get_config(&self) -> &OAuth2Config {
        self.config.as_ref().unwrap_or_else(|| <OAuth2Config as ::protobuf::Message>::default_instance())
    }
    pub fn clear_config(&mut self) {
        self.config.clear();
    }

    pub fn has_config(&self) -> bool {
        self.config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_config(&mut self, v: OAuth2Config) {
        self.config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_config(&mut self) -> &mut OAuth2Config {
        if self.config.is_none() {
            self.config.set_default();
        }
        self.config.as_mut().unwrap()
    }

    // Take field
    pub fn take_config(&mut self) -> OAuth2Config {
        self.config.take().unwrap_or_else(|| OAuth2Config::new())
    }
}

impl ::protobuf::Message for OAuth2 {
    fn is_initialized(&self) -> bool {
        for v in &self.config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.config)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.config.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OAuth2 {
        OAuth2::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OAuth2Config>>(
                "config",
                |m: &OAuth2| { &m.config },
                |m: &mut OAuth2| { &mut m.config },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OAuth2>(
                "OAuth2",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OAuth2 {
        static instance: ::protobuf::rt::LazyV2<OAuth2> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OAuth2::new)
    }
}

impl ::protobuf::Clear for OAuth2 {
    fn clear(&mut self) {
        self.config.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OAuth2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OAuth2 {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n8envoy/extensions/filters/http/oauth2/v3alpha/oauth.proto\x12,envoy.ex\
    tensions.filters.http.oauth2.v3alpha\x1a#envoy/config/core/v3/http_uri.p\
    roto\x1a,envoy/config/route/v3/route_components.proto\x1a6envoy/extensio\
    ns/transport_sockets/tls/v3/secret.proto\x1a\x20envoy/type/matcher/v3/pa\
    th.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1dudpa/annotations/s\
    tatus.proto\x1a!udpa/annotations/versioning.proto\x1a\x17validate/valida\
    te.proto\"\xa3\x02\n\x11OAuth2Credentials\x12$\n\tclient_id\x18\x01\x20\
    \x01(\tR\x08clientIdB\x07\xfaB\x04r\x02\x10\x01\x12g\n\x0ctoken_secret\
    \x18\x02\x20\x01(\x0b2:.envoy.extensions.transport_sockets.tls.v3.SdsSec\
    retConfigR\x0btokenSecretB\x08\xfaB\x05\x8a\x01\x02\x10\x01\x12g\n\x0bhm\
    ac_secret\x18\x03\x20\x01(\x0b2:.envoy.extensions.transport_sockets.tls.\
    v3.SdsSecretConfigH\0R\nhmacSecretB\x08\xfaB\x05\x8a\x01\x02\x10\x01B\
    \x16\n\x0ftoken_formation\x12\x03\xf8B\x01\"\xea\x04\n\x0cOAuth2Config\
    \x12D\n\x0etoken_endpoint\x18\x01\x20\x01(\x0b2\x1d.envoy.config.core.v3\
    .HttpUriR\rtokenEndpoint\x12>\n\x16authorization_endpoint\x18\x02\x20\
    \x01(\tR\x15authorizationEndpointB\x07\xfaB\x04r\x02\x10\x01\x12k\n\x0bc\
    redentials\x18\x03\x20\x01(\x0b2?.envoy.extensions.filters.http.oauth2.v\
    3alpha.OAuth2CredentialsR\x0bcredentialsB\x08\xfaB\x05\x8a\x01\x02\x10\
    \x01\x12*\n\x0credirect_uri\x18\x04\x20\x01(\tR\x0bredirectUriB\x07\xfaB\
    \x04r\x02\x10\x01\x12`\n\x15redirect_path_matcher\x18\x05\x20\x01(\x0b2\
    \".envoy.type.matcher.v3.PathMatcherR\x13redirectPathMatcherB\x08\xfaB\
    \x05\x8a\x01\x02\x10\x01\x12O\n\x0csignout_path\x18\x06\x20\x01(\x0b2\".\
    envoy.type.matcher.v3.PathMatcherR\x0bsignoutPathB\x08\xfaB\x05\x8a\x01\
    \x02\x10\x01\x120\n\x14forward_bearer_token\x18\x07\x20\x01(\x08R\x12for\
    wardBearerToken\x12V\n\x14pass_through_matcher\x18\x08\x20\x03(\x0b2$.en\
    voy.config.route.v3.HeaderMatcherR\x12passThroughMatcher\"\\\n\x06OAuth2\
    \x12R\n\x06config\x18\x01\x20\x01(\x0b2:.envoy.extensions.filters.http.o\
    auth2.v3alpha.OAuth2ConfigR\x06configBZ\n:io.envoyproxy.envoy.extensions\
    .filters.http.oauth2.v3alphaB\nOauthProtoP\x01\xba\x80\xc8\xd1\x06\x02\
    \x08\x01\xba\x80\xc8\xd1\x06\x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
