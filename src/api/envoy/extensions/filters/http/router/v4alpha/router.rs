// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/extensions/filters/http/router/v4alpha/router.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct Router {
    // message fields
    pub dynamic_stats: ::protobuf::SingularPtrField<::protobuf::well_known_types::BoolValue>,
    pub start_child_span: bool,
    pub upstream_log: ::protobuf::RepeatedField<super::accesslog::AccessLog>,
    pub suppress_envoy_headers: bool,
    pub strict_check_headers: ::protobuf::RepeatedField<::std::string::String>,
    pub respect_expected_rq_timeout: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Router {
    fn default() -> &'a Router {
        <Router as ::protobuf::Message>::default_instance()
    }
}

impl Router {
    pub fn new() -> Router {
        ::std::default::Default::default()
    }

    // .google.protobuf.BoolValue dynamic_stats = 1;


    pub fn get_dynamic_stats(&self) -> &::protobuf::well_known_types::BoolValue {
        self.dynamic_stats.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::BoolValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_dynamic_stats(&mut self) {
        self.dynamic_stats.clear();
    }

    pub fn has_dynamic_stats(&self) -> bool {
        self.dynamic_stats.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dynamic_stats(&mut self, v: ::protobuf::well_known_types::BoolValue) {
        self.dynamic_stats = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dynamic_stats(&mut self) -> &mut ::protobuf::well_known_types::BoolValue {
        if self.dynamic_stats.is_none() {
            self.dynamic_stats.set_default();
        }
        self.dynamic_stats.as_mut().unwrap()
    }

    // Take field
    pub fn take_dynamic_stats(&mut self) -> ::protobuf::well_known_types::BoolValue {
        self.dynamic_stats.take().unwrap_or_else(|| ::protobuf::well_known_types::BoolValue::new())
    }

    // bool start_child_span = 2;


    pub fn get_start_child_span(&self) -> bool {
        self.start_child_span
    }
    pub fn clear_start_child_span(&mut self) {
        self.start_child_span = false;
    }

    // Param is passed by value, moved
    pub fn set_start_child_span(&mut self, v: bool) {
        self.start_child_span = v;
    }

    // repeated .envoy.config.accesslog.v4alpha.AccessLog upstream_log = 3;


    pub fn get_upstream_log(&self) -> &[super::accesslog::AccessLog] {
        &self.upstream_log
    }
    pub fn clear_upstream_log(&mut self) {
        self.upstream_log.clear();
    }

    // Param is passed by value, moved
    pub fn set_upstream_log(&mut self, v: ::protobuf::RepeatedField<super::accesslog::AccessLog>) {
        self.upstream_log = v;
    }

    // Mutable pointer to the field.
    pub fn mut_upstream_log(&mut self) -> &mut ::protobuf::RepeatedField<super::accesslog::AccessLog> {
        &mut self.upstream_log
    }

    // Take field
    pub fn take_upstream_log(&mut self) -> ::protobuf::RepeatedField<super::accesslog::AccessLog> {
        ::std::mem::replace(&mut self.upstream_log, ::protobuf::RepeatedField::new())
    }

    // bool suppress_envoy_headers = 4;


    pub fn get_suppress_envoy_headers(&self) -> bool {
        self.suppress_envoy_headers
    }
    pub fn clear_suppress_envoy_headers(&mut self) {
        self.suppress_envoy_headers = false;
    }

    // Param is passed by value, moved
    pub fn set_suppress_envoy_headers(&mut self, v: bool) {
        self.suppress_envoy_headers = v;
    }

    // repeated string strict_check_headers = 5;


    pub fn get_strict_check_headers(&self) -> &[::std::string::String] {
        &self.strict_check_headers
    }
    pub fn clear_strict_check_headers(&mut self) {
        self.strict_check_headers.clear();
    }

    // Param is passed by value, moved
    pub fn set_strict_check_headers(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.strict_check_headers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_strict_check_headers(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.strict_check_headers
    }

    // Take field
    pub fn take_strict_check_headers(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.strict_check_headers, ::protobuf::RepeatedField::new())
    }

    // bool respect_expected_rq_timeout = 6;


    pub fn get_respect_expected_rq_timeout(&self) -> bool {
        self.respect_expected_rq_timeout
    }
    pub fn clear_respect_expected_rq_timeout(&mut self) {
        self.respect_expected_rq_timeout = false;
    }

    // Param is passed by value, moved
    pub fn set_respect_expected_rq_timeout(&mut self, v: bool) {
        self.respect_expected_rq_timeout = v;
    }
}

impl ::protobuf::Message for Router {
    fn is_initialized(&self) -> bool {
        for v in &self.dynamic_stats {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.upstream_log {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.dynamic_stats)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.start_child_span = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.upstream_log)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.suppress_envoy_headers = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.strict_check_headers)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.respect_expected_rq_timeout = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.dynamic_stats.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.start_child_span != false {
            my_size += 2;
        }
        for value in &self.upstream_log {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.suppress_envoy_headers != false {
            my_size += 2;
        }
        for value in &self.strict_check_headers {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        if self.respect_expected_rq_timeout != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.dynamic_stats.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.start_child_span != false {
            os.write_bool(2, self.start_child_span)?;
        }
        for v in &self.upstream_log {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.suppress_envoy_headers != false {
            os.write_bool(4, self.suppress_envoy_headers)?;
        }
        for v in &self.strict_check_headers {
            os.write_string(5, &v)?;
        };
        if self.respect_expected_rq_timeout != false {
            os.write_bool(6, self.respect_expected_rq_timeout)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Router {
        Router::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::BoolValue>>(
                "dynamic_stats",
                |m: &Router| { &m.dynamic_stats },
                |m: &mut Router| { &mut m.dynamic_stats },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "start_child_span",
                |m: &Router| { &m.start_child_span },
                |m: &mut Router| { &mut m.start_child_span },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::accesslog::AccessLog>>(
                "upstream_log",
                |m: &Router| { &m.upstream_log },
                |m: &mut Router| { &mut m.upstream_log },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "suppress_envoy_headers",
                |m: &Router| { &m.suppress_envoy_headers },
                |m: &mut Router| { &mut m.suppress_envoy_headers },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "strict_check_headers",
                |m: &Router| { &m.strict_check_headers },
                |m: &mut Router| { &mut m.strict_check_headers },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "respect_expected_rq_timeout",
                |m: &Router| { &m.respect_expected_rq_timeout },
                |m: &mut Router| { &mut m.respect_expected_rq_timeout },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Router>(
                "Router",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Router {
        static instance: ::protobuf::rt::LazyV2<Router> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Router::new)
    }
}

impl ::protobuf::Clear for Router {
    fn clear(&mut self) {
        self.dynamic_stats.clear();
        self.start_child_span = false;
        self.upstream_log.clear();
        self.suppress_envoy_headers = false;
        self.strict_check_headers.clear();
        self.respect_expected_rq_timeout = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Router {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Router {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n9envoy/extensions/filters/http/router/v4alpha/router.proto\x12,envoy.e\
    xtensions.filters.http.router.v4alpha\x1a.envoy/config/accesslog/v4alpha\
    /accesslog.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1dudpa/annot\
    ations/status.proto\x1a!udpa/annotations/versioning.proto\x1a\x17validat\
    e/validate.proto\"\xb7\x04\n\x06Router\x12?\n\rdynamic_stats\x18\x01\x20\
    \x01(\x0b2\x1a.google.protobuf.BoolValueR\x0cdynamicStats\x12(\n\x10star\
    t_child_span\x18\x02\x20\x01(\x08R\x0estartChildSpan\x12L\n\x0cupstream_\
    log\x18\x03\x20\x03(\x0b2).envoy.config.accesslog.v4alpha.AccessLogR\x0b\
    upstreamLog\x124\n\x16suppress_envoy_headers\x18\x04\x20\x01(\x08R\x14su\
    ppressEnvoyHeaders\x12\xc7\x01\n\x14strict_check_headers\x18\x05\x20\x03\
    (\tR\x12strictCheckHeadersB\x94\x01\xfaB\x90\x01\x92\x01\x8c\x01\"\x89\
    \x01r\x86\x01R\x1ex-envoy-upstream-rq-timeout-msR&x-envoy-upstream-rq-pe\
    r-try-timeout-msR\x13x-envoy-max-retriesR\x15x-envoy-retry-grpc-onR\x10x\
    -envoy-retry-on\x12=\n\x1brespect_expected_rq_timeout\x18\x06\x20\x01(\
    \x08R\x18respectExpectedRqTimeout:5\x9a\xc5\x88\x1e0\n.envoy.extensions.\
    filters.http.router.v3.RouterBS\n:io.envoyproxy.envoy.extensions.filters\
    .http.router.v4alphaB\x0bRouterProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\
    \x03b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
