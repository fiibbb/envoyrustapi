// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/extensions/filters/http/aws_lambda/v3/aws_lambda.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct Config {
    // message fields
    pub arn: ::std::string::String,
    pub payload_passthrough: bool,
    pub invocation_mode: Config_InvocationMode,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Config {
    fn default() -> &'a Config {
        <Config as ::protobuf::Message>::default_instance()
    }
}

impl Config {
    pub fn new() -> Config {
        ::std::default::Default::default()
    }

    // string arn = 1;


    pub fn get_arn(&self) -> &str {
        &self.arn
    }
    pub fn clear_arn(&mut self) {
        self.arn.clear();
    }

    // Param is passed by value, moved
    pub fn set_arn(&mut self, v: ::std::string::String) {
        self.arn = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_arn(&mut self) -> &mut ::std::string::String {
        &mut self.arn
    }

    // Take field
    pub fn take_arn(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.arn, ::std::string::String::new())
    }

    // bool payload_passthrough = 2;


    pub fn get_payload_passthrough(&self) -> bool {
        self.payload_passthrough
    }
    pub fn clear_payload_passthrough(&mut self) {
        self.payload_passthrough = false;
    }

    // Param is passed by value, moved
    pub fn set_payload_passthrough(&mut self, v: bool) {
        self.payload_passthrough = v;
    }

    // .envoy.extensions.filters.http.aws_lambda.v3.Config.InvocationMode invocation_mode = 3;


    pub fn get_invocation_mode(&self) -> Config_InvocationMode {
        self.invocation_mode
    }
    pub fn clear_invocation_mode(&mut self) {
        self.invocation_mode = Config_InvocationMode::SYNCHRONOUS;
    }

    // Param is passed by value, moved
    pub fn set_invocation_mode(&mut self, v: Config_InvocationMode) {
        self.invocation_mode = v;
    }
}

impl ::protobuf::Message for Config {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.arn)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.payload_passthrough = tmp;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.invocation_mode, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.arn.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.arn);
        }
        if self.payload_passthrough != false {
            my_size += 2;
        }
        if self.invocation_mode != Config_InvocationMode::SYNCHRONOUS {
            my_size += ::protobuf::rt::enum_size(3, self.invocation_mode);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.arn.is_empty() {
            os.write_string(1, &self.arn)?;
        }
        if self.payload_passthrough != false {
            os.write_bool(2, self.payload_passthrough)?;
        }
        if self.invocation_mode != Config_InvocationMode::SYNCHRONOUS {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.invocation_mode))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Config {
        Config::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "arn",
                |m: &Config| { &m.arn },
                |m: &mut Config| { &mut m.arn },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "payload_passthrough",
                |m: &Config| { &m.payload_passthrough },
                |m: &mut Config| { &mut m.payload_passthrough },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Config_InvocationMode>>(
                "invocation_mode",
                |m: &Config| { &m.invocation_mode },
                |m: &mut Config| { &mut m.invocation_mode },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Config>(
                "Config",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Config {
        static instance: ::protobuf::rt::LazyV2<Config> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Config::new)
    }
}

impl ::protobuf::Clear for Config {
    fn clear(&mut self) {
        self.arn.clear();
        self.payload_passthrough = false;
        self.invocation_mode = Config_InvocationMode::SYNCHRONOUS;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Config {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Config {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Config_InvocationMode {
    SYNCHRONOUS = 0,
    ASYNCHRONOUS = 1,
}

impl ::protobuf::ProtobufEnum for Config_InvocationMode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Config_InvocationMode> {
        match value {
            0 => ::std::option::Option::Some(Config_InvocationMode::SYNCHRONOUS),
            1 => ::std::option::Option::Some(Config_InvocationMode::ASYNCHRONOUS),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Config_InvocationMode] = &[
            Config_InvocationMode::SYNCHRONOUS,
            Config_InvocationMode::ASYNCHRONOUS,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Config_InvocationMode>("Config.InvocationMode", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Config_InvocationMode {
}

impl ::std::default::Default for Config_InvocationMode {
    fn default() -> Self {
        Config_InvocationMode::SYNCHRONOUS
    }
}

impl ::protobuf::reflect::ProtobufValue for Config_InvocationMode {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PerRouteConfig {
    // message fields
    pub invoke_config: ::protobuf::SingularPtrField<Config>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PerRouteConfig {
    fn default() -> &'a PerRouteConfig {
        <PerRouteConfig as ::protobuf::Message>::default_instance()
    }
}

impl PerRouteConfig {
    pub fn new() -> PerRouteConfig {
        ::std::default::Default::default()
    }

    // .envoy.extensions.filters.http.aws_lambda.v3.Config invoke_config = 1;


    pub fn get_invoke_config(&self) -> &Config {
        self.invoke_config.as_ref().unwrap_or_else(|| <Config as ::protobuf::Message>::default_instance())
    }
    pub fn clear_invoke_config(&mut self) {
        self.invoke_config.clear();
    }

    pub fn has_invoke_config(&self) -> bool {
        self.invoke_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_invoke_config(&mut self, v: Config) {
        self.invoke_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_invoke_config(&mut self) -> &mut Config {
        if self.invoke_config.is_none() {
            self.invoke_config.set_default();
        }
        self.invoke_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_invoke_config(&mut self) -> Config {
        self.invoke_config.take().unwrap_or_else(|| Config::new())
    }
}

impl ::protobuf::Message for PerRouteConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.invoke_config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.invoke_config)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.invoke_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.invoke_config.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PerRouteConfig {
        PerRouteConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Config>>(
                "invoke_config",
                |m: &PerRouteConfig| { &m.invoke_config },
                |m: &mut PerRouteConfig| { &mut m.invoke_config },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PerRouteConfig>(
                "PerRouteConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PerRouteConfig {
        static instance: ::protobuf::rt::LazyV2<PerRouteConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PerRouteConfig::new)
    }
}

impl ::protobuf::Clear for PerRouteConfig {
    fn clear(&mut self) {
        self.invoke_config.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PerRouteConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PerRouteConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n<envoy/extensions/filters/http/aws_lambda/v3/aws_lambda.proto\x12+envo\
    y.extensions.filters.http.aws_lambda.v3\x1a\x1dudpa/annotations/status.p\
    roto\x1a!udpa/annotations/versioning.proto\x1a\x17validate/validate.prot\
    o\"\xbb\x02\n\x06Config\x12\x19\n\x03arn\x18\x01\x20\x01(\tR\x03arnB\x07\
    \xfaB\x04r\x02\x10\x01\x12/\n\x13payload_passthrough\x18\x02\x20\x01(\
    \x08R\x12payloadPassthrough\x12u\n\x0finvocation_mode\x18\x03\x20\x01(\
    \x0e2B.envoy.extensions.filters.http.aws_lambda.v3.Config.InvocationMode\
    R\x0einvocationModeB\x08\xfaB\x05\x82\x01\x02\x10\x01\"3\n\x0eInvocation\
    Mode\x12\x0f\n\x0bSYNCHRONOUS\x10\0\x12\x10\n\x0cASYNCHRONOUS\x10\x01:9\
    \x9a\xc5\x88\x1e4\n2envoy.config.filter.http.aws_lambda.v2alpha.Config\"\
    \xad\x01\n\x0ePerRouteConfig\x12X\n\rinvoke_config\x18\x01\x20\x01(\x0b2\
    3.envoy.extensions.filters.http.aws_lambda.v3.ConfigR\x0cinvokeConfig:A\
    \x9a\xc5\x88\x1e<\n:envoy.config.filter.http.aws_lambda.v2alpha.PerRoute\
    ConfigBU\n9io.envoyproxy.envoy.extensions.filters.http.aws_lambda.v3B\
    \x0eAwsLambdaProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
