// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/extensions/filters/common/fault/v3/fault.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct FaultDelay {
    // message fields
    pub percentage: ::protobuf::SingularPtrField<super::percent::FractionalPercent>,
    // message oneof groups
    pub fault_delay_secifier: ::std::option::Option<FaultDelay_oneof_fault_delay_secifier>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FaultDelay {
    fn default() -> &'a FaultDelay {
        <FaultDelay as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum FaultDelay_oneof_fault_delay_secifier {
    fixed_delay(::protobuf::well_known_types::Duration),
    header_delay(FaultDelay_HeaderDelay),
}

impl FaultDelay {
    pub fn new() -> FaultDelay {
        ::std::default::Default::default()
    }

    // .google.protobuf.Duration fixed_delay = 3;


    pub fn get_fixed_delay(&self) -> &::protobuf::well_known_types::Duration {
        match self.fault_delay_secifier {
            ::std::option::Option::Some(FaultDelay_oneof_fault_delay_secifier::fixed_delay(ref v)) => v,
            _ => <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_fixed_delay(&mut self) {
        self.fault_delay_secifier = ::std::option::Option::None;
    }

    pub fn has_fixed_delay(&self) -> bool {
        match self.fault_delay_secifier {
            ::std::option::Option::Some(FaultDelay_oneof_fault_delay_secifier::fixed_delay(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fixed_delay(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.fault_delay_secifier = ::std::option::Option::Some(FaultDelay_oneof_fault_delay_secifier::fixed_delay(v))
    }

    // Mutable pointer to the field.
    pub fn mut_fixed_delay(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if let ::std::option::Option::Some(FaultDelay_oneof_fault_delay_secifier::fixed_delay(_)) = self.fault_delay_secifier {
        } else {
            self.fault_delay_secifier = ::std::option::Option::Some(FaultDelay_oneof_fault_delay_secifier::fixed_delay(::protobuf::well_known_types::Duration::new()));
        }
        match self.fault_delay_secifier {
            ::std::option::Option::Some(FaultDelay_oneof_fault_delay_secifier::fixed_delay(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_fixed_delay(&mut self) -> ::protobuf::well_known_types::Duration {
        if self.has_fixed_delay() {
            match self.fault_delay_secifier.take() {
                ::std::option::Option::Some(FaultDelay_oneof_fault_delay_secifier::fixed_delay(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Duration::new()
        }
    }

    // .envoy.extensions.filters.common.fault.v3.FaultDelay.HeaderDelay header_delay = 5;


    pub fn get_header_delay(&self) -> &FaultDelay_HeaderDelay {
        match self.fault_delay_secifier {
            ::std::option::Option::Some(FaultDelay_oneof_fault_delay_secifier::header_delay(ref v)) => v,
            _ => <FaultDelay_HeaderDelay as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_header_delay(&mut self) {
        self.fault_delay_secifier = ::std::option::Option::None;
    }

    pub fn has_header_delay(&self) -> bool {
        match self.fault_delay_secifier {
            ::std::option::Option::Some(FaultDelay_oneof_fault_delay_secifier::header_delay(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_header_delay(&mut self, v: FaultDelay_HeaderDelay) {
        self.fault_delay_secifier = ::std::option::Option::Some(FaultDelay_oneof_fault_delay_secifier::header_delay(v))
    }

    // Mutable pointer to the field.
    pub fn mut_header_delay(&mut self) -> &mut FaultDelay_HeaderDelay {
        if let ::std::option::Option::Some(FaultDelay_oneof_fault_delay_secifier::header_delay(_)) = self.fault_delay_secifier {
        } else {
            self.fault_delay_secifier = ::std::option::Option::Some(FaultDelay_oneof_fault_delay_secifier::header_delay(FaultDelay_HeaderDelay::new()));
        }
        match self.fault_delay_secifier {
            ::std::option::Option::Some(FaultDelay_oneof_fault_delay_secifier::header_delay(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_header_delay(&mut self) -> FaultDelay_HeaderDelay {
        if self.has_header_delay() {
            match self.fault_delay_secifier.take() {
                ::std::option::Option::Some(FaultDelay_oneof_fault_delay_secifier::header_delay(v)) => v,
                _ => panic!(),
            }
        } else {
            FaultDelay_HeaderDelay::new()
        }
    }

    // .envoy.type.v3.FractionalPercent percentage = 4;


    pub fn get_percentage(&self) -> &super::percent::FractionalPercent {
        self.percentage.as_ref().unwrap_or_else(|| <super::percent::FractionalPercent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_percentage(&mut self) {
        self.percentage.clear();
    }

    pub fn has_percentage(&self) -> bool {
        self.percentage.is_some()
    }

    // Param is passed by value, moved
    pub fn set_percentage(&mut self, v: super::percent::FractionalPercent) {
        self.percentage = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_percentage(&mut self) -> &mut super::percent::FractionalPercent {
        if self.percentage.is_none() {
            self.percentage.set_default();
        }
        self.percentage.as_mut().unwrap()
    }

    // Take field
    pub fn take_percentage(&mut self) -> super::percent::FractionalPercent {
        self.percentage.take().unwrap_or_else(|| super::percent::FractionalPercent::new())
    }
}

impl ::protobuf::Message for FaultDelay {
    fn is_initialized(&self) -> bool {
        if let Some(FaultDelay_oneof_fault_delay_secifier::fixed_delay(ref v)) = self.fault_delay_secifier {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FaultDelay_oneof_fault_delay_secifier::header_delay(ref v)) = self.fault_delay_secifier {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.percentage {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.fault_delay_secifier = ::std::option::Option::Some(FaultDelay_oneof_fault_delay_secifier::fixed_delay(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.fault_delay_secifier = ::std::option::Option::Some(FaultDelay_oneof_fault_delay_secifier::header_delay(is.read_message()?));
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.percentage)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.percentage.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.fault_delay_secifier {
            match v {
                &FaultDelay_oneof_fault_delay_secifier::fixed_delay(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FaultDelay_oneof_fault_delay_secifier::header_delay(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.percentage.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.fault_delay_secifier {
            match v {
                &FaultDelay_oneof_fault_delay_secifier::fixed_delay(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FaultDelay_oneof_fault_delay_secifier::header_delay(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FaultDelay {
        FaultDelay::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Duration>(
                "fixed_delay",
                FaultDelay::has_fixed_delay,
                FaultDelay::get_fixed_delay,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, FaultDelay_HeaderDelay>(
                "header_delay",
                FaultDelay::has_header_delay,
                FaultDelay::get_header_delay,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::percent::FractionalPercent>>(
                "percentage",
                |m: &FaultDelay| { &m.percentage },
                |m: &mut FaultDelay| { &mut m.percentage },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FaultDelay>(
                "FaultDelay",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FaultDelay {
        static instance: ::protobuf::rt::LazyV2<FaultDelay> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FaultDelay::new)
    }
}

impl ::protobuf::Clear for FaultDelay {
    fn clear(&mut self) {
        self.fault_delay_secifier = ::std::option::Option::None;
        self.fault_delay_secifier = ::std::option::Option::None;
        self.percentage.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FaultDelay {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FaultDelay {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FaultDelay_HeaderDelay {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FaultDelay_HeaderDelay {
    fn default() -> &'a FaultDelay_HeaderDelay {
        <FaultDelay_HeaderDelay as ::protobuf::Message>::default_instance()
    }
}

impl FaultDelay_HeaderDelay {
    pub fn new() -> FaultDelay_HeaderDelay {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for FaultDelay_HeaderDelay {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FaultDelay_HeaderDelay {
        FaultDelay_HeaderDelay::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FaultDelay_HeaderDelay>(
                "FaultDelay.HeaderDelay",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FaultDelay_HeaderDelay {
        static instance: ::protobuf::rt::LazyV2<FaultDelay_HeaderDelay> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FaultDelay_HeaderDelay::new)
    }
}

impl ::protobuf::Clear for FaultDelay_HeaderDelay {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FaultDelay_HeaderDelay {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FaultDelay_HeaderDelay {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum FaultDelay_FaultDelayType {
    FIXED = 0,
}

impl ::protobuf::ProtobufEnum for FaultDelay_FaultDelayType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FaultDelay_FaultDelayType> {
        match value {
            0 => ::std::option::Option::Some(FaultDelay_FaultDelayType::FIXED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [FaultDelay_FaultDelayType] = &[
            FaultDelay_FaultDelayType::FIXED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<FaultDelay_FaultDelayType>("FaultDelay.FaultDelayType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for FaultDelay_FaultDelayType {
}

impl ::std::default::Default for FaultDelay_FaultDelayType {
    fn default() -> Self {
        FaultDelay_FaultDelayType::FIXED
    }
}

impl ::protobuf::reflect::ProtobufValue for FaultDelay_FaultDelayType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FaultRateLimit {
    // message fields
    pub percentage: ::protobuf::SingularPtrField<super::percent::FractionalPercent>,
    // message oneof groups
    pub limit_type: ::std::option::Option<FaultRateLimit_oneof_limit_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FaultRateLimit {
    fn default() -> &'a FaultRateLimit {
        <FaultRateLimit as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum FaultRateLimit_oneof_limit_type {
    fixed_limit(FaultRateLimit_FixedLimit),
    header_limit(FaultRateLimit_HeaderLimit),
}

impl FaultRateLimit {
    pub fn new() -> FaultRateLimit {
        ::std::default::Default::default()
    }

    // .envoy.extensions.filters.common.fault.v3.FaultRateLimit.FixedLimit fixed_limit = 1;


    pub fn get_fixed_limit(&self) -> &FaultRateLimit_FixedLimit {
        match self.limit_type {
            ::std::option::Option::Some(FaultRateLimit_oneof_limit_type::fixed_limit(ref v)) => v,
            _ => <FaultRateLimit_FixedLimit as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_fixed_limit(&mut self) {
        self.limit_type = ::std::option::Option::None;
    }

    pub fn has_fixed_limit(&self) -> bool {
        match self.limit_type {
            ::std::option::Option::Some(FaultRateLimit_oneof_limit_type::fixed_limit(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fixed_limit(&mut self, v: FaultRateLimit_FixedLimit) {
        self.limit_type = ::std::option::Option::Some(FaultRateLimit_oneof_limit_type::fixed_limit(v))
    }

    // Mutable pointer to the field.
    pub fn mut_fixed_limit(&mut self) -> &mut FaultRateLimit_FixedLimit {
        if let ::std::option::Option::Some(FaultRateLimit_oneof_limit_type::fixed_limit(_)) = self.limit_type {
        } else {
            self.limit_type = ::std::option::Option::Some(FaultRateLimit_oneof_limit_type::fixed_limit(FaultRateLimit_FixedLimit::new()));
        }
        match self.limit_type {
            ::std::option::Option::Some(FaultRateLimit_oneof_limit_type::fixed_limit(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_fixed_limit(&mut self) -> FaultRateLimit_FixedLimit {
        if self.has_fixed_limit() {
            match self.limit_type.take() {
                ::std::option::Option::Some(FaultRateLimit_oneof_limit_type::fixed_limit(v)) => v,
                _ => panic!(),
            }
        } else {
            FaultRateLimit_FixedLimit::new()
        }
    }

    // .envoy.extensions.filters.common.fault.v3.FaultRateLimit.HeaderLimit header_limit = 3;


    pub fn get_header_limit(&self) -> &FaultRateLimit_HeaderLimit {
        match self.limit_type {
            ::std::option::Option::Some(FaultRateLimit_oneof_limit_type::header_limit(ref v)) => v,
            _ => <FaultRateLimit_HeaderLimit as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_header_limit(&mut self) {
        self.limit_type = ::std::option::Option::None;
    }

    pub fn has_header_limit(&self) -> bool {
        match self.limit_type {
            ::std::option::Option::Some(FaultRateLimit_oneof_limit_type::header_limit(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_header_limit(&mut self, v: FaultRateLimit_HeaderLimit) {
        self.limit_type = ::std::option::Option::Some(FaultRateLimit_oneof_limit_type::header_limit(v))
    }

    // Mutable pointer to the field.
    pub fn mut_header_limit(&mut self) -> &mut FaultRateLimit_HeaderLimit {
        if let ::std::option::Option::Some(FaultRateLimit_oneof_limit_type::header_limit(_)) = self.limit_type {
        } else {
            self.limit_type = ::std::option::Option::Some(FaultRateLimit_oneof_limit_type::header_limit(FaultRateLimit_HeaderLimit::new()));
        }
        match self.limit_type {
            ::std::option::Option::Some(FaultRateLimit_oneof_limit_type::header_limit(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_header_limit(&mut self) -> FaultRateLimit_HeaderLimit {
        if self.has_header_limit() {
            match self.limit_type.take() {
                ::std::option::Option::Some(FaultRateLimit_oneof_limit_type::header_limit(v)) => v,
                _ => panic!(),
            }
        } else {
            FaultRateLimit_HeaderLimit::new()
        }
    }

    // .envoy.type.v3.FractionalPercent percentage = 2;


    pub fn get_percentage(&self) -> &super::percent::FractionalPercent {
        self.percentage.as_ref().unwrap_or_else(|| <super::percent::FractionalPercent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_percentage(&mut self) {
        self.percentage.clear();
    }

    pub fn has_percentage(&self) -> bool {
        self.percentage.is_some()
    }

    // Param is passed by value, moved
    pub fn set_percentage(&mut self, v: super::percent::FractionalPercent) {
        self.percentage = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_percentage(&mut self) -> &mut super::percent::FractionalPercent {
        if self.percentage.is_none() {
            self.percentage.set_default();
        }
        self.percentage.as_mut().unwrap()
    }

    // Take field
    pub fn take_percentage(&mut self) -> super::percent::FractionalPercent {
        self.percentage.take().unwrap_or_else(|| super::percent::FractionalPercent::new())
    }
}

impl ::protobuf::Message for FaultRateLimit {
    fn is_initialized(&self) -> bool {
        if let Some(FaultRateLimit_oneof_limit_type::fixed_limit(ref v)) = self.limit_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FaultRateLimit_oneof_limit_type::header_limit(ref v)) = self.limit_type {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.percentage {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.limit_type = ::std::option::Option::Some(FaultRateLimit_oneof_limit_type::fixed_limit(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.limit_type = ::std::option::Option::Some(FaultRateLimit_oneof_limit_type::header_limit(is.read_message()?));
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.percentage)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.percentage.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.limit_type {
            match v {
                &FaultRateLimit_oneof_limit_type::fixed_limit(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FaultRateLimit_oneof_limit_type::header_limit(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.percentage.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.limit_type {
            match v {
                &FaultRateLimit_oneof_limit_type::fixed_limit(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FaultRateLimit_oneof_limit_type::header_limit(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FaultRateLimit {
        FaultRateLimit::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, FaultRateLimit_FixedLimit>(
                "fixed_limit",
                FaultRateLimit::has_fixed_limit,
                FaultRateLimit::get_fixed_limit,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, FaultRateLimit_HeaderLimit>(
                "header_limit",
                FaultRateLimit::has_header_limit,
                FaultRateLimit::get_header_limit,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::percent::FractionalPercent>>(
                "percentage",
                |m: &FaultRateLimit| { &m.percentage },
                |m: &mut FaultRateLimit| { &mut m.percentage },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FaultRateLimit>(
                "FaultRateLimit",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FaultRateLimit {
        static instance: ::protobuf::rt::LazyV2<FaultRateLimit> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FaultRateLimit::new)
    }
}

impl ::protobuf::Clear for FaultRateLimit {
    fn clear(&mut self) {
        self.limit_type = ::std::option::Option::None;
        self.limit_type = ::std::option::Option::None;
        self.percentage.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FaultRateLimit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FaultRateLimit {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FaultRateLimit_FixedLimit {
    // message fields
    pub limit_kbps: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FaultRateLimit_FixedLimit {
    fn default() -> &'a FaultRateLimit_FixedLimit {
        <FaultRateLimit_FixedLimit as ::protobuf::Message>::default_instance()
    }
}

impl FaultRateLimit_FixedLimit {
    pub fn new() -> FaultRateLimit_FixedLimit {
        ::std::default::Default::default()
    }

    // uint64 limit_kbps = 1;


    pub fn get_limit_kbps(&self) -> u64 {
        self.limit_kbps
    }
    pub fn clear_limit_kbps(&mut self) {
        self.limit_kbps = 0;
    }

    // Param is passed by value, moved
    pub fn set_limit_kbps(&mut self, v: u64) {
        self.limit_kbps = v;
    }
}

impl ::protobuf::Message for FaultRateLimit_FixedLimit {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.limit_kbps = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.limit_kbps != 0 {
            my_size += ::protobuf::rt::value_size(1, self.limit_kbps, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.limit_kbps != 0 {
            os.write_uint64(1, self.limit_kbps)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FaultRateLimit_FixedLimit {
        FaultRateLimit_FixedLimit::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "limit_kbps",
                |m: &FaultRateLimit_FixedLimit| { &m.limit_kbps },
                |m: &mut FaultRateLimit_FixedLimit| { &mut m.limit_kbps },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FaultRateLimit_FixedLimit>(
                "FaultRateLimit.FixedLimit",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FaultRateLimit_FixedLimit {
        static instance: ::protobuf::rt::LazyV2<FaultRateLimit_FixedLimit> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FaultRateLimit_FixedLimit::new)
    }
}

impl ::protobuf::Clear for FaultRateLimit_FixedLimit {
    fn clear(&mut self) {
        self.limit_kbps = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FaultRateLimit_FixedLimit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FaultRateLimit_FixedLimit {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FaultRateLimit_HeaderLimit {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FaultRateLimit_HeaderLimit {
    fn default() -> &'a FaultRateLimit_HeaderLimit {
        <FaultRateLimit_HeaderLimit as ::protobuf::Message>::default_instance()
    }
}

impl FaultRateLimit_HeaderLimit {
    pub fn new() -> FaultRateLimit_HeaderLimit {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for FaultRateLimit_HeaderLimit {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FaultRateLimit_HeaderLimit {
        FaultRateLimit_HeaderLimit::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FaultRateLimit_HeaderLimit>(
                "FaultRateLimit.HeaderLimit",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FaultRateLimit_HeaderLimit {
        static instance: ::protobuf::rt::LazyV2<FaultRateLimit_HeaderLimit> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FaultRateLimit_HeaderLimit::new)
    }
}

impl ::protobuf::Clear for FaultRateLimit_HeaderLimit {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FaultRateLimit_HeaderLimit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FaultRateLimit_HeaderLimit {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n4envoy/extensions/filters/common/fault/v3/fault.proto\x12(envoy.extens\
    ions.filters.common.fault.v3\x1a\x1benvoy/type/v3/percent.proto\x1a\x1eg\
    oogle/protobuf/duration.proto\x1a#envoy/annotations/deprecation.proto\
    \x1a\x1dudpa/annotations/status.proto\x1a!udpa/annotations/versioning.pr\
    oto\x1a\x17validate/validate.proto\"\xc4\x03\n\nFaultDelay\x12F\n\x0bfix\
    ed_delay\x18\x03\x20\x01(\x0b2\x19.google.protobuf.DurationH\0R\nfixedDe\
    layB\x08\xfaB\x05\xaa\x01\x02*\0\x12e\n\x0cheader_delay\x18\x05\x20\x01(\
    \x0b2@.envoy.extensions.filters.common.fault.v3.FaultDelay.HeaderDelayH\
    \0R\x0bheaderDelay\x12@\n\npercentage\x18\x04\x20\x01(\x0b2\x20.envoy.ty\
    pe.v3.FractionalPercentR\npercentage\x1aI\n\x0bHeaderDelay::\x9a\xc5\x88\
    \x1e5\n3envoy.config.filter.fault.v2.FaultDelay.HeaderDelay\"\x1b\n\x0eF\
    aultDelayType\x12\t\n\x05FIXED\x10\0B\x1b\n\x14fault_delay_secifier\x12\
    \x03\xf8B\x01:.\x9a\xc5\x88\x1e)\n'envoy.config.filter.fault.v2.FaultDel\
    ayJ\x04\x08\x02\x10\x03J\x04\x08\x01\x10\x02R\x04type\"\xb0\x04\n\x0eFau\
    ltRateLimit\x12f\n\x0bfixed_limit\x18\x01\x20\x01(\x0b2C.envoy.extension\
    s.filters.common.fault.v3.FaultRateLimit.FixedLimitH\0R\nfixedLimit\x12i\
    \n\x0cheader_limit\x18\x03\x20\x01(\x0b2D.envoy.extensions.filters.commo\
    n.fault.v3.FaultRateLimit.HeaderLimitH\0R\x0bheaderLimit\x12@\n\npercent\
    age\x18\x02\x20\x01(\x0b2\x20.envoy.type.v3.FractionalPercentR\npercenta\
    ge\x1as\n\nFixedLimit\x12&\n\nlimit_kbps\x18\x01\x20\x01(\x04R\tlimitKbp\
    sB\x07\xfaB\x042\x02(\x01:=\x9a\xc5\x88\x1e8\n6envoy.config.filter.fault\
    .v2.FaultRateLimit.FixedLimit\x1aM\n\x0bHeaderLimit:>\x9a\xc5\x88\x1e9\n\
    7envoy.config.filter.fault.v2.FaultRateLimit.HeaderLimitB\x11\n\nlimit_t\
    ype\x12\x03\xf8B\x01:2\x9a\xc5\x88\x1e-\n+envoy.config.filter.fault.v2.F\
    aultRateLimitBN\n6io.envoyproxy.envoy.extensions.filters.common.fault.v3\
    B\nFaultProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
