// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/extensions/filters/udp/udp_proxy/v3/udp_proxy.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct UdpProxyConfig {
    // message fields
    pub stat_prefix: ::std::string::String,
    pub idle_timeout: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub use_original_src_ip: bool,
    pub hash_policies: ::protobuf::RepeatedField<UdpProxyConfig_HashPolicy>,
    // message oneof groups
    pub route_specifier: ::std::option::Option<UdpProxyConfig_oneof_route_specifier>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UdpProxyConfig {
    fn default() -> &'a UdpProxyConfig {
        <UdpProxyConfig as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum UdpProxyConfig_oneof_route_specifier {
    cluster(::std::string::String),
}

impl UdpProxyConfig {
    pub fn new() -> UdpProxyConfig {
        ::std::default::Default::default()
    }

    // string stat_prefix = 1;


    pub fn get_stat_prefix(&self) -> &str {
        &self.stat_prefix
    }
    pub fn clear_stat_prefix(&mut self) {
        self.stat_prefix.clear();
    }

    // Param is passed by value, moved
    pub fn set_stat_prefix(&mut self, v: ::std::string::String) {
        self.stat_prefix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stat_prefix(&mut self) -> &mut ::std::string::String {
        &mut self.stat_prefix
    }

    // Take field
    pub fn take_stat_prefix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.stat_prefix, ::std::string::String::new())
    }

    // string cluster = 2;


    pub fn get_cluster(&self) -> &str {
        match self.route_specifier {
            ::std::option::Option::Some(UdpProxyConfig_oneof_route_specifier::cluster(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_cluster(&mut self) {
        self.route_specifier = ::std::option::Option::None;
    }

    pub fn has_cluster(&self) -> bool {
        match self.route_specifier {
            ::std::option::Option::Some(UdpProxyConfig_oneof_route_specifier::cluster(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cluster(&mut self, v: ::std::string::String) {
        self.route_specifier = ::std::option::Option::Some(UdpProxyConfig_oneof_route_specifier::cluster(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cluster(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(UdpProxyConfig_oneof_route_specifier::cluster(_)) = self.route_specifier {
        } else {
            self.route_specifier = ::std::option::Option::Some(UdpProxyConfig_oneof_route_specifier::cluster(::std::string::String::new()));
        }
        match self.route_specifier {
            ::std::option::Option::Some(UdpProxyConfig_oneof_route_specifier::cluster(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cluster(&mut self) -> ::std::string::String {
        if self.has_cluster() {
            match self.route_specifier.take() {
                ::std::option::Option::Some(UdpProxyConfig_oneof_route_specifier::cluster(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .google.protobuf.Duration idle_timeout = 3;


    pub fn get_idle_timeout(&self) -> &::protobuf::well_known_types::Duration {
        self.idle_timeout.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_idle_timeout(&mut self) {
        self.idle_timeout.clear();
    }

    pub fn has_idle_timeout(&self) -> bool {
        self.idle_timeout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_idle_timeout(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.idle_timeout = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_idle_timeout(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.idle_timeout.is_none() {
            self.idle_timeout.set_default();
        }
        self.idle_timeout.as_mut().unwrap()
    }

    // Take field
    pub fn take_idle_timeout(&mut self) -> ::protobuf::well_known_types::Duration {
        self.idle_timeout.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // bool use_original_src_ip = 4;


    pub fn get_use_original_src_ip(&self) -> bool {
        self.use_original_src_ip
    }
    pub fn clear_use_original_src_ip(&mut self) {
        self.use_original_src_ip = false;
    }

    // Param is passed by value, moved
    pub fn set_use_original_src_ip(&mut self, v: bool) {
        self.use_original_src_ip = v;
    }

    // repeated .envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPolicy hash_policies = 5;


    pub fn get_hash_policies(&self) -> &[UdpProxyConfig_HashPolicy] {
        &self.hash_policies
    }
    pub fn clear_hash_policies(&mut self) {
        self.hash_policies.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash_policies(&mut self, v: ::protobuf::RepeatedField<UdpProxyConfig_HashPolicy>) {
        self.hash_policies = v;
    }

    // Mutable pointer to the field.
    pub fn mut_hash_policies(&mut self) -> &mut ::protobuf::RepeatedField<UdpProxyConfig_HashPolicy> {
        &mut self.hash_policies
    }

    // Take field
    pub fn take_hash_policies(&mut self) -> ::protobuf::RepeatedField<UdpProxyConfig_HashPolicy> {
        ::std::mem::replace(&mut self.hash_policies, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for UdpProxyConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.idle_timeout {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.hash_policies {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.stat_prefix)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.route_specifier = ::std::option::Option::Some(UdpProxyConfig_oneof_route_specifier::cluster(is.read_string()?));
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.idle_timeout)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.use_original_src_ip = tmp;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.hash_policies)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.stat_prefix.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.stat_prefix);
        }
        if let Some(ref v) = self.idle_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.use_original_src_ip != false {
            my_size += 2;
        }
        for value in &self.hash_policies {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let ::std::option::Option::Some(ref v) = self.route_specifier {
            match v {
                &UdpProxyConfig_oneof_route_specifier::cluster(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.stat_prefix.is_empty() {
            os.write_string(1, &self.stat_prefix)?;
        }
        if let Some(ref v) = self.idle_timeout.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.use_original_src_ip != false {
            os.write_bool(4, self.use_original_src_ip)?;
        }
        for v in &self.hash_policies {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let ::std::option::Option::Some(ref v) = self.route_specifier {
            match v {
                &UdpProxyConfig_oneof_route_specifier::cluster(ref v) => {
                    os.write_string(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UdpProxyConfig {
        UdpProxyConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "stat_prefix",
                |m: &UdpProxyConfig| { &m.stat_prefix },
                |m: &mut UdpProxyConfig| { &mut m.stat_prefix },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "cluster",
                UdpProxyConfig::has_cluster,
                UdpProxyConfig::get_cluster,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "idle_timeout",
                |m: &UdpProxyConfig| { &m.idle_timeout },
                |m: &mut UdpProxyConfig| { &mut m.idle_timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "use_original_src_ip",
                |m: &UdpProxyConfig| { &m.use_original_src_ip },
                |m: &mut UdpProxyConfig| { &mut m.use_original_src_ip },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<UdpProxyConfig_HashPolicy>>(
                "hash_policies",
                |m: &UdpProxyConfig| { &m.hash_policies },
                |m: &mut UdpProxyConfig| { &mut m.hash_policies },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UdpProxyConfig>(
                "UdpProxyConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UdpProxyConfig {
        static instance: ::protobuf::rt::LazyV2<UdpProxyConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UdpProxyConfig::new)
    }
}

impl ::protobuf::Clear for UdpProxyConfig {
    fn clear(&mut self) {
        self.stat_prefix.clear();
        self.route_specifier = ::std::option::Option::None;
        self.idle_timeout.clear();
        self.use_original_src_ip = false;
        self.hash_policies.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UdpProxyConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UdpProxyConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UdpProxyConfig_HashPolicy {
    // message oneof groups
    pub policy_specifier: ::std::option::Option<UdpProxyConfig_HashPolicy_oneof_policy_specifier>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UdpProxyConfig_HashPolicy {
    fn default() -> &'a UdpProxyConfig_HashPolicy {
        <UdpProxyConfig_HashPolicy as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum UdpProxyConfig_HashPolicy_oneof_policy_specifier {
    source_ip(bool),
}

impl UdpProxyConfig_HashPolicy {
    pub fn new() -> UdpProxyConfig_HashPolicy {
        ::std::default::Default::default()
    }

    // bool source_ip = 1;


    pub fn get_source_ip(&self) -> bool {
        match self.policy_specifier {
            ::std::option::Option::Some(UdpProxyConfig_HashPolicy_oneof_policy_specifier::source_ip(v)) => v,
            _ => false,
        }
    }
    pub fn clear_source_ip(&mut self) {
        self.policy_specifier = ::std::option::Option::None;
    }

    pub fn has_source_ip(&self) -> bool {
        match self.policy_specifier {
            ::std::option::Option::Some(UdpProxyConfig_HashPolicy_oneof_policy_specifier::source_ip(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_source_ip(&mut self, v: bool) {
        self.policy_specifier = ::std::option::Option::Some(UdpProxyConfig_HashPolicy_oneof_policy_specifier::source_ip(v))
    }
}

impl ::protobuf::Message for UdpProxyConfig_HashPolicy {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.policy_specifier = ::std::option::Option::Some(UdpProxyConfig_HashPolicy_oneof_policy_specifier::source_ip(is.read_bool()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.policy_specifier {
            match v {
                &UdpProxyConfig_HashPolicy_oneof_policy_specifier::source_ip(v) => {
                    my_size += 2;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.policy_specifier {
            match v {
                &UdpProxyConfig_HashPolicy_oneof_policy_specifier::source_ip(v) => {
                    os.write_bool(1, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UdpProxyConfig_HashPolicy {
        UdpProxyConfig_HashPolicy::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "source_ip",
                UdpProxyConfig_HashPolicy::has_source_ip,
                UdpProxyConfig_HashPolicy::get_source_ip,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UdpProxyConfig_HashPolicy>(
                "UdpProxyConfig.HashPolicy",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UdpProxyConfig_HashPolicy {
        static instance: ::protobuf::rt::LazyV2<UdpProxyConfig_HashPolicy> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UdpProxyConfig_HashPolicy::new)
    }
}

impl ::protobuf::Clear for UdpProxyConfig_HashPolicy {
    fn clear(&mut self) {
        self.policy_specifier = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UdpProxyConfig_HashPolicy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UdpProxyConfig_HashPolicy {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n9envoy/extensions/filters/udp/udp_proxy/v3/udp_proxy.proto\x12)envoy.e\
    xtensions.filters.udp.udp_proxy.v3\x1a\x1egoogle/protobuf/duration.proto\
    \x1a\x1dudpa/annotations/status.proto\x1a!udpa/annotations/versioning.pr\
    oto\x1a\x17validate/validate.proto\"\xe9\x03\n\x0eUdpProxyConfig\x12(\n\
    \x0bstat_prefix\x18\x01\x20\x01(\tR\nstatPrefixB\x07\xfaB\x04r\x02\x10\
    \x01\x12#\n\x07cluster\x18\x02\x20\x01(\tH\0R\x07clusterB\x07\xfaB\x04r\
    \x02\x10\x01\x12<\n\x0cidle_timeout\x18\x03\x20\x01(\x0b2\x19.google.pro\
    tobuf.DurationR\x0bidleTimeout\x12-\n\x13use_original_src_ip\x18\x04\x20\
    \x01(\x08R\x10useOriginalSrcIp\x12s\n\rhash_policies\x18\x05\x20\x03(\
    \x0b2D.envoy.extensions.filters.udp.udp_proxy.v3.UdpProxyConfig.HashPoli\
    cyR\x0chashPoliciesB\x08\xfaB\x05\x92\x01\x02\x10\x01\x1aM\n\nHashPolicy\
    \x12&\n\tsource_ip\x18\x01\x20\x01(\x08H\0R\x08sourceIpB\x07\xfaB\x04j\
    \x02\x08\x01B\x17\n\x10policy_specifier\x12\x03\xf8B\x01B\x16\n\x0froute\
    _specifier\x12\x03\xf8B\x01:?\x9a\xc5\x88\x1e:\n8envoy.config.filter.udp\
    .udp_proxy.v2alpha.UdpProxyConfigBR\n7io.envoyproxy.envoy.extensions.fil\
    ters.udp.udp_proxy.v3B\rUdpProxyProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\
    \x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
