// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/extensions/filters/udp/dns_filter/v4alpha/dns_filter.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct DnsFilterConfig {
    // message fields
    pub stat_prefix: ::std::string::String,
    pub server_config: ::protobuf::SingularPtrField<DnsFilterConfig_ServerContextConfig>,
    pub client_config: ::protobuf::SingularPtrField<DnsFilterConfig_ClientContextConfig>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DnsFilterConfig {
    fn default() -> &'a DnsFilterConfig {
        <DnsFilterConfig as ::protobuf::Message>::default_instance()
    }
}

impl DnsFilterConfig {
    pub fn new() -> DnsFilterConfig {
        ::std::default::Default::default()
    }

    // string stat_prefix = 1;


    pub fn get_stat_prefix(&self) -> &str {
        &self.stat_prefix
    }
    pub fn clear_stat_prefix(&mut self) {
        self.stat_prefix.clear();
    }

    // Param is passed by value, moved
    pub fn set_stat_prefix(&mut self, v: ::std::string::String) {
        self.stat_prefix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stat_prefix(&mut self) -> &mut ::std::string::String {
        &mut self.stat_prefix
    }

    // Take field
    pub fn take_stat_prefix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.stat_prefix, ::std::string::String::new())
    }

    // .envoy.extensions.filters.udp.dns_filter.v4alpha.DnsFilterConfig.ServerContextConfig server_config = 2;


    pub fn get_server_config(&self) -> &DnsFilterConfig_ServerContextConfig {
        self.server_config.as_ref().unwrap_or_else(|| <DnsFilterConfig_ServerContextConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_server_config(&mut self) {
        self.server_config.clear();
    }

    pub fn has_server_config(&self) -> bool {
        self.server_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_server_config(&mut self, v: DnsFilterConfig_ServerContextConfig) {
        self.server_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_server_config(&mut self) -> &mut DnsFilterConfig_ServerContextConfig {
        if self.server_config.is_none() {
            self.server_config.set_default();
        }
        self.server_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_server_config(&mut self) -> DnsFilterConfig_ServerContextConfig {
        self.server_config.take().unwrap_or_else(|| DnsFilterConfig_ServerContextConfig::new())
    }

    // .envoy.extensions.filters.udp.dns_filter.v4alpha.DnsFilterConfig.ClientContextConfig client_config = 3;


    pub fn get_client_config(&self) -> &DnsFilterConfig_ClientContextConfig {
        self.client_config.as_ref().unwrap_or_else(|| <DnsFilterConfig_ClientContextConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_client_config(&mut self) {
        self.client_config.clear();
    }

    pub fn has_client_config(&self) -> bool {
        self.client_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_config(&mut self, v: DnsFilterConfig_ClientContextConfig) {
        self.client_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_config(&mut self) -> &mut DnsFilterConfig_ClientContextConfig {
        if self.client_config.is_none() {
            self.client_config.set_default();
        }
        self.client_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_client_config(&mut self) -> DnsFilterConfig_ClientContextConfig {
        self.client_config.take().unwrap_or_else(|| DnsFilterConfig_ClientContextConfig::new())
    }
}

impl ::protobuf::Message for DnsFilterConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.server_config {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.client_config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.stat_prefix)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.server_config)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.client_config)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.stat_prefix.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.stat_prefix);
        }
        if let Some(ref v) = self.server_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.client_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.stat_prefix.is_empty() {
            os.write_string(1, &self.stat_prefix)?;
        }
        if let Some(ref v) = self.server_config.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.client_config.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DnsFilterConfig {
        DnsFilterConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "stat_prefix",
                |m: &DnsFilterConfig| { &m.stat_prefix },
                |m: &mut DnsFilterConfig| { &mut m.stat_prefix },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DnsFilterConfig_ServerContextConfig>>(
                "server_config",
                |m: &DnsFilterConfig| { &m.server_config },
                |m: &mut DnsFilterConfig| { &mut m.server_config },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DnsFilterConfig_ClientContextConfig>>(
                "client_config",
                |m: &DnsFilterConfig| { &m.client_config },
                |m: &mut DnsFilterConfig| { &mut m.client_config },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DnsFilterConfig>(
                "DnsFilterConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DnsFilterConfig {
        static instance: ::protobuf::rt::LazyV2<DnsFilterConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DnsFilterConfig::new)
    }
}

impl ::protobuf::Clear for DnsFilterConfig {
    fn clear(&mut self) {
        self.stat_prefix.clear();
        self.server_config.clear();
        self.client_config.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DnsFilterConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DnsFilterConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DnsFilterConfig_ServerContextConfig {
    // message oneof groups
    pub config_source: ::std::option::Option<DnsFilterConfig_ServerContextConfig_oneof_config_source>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DnsFilterConfig_ServerContextConfig {
    fn default() -> &'a DnsFilterConfig_ServerContextConfig {
        <DnsFilterConfig_ServerContextConfig as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum DnsFilterConfig_ServerContextConfig_oneof_config_source {
    inline_dns_table(super::dns_table::DnsTable),
    external_dns_table(super::base::DataSource),
}

impl DnsFilterConfig_ServerContextConfig {
    pub fn new() -> DnsFilterConfig_ServerContextConfig {
        ::std::default::Default::default()
    }

    // .envoy.data.dns.v4alpha.DnsTable inline_dns_table = 1;


    pub fn get_inline_dns_table(&self) -> &super::dns_table::DnsTable {
        match self.config_source {
            ::std::option::Option::Some(DnsFilterConfig_ServerContextConfig_oneof_config_source::inline_dns_table(ref v)) => v,
            _ => <super::dns_table::DnsTable as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_inline_dns_table(&mut self) {
        self.config_source = ::std::option::Option::None;
    }

    pub fn has_inline_dns_table(&self) -> bool {
        match self.config_source {
            ::std::option::Option::Some(DnsFilterConfig_ServerContextConfig_oneof_config_source::inline_dns_table(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_inline_dns_table(&mut self, v: super::dns_table::DnsTable) {
        self.config_source = ::std::option::Option::Some(DnsFilterConfig_ServerContextConfig_oneof_config_source::inline_dns_table(v))
    }

    // Mutable pointer to the field.
    pub fn mut_inline_dns_table(&mut self) -> &mut super::dns_table::DnsTable {
        if let ::std::option::Option::Some(DnsFilterConfig_ServerContextConfig_oneof_config_source::inline_dns_table(_)) = self.config_source {
        } else {
            self.config_source = ::std::option::Option::Some(DnsFilterConfig_ServerContextConfig_oneof_config_source::inline_dns_table(super::dns_table::DnsTable::new()));
        }
        match self.config_source {
            ::std::option::Option::Some(DnsFilterConfig_ServerContextConfig_oneof_config_source::inline_dns_table(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_inline_dns_table(&mut self) -> super::dns_table::DnsTable {
        if self.has_inline_dns_table() {
            match self.config_source.take() {
                ::std::option::Option::Some(DnsFilterConfig_ServerContextConfig_oneof_config_source::inline_dns_table(v)) => v,
                _ => panic!(),
            }
        } else {
            super::dns_table::DnsTable::new()
        }
    }

    // .envoy.config.core.v4alpha.DataSource external_dns_table = 2;


    pub fn get_external_dns_table(&self) -> &super::base::DataSource {
        match self.config_source {
            ::std::option::Option::Some(DnsFilterConfig_ServerContextConfig_oneof_config_source::external_dns_table(ref v)) => v,
            _ => <super::base::DataSource as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_external_dns_table(&mut self) {
        self.config_source = ::std::option::Option::None;
    }

    pub fn has_external_dns_table(&self) -> bool {
        match self.config_source {
            ::std::option::Option::Some(DnsFilterConfig_ServerContextConfig_oneof_config_source::external_dns_table(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_external_dns_table(&mut self, v: super::base::DataSource) {
        self.config_source = ::std::option::Option::Some(DnsFilterConfig_ServerContextConfig_oneof_config_source::external_dns_table(v))
    }

    // Mutable pointer to the field.
    pub fn mut_external_dns_table(&mut self) -> &mut super::base::DataSource {
        if let ::std::option::Option::Some(DnsFilterConfig_ServerContextConfig_oneof_config_source::external_dns_table(_)) = self.config_source {
        } else {
            self.config_source = ::std::option::Option::Some(DnsFilterConfig_ServerContextConfig_oneof_config_source::external_dns_table(super::base::DataSource::new()));
        }
        match self.config_source {
            ::std::option::Option::Some(DnsFilterConfig_ServerContextConfig_oneof_config_source::external_dns_table(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_external_dns_table(&mut self) -> super::base::DataSource {
        if self.has_external_dns_table() {
            match self.config_source.take() {
                ::std::option::Option::Some(DnsFilterConfig_ServerContextConfig_oneof_config_source::external_dns_table(v)) => v,
                _ => panic!(),
            }
        } else {
            super::base::DataSource::new()
        }
    }
}

impl ::protobuf::Message for DnsFilterConfig_ServerContextConfig {
    fn is_initialized(&self) -> bool {
        if let Some(DnsFilterConfig_ServerContextConfig_oneof_config_source::inline_dns_table(ref v)) = self.config_source {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(DnsFilterConfig_ServerContextConfig_oneof_config_source::external_dns_table(ref v)) = self.config_source {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config_source = ::std::option::Option::Some(DnsFilterConfig_ServerContextConfig_oneof_config_source::inline_dns_table(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config_source = ::std::option::Option::Some(DnsFilterConfig_ServerContextConfig_oneof_config_source::external_dns_table(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.config_source {
            match v {
                &DnsFilterConfig_ServerContextConfig_oneof_config_source::inline_dns_table(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &DnsFilterConfig_ServerContextConfig_oneof_config_source::external_dns_table(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.config_source {
            match v {
                &DnsFilterConfig_ServerContextConfig_oneof_config_source::inline_dns_table(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &DnsFilterConfig_ServerContextConfig_oneof_config_source::external_dns_table(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DnsFilterConfig_ServerContextConfig {
        DnsFilterConfig_ServerContextConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::dns_table::DnsTable>(
                "inline_dns_table",
                DnsFilterConfig_ServerContextConfig::has_inline_dns_table,
                DnsFilterConfig_ServerContextConfig::get_inline_dns_table,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::base::DataSource>(
                "external_dns_table",
                DnsFilterConfig_ServerContextConfig::has_external_dns_table,
                DnsFilterConfig_ServerContextConfig::get_external_dns_table,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DnsFilterConfig_ServerContextConfig>(
                "DnsFilterConfig.ServerContextConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DnsFilterConfig_ServerContextConfig {
        static instance: ::protobuf::rt::LazyV2<DnsFilterConfig_ServerContextConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DnsFilterConfig_ServerContextConfig::new)
    }
}

impl ::protobuf::Clear for DnsFilterConfig_ServerContextConfig {
    fn clear(&mut self) {
        self.config_source = ::std::option::Option::None;
        self.config_source = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DnsFilterConfig_ServerContextConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DnsFilterConfig_ServerContextConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DnsFilterConfig_ClientContextConfig {
    // message fields
    pub resolver_timeout: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub upstream_resolvers: ::protobuf::RepeatedField<super::address::Address>,
    pub max_pending_lookups: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DnsFilterConfig_ClientContextConfig {
    fn default() -> &'a DnsFilterConfig_ClientContextConfig {
        <DnsFilterConfig_ClientContextConfig as ::protobuf::Message>::default_instance()
    }
}

impl DnsFilterConfig_ClientContextConfig {
    pub fn new() -> DnsFilterConfig_ClientContextConfig {
        ::std::default::Default::default()
    }

    // .google.protobuf.Duration resolver_timeout = 1;


    pub fn get_resolver_timeout(&self) -> &::protobuf::well_known_types::Duration {
        self.resolver_timeout.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resolver_timeout(&mut self) {
        self.resolver_timeout.clear();
    }

    pub fn has_resolver_timeout(&self) -> bool {
        self.resolver_timeout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resolver_timeout(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.resolver_timeout = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resolver_timeout(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.resolver_timeout.is_none() {
            self.resolver_timeout.set_default();
        }
        self.resolver_timeout.as_mut().unwrap()
    }

    // Take field
    pub fn take_resolver_timeout(&mut self) -> ::protobuf::well_known_types::Duration {
        self.resolver_timeout.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // repeated .envoy.config.core.v4alpha.Address upstream_resolvers = 2;


    pub fn get_upstream_resolvers(&self) -> &[super::address::Address] {
        &self.upstream_resolvers
    }
    pub fn clear_upstream_resolvers(&mut self) {
        self.upstream_resolvers.clear();
    }

    // Param is passed by value, moved
    pub fn set_upstream_resolvers(&mut self, v: ::protobuf::RepeatedField<super::address::Address>) {
        self.upstream_resolvers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_upstream_resolvers(&mut self) -> &mut ::protobuf::RepeatedField<super::address::Address> {
        &mut self.upstream_resolvers
    }

    // Take field
    pub fn take_upstream_resolvers(&mut self) -> ::protobuf::RepeatedField<super::address::Address> {
        ::std::mem::replace(&mut self.upstream_resolvers, ::protobuf::RepeatedField::new())
    }

    // uint64 max_pending_lookups = 3;


    pub fn get_max_pending_lookups(&self) -> u64 {
        self.max_pending_lookups
    }
    pub fn clear_max_pending_lookups(&mut self) {
        self.max_pending_lookups = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_pending_lookups(&mut self, v: u64) {
        self.max_pending_lookups = v;
    }
}

impl ::protobuf::Message for DnsFilterConfig_ClientContextConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.resolver_timeout {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.upstream_resolvers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resolver_timeout)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.upstream_resolvers)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.max_pending_lookups = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.resolver_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.upstream_resolvers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.max_pending_lookups != 0 {
            my_size += ::protobuf::rt::value_size(3, self.max_pending_lookups, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.resolver_timeout.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.upstream_resolvers {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.max_pending_lookups != 0 {
            os.write_uint64(3, self.max_pending_lookups)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DnsFilterConfig_ClientContextConfig {
        DnsFilterConfig_ClientContextConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "resolver_timeout",
                |m: &DnsFilterConfig_ClientContextConfig| { &m.resolver_timeout },
                |m: &mut DnsFilterConfig_ClientContextConfig| { &mut m.resolver_timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::address::Address>>(
                "upstream_resolvers",
                |m: &DnsFilterConfig_ClientContextConfig| { &m.upstream_resolvers },
                |m: &mut DnsFilterConfig_ClientContextConfig| { &mut m.upstream_resolvers },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "max_pending_lookups",
                |m: &DnsFilterConfig_ClientContextConfig| { &m.max_pending_lookups },
                |m: &mut DnsFilterConfig_ClientContextConfig| { &mut m.max_pending_lookups },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DnsFilterConfig_ClientContextConfig>(
                "DnsFilterConfig.ClientContextConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DnsFilterConfig_ClientContextConfig {
        static instance: ::protobuf::rt::LazyV2<DnsFilterConfig_ClientContextConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DnsFilterConfig_ClientContextConfig::new)
    }
}

impl ::protobuf::Clear for DnsFilterConfig_ClientContextConfig {
    fn clear(&mut self) {
        self.resolver_timeout.clear();
        self.upstream_resolvers.clear();
        self.max_pending_lookups = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DnsFilterConfig_ClientContextConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DnsFilterConfig_ClientContextConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n@envoy/extensions/filters/udp/dns_filter/v4alpha/dns_filter.proto\x12/\
    envoy.extensions.filters.udp.dns_filter.v4alpha\x1a'envoy/config/core/v4\
    alpha/address.proto\x1a$envoy/config/core/v4alpha/base.proto\x1a&envoy/d\
    ata/dns/v4alpha/dns_table.proto\x1a\x1egoogle/protobuf/duration.proto\
    \x1a\x1dudpa/annotations/status.proto\x1a!udpa/annotations/versioning.pr\
    oto\x1a\x17validate/validate.proto\"\xfa\x07\n\x0fDnsFilterConfig\x12(\n\
    \x0bstat_prefix\x18\x01\x20\x01(\tR\nstatPrefixB\x07\xfaB\x04r\x02\x10\
    \x01\x12y\n\rserver_config\x18\x02\x20\x01(\x0b2T.envoy.extensions.filte\
    rs.udp.dns_filter.v4alpha.DnsFilterConfig.ServerContextConfigR\x0cserver\
    Config\x12y\n\rclient_config\x18\x03\x20\x01(\x0b2T.envoy.extensions.fil\
    ters.udp.dns_filter.v4alpha.DnsFilterConfig.ClientContextConfigR\x0cclie\
    ntConfig\x1a\xac\x02\n\x13ServerContextConfig\x12L\n\x10inline_dns_table\
    \x18\x01\x20\x01(\x0b2\x20.envoy.data.dns.v4alpha.DnsTableH\0R\x0einline\
    DnsTable\x12U\n\x12external_dns_table\x18\x02\x20\x01(\x0b2%.envoy.confi\
    g.core.v4alpha.DataSourceH\0R\x10externalDnsTableB\x14\n\rconfig_source\
    \x12\x03\xf8B\x01:Z\x9a\xc5\x88\x1eU\nSenvoy.extensions.filters.udp.dns_\
    filter.v3alpha.DnsFilterConfig.ServerContextConfig\x1a\xcf\x02\n\x13Clie\
    ntContextConfig\x12P\n\x10resolver_timeout\x18\x01\x20\x01(\x0b2\x19.goo\
    gle.protobuf.DurationR\x0fresolverTimeoutB\n\xfaB\x07\xaa\x01\x042\x02\
    \x08\x01\x12Q\n\x12upstream_resolvers\x18\x02\x20\x03(\x0b2\".envoy.conf\
    ig.core.v4alpha.AddressR\x11upstreamResolvers\x127\n\x13max_pending_look\
    ups\x18\x03\x20\x01(\x04R\x11maxPendingLookupsB\x07\xfaB\x042\x02(\x01:Z\
    \x9a\xc5\x88\x1eU\nSenvoy.extensions.filters.udp.dns_filter.v3alpha.DnsF\
    ilterConfig.ClientContextConfig:F\x9a\xc5\x88\x1eA\n?envoy.extensions.fi\
    lters.udp.dns_filter.v3alpha.DnsFilterConfigBa\n=io.envoyproxy.envoy.ext\
    ensions.filters.udp.dns_filter.v4alphaB\x0eDnsFilterProtoP\x01\xba\x80\
    \xc8\xd1\x06\x02\x08\x01\xba\x80\xc8\xd1\x06\x02\x10\x03b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
