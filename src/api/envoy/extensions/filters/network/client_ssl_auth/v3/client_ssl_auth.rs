// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/extensions/filters/network/client_ssl_auth/v3/client_ssl_auth.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct ClientSSLAuth {
    // message fields
    pub auth_api_cluster: ::std::string::String,
    pub stat_prefix: ::std::string::String,
    pub refresh_delay: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub ip_white_list: ::protobuf::RepeatedField<super::address::CidrRange>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientSSLAuth {
    fn default() -> &'a ClientSSLAuth {
        <ClientSSLAuth as ::protobuf::Message>::default_instance()
    }
}

impl ClientSSLAuth {
    pub fn new() -> ClientSSLAuth {
        ::std::default::Default::default()
    }

    // string auth_api_cluster = 1;


    pub fn get_auth_api_cluster(&self) -> &str {
        &self.auth_api_cluster
    }
    pub fn clear_auth_api_cluster(&mut self) {
        self.auth_api_cluster.clear();
    }

    // Param is passed by value, moved
    pub fn set_auth_api_cluster(&mut self, v: ::std::string::String) {
        self.auth_api_cluster = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_auth_api_cluster(&mut self) -> &mut ::std::string::String {
        &mut self.auth_api_cluster
    }

    // Take field
    pub fn take_auth_api_cluster(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.auth_api_cluster, ::std::string::String::new())
    }

    // string stat_prefix = 2;


    pub fn get_stat_prefix(&self) -> &str {
        &self.stat_prefix
    }
    pub fn clear_stat_prefix(&mut self) {
        self.stat_prefix.clear();
    }

    // Param is passed by value, moved
    pub fn set_stat_prefix(&mut self, v: ::std::string::String) {
        self.stat_prefix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stat_prefix(&mut self) -> &mut ::std::string::String {
        &mut self.stat_prefix
    }

    // Take field
    pub fn take_stat_prefix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.stat_prefix, ::std::string::String::new())
    }

    // .google.protobuf.Duration refresh_delay = 3;


    pub fn get_refresh_delay(&self) -> &::protobuf::well_known_types::Duration {
        self.refresh_delay.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_refresh_delay(&mut self) {
        self.refresh_delay.clear();
    }

    pub fn has_refresh_delay(&self) -> bool {
        self.refresh_delay.is_some()
    }

    // Param is passed by value, moved
    pub fn set_refresh_delay(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.refresh_delay = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_refresh_delay(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.refresh_delay.is_none() {
            self.refresh_delay.set_default();
        }
        self.refresh_delay.as_mut().unwrap()
    }

    // Take field
    pub fn take_refresh_delay(&mut self) -> ::protobuf::well_known_types::Duration {
        self.refresh_delay.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // repeated .envoy.config.core.v3.CidrRange ip_white_list = 4;


    pub fn get_ip_white_list(&self) -> &[super::address::CidrRange] {
        &self.ip_white_list
    }
    pub fn clear_ip_white_list(&mut self) {
        self.ip_white_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_ip_white_list(&mut self, v: ::protobuf::RepeatedField<super::address::CidrRange>) {
        self.ip_white_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ip_white_list(&mut self) -> &mut ::protobuf::RepeatedField<super::address::CidrRange> {
        &mut self.ip_white_list
    }

    // Take field
    pub fn take_ip_white_list(&mut self) -> ::protobuf::RepeatedField<super::address::CidrRange> {
        ::std::mem::replace(&mut self.ip_white_list, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ClientSSLAuth {
    fn is_initialized(&self) -> bool {
        for v in &self.refresh_delay {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ip_white_list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.auth_api_cluster)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.stat_prefix)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.refresh_delay)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.ip_white_list)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.auth_api_cluster.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.auth_api_cluster);
        }
        if !self.stat_prefix.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.stat_prefix);
        }
        if let Some(ref v) = self.refresh_delay.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.ip_white_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.auth_api_cluster.is_empty() {
            os.write_string(1, &self.auth_api_cluster)?;
        }
        if !self.stat_prefix.is_empty() {
            os.write_string(2, &self.stat_prefix)?;
        }
        if let Some(ref v) = self.refresh_delay.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.ip_white_list {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientSSLAuth {
        ClientSSLAuth::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "auth_api_cluster",
                |m: &ClientSSLAuth| { &m.auth_api_cluster },
                |m: &mut ClientSSLAuth| { &mut m.auth_api_cluster },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "stat_prefix",
                |m: &ClientSSLAuth| { &m.stat_prefix },
                |m: &mut ClientSSLAuth| { &mut m.stat_prefix },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "refresh_delay",
                |m: &ClientSSLAuth| { &m.refresh_delay },
                |m: &mut ClientSSLAuth| { &mut m.refresh_delay },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::address::CidrRange>>(
                "ip_white_list",
                |m: &ClientSSLAuth| { &m.ip_white_list },
                |m: &mut ClientSSLAuth| { &mut m.ip_white_list },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientSSLAuth>(
                "ClientSSLAuth",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientSSLAuth {
        static instance: ::protobuf::rt::LazyV2<ClientSSLAuth> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientSSLAuth::new)
    }
}

impl ::protobuf::Clear for ClientSSLAuth {
    fn clear(&mut self) {
        self.auth_api_cluster.clear();
        self.stat_prefix.clear();
        self.refresh_delay.clear();
        self.ip_white_list.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientSSLAuth {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientSSLAuth {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \nIenvoy/extensions/filters/network/client_ssl_auth/v3/client_ssl_auth.p\
    roto\x123envoy.extensions.filters.network.client_ssl_auth.v3\x1a\"envoy/\
    config/core/v3/address.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\
    \x1eudpa/annotations/migrate.proto\x1a\x1dudpa/annotations/status.proto\
    \x1a!udpa/annotations/versioning.proto\x1a\x17validate/validate.proto\"\
    \xd2\x02\n\rClientSSLAuth\x127\n\x10auth_api_cluster\x18\x01\x20\x01(\tR\
    \x0eauthApiClusterB\r\xfaB\nr\x08\x10\x01\xc0\x01\x02\xc8\x01\0\x12(\n\
    \x0bstat_prefix\x18\x02\x20\x01(\tR\nstatPrefixB\x07\xfaB\x04r\x02\x10\
    \x01\x12>\n\rrefresh_delay\x18\x03\x20\x01(\x0b2\x19.google.protobuf.Dur\
    ationR\x0crefreshDelay\x12Y\n\rip_white_list\x18\x04\x20\x03(\x0b2\x1f.e\
    nvoy.config.core.v3.CidrRangeR\x0bipWhiteListB\x14\xf2\x98\xfe\x8f\x05\
    \x0e\n\x0cip_allowlist:C\x9a\xc5\x88\x1e>\n<envoy.config.filter.network.\
    client_ssl_auth.v2.ClientSSLAuthBa\nAio.envoyproxy.envoy.extensions.filt\
    ers.network.client_ssl_auth.v3B\x12ClientSslAuthProtoP\x01\xba\x80\xc8\
    \xd1\x06\x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
