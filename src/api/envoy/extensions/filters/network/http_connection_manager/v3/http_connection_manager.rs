// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/extensions/filters/network/http_connection_manager/v3/http_connection_manager.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct HttpConnectionManager {
    // message fields
    pub codec_type: HttpConnectionManager_CodecType,
    pub stat_prefix: ::std::string::String,
    pub http_filters: ::protobuf::RepeatedField<HttpFilter>,
    pub add_user_agent: ::protobuf::SingularPtrField<::protobuf::well_known_types::BoolValue>,
    pub tracing: ::protobuf::SingularPtrField<HttpConnectionManager_Tracing>,
    pub common_http_protocol_options: ::protobuf::SingularPtrField<super::protocol::HttpProtocolOptions>,
    pub http_protocol_options: ::protobuf::SingularPtrField<super::protocol::Http1ProtocolOptions>,
    pub http2_protocol_options: ::protobuf::SingularPtrField<super::protocol::Http2ProtocolOptions>,
    pub server_name: ::std::string::String,
    pub server_header_transformation: HttpConnectionManager_ServerHeaderTransformation,
    pub max_request_headers_kb: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub stream_idle_timeout: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub request_timeout: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub request_headers_timeout: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub drain_timeout: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub delayed_close_timeout: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub access_log: ::protobuf::RepeatedField<super::accesslog::AccessLog>,
    pub use_remote_address: ::protobuf::SingularPtrField<::protobuf::well_known_types::BoolValue>,
    pub xff_num_trusted_hops: u32,
    pub internal_address_config: ::protobuf::SingularPtrField<HttpConnectionManager_InternalAddressConfig>,
    pub skip_xff_append: bool,
    pub via: ::std::string::String,
    pub generate_request_id: ::protobuf::SingularPtrField<::protobuf::well_known_types::BoolValue>,
    pub preserve_external_request_id: bool,
    pub always_set_request_id_in_response: bool,
    pub forward_client_cert_details: HttpConnectionManager_ForwardClientCertDetails,
    pub set_current_client_cert_details: ::protobuf::SingularPtrField<HttpConnectionManager_SetCurrentClientCertDetails>,
    pub proxy_100_continue: bool,
    pub represent_ipv4_remote_address_as_ipv4_mapped_ipv6: bool,
    pub upgrade_configs: ::protobuf::RepeatedField<HttpConnectionManager_UpgradeConfig>,
    pub normalize_path: ::protobuf::SingularPtrField<::protobuf::well_known_types::BoolValue>,
    pub merge_slashes: bool,
    pub request_id_extension: ::protobuf::SingularPtrField<RequestIDExtension>,
    pub local_reply_config: ::protobuf::SingularPtrField<LocalReplyConfig>,
    pub strip_matching_host_port: bool,
    pub stream_error_on_invalid_http_message: ::protobuf::SingularPtrField<::protobuf::well_known_types::BoolValue>,
    // message oneof groups
    pub route_specifier: ::std::option::Option<HttpConnectionManager_oneof_route_specifier>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HttpConnectionManager {
    fn default() -> &'a HttpConnectionManager {
        <HttpConnectionManager as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum HttpConnectionManager_oneof_route_specifier {
    rds(Rds),
    route_config(super::route::RouteConfiguration),
    scoped_routes(ScopedRoutes),
}

impl HttpConnectionManager {
    pub fn new() -> HttpConnectionManager {
        ::std::default::Default::default()
    }

    // .envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.CodecType codec_type = 1;


    pub fn get_codec_type(&self) -> HttpConnectionManager_CodecType {
        self.codec_type
    }
    pub fn clear_codec_type(&mut self) {
        self.codec_type = HttpConnectionManager_CodecType::AUTO;
    }

    // Param is passed by value, moved
    pub fn set_codec_type(&mut self, v: HttpConnectionManager_CodecType) {
        self.codec_type = v;
    }

    // string stat_prefix = 2;


    pub fn get_stat_prefix(&self) -> &str {
        &self.stat_prefix
    }
    pub fn clear_stat_prefix(&mut self) {
        self.stat_prefix.clear();
    }

    // Param is passed by value, moved
    pub fn set_stat_prefix(&mut self, v: ::std::string::String) {
        self.stat_prefix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stat_prefix(&mut self) -> &mut ::std::string::String {
        &mut self.stat_prefix
    }

    // Take field
    pub fn take_stat_prefix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.stat_prefix, ::std::string::String::new())
    }

    // .envoy.extensions.filters.network.http_connection_manager.v3.Rds rds = 3;


    pub fn get_rds(&self) -> &Rds {
        match self.route_specifier {
            ::std::option::Option::Some(HttpConnectionManager_oneof_route_specifier::rds(ref v)) => v,
            _ => <Rds as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_rds(&mut self) {
        self.route_specifier = ::std::option::Option::None;
    }

    pub fn has_rds(&self) -> bool {
        match self.route_specifier {
            ::std::option::Option::Some(HttpConnectionManager_oneof_route_specifier::rds(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_rds(&mut self, v: Rds) {
        self.route_specifier = ::std::option::Option::Some(HttpConnectionManager_oneof_route_specifier::rds(v))
    }

    // Mutable pointer to the field.
    pub fn mut_rds(&mut self) -> &mut Rds {
        if let ::std::option::Option::Some(HttpConnectionManager_oneof_route_specifier::rds(_)) = self.route_specifier {
        } else {
            self.route_specifier = ::std::option::Option::Some(HttpConnectionManager_oneof_route_specifier::rds(Rds::new()));
        }
        match self.route_specifier {
            ::std::option::Option::Some(HttpConnectionManager_oneof_route_specifier::rds(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_rds(&mut self) -> Rds {
        if self.has_rds() {
            match self.route_specifier.take() {
                ::std::option::Option::Some(HttpConnectionManager_oneof_route_specifier::rds(v)) => v,
                _ => panic!(),
            }
        } else {
            Rds::new()
        }
    }

    // .envoy.config.route.v3.RouteConfiguration route_config = 4;


    pub fn get_route_config(&self) -> &super::route::RouteConfiguration {
        match self.route_specifier {
            ::std::option::Option::Some(HttpConnectionManager_oneof_route_specifier::route_config(ref v)) => v,
            _ => <super::route::RouteConfiguration as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_route_config(&mut self) {
        self.route_specifier = ::std::option::Option::None;
    }

    pub fn has_route_config(&self) -> bool {
        match self.route_specifier {
            ::std::option::Option::Some(HttpConnectionManager_oneof_route_specifier::route_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_route_config(&mut self, v: super::route::RouteConfiguration) {
        self.route_specifier = ::std::option::Option::Some(HttpConnectionManager_oneof_route_specifier::route_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_route_config(&mut self) -> &mut super::route::RouteConfiguration {
        if let ::std::option::Option::Some(HttpConnectionManager_oneof_route_specifier::route_config(_)) = self.route_specifier {
        } else {
            self.route_specifier = ::std::option::Option::Some(HttpConnectionManager_oneof_route_specifier::route_config(super::route::RouteConfiguration::new()));
        }
        match self.route_specifier {
            ::std::option::Option::Some(HttpConnectionManager_oneof_route_specifier::route_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_route_config(&mut self) -> super::route::RouteConfiguration {
        if self.has_route_config() {
            match self.route_specifier.take() {
                ::std::option::Option::Some(HttpConnectionManager_oneof_route_specifier::route_config(v)) => v,
                _ => panic!(),
            }
        } else {
            super::route::RouteConfiguration::new()
        }
    }

    // .envoy.extensions.filters.network.http_connection_manager.v3.ScopedRoutes scoped_routes = 31;


    pub fn get_scoped_routes(&self) -> &ScopedRoutes {
        match self.route_specifier {
            ::std::option::Option::Some(HttpConnectionManager_oneof_route_specifier::scoped_routes(ref v)) => v,
            _ => <ScopedRoutes as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_scoped_routes(&mut self) {
        self.route_specifier = ::std::option::Option::None;
    }

    pub fn has_scoped_routes(&self) -> bool {
        match self.route_specifier {
            ::std::option::Option::Some(HttpConnectionManager_oneof_route_specifier::scoped_routes(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_scoped_routes(&mut self, v: ScopedRoutes) {
        self.route_specifier = ::std::option::Option::Some(HttpConnectionManager_oneof_route_specifier::scoped_routes(v))
    }

    // Mutable pointer to the field.
    pub fn mut_scoped_routes(&mut self) -> &mut ScopedRoutes {
        if let ::std::option::Option::Some(HttpConnectionManager_oneof_route_specifier::scoped_routes(_)) = self.route_specifier {
        } else {
            self.route_specifier = ::std::option::Option::Some(HttpConnectionManager_oneof_route_specifier::scoped_routes(ScopedRoutes::new()));
        }
        match self.route_specifier {
            ::std::option::Option::Some(HttpConnectionManager_oneof_route_specifier::scoped_routes(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_scoped_routes(&mut self) -> ScopedRoutes {
        if self.has_scoped_routes() {
            match self.route_specifier.take() {
                ::std::option::Option::Some(HttpConnectionManager_oneof_route_specifier::scoped_routes(v)) => v,
                _ => panic!(),
            }
        } else {
            ScopedRoutes::new()
        }
    }

    // repeated .envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter http_filters = 5;


    pub fn get_http_filters(&self) -> &[HttpFilter] {
        &self.http_filters
    }
    pub fn clear_http_filters(&mut self) {
        self.http_filters.clear();
    }

    // Param is passed by value, moved
    pub fn set_http_filters(&mut self, v: ::protobuf::RepeatedField<HttpFilter>) {
        self.http_filters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_http_filters(&mut self) -> &mut ::protobuf::RepeatedField<HttpFilter> {
        &mut self.http_filters
    }

    // Take field
    pub fn take_http_filters(&mut self) -> ::protobuf::RepeatedField<HttpFilter> {
        ::std::mem::replace(&mut self.http_filters, ::protobuf::RepeatedField::new())
    }

    // .google.protobuf.BoolValue add_user_agent = 6;


    pub fn get_add_user_agent(&self) -> &::protobuf::well_known_types::BoolValue {
        self.add_user_agent.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::BoolValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_add_user_agent(&mut self) {
        self.add_user_agent.clear();
    }

    pub fn has_add_user_agent(&self) -> bool {
        self.add_user_agent.is_some()
    }

    // Param is passed by value, moved
    pub fn set_add_user_agent(&mut self, v: ::protobuf::well_known_types::BoolValue) {
        self.add_user_agent = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_add_user_agent(&mut self) -> &mut ::protobuf::well_known_types::BoolValue {
        if self.add_user_agent.is_none() {
            self.add_user_agent.set_default();
        }
        self.add_user_agent.as_mut().unwrap()
    }

    // Take field
    pub fn take_add_user_agent(&mut self) -> ::protobuf::well_known_types::BoolValue {
        self.add_user_agent.take().unwrap_or_else(|| ::protobuf::well_known_types::BoolValue::new())
    }

    // .envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.Tracing tracing = 7;


    pub fn get_tracing(&self) -> &HttpConnectionManager_Tracing {
        self.tracing.as_ref().unwrap_or_else(|| <HttpConnectionManager_Tracing as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tracing(&mut self) {
        self.tracing.clear();
    }

    pub fn has_tracing(&self) -> bool {
        self.tracing.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tracing(&mut self, v: HttpConnectionManager_Tracing) {
        self.tracing = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tracing(&mut self) -> &mut HttpConnectionManager_Tracing {
        if self.tracing.is_none() {
            self.tracing.set_default();
        }
        self.tracing.as_mut().unwrap()
    }

    // Take field
    pub fn take_tracing(&mut self) -> HttpConnectionManager_Tracing {
        self.tracing.take().unwrap_or_else(|| HttpConnectionManager_Tracing::new())
    }

    // .envoy.config.core.v3.HttpProtocolOptions common_http_protocol_options = 35;


    pub fn get_common_http_protocol_options(&self) -> &super::protocol::HttpProtocolOptions {
        self.common_http_protocol_options.as_ref().unwrap_or_else(|| <super::protocol::HttpProtocolOptions as ::protobuf::Message>::default_instance())
    }
    pub fn clear_common_http_protocol_options(&mut self) {
        self.common_http_protocol_options.clear();
    }

    pub fn has_common_http_protocol_options(&self) -> bool {
        self.common_http_protocol_options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_common_http_protocol_options(&mut self, v: super::protocol::HttpProtocolOptions) {
        self.common_http_protocol_options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_common_http_protocol_options(&mut self) -> &mut super::protocol::HttpProtocolOptions {
        if self.common_http_protocol_options.is_none() {
            self.common_http_protocol_options.set_default();
        }
        self.common_http_protocol_options.as_mut().unwrap()
    }

    // Take field
    pub fn take_common_http_protocol_options(&mut self) -> super::protocol::HttpProtocolOptions {
        self.common_http_protocol_options.take().unwrap_or_else(|| super::protocol::HttpProtocolOptions::new())
    }

    // .envoy.config.core.v3.Http1ProtocolOptions http_protocol_options = 8;


    pub fn get_http_protocol_options(&self) -> &super::protocol::Http1ProtocolOptions {
        self.http_protocol_options.as_ref().unwrap_or_else(|| <super::protocol::Http1ProtocolOptions as ::protobuf::Message>::default_instance())
    }
    pub fn clear_http_protocol_options(&mut self) {
        self.http_protocol_options.clear();
    }

    pub fn has_http_protocol_options(&self) -> bool {
        self.http_protocol_options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_http_protocol_options(&mut self, v: super::protocol::Http1ProtocolOptions) {
        self.http_protocol_options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_http_protocol_options(&mut self) -> &mut super::protocol::Http1ProtocolOptions {
        if self.http_protocol_options.is_none() {
            self.http_protocol_options.set_default();
        }
        self.http_protocol_options.as_mut().unwrap()
    }

    // Take field
    pub fn take_http_protocol_options(&mut self) -> super::protocol::Http1ProtocolOptions {
        self.http_protocol_options.take().unwrap_or_else(|| super::protocol::Http1ProtocolOptions::new())
    }

    // .envoy.config.core.v3.Http2ProtocolOptions http2_protocol_options = 9;


    pub fn get_http2_protocol_options(&self) -> &super::protocol::Http2ProtocolOptions {
        self.http2_protocol_options.as_ref().unwrap_or_else(|| <super::protocol::Http2ProtocolOptions as ::protobuf::Message>::default_instance())
    }
    pub fn clear_http2_protocol_options(&mut self) {
        self.http2_protocol_options.clear();
    }

    pub fn has_http2_protocol_options(&self) -> bool {
        self.http2_protocol_options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_http2_protocol_options(&mut self, v: super::protocol::Http2ProtocolOptions) {
        self.http2_protocol_options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_http2_protocol_options(&mut self) -> &mut super::protocol::Http2ProtocolOptions {
        if self.http2_protocol_options.is_none() {
            self.http2_protocol_options.set_default();
        }
        self.http2_protocol_options.as_mut().unwrap()
    }

    // Take field
    pub fn take_http2_protocol_options(&mut self) -> super::protocol::Http2ProtocolOptions {
        self.http2_protocol_options.take().unwrap_or_else(|| super::protocol::Http2ProtocolOptions::new())
    }

    // string server_name = 10;


    pub fn get_server_name(&self) -> &str {
        &self.server_name
    }
    pub fn clear_server_name(&mut self) {
        self.server_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_server_name(&mut self, v: ::std::string::String) {
        self.server_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_server_name(&mut self) -> &mut ::std::string::String {
        &mut self.server_name
    }

    // Take field
    pub fn take_server_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.server_name, ::std::string::String::new())
    }

    // .envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.ServerHeaderTransformation server_header_transformation = 34;


    pub fn get_server_header_transformation(&self) -> HttpConnectionManager_ServerHeaderTransformation {
        self.server_header_transformation
    }
    pub fn clear_server_header_transformation(&mut self) {
        self.server_header_transformation = HttpConnectionManager_ServerHeaderTransformation::OVERWRITE;
    }

    // Param is passed by value, moved
    pub fn set_server_header_transformation(&mut self, v: HttpConnectionManager_ServerHeaderTransformation) {
        self.server_header_transformation = v;
    }

    // .google.protobuf.UInt32Value max_request_headers_kb = 29;


    pub fn get_max_request_headers_kb(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.max_request_headers_kb.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_max_request_headers_kb(&mut self) {
        self.max_request_headers_kb.clear();
    }

    pub fn has_max_request_headers_kb(&self) -> bool {
        self.max_request_headers_kb.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_request_headers_kb(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.max_request_headers_kb = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_request_headers_kb(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.max_request_headers_kb.is_none() {
            self.max_request_headers_kb.set_default();
        }
        self.max_request_headers_kb.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_request_headers_kb(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.max_request_headers_kb.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.Duration stream_idle_timeout = 24;


    pub fn get_stream_idle_timeout(&self) -> &::protobuf::well_known_types::Duration {
        self.stream_idle_timeout.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_stream_idle_timeout(&mut self) {
        self.stream_idle_timeout.clear();
    }

    pub fn has_stream_idle_timeout(&self) -> bool {
        self.stream_idle_timeout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stream_idle_timeout(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.stream_idle_timeout = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stream_idle_timeout(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.stream_idle_timeout.is_none() {
            self.stream_idle_timeout.set_default();
        }
        self.stream_idle_timeout.as_mut().unwrap()
    }

    // Take field
    pub fn take_stream_idle_timeout(&mut self) -> ::protobuf::well_known_types::Duration {
        self.stream_idle_timeout.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.Duration request_timeout = 28;


    pub fn get_request_timeout(&self) -> &::protobuf::well_known_types::Duration {
        self.request_timeout.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_request_timeout(&mut self) {
        self.request_timeout.clear();
    }

    pub fn has_request_timeout(&self) -> bool {
        self.request_timeout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request_timeout(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.request_timeout = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_timeout(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.request_timeout.is_none() {
            self.request_timeout.set_default();
        }
        self.request_timeout.as_mut().unwrap()
    }

    // Take field
    pub fn take_request_timeout(&mut self) -> ::protobuf::well_known_types::Duration {
        self.request_timeout.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.Duration request_headers_timeout = 41;


    pub fn get_request_headers_timeout(&self) -> &::protobuf::well_known_types::Duration {
        self.request_headers_timeout.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_request_headers_timeout(&mut self) {
        self.request_headers_timeout.clear();
    }

    pub fn has_request_headers_timeout(&self) -> bool {
        self.request_headers_timeout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request_headers_timeout(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.request_headers_timeout = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_headers_timeout(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.request_headers_timeout.is_none() {
            self.request_headers_timeout.set_default();
        }
        self.request_headers_timeout.as_mut().unwrap()
    }

    // Take field
    pub fn take_request_headers_timeout(&mut self) -> ::protobuf::well_known_types::Duration {
        self.request_headers_timeout.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.Duration drain_timeout = 12;


    pub fn get_drain_timeout(&self) -> &::protobuf::well_known_types::Duration {
        self.drain_timeout.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_drain_timeout(&mut self) {
        self.drain_timeout.clear();
    }

    pub fn has_drain_timeout(&self) -> bool {
        self.drain_timeout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_drain_timeout(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.drain_timeout = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_drain_timeout(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.drain_timeout.is_none() {
            self.drain_timeout.set_default();
        }
        self.drain_timeout.as_mut().unwrap()
    }

    // Take field
    pub fn take_drain_timeout(&mut self) -> ::protobuf::well_known_types::Duration {
        self.drain_timeout.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.Duration delayed_close_timeout = 26;


    pub fn get_delayed_close_timeout(&self) -> &::protobuf::well_known_types::Duration {
        self.delayed_close_timeout.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_delayed_close_timeout(&mut self) {
        self.delayed_close_timeout.clear();
    }

    pub fn has_delayed_close_timeout(&self) -> bool {
        self.delayed_close_timeout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_delayed_close_timeout(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.delayed_close_timeout = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_delayed_close_timeout(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.delayed_close_timeout.is_none() {
            self.delayed_close_timeout.set_default();
        }
        self.delayed_close_timeout.as_mut().unwrap()
    }

    // Take field
    pub fn take_delayed_close_timeout(&mut self) -> ::protobuf::well_known_types::Duration {
        self.delayed_close_timeout.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // repeated .envoy.config.accesslog.v3.AccessLog access_log = 13;


    pub fn get_access_log(&self) -> &[super::accesslog::AccessLog] {
        &self.access_log
    }
    pub fn clear_access_log(&mut self) {
        self.access_log.clear();
    }

    // Param is passed by value, moved
    pub fn set_access_log(&mut self, v: ::protobuf::RepeatedField<super::accesslog::AccessLog>) {
        self.access_log = v;
    }

    // Mutable pointer to the field.
    pub fn mut_access_log(&mut self) -> &mut ::protobuf::RepeatedField<super::accesslog::AccessLog> {
        &mut self.access_log
    }

    // Take field
    pub fn take_access_log(&mut self) -> ::protobuf::RepeatedField<super::accesslog::AccessLog> {
        ::std::mem::replace(&mut self.access_log, ::protobuf::RepeatedField::new())
    }

    // .google.protobuf.BoolValue use_remote_address = 14;


    pub fn get_use_remote_address(&self) -> &::protobuf::well_known_types::BoolValue {
        self.use_remote_address.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::BoolValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_use_remote_address(&mut self) {
        self.use_remote_address.clear();
    }

    pub fn has_use_remote_address(&self) -> bool {
        self.use_remote_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_use_remote_address(&mut self, v: ::protobuf::well_known_types::BoolValue) {
        self.use_remote_address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_use_remote_address(&mut self) -> &mut ::protobuf::well_known_types::BoolValue {
        if self.use_remote_address.is_none() {
            self.use_remote_address.set_default();
        }
        self.use_remote_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_use_remote_address(&mut self) -> ::protobuf::well_known_types::BoolValue {
        self.use_remote_address.take().unwrap_or_else(|| ::protobuf::well_known_types::BoolValue::new())
    }

    // uint32 xff_num_trusted_hops = 19;


    pub fn get_xff_num_trusted_hops(&self) -> u32 {
        self.xff_num_trusted_hops
    }
    pub fn clear_xff_num_trusted_hops(&mut self) {
        self.xff_num_trusted_hops = 0;
    }

    // Param is passed by value, moved
    pub fn set_xff_num_trusted_hops(&mut self, v: u32) {
        self.xff_num_trusted_hops = v;
    }

    // .envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.InternalAddressConfig internal_address_config = 25;


    pub fn get_internal_address_config(&self) -> &HttpConnectionManager_InternalAddressConfig {
        self.internal_address_config.as_ref().unwrap_or_else(|| <HttpConnectionManager_InternalAddressConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_internal_address_config(&mut self) {
        self.internal_address_config.clear();
    }

    pub fn has_internal_address_config(&self) -> bool {
        self.internal_address_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_internal_address_config(&mut self, v: HttpConnectionManager_InternalAddressConfig) {
        self.internal_address_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_internal_address_config(&mut self) -> &mut HttpConnectionManager_InternalAddressConfig {
        if self.internal_address_config.is_none() {
            self.internal_address_config.set_default();
        }
        self.internal_address_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_internal_address_config(&mut self) -> HttpConnectionManager_InternalAddressConfig {
        self.internal_address_config.take().unwrap_or_else(|| HttpConnectionManager_InternalAddressConfig::new())
    }

    // bool skip_xff_append = 21;


    pub fn get_skip_xff_append(&self) -> bool {
        self.skip_xff_append
    }
    pub fn clear_skip_xff_append(&mut self) {
        self.skip_xff_append = false;
    }

    // Param is passed by value, moved
    pub fn set_skip_xff_append(&mut self, v: bool) {
        self.skip_xff_append = v;
    }

    // string via = 22;


    pub fn get_via(&self) -> &str {
        &self.via
    }
    pub fn clear_via(&mut self) {
        self.via.clear();
    }

    // Param is passed by value, moved
    pub fn set_via(&mut self, v: ::std::string::String) {
        self.via = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_via(&mut self) -> &mut ::std::string::String {
        &mut self.via
    }

    // Take field
    pub fn take_via(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.via, ::std::string::String::new())
    }

    // .google.protobuf.BoolValue generate_request_id = 15;


    pub fn get_generate_request_id(&self) -> &::protobuf::well_known_types::BoolValue {
        self.generate_request_id.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::BoolValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_generate_request_id(&mut self) {
        self.generate_request_id.clear();
    }

    pub fn has_generate_request_id(&self) -> bool {
        self.generate_request_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_generate_request_id(&mut self, v: ::protobuf::well_known_types::BoolValue) {
        self.generate_request_id = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_generate_request_id(&mut self) -> &mut ::protobuf::well_known_types::BoolValue {
        if self.generate_request_id.is_none() {
            self.generate_request_id.set_default();
        }
        self.generate_request_id.as_mut().unwrap()
    }

    // Take field
    pub fn take_generate_request_id(&mut self) -> ::protobuf::well_known_types::BoolValue {
        self.generate_request_id.take().unwrap_or_else(|| ::protobuf::well_known_types::BoolValue::new())
    }

    // bool preserve_external_request_id = 32;


    pub fn get_preserve_external_request_id(&self) -> bool {
        self.preserve_external_request_id
    }
    pub fn clear_preserve_external_request_id(&mut self) {
        self.preserve_external_request_id = false;
    }

    // Param is passed by value, moved
    pub fn set_preserve_external_request_id(&mut self, v: bool) {
        self.preserve_external_request_id = v;
    }

    // bool always_set_request_id_in_response = 37;


    pub fn get_always_set_request_id_in_response(&self) -> bool {
        self.always_set_request_id_in_response
    }
    pub fn clear_always_set_request_id_in_response(&mut self) {
        self.always_set_request_id_in_response = false;
    }

    // Param is passed by value, moved
    pub fn set_always_set_request_id_in_response(&mut self, v: bool) {
        self.always_set_request_id_in_response = v;
    }

    // .envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.ForwardClientCertDetails forward_client_cert_details = 16;


    pub fn get_forward_client_cert_details(&self) -> HttpConnectionManager_ForwardClientCertDetails {
        self.forward_client_cert_details
    }
    pub fn clear_forward_client_cert_details(&mut self) {
        self.forward_client_cert_details = HttpConnectionManager_ForwardClientCertDetails::SANITIZE;
    }

    // Param is passed by value, moved
    pub fn set_forward_client_cert_details(&mut self, v: HttpConnectionManager_ForwardClientCertDetails) {
        self.forward_client_cert_details = v;
    }

    // .envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.SetCurrentClientCertDetails set_current_client_cert_details = 17;


    pub fn get_set_current_client_cert_details(&self) -> &HttpConnectionManager_SetCurrentClientCertDetails {
        self.set_current_client_cert_details.as_ref().unwrap_or_else(|| <HttpConnectionManager_SetCurrentClientCertDetails as ::protobuf::Message>::default_instance())
    }
    pub fn clear_set_current_client_cert_details(&mut self) {
        self.set_current_client_cert_details.clear();
    }

    pub fn has_set_current_client_cert_details(&self) -> bool {
        self.set_current_client_cert_details.is_some()
    }

    // Param is passed by value, moved
    pub fn set_set_current_client_cert_details(&mut self, v: HttpConnectionManager_SetCurrentClientCertDetails) {
        self.set_current_client_cert_details = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_set_current_client_cert_details(&mut self) -> &mut HttpConnectionManager_SetCurrentClientCertDetails {
        if self.set_current_client_cert_details.is_none() {
            self.set_current_client_cert_details.set_default();
        }
        self.set_current_client_cert_details.as_mut().unwrap()
    }

    // Take field
    pub fn take_set_current_client_cert_details(&mut self) -> HttpConnectionManager_SetCurrentClientCertDetails {
        self.set_current_client_cert_details.take().unwrap_or_else(|| HttpConnectionManager_SetCurrentClientCertDetails::new())
    }

    // bool proxy_100_continue = 18;


    pub fn get_proxy_100_continue(&self) -> bool {
        self.proxy_100_continue
    }
    pub fn clear_proxy_100_continue(&mut self) {
        self.proxy_100_continue = false;
    }

    // Param is passed by value, moved
    pub fn set_proxy_100_continue(&mut self, v: bool) {
        self.proxy_100_continue = v;
    }

    // bool represent_ipv4_remote_address_as_ipv4_mapped_ipv6 = 20;


    pub fn get_represent_ipv4_remote_address_as_ipv4_mapped_ipv6(&self) -> bool {
        self.represent_ipv4_remote_address_as_ipv4_mapped_ipv6
    }
    pub fn clear_represent_ipv4_remote_address_as_ipv4_mapped_ipv6(&mut self) {
        self.represent_ipv4_remote_address_as_ipv4_mapped_ipv6 = false;
    }

    // Param is passed by value, moved
    pub fn set_represent_ipv4_remote_address_as_ipv4_mapped_ipv6(&mut self, v: bool) {
        self.represent_ipv4_remote_address_as_ipv4_mapped_ipv6 = v;
    }

    // repeated .envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager.UpgradeConfig upgrade_configs = 23;


    pub fn get_upgrade_configs(&self) -> &[HttpConnectionManager_UpgradeConfig] {
        &self.upgrade_configs
    }
    pub fn clear_upgrade_configs(&mut self) {
        self.upgrade_configs.clear();
    }

    // Param is passed by value, moved
    pub fn set_upgrade_configs(&mut self, v: ::protobuf::RepeatedField<HttpConnectionManager_UpgradeConfig>) {
        self.upgrade_configs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_upgrade_configs(&mut self) -> &mut ::protobuf::RepeatedField<HttpConnectionManager_UpgradeConfig> {
        &mut self.upgrade_configs
    }

    // Take field
    pub fn take_upgrade_configs(&mut self) -> ::protobuf::RepeatedField<HttpConnectionManager_UpgradeConfig> {
        ::std::mem::replace(&mut self.upgrade_configs, ::protobuf::RepeatedField::new())
    }

    // .google.protobuf.BoolValue normalize_path = 30;


    pub fn get_normalize_path(&self) -> &::protobuf::well_known_types::BoolValue {
        self.normalize_path.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::BoolValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_normalize_path(&mut self) {
        self.normalize_path.clear();
    }

    pub fn has_normalize_path(&self) -> bool {
        self.normalize_path.is_some()
    }

    // Param is passed by value, moved
    pub fn set_normalize_path(&mut self, v: ::protobuf::well_known_types::BoolValue) {
        self.normalize_path = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_normalize_path(&mut self) -> &mut ::protobuf::well_known_types::BoolValue {
        if self.normalize_path.is_none() {
            self.normalize_path.set_default();
        }
        self.normalize_path.as_mut().unwrap()
    }

    // Take field
    pub fn take_normalize_path(&mut self) -> ::protobuf::well_known_types::BoolValue {
        self.normalize_path.take().unwrap_or_else(|| ::protobuf::well_known_types::BoolValue::new())
    }

    // bool merge_slashes = 33;


    pub fn get_merge_slashes(&self) -> bool {
        self.merge_slashes
    }
    pub fn clear_merge_slashes(&mut self) {
        self.merge_slashes = false;
    }

    // Param is passed by value, moved
    pub fn set_merge_slashes(&mut self, v: bool) {
        self.merge_slashes = v;
    }

    // .envoy.extensions.filters.network.http_connection_manager.v3.RequestIDExtension request_id_extension = 36;


    pub fn get_request_id_extension(&self) -> &RequestIDExtension {
        self.request_id_extension.as_ref().unwrap_or_else(|| <RequestIDExtension as ::protobuf::Message>::default_instance())
    }
    pub fn clear_request_id_extension(&mut self) {
        self.request_id_extension.clear();
    }

    pub fn has_request_id_extension(&self) -> bool {
        self.request_id_extension.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request_id_extension(&mut self, v: RequestIDExtension) {
        self.request_id_extension = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_id_extension(&mut self) -> &mut RequestIDExtension {
        if self.request_id_extension.is_none() {
            self.request_id_extension.set_default();
        }
        self.request_id_extension.as_mut().unwrap()
    }

    // Take field
    pub fn take_request_id_extension(&mut self) -> RequestIDExtension {
        self.request_id_extension.take().unwrap_or_else(|| RequestIDExtension::new())
    }

    // .envoy.extensions.filters.network.http_connection_manager.v3.LocalReplyConfig local_reply_config = 38;


    pub fn get_local_reply_config(&self) -> &LocalReplyConfig {
        self.local_reply_config.as_ref().unwrap_or_else(|| <LocalReplyConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_local_reply_config(&mut self) {
        self.local_reply_config.clear();
    }

    pub fn has_local_reply_config(&self) -> bool {
        self.local_reply_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_local_reply_config(&mut self, v: LocalReplyConfig) {
        self.local_reply_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_local_reply_config(&mut self) -> &mut LocalReplyConfig {
        if self.local_reply_config.is_none() {
            self.local_reply_config.set_default();
        }
        self.local_reply_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_local_reply_config(&mut self) -> LocalReplyConfig {
        self.local_reply_config.take().unwrap_or_else(|| LocalReplyConfig::new())
    }

    // bool strip_matching_host_port = 39;


    pub fn get_strip_matching_host_port(&self) -> bool {
        self.strip_matching_host_port
    }
    pub fn clear_strip_matching_host_port(&mut self) {
        self.strip_matching_host_port = false;
    }

    // Param is passed by value, moved
    pub fn set_strip_matching_host_port(&mut self, v: bool) {
        self.strip_matching_host_port = v;
    }

    // .google.protobuf.BoolValue stream_error_on_invalid_http_message = 40;


    pub fn get_stream_error_on_invalid_http_message(&self) -> &::protobuf::well_known_types::BoolValue {
        self.stream_error_on_invalid_http_message.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::BoolValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_stream_error_on_invalid_http_message(&mut self) {
        self.stream_error_on_invalid_http_message.clear();
    }

    pub fn has_stream_error_on_invalid_http_message(&self) -> bool {
        self.stream_error_on_invalid_http_message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stream_error_on_invalid_http_message(&mut self, v: ::protobuf::well_known_types::BoolValue) {
        self.stream_error_on_invalid_http_message = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stream_error_on_invalid_http_message(&mut self) -> &mut ::protobuf::well_known_types::BoolValue {
        if self.stream_error_on_invalid_http_message.is_none() {
            self.stream_error_on_invalid_http_message.set_default();
        }
        self.stream_error_on_invalid_http_message.as_mut().unwrap()
    }

    // Take field
    pub fn take_stream_error_on_invalid_http_message(&mut self) -> ::protobuf::well_known_types::BoolValue {
        self.stream_error_on_invalid_http_message.take().unwrap_or_else(|| ::protobuf::well_known_types::BoolValue::new())
    }
}

impl ::protobuf::Message for HttpConnectionManager {
    fn is_initialized(&self) -> bool {
        if let Some(HttpConnectionManager_oneof_route_specifier::rds(ref v)) = self.route_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(HttpConnectionManager_oneof_route_specifier::route_config(ref v)) = self.route_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(HttpConnectionManager_oneof_route_specifier::scoped_routes(ref v)) = self.route_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.http_filters {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.add_user_agent {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tracing {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.common_http_protocol_options {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.http_protocol_options {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.http2_protocol_options {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.max_request_headers_kb {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.stream_idle_timeout {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.request_timeout {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.request_headers_timeout {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.drain_timeout {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.delayed_close_timeout {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.access_log {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.use_remote_address {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.internal_address_config {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.generate_request_id {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.set_current_client_cert_details {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.upgrade_configs {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.normalize_path {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.request_id_extension {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.local_reply_config {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.stream_error_on_invalid_http_message {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.codec_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.stat_prefix)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.route_specifier = ::std::option::Option::Some(HttpConnectionManager_oneof_route_specifier::rds(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.route_specifier = ::std::option::Option::Some(HttpConnectionManager_oneof_route_specifier::route_config(is.read_message()?));
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.route_specifier = ::std::option::Option::Some(HttpConnectionManager_oneof_route_specifier::scoped_routes(is.read_message()?));
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.http_filters)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.add_user_agent)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tracing)?;
                },
                35 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.common_http_protocol_options)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.http_protocol_options)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.http2_protocol_options)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.server_name)?;
                },
                34 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.server_header_transformation, 34, &mut self.unknown_fields)?
                },
                29 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_request_headers_kb)?;
                },
                24 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.stream_idle_timeout)?;
                },
                28 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.request_timeout)?;
                },
                41 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.request_headers_timeout)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.drain_timeout)?;
                },
                26 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.delayed_close_timeout)?;
                },
                13 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.access_log)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.use_remote_address)?;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.xff_num_trusted_hops = tmp;
                },
                25 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.internal_address_config)?;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.skip_xff_append = tmp;
                },
                22 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.via)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.generate_request_id)?;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.preserve_external_request_id = tmp;
                },
                37 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.always_set_request_id_in_response = tmp;
                },
                16 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.forward_client_cert_details, 16, &mut self.unknown_fields)?
                },
                17 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.set_current_client_cert_details)?;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.proxy_100_continue = tmp;
                },
                20 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.represent_ipv4_remote_address_as_ipv4_mapped_ipv6 = tmp;
                },
                23 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.upgrade_configs)?;
                },
                30 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.normalize_path)?;
                },
                33 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.merge_slashes = tmp;
                },
                36 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.request_id_extension)?;
                },
                38 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.local_reply_config)?;
                },
                39 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.strip_matching_host_port = tmp;
                },
                40 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.stream_error_on_invalid_http_message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.codec_type != HttpConnectionManager_CodecType::AUTO {
            my_size += ::protobuf::rt::enum_size(1, self.codec_type);
        }
        if !self.stat_prefix.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.stat_prefix);
        }
        for value in &self.http_filters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.add_user_agent.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.tracing.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.common_http_protocol_options.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.http_protocol_options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.http2_protocol_options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.server_name.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.server_name);
        }
        if self.server_header_transformation != HttpConnectionManager_ServerHeaderTransformation::OVERWRITE {
            my_size += ::protobuf::rt::enum_size(34, self.server_header_transformation);
        }
        if let Some(ref v) = self.max_request_headers_kb.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.stream_idle_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.request_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.request_headers_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.drain_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.delayed_close_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.access_log {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.use_remote_address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.xff_num_trusted_hops != 0 {
            my_size += ::protobuf::rt::value_size(19, self.xff_num_trusted_hops, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.internal_address_config.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.skip_xff_append != false {
            my_size += 3;
        }
        if !self.via.is_empty() {
            my_size += ::protobuf::rt::string_size(22, &self.via);
        }
        if let Some(ref v) = self.generate_request_id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.preserve_external_request_id != false {
            my_size += 3;
        }
        if self.always_set_request_id_in_response != false {
            my_size += 3;
        }
        if self.forward_client_cert_details != HttpConnectionManager_ForwardClientCertDetails::SANITIZE {
            my_size += ::protobuf::rt::enum_size(16, self.forward_client_cert_details);
        }
        if let Some(ref v) = self.set_current_client_cert_details.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.proxy_100_continue != false {
            my_size += 3;
        }
        if self.represent_ipv4_remote_address_as_ipv4_mapped_ipv6 != false {
            my_size += 3;
        }
        for value in &self.upgrade_configs {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.normalize_path.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.merge_slashes != false {
            my_size += 3;
        }
        if let Some(ref v) = self.request_id_extension.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.local_reply_config.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.strip_matching_host_port != false {
            my_size += 3;
        }
        if let Some(ref v) = self.stream_error_on_invalid_http_message.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.route_specifier {
            match v {
                &HttpConnectionManager_oneof_route_specifier::rds(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &HttpConnectionManager_oneof_route_specifier::route_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &HttpConnectionManager_oneof_route_specifier::scoped_routes(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.codec_type != HttpConnectionManager_CodecType::AUTO {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.codec_type))?;
        }
        if !self.stat_prefix.is_empty() {
            os.write_string(2, &self.stat_prefix)?;
        }
        for v in &self.http_filters {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.add_user_agent.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.tracing.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.common_http_protocol_options.as_ref() {
            os.write_tag(35, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.http_protocol_options.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.http2_protocol_options.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.server_name.is_empty() {
            os.write_string(10, &self.server_name)?;
        }
        if self.server_header_transformation != HttpConnectionManager_ServerHeaderTransformation::OVERWRITE {
            os.write_enum(34, ::protobuf::ProtobufEnum::value(&self.server_header_transformation))?;
        }
        if let Some(ref v) = self.max_request_headers_kb.as_ref() {
            os.write_tag(29, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.stream_idle_timeout.as_ref() {
            os.write_tag(24, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.request_timeout.as_ref() {
            os.write_tag(28, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.request_headers_timeout.as_ref() {
            os.write_tag(41, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.drain_timeout.as_ref() {
            os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.delayed_close_timeout.as_ref() {
            os.write_tag(26, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.access_log {
            os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.use_remote_address.as_ref() {
            os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.xff_num_trusted_hops != 0 {
            os.write_uint32(19, self.xff_num_trusted_hops)?;
        }
        if let Some(ref v) = self.internal_address_config.as_ref() {
            os.write_tag(25, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.skip_xff_append != false {
            os.write_bool(21, self.skip_xff_append)?;
        }
        if !self.via.is_empty() {
            os.write_string(22, &self.via)?;
        }
        if let Some(ref v) = self.generate_request_id.as_ref() {
            os.write_tag(15, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.preserve_external_request_id != false {
            os.write_bool(32, self.preserve_external_request_id)?;
        }
        if self.always_set_request_id_in_response != false {
            os.write_bool(37, self.always_set_request_id_in_response)?;
        }
        if self.forward_client_cert_details != HttpConnectionManager_ForwardClientCertDetails::SANITIZE {
            os.write_enum(16, ::protobuf::ProtobufEnum::value(&self.forward_client_cert_details))?;
        }
        if let Some(ref v) = self.set_current_client_cert_details.as_ref() {
            os.write_tag(17, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.proxy_100_continue != false {
            os.write_bool(18, self.proxy_100_continue)?;
        }
        if self.represent_ipv4_remote_address_as_ipv4_mapped_ipv6 != false {
            os.write_bool(20, self.represent_ipv4_remote_address_as_ipv4_mapped_ipv6)?;
        }
        for v in &self.upgrade_configs {
            os.write_tag(23, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.normalize_path.as_ref() {
            os.write_tag(30, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.merge_slashes != false {
            os.write_bool(33, self.merge_slashes)?;
        }
        if let Some(ref v) = self.request_id_extension.as_ref() {
            os.write_tag(36, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.local_reply_config.as_ref() {
            os.write_tag(38, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.strip_matching_host_port != false {
            os.write_bool(39, self.strip_matching_host_port)?;
        }
        if let Some(ref v) = self.stream_error_on_invalid_http_message.as_ref() {
            os.write_tag(40, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.route_specifier {
            match v {
                &HttpConnectionManager_oneof_route_specifier::rds(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &HttpConnectionManager_oneof_route_specifier::route_config(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &HttpConnectionManager_oneof_route_specifier::scoped_routes(ref v) => {
                    os.write_tag(31, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HttpConnectionManager {
        HttpConnectionManager::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<HttpConnectionManager_CodecType>>(
                "codec_type",
                |m: &HttpConnectionManager| { &m.codec_type },
                |m: &mut HttpConnectionManager| { &mut m.codec_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "stat_prefix",
                |m: &HttpConnectionManager| { &m.stat_prefix },
                |m: &mut HttpConnectionManager| { &mut m.stat_prefix },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Rds>(
                "rds",
                HttpConnectionManager::has_rds,
                HttpConnectionManager::get_rds,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::route::RouteConfiguration>(
                "route_config",
                HttpConnectionManager::has_route_config,
                HttpConnectionManager::get_route_config,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ScopedRoutes>(
                "scoped_routes",
                HttpConnectionManager::has_scoped_routes,
                HttpConnectionManager::get_scoped_routes,
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HttpFilter>>(
                "http_filters",
                |m: &HttpConnectionManager| { &m.http_filters },
                |m: &mut HttpConnectionManager| { &mut m.http_filters },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::BoolValue>>(
                "add_user_agent",
                |m: &HttpConnectionManager| { &m.add_user_agent },
                |m: &mut HttpConnectionManager| { &mut m.add_user_agent },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HttpConnectionManager_Tracing>>(
                "tracing",
                |m: &HttpConnectionManager| { &m.tracing },
                |m: &mut HttpConnectionManager| { &mut m.tracing },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::protocol::HttpProtocolOptions>>(
                "common_http_protocol_options",
                |m: &HttpConnectionManager| { &m.common_http_protocol_options },
                |m: &mut HttpConnectionManager| { &mut m.common_http_protocol_options },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::protocol::Http1ProtocolOptions>>(
                "http_protocol_options",
                |m: &HttpConnectionManager| { &m.http_protocol_options },
                |m: &mut HttpConnectionManager| { &mut m.http_protocol_options },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::protocol::Http2ProtocolOptions>>(
                "http2_protocol_options",
                |m: &HttpConnectionManager| { &m.http2_protocol_options },
                |m: &mut HttpConnectionManager| { &mut m.http2_protocol_options },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "server_name",
                |m: &HttpConnectionManager| { &m.server_name },
                |m: &mut HttpConnectionManager| { &mut m.server_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<HttpConnectionManager_ServerHeaderTransformation>>(
                "server_header_transformation",
                |m: &HttpConnectionManager| { &m.server_header_transformation },
                |m: &mut HttpConnectionManager| { &mut m.server_header_transformation },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "max_request_headers_kb",
                |m: &HttpConnectionManager| { &m.max_request_headers_kb },
                |m: &mut HttpConnectionManager| { &mut m.max_request_headers_kb },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "stream_idle_timeout",
                |m: &HttpConnectionManager| { &m.stream_idle_timeout },
                |m: &mut HttpConnectionManager| { &mut m.stream_idle_timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "request_timeout",
                |m: &HttpConnectionManager| { &m.request_timeout },
                |m: &mut HttpConnectionManager| { &mut m.request_timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "request_headers_timeout",
                |m: &HttpConnectionManager| { &m.request_headers_timeout },
                |m: &mut HttpConnectionManager| { &mut m.request_headers_timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "drain_timeout",
                |m: &HttpConnectionManager| { &m.drain_timeout },
                |m: &mut HttpConnectionManager| { &mut m.drain_timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "delayed_close_timeout",
                |m: &HttpConnectionManager| { &m.delayed_close_timeout },
                |m: &mut HttpConnectionManager| { &mut m.delayed_close_timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::accesslog::AccessLog>>(
                "access_log",
                |m: &HttpConnectionManager| { &m.access_log },
                |m: &mut HttpConnectionManager| { &mut m.access_log },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::BoolValue>>(
                "use_remote_address",
                |m: &HttpConnectionManager| { &m.use_remote_address },
                |m: &mut HttpConnectionManager| { &mut m.use_remote_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "xff_num_trusted_hops",
                |m: &HttpConnectionManager| { &m.xff_num_trusted_hops },
                |m: &mut HttpConnectionManager| { &mut m.xff_num_trusted_hops },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HttpConnectionManager_InternalAddressConfig>>(
                "internal_address_config",
                |m: &HttpConnectionManager| { &m.internal_address_config },
                |m: &mut HttpConnectionManager| { &mut m.internal_address_config },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "skip_xff_append",
                |m: &HttpConnectionManager| { &m.skip_xff_append },
                |m: &mut HttpConnectionManager| { &mut m.skip_xff_append },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "via",
                |m: &HttpConnectionManager| { &m.via },
                |m: &mut HttpConnectionManager| { &mut m.via },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::BoolValue>>(
                "generate_request_id",
                |m: &HttpConnectionManager| { &m.generate_request_id },
                |m: &mut HttpConnectionManager| { &mut m.generate_request_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "preserve_external_request_id",
                |m: &HttpConnectionManager| { &m.preserve_external_request_id },
                |m: &mut HttpConnectionManager| { &mut m.preserve_external_request_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "always_set_request_id_in_response",
                |m: &HttpConnectionManager| { &m.always_set_request_id_in_response },
                |m: &mut HttpConnectionManager| { &mut m.always_set_request_id_in_response },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<HttpConnectionManager_ForwardClientCertDetails>>(
                "forward_client_cert_details",
                |m: &HttpConnectionManager| { &m.forward_client_cert_details },
                |m: &mut HttpConnectionManager| { &mut m.forward_client_cert_details },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HttpConnectionManager_SetCurrentClientCertDetails>>(
                "set_current_client_cert_details",
                |m: &HttpConnectionManager| { &m.set_current_client_cert_details },
                |m: &mut HttpConnectionManager| { &mut m.set_current_client_cert_details },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "proxy_100_continue",
                |m: &HttpConnectionManager| { &m.proxy_100_continue },
                |m: &mut HttpConnectionManager| { &mut m.proxy_100_continue },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "represent_ipv4_remote_address_as_ipv4_mapped_ipv6",
                |m: &HttpConnectionManager| { &m.represent_ipv4_remote_address_as_ipv4_mapped_ipv6 },
                |m: &mut HttpConnectionManager| { &mut m.represent_ipv4_remote_address_as_ipv4_mapped_ipv6 },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HttpConnectionManager_UpgradeConfig>>(
                "upgrade_configs",
                |m: &HttpConnectionManager| { &m.upgrade_configs },
                |m: &mut HttpConnectionManager| { &mut m.upgrade_configs },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::BoolValue>>(
                "normalize_path",
                |m: &HttpConnectionManager| { &m.normalize_path },
                |m: &mut HttpConnectionManager| { &mut m.normalize_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "merge_slashes",
                |m: &HttpConnectionManager| { &m.merge_slashes },
                |m: &mut HttpConnectionManager| { &mut m.merge_slashes },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RequestIDExtension>>(
                "request_id_extension",
                |m: &HttpConnectionManager| { &m.request_id_extension },
                |m: &mut HttpConnectionManager| { &mut m.request_id_extension },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LocalReplyConfig>>(
                "local_reply_config",
                |m: &HttpConnectionManager| { &m.local_reply_config },
                |m: &mut HttpConnectionManager| { &mut m.local_reply_config },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "strip_matching_host_port",
                |m: &HttpConnectionManager| { &m.strip_matching_host_port },
                |m: &mut HttpConnectionManager| { &mut m.strip_matching_host_port },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::BoolValue>>(
                "stream_error_on_invalid_http_message",
                |m: &HttpConnectionManager| { &m.stream_error_on_invalid_http_message },
                |m: &mut HttpConnectionManager| { &mut m.stream_error_on_invalid_http_message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HttpConnectionManager>(
                "HttpConnectionManager",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HttpConnectionManager {
        static instance: ::protobuf::rt::LazyV2<HttpConnectionManager> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HttpConnectionManager::new)
    }
}

impl ::protobuf::Clear for HttpConnectionManager {
    fn clear(&mut self) {
        self.codec_type = HttpConnectionManager_CodecType::AUTO;
        self.stat_prefix.clear();
        self.route_specifier = ::std::option::Option::None;
        self.route_specifier = ::std::option::Option::None;
        self.route_specifier = ::std::option::Option::None;
        self.http_filters.clear();
        self.add_user_agent.clear();
        self.tracing.clear();
        self.common_http_protocol_options.clear();
        self.http_protocol_options.clear();
        self.http2_protocol_options.clear();
        self.server_name.clear();
        self.server_header_transformation = HttpConnectionManager_ServerHeaderTransformation::OVERWRITE;
        self.max_request_headers_kb.clear();
        self.stream_idle_timeout.clear();
        self.request_timeout.clear();
        self.request_headers_timeout.clear();
        self.drain_timeout.clear();
        self.delayed_close_timeout.clear();
        self.access_log.clear();
        self.use_remote_address.clear();
        self.xff_num_trusted_hops = 0;
        self.internal_address_config.clear();
        self.skip_xff_append = false;
        self.via.clear();
        self.generate_request_id.clear();
        self.preserve_external_request_id = false;
        self.always_set_request_id_in_response = false;
        self.forward_client_cert_details = HttpConnectionManager_ForwardClientCertDetails::SANITIZE;
        self.set_current_client_cert_details.clear();
        self.proxy_100_continue = false;
        self.represent_ipv4_remote_address_as_ipv4_mapped_ipv6 = false;
        self.upgrade_configs.clear();
        self.normalize_path.clear();
        self.merge_slashes = false;
        self.request_id_extension.clear();
        self.local_reply_config.clear();
        self.strip_matching_host_port = false;
        self.stream_error_on_invalid_http_message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HttpConnectionManager {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpConnectionManager {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HttpConnectionManager_Tracing {
    // message fields
    pub client_sampling: ::protobuf::SingularPtrField<super::percent::Percent>,
    pub random_sampling: ::protobuf::SingularPtrField<super::percent::Percent>,
    pub overall_sampling: ::protobuf::SingularPtrField<super::percent::Percent>,
    pub verbose: bool,
    pub max_path_tag_length: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub custom_tags: ::protobuf::RepeatedField<super::custom_tag::CustomTag>,
    pub provider: ::protobuf::SingularPtrField<super::http_tracer::Tracing_Http>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HttpConnectionManager_Tracing {
    fn default() -> &'a HttpConnectionManager_Tracing {
        <HttpConnectionManager_Tracing as ::protobuf::Message>::default_instance()
    }
}

impl HttpConnectionManager_Tracing {
    pub fn new() -> HttpConnectionManager_Tracing {
        ::std::default::Default::default()
    }

    // .envoy.type.v3.Percent client_sampling = 3;


    pub fn get_client_sampling(&self) -> &super::percent::Percent {
        self.client_sampling.as_ref().unwrap_or_else(|| <super::percent::Percent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_client_sampling(&mut self) {
        self.client_sampling.clear();
    }

    pub fn has_client_sampling(&self) -> bool {
        self.client_sampling.is_some()
    }

    // Param is passed by value, moved
    pub fn set_client_sampling(&mut self, v: super::percent::Percent) {
        self.client_sampling = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_client_sampling(&mut self) -> &mut super::percent::Percent {
        if self.client_sampling.is_none() {
            self.client_sampling.set_default();
        }
        self.client_sampling.as_mut().unwrap()
    }

    // Take field
    pub fn take_client_sampling(&mut self) -> super::percent::Percent {
        self.client_sampling.take().unwrap_or_else(|| super::percent::Percent::new())
    }

    // .envoy.type.v3.Percent random_sampling = 4;


    pub fn get_random_sampling(&self) -> &super::percent::Percent {
        self.random_sampling.as_ref().unwrap_or_else(|| <super::percent::Percent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_random_sampling(&mut self) {
        self.random_sampling.clear();
    }

    pub fn has_random_sampling(&self) -> bool {
        self.random_sampling.is_some()
    }

    // Param is passed by value, moved
    pub fn set_random_sampling(&mut self, v: super::percent::Percent) {
        self.random_sampling = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_random_sampling(&mut self) -> &mut super::percent::Percent {
        if self.random_sampling.is_none() {
            self.random_sampling.set_default();
        }
        self.random_sampling.as_mut().unwrap()
    }

    // Take field
    pub fn take_random_sampling(&mut self) -> super::percent::Percent {
        self.random_sampling.take().unwrap_or_else(|| super::percent::Percent::new())
    }

    // .envoy.type.v3.Percent overall_sampling = 5;


    pub fn get_overall_sampling(&self) -> &super::percent::Percent {
        self.overall_sampling.as_ref().unwrap_or_else(|| <super::percent::Percent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_overall_sampling(&mut self) {
        self.overall_sampling.clear();
    }

    pub fn has_overall_sampling(&self) -> bool {
        self.overall_sampling.is_some()
    }

    // Param is passed by value, moved
    pub fn set_overall_sampling(&mut self, v: super::percent::Percent) {
        self.overall_sampling = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_overall_sampling(&mut self) -> &mut super::percent::Percent {
        if self.overall_sampling.is_none() {
            self.overall_sampling.set_default();
        }
        self.overall_sampling.as_mut().unwrap()
    }

    // Take field
    pub fn take_overall_sampling(&mut self) -> super::percent::Percent {
        self.overall_sampling.take().unwrap_or_else(|| super::percent::Percent::new())
    }

    // bool verbose = 6;


    pub fn get_verbose(&self) -> bool {
        self.verbose
    }
    pub fn clear_verbose(&mut self) {
        self.verbose = false;
    }

    // Param is passed by value, moved
    pub fn set_verbose(&mut self, v: bool) {
        self.verbose = v;
    }

    // .google.protobuf.UInt32Value max_path_tag_length = 7;


    pub fn get_max_path_tag_length(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.max_path_tag_length.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_max_path_tag_length(&mut self) {
        self.max_path_tag_length.clear();
    }

    pub fn has_max_path_tag_length(&self) -> bool {
        self.max_path_tag_length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_path_tag_length(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.max_path_tag_length = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_path_tag_length(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.max_path_tag_length.is_none() {
            self.max_path_tag_length.set_default();
        }
        self.max_path_tag_length.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_path_tag_length(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.max_path_tag_length.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // repeated .envoy.type.tracing.v3.CustomTag custom_tags = 8;


    pub fn get_custom_tags(&self) -> &[super::custom_tag::CustomTag] {
        &self.custom_tags
    }
    pub fn clear_custom_tags(&mut self) {
        self.custom_tags.clear();
    }

    // Param is passed by value, moved
    pub fn set_custom_tags(&mut self, v: ::protobuf::RepeatedField<super::custom_tag::CustomTag>) {
        self.custom_tags = v;
    }

    // Mutable pointer to the field.
    pub fn mut_custom_tags(&mut self) -> &mut ::protobuf::RepeatedField<super::custom_tag::CustomTag> {
        &mut self.custom_tags
    }

    // Take field
    pub fn take_custom_tags(&mut self) -> ::protobuf::RepeatedField<super::custom_tag::CustomTag> {
        ::std::mem::replace(&mut self.custom_tags, ::protobuf::RepeatedField::new())
    }

    // .envoy.config.trace.v3.Tracing.Http provider = 9;


    pub fn get_provider(&self) -> &super::http_tracer::Tracing_Http {
        self.provider.as_ref().unwrap_or_else(|| <super::http_tracer::Tracing_Http as ::protobuf::Message>::default_instance())
    }
    pub fn clear_provider(&mut self) {
        self.provider.clear();
    }

    pub fn has_provider(&self) -> bool {
        self.provider.is_some()
    }

    // Param is passed by value, moved
    pub fn set_provider(&mut self, v: super::http_tracer::Tracing_Http) {
        self.provider = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_provider(&mut self) -> &mut super::http_tracer::Tracing_Http {
        if self.provider.is_none() {
            self.provider.set_default();
        }
        self.provider.as_mut().unwrap()
    }

    // Take field
    pub fn take_provider(&mut self) -> super::http_tracer::Tracing_Http {
        self.provider.take().unwrap_or_else(|| super::http_tracer::Tracing_Http::new())
    }
}

impl ::protobuf::Message for HttpConnectionManager_Tracing {
    fn is_initialized(&self) -> bool {
        for v in &self.client_sampling {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.random_sampling {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.overall_sampling {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.max_path_tag_length {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.custom_tags {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.provider {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.client_sampling)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.random_sampling)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.overall_sampling)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.verbose = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_path_tag_length)?;
                },
                8 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.custom_tags)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.provider)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.client_sampling.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.random_sampling.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.overall_sampling.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.verbose != false {
            my_size += 2;
        }
        if let Some(ref v) = self.max_path_tag_length.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.custom_tags {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.provider.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.client_sampling.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.random_sampling.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.overall_sampling.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.verbose != false {
            os.write_bool(6, self.verbose)?;
        }
        if let Some(ref v) = self.max_path_tag_length.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.custom_tags {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.provider.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HttpConnectionManager_Tracing {
        HttpConnectionManager_Tracing::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::percent::Percent>>(
                "client_sampling",
                |m: &HttpConnectionManager_Tracing| { &m.client_sampling },
                |m: &mut HttpConnectionManager_Tracing| { &mut m.client_sampling },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::percent::Percent>>(
                "random_sampling",
                |m: &HttpConnectionManager_Tracing| { &m.random_sampling },
                |m: &mut HttpConnectionManager_Tracing| { &mut m.random_sampling },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::percent::Percent>>(
                "overall_sampling",
                |m: &HttpConnectionManager_Tracing| { &m.overall_sampling },
                |m: &mut HttpConnectionManager_Tracing| { &mut m.overall_sampling },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "verbose",
                |m: &HttpConnectionManager_Tracing| { &m.verbose },
                |m: &mut HttpConnectionManager_Tracing| { &mut m.verbose },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "max_path_tag_length",
                |m: &HttpConnectionManager_Tracing| { &m.max_path_tag_length },
                |m: &mut HttpConnectionManager_Tracing| { &mut m.max_path_tag_length },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::custom_tag::CustomTag>>(
                "custom_tags",
                |m: &HttpConnectionManager_Tracing| { &m.custom_tags },
                |m: &mut HttpConnectionManager_Tracing| { &mut m.custom_tags },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::http_tracer::Tracing_Http>>(
                "provider",
                |m: &HttpConnectionManager_Tracing| { &m.provider },
                |m: &mut HttpConnectionManager_Tracing| { &mut m.provider },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HttpConnectionManager_Tracing>(
                "HttpConnectionManager.Tracing",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HttpConnectionManager_Tracing {
        static instance: ::protobuf::rt::LazyV2<HttpConnectionManager_Tracing> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HttpConnectionManager_Tracing::new)
    }
}

impl ::protobuf::Clear for HttpConnectionManager_Tracing {
    fn clear(&mut self) {
        self.client_sampling.clear();
        self.random_sampling.clear();
        self.overall_sampling.clear();
        self.verbose = false;
        self.max_path_tag_length.clear();
        self.custom_tags.clear();
        self.provider.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HttpConnectionManager_Tracing {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpConnectionManager_Tracing {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum HttpConnectionManager_Tracing_OperationName {
    INGRESS = 0,
    EGRESS = 1,
}

impl ::protobuf::ProtobufEnum for HttpConnectionManager_Tracing_OperationName {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<HttpConnectionManager_Tracing_OperationName> {
        match value {
            0 => ::std::option::Option::Some(HttpConnectionManager_Tracing_OperationName::INGRESS),
            1 => ::std::option::Option::Some(HttpConnectionManager_Tracing_OperationName::EGRESS),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [HttpConnectionManager_Tracing_OperationName] = &[
            HttpConnectionManager_Tracing_OperationName::INGRESS,
            HttpConnectionManager_Tracing_OperationName::EGRESS,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<HttpConnectionManager_Tracing_OperationName>("HttpConnectionManager.Tracing.OperationName", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for HttpConnectionManager_Tracing_OperationName {
}

impl ::std::default::Default for HttpConnectionManager_Tracing_OperationName {
    fn default() -> Self {
        HttpConnectionManager_Tracing_OperationName::INGRESS
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpConnectionManager_Tracing_OperationName {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HttpConnectionManager_InternalAddressConfig {
    // message fields
    pub unix_sockets: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HttpConnectionManager_InternalAddressConfig {
    fn default() -> &'a HttpConnectionManager_InternalAddressConfig {
        <HttpConnectionManager_InternalAddressConfig as ::protobuf::Message>::default_instance()
    }
}

impl HttpConnectionManager_InternalAddressConfig {
    pub fn new() -> HttpConnectionManager_InternalAddressConfig {
        ::std::default::Default::default()
    }

    // bool unix_sockets = 1;


    pub fn get_unix_sockets(&self) -> bool {
        self.unix_sockets
    }
    pub fn clear_unix_sockets(&mut self) {
        self.unix_sockets = false;
    }

    // Param is passed by value, moved
    pub fn set_unix_sockets(&mut self, v: bool) {
        self.unix_sockets = v;
    }
}

impl ::protobuf::Message for HttpConnectionManager_InternalAddressConfig {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.unix_sockets = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.unix_sockets != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.unix_sockets != false {
            os.write_bool(1, self.unix_sockets)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HttpConnectionManager_InternalAddressConfig {
        HttpConnectionManager_InternalAddressConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "unix_sockets",
                |m: &HttpConnectionManager_InternalAddressConfig| { &m.unix_sockets },
                |m: &mut HttpConnectionManager_InternalAddressConfig| { &mut m.unix_sockets },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HttpConnectionManager_InternalAddressConfig>(
                "HttpConnectionManager.InternalAddressConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HttpConnectionManager_InternalAddressConfig {
        static instance: ::protobuf::rt::LazyV2<HttpConnectionManager_InternalAddressConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HttpConnectionManager_InternalAddressConfig::new)
    }
}

impl ::protobuf::Clear for HttpConnectionManager_InternalAddressConfig {
    fn clear(&mut self) {
        self.unix_sockets = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HttpConnectionManager_InternalAddressConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpConnectionManager_InternalAddressConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HttpConnectionManager_SetCurrentClientCertDetails {
    // message fields
    pub subject: ::protobuf::SingularPtrField<::protobuf::well_known_types::BoolValue>,
    pub cert: bool,
    pub chain: bool,
    pub dns: bool,
    pub uri: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HttpConnectionManager_SetCurrentClientCertDetails {
    fn default() -> &'a HttpConnectionManager_SetCurrentClientCertDetails {
        <HttpConnectionManager_SetCurrentClientCertDetails as ::protobuf::Message>::default_instance()
    }
}

impl HttpConnectionManager_SetCurrentClientCertDetails {
    pub fn new() -> HttpConnectionManager_SetCurrentClientCertDetails {
        ::std::default::Default::default()
    }

    // .google.protobuf.BoolValue subject = 1;


    pub fn get_subject(&self) -> &::protobuf::well_known_types::BoolValue {
        self.subject.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::BoolValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_subject(&mut self) {
        self.subject.clear();
    }

    pub fn has_subject(&self) -> bool {
        self.subject.is_some()
    }

    // Param is passed by value, moved
    pub fn set_subject(&mut self, v: ::protobuf::well_known_types::BoolValue) {
        self.subject = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subject(&mut self) -> &mut ::protobuf::well_known_types::BoolValue {
        if self.subject.is_none() {
            self.subject.set_default();
        }
        self.subject.as_mut().unwrap()
    }

    // Take field
    pub fn take_subject(&mut self) -> ::protobuf::well_known_types::BoolValue {
        self.subject.take().unwrap_or_else(|| ::protobuf::well_known_types::BoolValue::new())
    }

    // bool cert = 3;


    pub fn get_cert(&self) -> bool {
        self.cert
    }
    pub fn clear_cert(&mut self) {
        self.cert = false;
    }

    // Param is passed by value, moved
    pub fn set_cert(&mut self, v: bool) {
        self.cert = v;
    }

    // bool chain = 6;


    pub fn get_chain(&self) -> bool {
        self.chain
    }
    pub fn clear_chain(&mut self) {
        self.chain = false;
    }

    // Param is passed by value, moved
    pub fn set_chain(&mut self, v: bool) {
        self.chain = v;
    }

    // bool dns = 4;


    pub fn get_dns(&self) -> bool {
        self.dns
    }
    pub fn clear_dns(&mut self) {
        self.dns = false;
    }

    // Param is passed by value, moved
    pub fn set_dns(&mut self, v: bool) {
        self.dns = v;
    }

    // bool uri = 5;


    pub fn get_uri(&self) -> bool {
        self.uri
    }
    pub fn clear_uri(&mut self) {
        self.uri = false;
    }

    // Param is passed by value, moved
    pub fn set_uri(&mut self, v: bool) {
        self.uri = v;
    }
}

impl ::protobuf::Message for HttpConnectionManager_SetCurrentClientCertDetails {
    fn is_initialized(&self) -> bool {
        for v in &self.subject {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.subject)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.cert = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.chain = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.dns = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.uri = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.subject.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.cert != false {
            my_size += 2;
        }
        if self.chain != false {
            my_size += 2;
        }
        if self.dns != false {
            my_size += 2;
        }
        if self.uri != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.subject.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.cert != false {
            os.write_bool(3, self.cert)?;
        }
        if self.chain != false {
            os.write_bool(6, self.chain)?;
        }
        if self.dns != false {
            os.write_bool(4, self.dns)?;
        }
        if self.uri != false {
            os.write_bool(5, self.uri)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HttpConnectionManager_SetCurrentClientCertDetails {
        HttpConnectionManager_SetCurrentClientCertDetails::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::BoolValue>>(
                "subject",
                |m: &HttpConnectionManager_SetCurrentClientCertDetails| { &m.subject },
                |m: &mut HttpConnectionManager_SetCurrentClientCertDetails| { &mut m.subject },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "cert",
                |m: &HttpConnectionManager_SetCurrentClientCertDetails| { &m.cert },
                |m: &mut HttpConnectionManager_SetCurrentClientCertDetails| { &mut m.cert },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "chain",
                |m: &HttpConnectionManager_SetCurrentClientCertDetails| { &m.chain },
                |m: &mut HttpConnectionManager_SetCurrentClientCertDetails| { &mut m.chain },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "dns",
                |m: &HttpConnectionManager_SetCurrentClientCertDetails| { &m.dns },
                |m: &mut HttpConnectionManager_SetCurrentClientCertDetails| { &mut m.dns },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "uri",
                |m: &HttpConnectionManager_SetCurrentClientCertDetails| { &m.uri },
                |m: &mut HttpConnectionManager_SetCurrentClientCertDetails| { &mut m.uri },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HttpConnectionManager_SetCurrentClientCertDetails>(
                "HttpConnectionManager.SetCurrentClientCertDetails",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HttpConnectionManager_SetCurrentClientCertDetails {
        static instance: ::protobuf::rt::LazyV2<HttpConnectionManager_SetCurrentClientCertDetails> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HttpConnectionManager_SetCurrentClientCertDetails::new)
    }
}

impl ::protobuf::Clear for HttpConnectionManager_SetCurrentClientCertDetails {
    fn clear(&mut self) {
        self.subject.clear();
        self.cert = false;
        self.chain = false;
        self.dns = false;
        self.uri = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HttpConnectionManager_SetCurrentClientCertDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpConnectionManager_SetCurrentClientCertDetails {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HttpConnectionManager_UpgradeConfig {
    // message fields
    pub upgrade_type: ::std::string::String,
    pub filters: ::protobuf::RepeatedField<HttpFilter>,
    pub enabled: ::protobuf::SingularPtrField<::protobuf::well_known_types::BoolValue>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HttpConnectionManager_UpgradeConfig {
    fn default() -> &'a HttpConnectionManager_UpgradeConfig {
        <HttpConnectionManager_UpgradeConfig as ::protobuf::Message>::default_instance()
    }
}

impl HttpConnectionManager_UpgradeConfig {
    pub fn new() -> HttpConnectionManager_UpgradeConfig {
        ::std::default::Default::default()
    }

    // string upgrade_type = 1;


    pub fn get_upgrade_type(&self) -> &str {
        &self.upgrade_type
    }
    pub fn clear_upgrade_type(&mut self) {
        self.upgrade_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_upgrade_type(&mut self, v: ::std::string::String) {
        self.upgrade_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_upgrade_type(&mut self) -> &mut ::std::string::String {
        &mut self.upgrade_type
    }

    // Take field
    pub fn take_upgrade_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.upgrade_type, ::std::string::String::new())
    }

    // repeated .envoy.extensions.filters.network.http_connection_manager.v3.HttpFilter filters = 2;


    pub fn get_filters(&self) -> &[HttpFilter] {
        &self.filters
    }
    pub fn clear_filters(&mut self) {
        self.filters.clear();
    }

    // Param is passed by value, moved
    pub fn set_filters(&mut self, v: ::protobuf::RepeatedField<HttpFilter>) {
        self.filters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_filters(&mut self) -> &mut ::protobuf::RepeatedField<HttpFilter> {
        &mut self.filters
    }

    // Take field
    pub fn take_filters(&mut self) -> ::protobuf::RepeatedField<HttpFilter> {
        ::std::mem::replace(&mut self.filters, ::protobuf::RepeatedField::new())
    }

    // .google.protobuf.BoolValue enabled = 3;


    pub fn get_enabled(&self) -> &::protobuf::well_known_types::BoolValue {
        self.enabled.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::BoolValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_enabled(&mut self) {
        self.enabled.clear();
    }

    pub fn has_enabled(&self) -> bool {
        self.enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_enabled(&mut self, v: ::protobuf::well_known_types::BoolValue) {
        self.enabled = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_enabled(&mut self) -> &mut ::protobuf::well_known_types::BoolValue {
        if self.enabled.is_none() {
            self.enabled.set_default();
        }
        self.enabled.as_mut().unwrap()
    }

    // Take field
    pub fn take_enabled(&mut self) -> ::protobuf::well_known_types::BoolValue {
        self.enabled.take().unwrap_or_else(|| ::protobuf::well_known_types::BoolValue::new())
    }
}

impl ::protobuf::Message for HttpConnectionManager_UpgradeConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.filters {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.enabled {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.upgrade_type)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.filters)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.enabled)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.upgrade_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.upgrade_type);
        }
        for value in &self.filters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.enabled.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.upgrade_type.is_empty() {
            os.write_string(1, &self.upgrade_type)?;
        }
        for v in &self.filters {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.enabled.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HttpConnectionManager_UpgradeConfig {
        HttpConnectionManager_UpgradeConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "upgrade_type",
                |m: &HttpConnectionManager_UpgradeConfig| { &m.upgrade_type },
                |m: &mut HttpConnectionManager_UpgradeConfig| { &mut m.upgrade_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HttpFilter>>(
                "filters",
                |m: &HttpConnectionManager_UpgradeConfig| { &m.filters },
                |m: &mut HttpConnectionManager_UpgradeConfig| { &mut m.filters },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::BoolValue>>(
                "enabled",
                |m: &HttpConnectionManager_UpgradeConfig| { &m.enabled },
                |m: &mut HttpConnectionManager_UpgradeConfig| { &mut m.enabled },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HttpConnectionManager_UpgradeConfig>(
                "HttpConnectionManager.UpgradeConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HttpConnectionManager_UpgradeConfig {
        static instance: ::protobuf::rt::LazyV2<HttpConnectionManager_UpgradeConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HttpConnectionManager_UpgradeConfig::new)
    }
}

impl ::protobuf::Clear for HttpConnectionManager_UpgradeConfig {
    fn clear(&mut self) {
        self.upgrade_type.clear();
        self.filters.clear();
        self.enabled.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HttpConnectionManager_UpgradeConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpConnectionManager_UpgradeConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum HttpConnectionManager_CodecType {
    AUTO = 0,
    HTTP1 = 1,
    HTTP2 = 2,
    HTTP3 = 3,
}

impl ::protobuf::ProtobufEnum for HttpConnectionManager_CodecType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<HttpConnectionManager_CodecType> {
        match value {
            0 => ::std::option::Option::Some(HttpConnectionManager_CodecType::AUTO),
            1 => ::std::option::Option::Some(HttpConnectionManager_CodecType::HTTP1),
            2 => ::std::option::Option::Some(HttpConnectionManager_CodecType::HTTP2),
            3 => ::std::option::Option::Some(HttpConnectionManager_CodecType::HTTP3),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [HttpConnectionManager_CodecType] = &[
            HttpConnectionManager_CodecType::AUTO,
            HttpConnectionManager_CodecType::HTTP1,
            HttpConnectionManager_CodecType::HTTP2,
            HttpConnectionManager_CodecType::HTTP3,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<HttpConnectionManager_CodecType>("HttpConnectionManager.CodecType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for HttpConnectionManager_CodecType {
}

impl ::std::default::Default for HttpConnectionManager_CodecType {
    fn default() -> Self {
        HttpConnectionManager_CodecType::AUTO
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpConnectionManager_CodecType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum HttpConnectionManager_ServerHeaderTransformation {
    OVERWRITE = 0,
    APPEND_IF_ABSENT = 1,
    PASS_THROUGH = 2,
}

impl ::protobuf::ProtobufEnum for HttpConnectionManager_ServerHeaderTransformation {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<HttpConnectionManager_ServerHeaderTransformation> {
        match value {
            0 => ::std::option::Option::Some(HttpConnectionManager_ServerHeaderTransformation::OVERWRITE),
            1 => ::std::option::Option::Some(HttpConnectionManager_ServerHeaderTransformation::APPEND_IF_ABSENT),
            2 => ::std::option::Option::Some(HttpConnectionManager_ServerHeaderTransformation::PASS_THROUGH),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [HttpConnectionManager_ServerHeaderTransformation] = &[
            HttpConnectionManager_ServerHeaderTransformation::OVERWRITE,
            HttpConnectionManager_ServerHeaderTransformation::APPEND_IF_ABSENT,
            HttpConnectionManager_ServerHeaderTransformation::PASS_THROUGH,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<HttpConnectionManager_ServerHeaderTransformation>("HttpConnectionManager.ServerHeaderTransformation", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for HttpConnectionManager_ServerHeaderTransformation {
}

impl ::std::default::Default for HttpConnectionManager_ServerHeaderTransformation {
    fn default() -> Self {
        HttpConnectionManager_ServerHeaderTransformation::OVERWRITE
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpConnectionManager_ServerHeaderTransformation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum HttpConnectionManager_ForwardClientCertDetails {
    SANITIZE = 0,
    FORWARD_ONLY = 1,
    APPEND_FORWARD = 2,
    SANITIZE_SET = 3,
    ALWAYS_FORWARD_ONLY = 4,
}

impl ::protobuf::ProtobufEnum for HttpConnectionManager_ForwardClientCertDetails {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<HttpConnectionManager_ForwardClientCertDetails> {
        match value {
            0 => ::std::option::Option::Some(HttpConnectionManager_ForwardClientCertDetails::SANITIZE),
            1 => ::std::option::Option::Some(HttpConnectionManager_ForwardClientCertDetails::FORWARD_ONLY),
            2 => ::std::option::Option::Some(HttpConnectionManager_ForwardClientCertDetails::APPEND_FORWARD),
            3 => ::std::option::Option::Some(HttpConnectionManager_ForwardClientCertDetails::SANITIZE_SET),
            4 => ::std::option::Option::Some(HttpConnectionManager_ForwardClientCertDetails::ALWAYS_FORWARD_ONLY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [HttpConnectionManager_ForwardClientCertDetails] = &[
            HttpConnectionManager_ForwardClientCertDetails::SANITIZE,
            HttpConnectionManager_ForwardClientCertDetails::FORWARD_ONLY,
            HttpConnectionManager_ForwardClientCertDetails::APPEND_FORWARD,
            HttpConnectionManager_ForwardClientCertDetails::SANITIZE_SET,
            HttpConnectionManager_ForwardClientCertDetails::ALWAYS_FORWARD_ONLY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<HttpConnectionManager_ForwardClientCertDetails>("HttpConnectionManager.ForwardClientCertDetails", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for HttpConnectionManager_ForwardClientCertDetails {
}

impl ::std::default::Default for HttpConnectionManager_ForwardClientCertDetails {
    fn default() -> Self {
        HttpConnectionManager_ForwardClientCertDetails::SANITIZE
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpConnectionManager_ForwardClientCertDetails {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LocalReplyConfig {
    // message fields
    pub mappers: ::protobuf::RepeatedField<ResponseMapper>,
    pub body_format: ::protobuf::SingularPtrField<super::substitution_format_string::SubstitutionFormatString>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LocalReplyConfig {
    fn default() -> &'a LocalReplyConfig {
        <LocalReplyConfig as ::protobuf::Message>::default_instance()
    }
}

impl LocalReplyConfig {
    pub fn new() -> LocalReplyConfig {
        ::std::default::Default::default()
    }

    // repeated .envoy.extensions.filters.network.http_connection_manager.v3.ResponseMapper mappers = 1;


    pub fn get_mappers(&self) -> &[ResponseMapper] {
        &self.mappers
    }
    pub fn clear_mappers(&mut self) {
        self.mappers.clear();
    }

    // Param is passed by value, moved
    pub fn set_mappers(&mut self, v: ::protobuf::RepeatedField<ResponseMapper>) {
        self.mappers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_mappers(&mut self) -> &mut ::protobuf::RepeatedField<ResponseMapper> {
        &mut self.mappers
    }

    // Take field
    pub fn take_mappers(&mut self) -> ::protobuf::RepeatedField<ResponseMapper> {
        ::std::mem::replace(&mut self.mappers, ::protobuf::RepeatedField::new())
    }

    // .envoy.config.core.v3.SubstitutionFormatString body_format = 2;


    pub fn get_body_format(&self) -> &super::substitution_format_string::SubstitutionFormatString {
        self.body_format.as_ref().unwrap_or_else(|| <super::substitution_format_string::SubstitutionFormatString as ::protobuf::Message>::default_instance())
    }
    pub fn clear_body_format(&mut self) {
        self.body_format.clear();
    }

    pub fn has_body_format(&self) -> bool {
        self.body_format.is_some()
    }

    // Param is passed by value, moved
    pub fn set_body_format(&mut self, v: super::substitution_format_string::SubstitutionFormatString) {
        self.body_format = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body_format(&mut self) -> &mut super::substitution_format_string::SubstitutionFormatString {
        if self.body_format.is_none() {
            self.body_format.set_default();
        }
        self.body_format.as_mut().unwrap()
    }

    // Take field
    pub fn take_body_format(&mut self) -> super::substitution_format_string::SubstitutionFormatString {
        self.body_format.take().unwrap_or_else(|| super::substitution_format_string::SubstitutionFormatString::new())
    }
}

impl ::protobuf::Message for LocalReplyConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.mappers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.body_format {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.mappers)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.body_format)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.mappers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.body_format.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.mappers {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.body_format.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LocalReplyConfig {
        LocalReplyConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ResponseMapper>>(
                "mappers",
                |m: &LocalReplyConfig| { &m.mappers },
                |m: &mut LocalReplyConfig| { &mut m.mappers },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::substitution_format_string::SubstitutionFormatString>>(
                "body_format",
                |m: &LocalReplyConfig| { &m.body_format },
                |m: &mut LocalReplyConfig| { &mut m.body_format },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LocalReplyConfig>(
                "LocalReplyConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LocalReplyConfig {
        static instance: ::protobuf::rt::LazyV2<LocalReplyConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LocalReplyConfig::new)
    }
}

impl ::protobuf::Clear for LocalReplyConfig {
    fn clear(&mut self) {
        self.mappers.clear();
        self.body_format.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LocalReplyConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LocalReplyConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ResponseMapper {
    // message fields
    pub filter: ::protobuf::SingularPtrField<super::accesslog::AccessLogFilter>,
    pub status_code: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub body: ::protobuf::SingularPtrField<super::base::DataSource>,
    pub body_format_override: ::protobuf::SingularPtrField<super::substitution_format_string::SubstitutionFormatString>,
    pub headers_to_add: ::protobuf::RepeatedField<super::base::HeaderValueOption>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ResponseMapper {
    fn default() -> &'a ResponseMapper {
        <ResponseMapper as ::protobuf::Message>::default_instance()
    }
}

impl ResponseMapper {
    pub fn new() -> ResponseMapper {
        ::std::default::Default::default()
    }

    // .envoy.config.accesslog.v3.AccessLogFilter filter = 1;


    pub fn get_filter(&self) -> &super::accesslog::AccessLogFilter {
        self.filter.as_ref().unwrap_or_else(|| <super::accesslog::AccessLogFilter as ::protobuf::Message>::default_instance())
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    pub fn has_filter(&self) -> bool {
        self.filter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: super::accesslog::AccessLogFilter) {
        self.filter = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut super::accesslog::AccessLogFilter {
        if self.filter.is_none() {
            self.filter.set_default();
        }
        self.filter.as_mut().unwrap()
    }

    // Take field
    pub fn take_filter(&mut self) -> super::accesslog::AccessLogFilter {
        self.filter.take().unwrap_or_else(|| super::accesslog::AccessLogFilter::new())
    }

    // .google.protobuf.UInt32Value status_code = 2;


    pub fn get_status_code(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.status_code.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_status_code(&mut self) {
        self.status_code.clear();
    }

    pub fn has_status_code(&self) -> bool {
        self.status_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status_code(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.status_code = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status_code(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.status_code.is_none() {
            self.status_code.set_default();
        }
        self.status_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_status_code(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.status_code.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .envoy.config.core.v3.DataSource body = 3;


    pub fn get_body(&self) -> &super::base::DataSource {
        self.body.as_ref().unwrap_or_else(|| <super::base::DataSource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    pub fn has_body(&self) -> bool {
        self.body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: super::base::DataSource) {
        self.body = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut super::base::DataSource {
        if self.body.is_none() {
            self.body.set_default();
        }
        self.body.as_mut().unwrap()
    }

    // Take field
    pub fn take_body(&mut self) -> super::base::DataSource {
        self.body.take().unwrap_or_else(|| super::base::DataSource::new())
    }

    // .envoy.config.core.v3.SubstitutionFormatString body_format_override = 4;


    pub fn get_body_format_override(&self) -> &super::substitution_format_string::SubstitutionFormatString {
        self.body_format_override.as_ref().unwrap_or_else(|| <super::substitution_format_string::SubstitutionFormatString as ::protobuf::Message>::default_instance())
    }
    pub fn clear_body_format_override(&mut self) {
        self.body_format_override.clear();
    }

    pub fn has_body_format_override(&self) -> bool {
        self.body_format_override.is_some()
    }

    // Param is passed by value, moved
    pub fn set_body_format_override(&mut self, v: super::substitution_format_string::SubstitutionFormatString) {
        self.body_format_override = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body_format_override(&mut self) -> &mut super::substitution_format_string::SubstitutionFormatString {
        if self.body_format_override.is_none() {
            self.body_format_override.set_default();
        }
        self.body_format_override.as_mut().unwrap()
    }

    // Take field
    pub fn take_body_format_override(&mut self) -> super::substitution_format_string::SubstitutionFormatString {
        self.body_format_override.take().unwrap_or_else(|| super::substitution_format_string::SubstitutionFormatString::new())
    }

    // repeated .envoy.config.core.v3.HeaderValueOption headers_to_add = 5;


    pub fn get_headers_to_add(&self) -> &[super::base::HeaderValueOption] {
        &self.headers_to_add
    }
    pub fn clear_headers_to_add(&mut self) {
        self.headers_to_add.clear();
    }

    // Param is passed by value, moved
    pub fn set_headers_to_add(&mut self, v: ::protobuf::RepeatedField<super::base::HeaderValueOption>) {
        self.headers_to_add = v;
    }

    // Mutable pointer to the field.
    pub fn mut_headers_to_add(&mut self) -> &mut ::protobuf::RepeatedField<super::base::HeaderValueOption> {
        &mut self.headers_to_add
    }

    // Take field
    pub fn take_headers_to_add(&mut self) -> ::protobuf::RepeatedField<super::base::HeaderValueOption> {
        ::std::mem::replace(&mut self.headers_to_add, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ResponseMapper {
    fn is_initialized(&self) -> bool {
        for v in &self.filter {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.status_code {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.body {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.body_format_override {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.headers_to_add {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.filter)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.status_code)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.body)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.body_format_override)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.headers_to_add)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.filter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.status_code.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.body.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.body_format_override.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.headers_to_add {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.filter.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.status_code.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.body.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.body_format_override.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.headers_to_add {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResponseMapper {
        ResponseMapper::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::accesslog::AccessLogFilter>>(
                "filter",
                |m: &ResponseMapper| { &m.filter },
                |m: &mut ResponseMapper| { &mut m.filter },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "status_code",
                |m: &ResponseMapper| { &m.status_code },
                |m: &mut ResponseMapper| { &mut m.status_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::DataSource>>(
                "body",
                |m: &ResponseMapper| { &m.body },
                |m: &mut ResponseMapper| { &mut m.body },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::substitution_format_string::SubstitutionFormatString>>(
                "body_format_override",
                |m: &ResponseMapper| { &m.body_format_override },
                |m: &mut ResponseMapper| { &mut m.body_format_override },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::HeaderValueOption>>(
                "headers_to_add",
                |m: &ResponseMapper| { &m.headers_to_add },
                |m: &mut ResponseMapper| { &mut m.headers_to_add },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ResponseMapper>(
                "ResponseMapper",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ResponseMapper {
        static instance: ::protobuf::rt::LazyV2<ResponseMapper> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ResponseMapper::new)
    }
}

impl ::protobuf::Clear for ResponseMapper {
    fn clear(&mut self) {
        self.filter.clear();
        self.status_code.clear();
        self.body.clear();
        self.body_format_override.clear();
        self.headers_to_add.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResponseMapper {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResponseMapper {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Rds {
    // message fields
    pub config_source: ::protobuf::SingularPtrField<super::config_source::ConfigSource>,
    pub route_config_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Rds {
    fn default() -> &'a Rds {
        <Rds as ::protobuf::Message>::default_instance()
    }
}

impl Rds {
    pub fn new() -> Rds {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.ConfigSource config_source = 1;


    pub fn get_config_source(&self) -> &super::config_source::ConfigSource {
        self.config_source.as_ref().unwrap_or_else(|| <super::config_source::ConfigSource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_config_source(&mut self) {
        self.config_source.clear();
    }

    pub fn has_config_source(&self) -> bool {
        self.config_source.is_some()
    }

    // Param is passed by value, moved
    pub fn set_config_source(&mut self, v: super::config_source::ConfigSource) {
        self.config_source = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_config_source(&mut self) -> &mut super::config_source::ConfigSource {
        if self.config_source.is_none() {
            self.config_source.set_default();
        }
        self.config_source.as_mut().unwrap()
    }

    // Take field
    pub fn take_config_source(&mut self) -> super::config_source::ConfigSource {
        self.config_source.take().unwrap_or_else(|| super::config_source::ConfigSource::new())
    }

    // string route_config_name = 2;


    pub fn get_route_config_name(&self) -> &str {
        &self.route_config_name
    }
    pub fn clear_route_config_name(&mut self) {
        self.route_config_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_route_config_name(&mut self, v: ::std::string::String) {
        self.route_config_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_route_config_name(&mut self) -> &mut ::std::string::String {
        &mut self.route_config_name
    }

    // Take field
    pub fn take_route_config_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.route_config_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Rds {
    fn is_initialized(&self) -> bool {
        for v in &self.config_source {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.config_source)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.route_config_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.config_source.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.route_config_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.route_config_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.config_source.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.route_config_name.is_empty() {
            os.write_string(2, &self.route_config_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Rds {
        Rds::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::config_source::ConfigSource>>(
                "config_source",
                |m: &Rds| { &m.config_source },
                |m: &mut Rds| { &mut m.config_source },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "route_config_name",
                |m: &Rds| { &m.route_config_name },
                |m: &mut Rds| { &mut m.route_config_name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Rds>(
                "Rds",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Rds {
        static instance: ::protobuf::rt::LazyV2<Rds> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Rds::new)
    }
}

impl ::protobuf::Clear for Rds {
    fn clear(&mut self) {
        self.config_source.clear();
        self.route_config_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Rds {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Rds {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ScopedRouteConfigurationsList {
    // message fields
    pub scoped_route_configurations: ::protobuf::RepeatedField<super::scoped_route::ScopedRouteConfiguration>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ScopedRouteConfigurationsList {
    fn default() -> &'a ScopedRouteConfigurationsList {
        <ScopedRouteConfigurationsList as ::protobuf::Message>::default_instance()
    }
}

impl ScopedRouteConfigurationsList {
    pub fn new() -> ScopedRouteConfigurationsList {
        ::std::default::Default::default()
    }

    // repeated .envoy.config.route.v3.ScopedRouteConfiguration scoped_route_configurations = 1;


    pub fn get_scoped_route_configurations(&self) -> &[super::scoped_route::ScopedRouteConfiguration] {
        &self.scoped_route_configurations
    }
    pub fn clear_scoped_route_configurations(&mut self) {
        self.scoped_route_configurations.clear();
    }

    // Param is passed by value, moved
    pub fn set_scoped_route_configurations(&mut self, v: ::protobuf::RepeatedField<super::scoped_route::ScopedRouteConfiguration>) {
        self.scoped_route_configurations = v;
    }

    // Mutable pointer to the field.
    pub fn mut_scoped_route_configurations(&mut self) -> &mut ::protobuf::RepeatedField<super::scoped_route::ScopedRouteConfiguration> {
        &mut self.scoped_route_configurations
    }

    // Take field
    pub fn take_scoped_route_configurations(&mut self) -> ::protobuf::RepeatedField<super::scoped_route::ScopedRouteConfiguration> {
        ::std::mem::replace(&mut self.scoped_route_configurations, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ScopedRouteConfigurationsList {
    fn is_initialized(&self) -> bool {
        for v in &self.scoped_route_configurations {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.scoped_route_configurations)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.scoped_route_configurations {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.scoped_route_configurations {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ScopedRouteConfigurationsList {
        ScopedRouteConfigurationsList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::scoped_route::ScopedRouteConfiguration>>(
                "scoped_route_configurations",
                |m: &ScopedRouteConfigurationsList| { &m.scoped_route_configurations },
                |m: &mut ScopedRouteConfigurationsList| { &mut m.scoped_route_configurations },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ScopedRouteConfigurationsList>(
                "ScopedRouteConfigurationsList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ScopedRouteConfigurationsList {
        static instance: ::protobuf::rt::LazyV2<ScopedRouteConfigurationsList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ScopedRouteConfigurationsList::new)
    }
}

impl ::protobuf::Clear for ScopedRouteConfigurationsList {
    fn clear(&mut self) {
        self.scoped_route_configurations.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ScopedRouteConfigurationsList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ScopedRouteConfigurationsList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ScopedRoutes {
    // message fields
    pub name: ::std::string::String,
    pub scope_key_builder: ::protobuf::SingularPtrField<ScopedRoutes_ScopeKeyBuilder>,
    pub rds_config_source: ::protobuf::SingularPtrField<super::config_source::ConfigSource>,
    // message oneof groups
    pub config_specifier: ::std::option::Option<ScopedRoutes_oneof_config_specifier>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ScopedRoutes {
    fn default() -> &'a ScopedRoutes {
        <ScopedRoutes as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ScopedRoutes_oneof_config_specifier {
    scoped_route_configurations_list(ScopedRouteConfigurationsList),
    scoped_rds(ScopedRds),
}

impl ScopedRoutes {
    pub fn new() -> ScopedRoutes {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .envoy.extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder scope_key_builder = 2;


    pub fn get_scope_key_builder(&self) -> &ScopedRoutes_ScopeKeyBuilder {
        self.scope_key_builder.as_ref().unwrap_or_else(|| <ScopedRoutes_ScopeKeyBuilder as ::protobuf::Message>::default_instance())
    }
    pub fn clear_scope_key_builder(&mut self) {
        self.scope_key_builder.clear();
    }

    pub fn has_scope_key_builder(&self) -> bool {
        self.scope_key_builder.is_some()
    }

    // Param is passed by value, moved
    pub fn set_scope_key_builder(&mut self, v: ScopedRoutes_ScopeKeyBuilder) {
        self.scope_key_builder = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scope_key_builder(&mut self) -> &mut ScopedRoutes_ScopeKeyBuilder {
        if self.scope_key_builder.is_none() {
            self.scope_key_builder.set_default();
        }
        self.scope_key_builder.as_mut().unwrap()
    }

    // Take field
    pub fn take_scope_key_builder(&mut self) -> ScopedRoutes_ScopeKeyBuilder {
        self.scope_key_builder.take().unwrap_or_else(|| ScopedRoutes_ScopeKeyBuilder::new())
    }

    // .envoy.config.core.v3.ConfigSource rds_config_source = 3;


    pub fn get_rds_config_source(&self) -> &super::config_source::ConfigSource {
        self.rds_config_source.as_ref().unwrap_or_else(|| <super::config_source::ConfigSource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_rds_config_source(&mut self) {
        self.rds_config_source.clear();
    }

    pub fn has_rds_config_source(&self) -> bool {
        self.rds_config_source.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rds_config_source(&mut self, v: super::config_source::ConfigSource) {
        self.rds_config_source = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rds_config_source(&mut self) -> &mut super::config_source::ConfigSource {
        if self.rds_config_source.is_none() {
            self.rds_config_source.set_default();
        }
        self.rds_config_source.as_mut().unwrap()
    }

    // Take field
    pub fn take_rds_config_source(&mut self) -> super::config_source::ConfigSource {
        self.rds_config_source.take().unwrap_or_else(|| super::config_source::ConfigSource::new())
    }

    // .envoy.extensions.filters.network.http_connection_manager.v3.ScopedRouteConfigurationsList scoped_route_configurations_list = 4;


    pub fn get_scoped_route_configurations_list(&self) -> &ScopedRouteConfigurationsList {
        match self.config_specifier {
            ::std::option::Option::Some(ScopedRoutes_oneof_config_specifier::scoped_route_configurations_list(ref v)) => v,
            _ => <ScopedRouteConfigurationsList as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_scoped_route_configurations_list(&mut self) {
        self.config_specifier = ::std::option::Option::None;
    }

    pub fn has_scoped_route_configurations_list(&self) -> bool {
        match self.config_specifier {
            ::std::option::Option::Some(ScopedRoutes_oneof_config_specifier::scoped_route_configurations_list(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_scoped_route_configurations_list(&mut self, v: ScopedRouteConfigurationsList) {
        self.config_specifier = ::std::option::Option::Some(ScopedRoutes_oneof_config_specifier::scoped_route_configurations_list(v))
    }

    // Mutable pointer to the field.
    pub fn mut_scoped_route_configurations_list(&mut self) -> &mut ScopedRouteConfigurationsList {
        if let ::std::option::Option::Some(ScopedRoutes_oneof_config_specifier::scoped_route_configurations_list(_)) = self.config_specifier {
        } else {
            self.config_specifier = ::std::option::Option::Some(ScopedRoutes_oneof_config_specifier::scoped_route_configurations_list(ScopedRouteConfigurationsList::new()));
        }
        match self.config_specifier {
            ::std::option::Option::Some(ScopedRoutes_oneof_config_specifier::scoped_route_configurations_list(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_scoped_route_configurations_list(&mut self) -> ScopedRouteConfigurationsList {
        if self.has_scoped_route_configurations_list() {
            match self.config_specifier.take() {
                ::std::option::Option::Some(ScopedRoutes_oneof_config_specifier::scoped_route_configurations_list(v)) => v,
                _ => panic!(),
            }
        } else {
            ScopedRouteConfigurationsList::new()
        }
    }

    // .envoy.extensions.filters.network.http_connection_manager.v3.ScopedRds scoped_rds = 5;


    pub fn get_scoped_rds(&self) -> &ScopedRds {
        match self.config_specifier {
            ::std::option::Option::Some(ScopedRoutes_oneof_config_specifier::scoped_rds(ref v)) => v,
            _ => <ScopedRds as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_scoped_rds(&mut self) {
        self.config_specifier = ::std::option::Option::None;
    }

    pub fn has_scoped_rds(&self) -> bool {
        match self.config_specifier {
            ::std::option::Option::Some(ScopedRoutes_oneof_config_specifier::scoped_rds(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_scoped_rds(&mut self, v: ScopedRds) {
        self.config_specifier = ::std::option::Option::Some(ScopedRoutes_oneof_config_specifier::scoped_rds(v))
    }

    // Mutable pointer to the field.
    pub fn mut_scoped_rds(&mut self) -> &mut ScopedRds {
        if let ::std::option::Option::Some(ScopedRoutes_oneof_config_specifier::scoped_rds(_)) = self.config_specifier {
        } else {
            self.config_specifier = ::std::option::Option::Some(ScopedRoutes_oneof_config_specifier::scoped_rds(ScopedRds::new()));
        }
        match self.config_specifier {
            ::std::option::Option::Some(ScopedRoutes_oneof_config_specifier::scoped_rds(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_scoped_rds(&mut self) -> ScopedRds {
        if self.has_scoped_rds() {
            match self.config_specifier.take() {
                ::std::option::Option::Some(ScopedRoutes_oneof_config_specifier::scoped_rds(v)) => v,
                _ => panic!(),
            }
        } else {
            ScopedRds::new()
        }
    }
}

impl ::protobuf::Message for ScopedRoutes {
    fn is_initialized(&self) -> bool {
        for v in &self.scope_key_builder {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.rds_config_source {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(ScopedRoutes_oneof_config_specifier::scoped_route_configurations_list(ref v)) = self.config_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ScopedRoutes_oneof_config_specifier::scoped_rds(ref v)) = self.config_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.scope_key_builder)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.rds_config_source)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config_specifier = ::std::option::Option::Some(ScopedRoutes_oneof_config_specifier::scoped_route_configurations_list(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config_specifier = ::std::option::Option::Some(ScopedRoutes_oneof_config_specifier::scoped_rds(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(ref v) = self.scope_key_builder.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.rds_config_source.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.config_specifier {
            match v {
                &ScopedRoutes_oneof_config_specifier::scoped_route_configurations_list(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ScopedRoutes_oneof_config_specifier::scoped_rds(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(ref v) = self.scope_key_builder.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.rds_config_source.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.config_specifier {
            match v {
                &ScopedRoutes_oneof_config_specifier::scoped_route_configurations_list(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ScopedRoutes_oneof_config_specifier::scoped_rds(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ScopedRoutes {
        ScopedRoutes::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &ScopedRoutes| { &m.name },
                |m: &mut ScopedRoutes| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ScopedRoutes_ScopeKeyBuilder>>(
                "scope_key_builder",
                |m: &ScopedRoutes| { &m.scope_key_builder },
                |m: &mut ScopedRoutes| { &mut m.scope_key_builder },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::config_source::ConfigSource>>(
                "rds_config_source",
                |m: &ScopedRoutes| { &m.rds_config_source },
                |m: &mut ScopedRoutes| { &mut m.rds_config_source },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ScopedRouteConfigurationsList>(
                "scoped_route_configurations_list",
                ScopedRoutes::has_scoped_route_configurations_list,
                ScopedRoutes::get_scoped_route_configurations_list,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ScopedRds>(
                "scoped_rds",
                ScopedRoutes::has_scoped_rds,
                ScopedRoutes::get_scoped_rds,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ScopedRoutes>(
                "ScopedRoutes",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ScopedRoutes {
        static instance: ::protobuf::rt::LazyV2<ScopedRoutes> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ScopedRoutes::new)
    }
}

impl ::protobuf::Clear for ScopedRoutes {
    fn clear(&mut self) {
        self.name.clear();
        self.scope_key_builder.clear();
        self.rds_config_source.clear();
        self.config_specifier = ::std::option::Option::None;
        self.config_specifier = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ScopedRoutes {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ScopedRoutes {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ScopedRoutes_ScopeKeyBuilder {
    // message fields
    pub fragments: ::protobuf::RepeatedField<ScopedRoutes_ScopeKeyBuilder_FragmentBuilder>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ScopedRoutes_ScopeKeyBuilder {
    fn default() -> &'a ScopedRoutes_ScopeKeyBuilder {
        <ScopedRoutes_ScopeKeyBuilder as ::protobuf::Message>::default_instance()
    }
}

impl ScopedRoutes_ScopeKeyBuilder {
    pub fn new() -> ScopedRoutes_ScopeKeyBuilder {
        ::std::default::Default::default()
    }

    // repeated .envoy.extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder fragments = 1;


    pub fn get_fragments(&self) -> &[ScopedRoutes_ScopeKeyBuilder_FragmentBuilder] {
        &self.fragments
    }
    pub fn clear_fragments(&mut self) {
        self.fragments.clear();
    }

    // Param is passed by value, moved
    pub fn set_fragments(&mut self, v: ::protobuf::RepeatedField<ScopedRoutes_ScopeKeyBuilder_FragmentBuilder>) {
        self.fragments = v;
    }

    // Mutable pointer to the field.
    pub fn mut_fragments(&mut self) -> &mut ::protobuf::RepeatedField<ScopedRoutes_ScopeKeyBuilder_FragmentBuilder> {
        &mut self.fragments
    }

    // Take field
    pub fn take_fragments(&mut self) -> ::protobuf::RepeatedField<ScopedRoutes_ScopeKeyBuilder_FragmentBuilder> {
        ::std::mem::replace(&mut self.fragments, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ScopedRoutes_ScopeKeyBuilder {
    fn is_initialized(&self) -> bool {
        for v in &self.fragments {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.fragments)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.fragments {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.fragments {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ScopedRoutes_ScopeKeyBuilder {
        ScopedRoutes_ScopeKeyBuilder::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ScopedRoutes_ScopeKeyBuilder_FragmentBuilder>>(
                "fragments",
                |m: &ScopedRoutes_ScopeKeyBuilder| { &m.fragments },
                |m: &mut ScopedRoutes_ScopeKeyBuilder| { &mut m.fragments },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ScopedRoutes_ScopeKeyBuilder>(
                "ScopedRoutes.ScopeKeyBuilder",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ScopedRoutes_ScopeKeyBuilder {
        static instance: ::protobuf::rt::LazyV2<ScopedRoutes_ScopeKeyBuilder> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ScopedRoutes_ScopeKeyBuilder::new)
    }
}

impl ::protobuf::Clear for ScopedRoutes_ScopeKeyBuilder {
    fn clear(&mut self) {
        self.fragments.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ScopedRoutes_ScopeKeyBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ScopedRoutes_ScopeKeyBuilder {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ScopedRoutes_ScopeKeyBuilder_FragmentBuilder {
    // message oneof groups
    pub field_type: ::std::option::Option<ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_oneof_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ScopedRoutes_ScopeKeyBuilder_FragmentBuilder {
    fn default() -> &'a ScopedRoutes_ScopeKeyBuilder_FragmentBuilder {
        <ScopedRoutes_ScopeKeyBuilder_FragmentBuilder as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_oneof_type {
    header_value_extractor(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor),
}

impl ScopedRoutes_ScopeKeyBuilder_FragmentBuilder {
    pub fn new() -> ScopedRoutes_ScopeKeyBuilder_FragmentBuilder {
        ::std::default::Default::default()
    }

    // .envoy.extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor header_value_extractor = 1;


    pub fn get_header_value_extractor(&self) -> &ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor {
        match self.field_type {
            ::std::option::Option::Some(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_oneof_type::header_value_extractor(ref v)) => v,
            _ => <ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_header_value_extractor(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_header_value_extractor(&self) -> bool {
        match self.field_type {
            ::std::option::Option::Some(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_oneof_type::header_value_extractor(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_header_value_extractor(&mut self, v: ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor) {
        self.field_type = ::std::option::Option::Some(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_oneof_type::header_value_extractor(v))
    }

    // Mutable pointer to the field.
    pub fn mut_header_value_extractor(&mut self) -> &mut ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor {
        if let ::std::option::Option::Some(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_oneof_type::header_value_extractor(_)) = self.field_type {
        } else {
            self.field_type = ::std::option::Option::Some(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_oneof_type::header_value_extractor(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor::new()));
        }
        match self.field_type {
            ::std::option::Option::Some(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_oneof_type::header_value_extractor(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_header_value_extractor(&mut self) -> ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor {
        if self.has_header_value_extractor() {
            match self.field_type.take() {
                ::std::option::Option::Some(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_oneof_type::header_value_extractor(v)) => v,
                _ => panic!(),
            }
        } else {
            ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor::new()
        }
    }
}

impl ::protobuf::Message for ScopedRoutes_ScopeKeyBuilder_FragmentBuilder {
    fn is_initialized(&self) -> bool {
        if let Some(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_oneof_type::header_value_extractor(ref v)) = self.field_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_type = ::std::option::Option::Some(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_oneof_type::header_value_extractor(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.field_type {
            match v {
                &ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_oneof_type::header_value_extractor(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.field_type {
            match v {
                &ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_oneof_type::header_value_extractor(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ScopedRoutes_ScopeKeyBuilder_FragmentBuilder {
        ScopedRoutes_ScopeKeyBuilder_FragmentBuilder::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor>(
                "header_value_extractor",
                ScopedRoutes_ScopeKeyBuilder_FragmentBuilder::has_header_value_extractor,
                ScopedRoutes_ScopeKeyBuilder_FragmentBuilder::get_header_value_extractor,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ScopedRoutes_ScopeKeyBuilder_FragmentBuilder>(
                "ScopedRoutes.ScopeKeyBuilder.FragmentBuilder",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ScopedRoutes_ScopeKeyBuilder_FragmentBuilder {
        static instance: ::protobuf::rt::LazyV2<ScopedRoutes_ScopeKeyBuilder_FragmentBuilder> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder::new)
    }
}

impl ::protobuf::Clear for ScopedRoutes_ScopeKeyBuilder_FragmentBuilder {
    fn clear(&mut self) {
        self.field_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ScopedRoutes_ScopeKeyBuilder_FragmentBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ScopedRoutes_ScopeKeyBuilder_FragmentBuilder {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor {
    // message fields
    pub name: ::std::string::String,
    pub element_separator: ::std::string::String,
    // message oneof groups
    pub extract_type: ::std::option::Option<ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_oneof_extract_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor {
    fn default() -> &'a ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor {
        <ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_oneof_extract_type {
    index(u32),
    element(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement),
}

impl ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor {
    pub fn new() -> ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string element_separator = 2;


    pub fn get_element_separator(&self) -> &str {
        &self.element_separator
    }
    pub fn clear_element_separator(&mut self) {
        self.element_separator.clear();
    }

    // Param is passed by value, moved
    pub fn set_element_separator(&mut self, v: ::std::string::String) {
        self.element_separator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_element_separator(&mut self) -> &mut ::std::string::String {
        &mut self.element_separator
    }

    // Take field
    pub fn take_element_separator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.element_separator, ::std::string::String::new())
    }

    // uint32 index = 3;


    pub fn get_index(&self) -> u32 {
        match self.extract_type {
            ::std::option::Option::Some(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_oneof_extract_type::index(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_index(&mut self) {
        self.extract_type = ::std::option::Option::None;
    }

    pub fn has_index(&self) -> bool {
        match self.extract_type {
            ::std::option::Option::Some(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_oneof_extract_type::index(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u32) {
        self.extract_type = ::std::option::Option::Some(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_oneof_extract_type::index(v))
    }

    // .envoy.extensions.filters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor.KvElement element = 4;


    pub fn get_element(&self) -> &ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement {
        match self.extract_type {
            ::std::option::Option::Some(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_oneof_extract_type::element(ref v)) => v,
            _ => <ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_element(&mut self) {
        self.extract_type = ::std::option::Option::None;
    }

    pub fn has_element(&self) -> bool {
        match self.extract_type {
            ::std::option::Option::Some(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_oneof_extract_type::element(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_element(&mut self, v: ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement) {
        self.extract_type = ::std::option::Option::Some(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_oneof_extract_type::element(v))
    }

    // Mutable pointer to the field.
    pub fn mut_element(&mut self) -> &mut ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement {
        if let ::std::option::Option::Some(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_oneof_extract_type::element(_)) = self.extract_type {
        } else {
            self.extract_type = ::std::option::Option::Some(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_oneof_extract_type::element(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement::new()));
        }
        match self.extract_type {
            ::std::option::Option::Some(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_oneof_extract_type::element(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_element(&mut self) -> ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement {
        if self.has_element() {
            match self.extract_type.take() {
                ::std::option::Option::Some(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_oneof_extract_type::element(v)) => v,
                _ => panic!(),
            }
        } else {
            ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement::new()
        }
    }
}

impl ::protobuf::Message for ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor {
    fn is_initialized(&self) -> bool {
        if let Some(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_oneof_extract_type::element(ref v)) = self.extract_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.element_separator)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.extract_type = ::std::option::Option::Some(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_oneof_extract_type::index(is.read_uint32()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.extract_type = ::std::option::Option::Some(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_oneof_extract_type::element(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.element_separator.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.element_separator);
        }
        if let ::std::option::Option::Some(ref v) = self.extract_type {
            match v {
                &ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_oneof_extract_type::index(v) => {
                    my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_oneof_extract_type::element(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.element_separator.is_empty() {
            os.write_string(2, &self.element_separator)?;
        }
        if let ::std::option::Option::Some(ref v) = self.extract_type {
            match v {
                &ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_oneof_extract_type::index(v) => {
                    os.write_uint32(3, v)?;
                },
                &ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_oneof_extract_type::element(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor {
        ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor| { &m.name },
                |m: &mut ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "element_separator",
                |m: &ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor| { &m.element_separator },
                |m: &mut ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor| { &mut m.element_separator },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_u32_accessor::<_>(
                "index",
                ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor::has_index,
                ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor::get_index,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement>(
                "element",
                ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor::has_element,
                ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor::get_element,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor>(
                "ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor {
        static instance: ::protobuf::rt::LazyV2<ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor::new)
    }
}

impl ::protobuf::Clear for ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor {
    fn clear(&mut self) {
        self.name.clear();
        self.element_separator.clear();
        self.extract_type = ::std::option::Option::None;
        self.extract_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement {
    // message fields
    pub separator: ::std::string::String,
    pub key: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement {
    fn default() -> &'a ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement {
        <ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement as ::protobuf::Message>::default_instance()
    }
}

impl ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement {
    pub fn new() -> ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement {
        ::std::default::Default::default()
    }

    // string separator = 1;


    pub fn get_separator(&self) -> &str {
        &self.separator
    }
    pub fn clear_separator(&mut self) {
        self.separator.clear();
    }

    // Param is passed by value, moved
    pub fn set_separator(&mut self, v: ::std::string::String) {
        self.separator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_separator(&mut self) -> &mut ::std::string::String {
        &mut self.separator
    }

    // Take field
    pub fn take_separator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.separator, ::std::string::String::new())
    }

    // string key = 2;


    pub fn get_key(&self) -> &str {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.key, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.separator)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.key)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.separator.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.separator);
        }
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.key);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.separator.is_empty() {
            os.write_string(1, &self.separator)?;
        }
        if !self.key.is_empty() {
            os.write_string(2, &self.key)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement {
        ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "separator",
                |m: &ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement| { &m.separator },
                |m: &mut ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement| { &mut m.separator },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "key",
                |m: &ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement| { &m.key },
                |m: &mut ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement| { &mut m.key },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement>(
                "ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractor.KvElement",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement {
        static instance: ::protobuf::rt::LazyV2<ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement::new)
    }
}

impl ::protobuf::Clear for ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement {
    fn clear(&mut self) {
        self.separator.clear();
        self.key.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ScopedRoutes_ScopeKeyBuilder_FragmentBuilder_HeaderValueExtractor_KvElement {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ScopedRds {
    // message fields
    pub scoped_rds_config_source: ::protobuf::SingularPtrField<super::config_source::ConfigSource>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ScopedRds {
    fn default() -> &'a ScopedRds {
        <ScopedRds as ::protobuf::Message>::default_instance()
    }
}

impl ScopedRds {
    pub fn new() -> ScopedRds {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.ConfigSource scoped_rds_config_source = 1;


    pub fn get_scoped_rds_config_source(&self) -> &super::config_source::ConfigSource {
        self.scoped_rds_config_source.as_ref().unwrap_or_else(|| <super::config_source::ConfigSource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_scoped_rds_config_source(&mut self) {
        self.scoped_rds_config_source.clear();
    }

    pub fn has_scoped_rds_config_source(&self) -> bool {
        self.scoped_rds_config_source.is_some()
    }

    // Param is passed by value, moved
    pub fn set_scoped_rds_config_source(&mut self, v: super::config_source::ConfigSource) {
        self.scoped_rds_config_source = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scoped_rds_config_source(&mut self) -> &mut super::config_source::ConfigSource {
        if self.scoped_rds_config_source.is_none() {
            self.scoped_rds_config_source.set_default();
        }
        self.scoped_rds_config_source.as_mut().unwrap()
    }

    // Take field
    pub fn take_scoped_rds_config_source(&mut self) -> super::config_source::ConfigSource {
        self.scoped_rds_config_source.take().unwrap_or_else(|| super::config_source::ConfigSource::new())
    }
}

impl ::protobuf::Message for ScopedRds {
    fn is_initialized(&self) -> bool {
        for v in &self.scoped_rds_config_source {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.scoped_rds_config_source)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.scoped_rds_config_source.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.scoped_rds_config_source.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ScopedRds {
        ScopedRds::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::config_source::ConfigSource>>(
                "scoped_rds_config_source",
                |m: &ScopedRds| { &m.scoped_rds_config_source },
                |m: &mut ScopedRds| { &mut m.scoped_rds_config_source },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ScopedRds>(
                "ScopedRds",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ScopedRds {
        static instance: ::protobuf::rt::LazyV2<ScopedRds> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ScopedRds::new)
    }
}

impl ::protobuf::Clear for ScopedRds {
    fn clear(&mut self) {
        self.scoped_rds_config_source.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ScopedRds {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ScopedRds {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HttpFilter {
    // message fields
    pub name: ::std::string::String,
    // message oneof groups
    pub config_type: ::std::option::Option<HttpFilter_oneof_config_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HttpFilter {
    fn default() -> &'a HttpFilter {
        <HttpFilter as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum HttpFilter_oneof_config_type {
    typed_config(::protobuf::well_known_types::Any),
    config_discovery(super::extension::ExtensionConfigSource),
}

impl HttpFilter {
    pub fn new() -> HttpFilter {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .google.protobuf.Any typed_config = 4;


    pub fn get_typed_config(&self) -> &::protobuf::well_known_types::Any {
        match self.config_type {
            ::std::option::Option::Some(HttpFilter_oneof_config_type::typed_config(ref v)) => v,
            _ => <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_typed_config(&mut self) {
        self.config_type = ::std::option::Option::None;
    }

    pub fn has_typed_config(&self) -> bool {
        match self.config_type {
            ::std::option::Option::Some(HttpFilter_oneof_config_type::typed_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_typed_config(&mut self, v: ::protobuf::well_known_types::Any) {
        self.config_type = ::std::option::Option::Some(HttpFilter_oneof_config_type::typed_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_typed_config(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if let ::std::option::Option::Some(HttpFilter_oneof_config_type::typed_config(_)) = self.config_type {
        } else {
            self.config_type = ::std::option::Option::Some(HttpFilter_oneof_config_type::typed_config(::protobuf::well_known_types::Any::new()));
        }
        match self.config_type {
            ::std::option::Option::Some(HttpFilter_oneof_config_type::typed_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_typed_config(&mut self) -> ::protobuf::well_known_types::Any {
        if self.has_typed_config() {
            match self.config_type.take() {
                ::std::option::Option::Some(HttpFilter_oneof_config_type::typed_config(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Any::new()
        }
    }

    // .envoy.config.core.v3.ExtensionConfigSource config_discovery = 5;


    pub fn get_config_discovery(&self) -> &super::extension::ExtensionConfigSource {
        match self.config_type {
            ::std::option::Option::Some(HttpFilter_oneof_config_type::config_discovery(ref v)) => v,
            _ => <super::extension::ExtensionConfigSource as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_config_discovery(&mut self) {
        self.config_type = ::std::option::Option::None;
    }

    pub fn has_config_discovery(&self) -> bool {
        match self.config_type {
            ::std::option::Option::Some(HttpFilter_oneof_config_type::config_discovery(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_config_discovery(&mut self, v: super::extension::ExtensionConfigSource) {
        self.config_type = ::std::option::Option::Some(HttpFilter_oneof_config_type::config_discovery(v))
    }

    // Mutable pointer to the field.
    pub fn mut_config_discovery(&mut self) -> &mut super::extension::ExtensionConfigSource {
        if let ::std::option::Option::Some(HttpFilter_oneof_config_type::config_discovery(_)) = self.config_type {
        } else {
            self.config_type = ::std::option::Option::Some(HttpFilter_oneof_config_type::config_discovery(super::extension::ExtensionConfigSource::new()));
        }
        match self.config_type {
            ::std::option::Option::Some(HttpFilter_oneof_config_type::config_discovery(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_config_discovery(&mut self) -> super::extension::ExtensionConfigSource {
        if self.has_config_discovery() {
            match self.config_type.take() {
                ::std::option::Option::Some(HttpFilter_oneof_config_type::config_discovery(v)) => v,
                _ => panic!(),
            }
        } else {
            super::extension::ExtensionConfigSource::new()
        }
    }
}

impl ::protobuf::Message for HttpFilter {
    fn is_initialized(&self) -> bool {
        if let Some(HttpFilter_oneof_config_type::typed_config(ref v)) = self.config_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(HttpFilter_oneof_config_type::config_discovery(ref v)) = self.config_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config_type = ::std::option::Option::Some(HttpFilter_oneof_config_type::typed_config(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config_type = ::std::option::Option::Some(HttpFilter_oneof_config_type::config_discovery(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let ::std::option::Option::Some(ref v) = self.config_type {
            match v {
                &HttpFilter_oneof_config_type::typed_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &HttpFilter_oneof_config_type::config_discovery(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let ::std::option::Option::Some(ref v) = self.config_type {
            match v {
                &HttpFilter_oneof_config_type::typed_config(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &HttpFilter_oneof_config_type::config_discovery(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HttpFilter {
        HttpFilter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &HttpFilter| { &m.name },
                |m: &mut HttpFilter| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Any>(
                "typed_config",
                HttpFilter::has_typed_config,
                HttpFilter::get_typed_config,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::extension::ExtensionConfigSource>(
                "config_discovery",
                HttpFilter::has_config_discovery,
                HttpFilter::get_config_discovery,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HttpFilter>(
                "HttpFilter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HttpFilter {
        static instance: ::protobuf::rt::LazyV2<HttpFilter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HttpFilter::new)
    }
}

impl ::protobuf::Clear for HttpFilter {
    fn clear(&mut self) {
        self.name.clear();
        self.config_type = ::std::option::Option::None;
        self.config_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HttpFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpFilter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RequestIDExtension {
    // message fields
    pub typed_config: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RequestIDExtension {
    fn default() -> &'a RequestIDExtension {
        <RequestIDExtension as ::protobuf::Message>::default_instance()
    }
}

impl RequestIDExtension {
    pub fn new() -> RequestIDExtension {
        ::std::default::Default::default()
    }

    // .google.protobuf.Any typed_config = 1;


    pub fn get_typed_config(&self) -> &::protobuf::well_known_types::Any {
        self.typed_config.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_typed_config(&mut self) {
        self.typed_config.clear();
    }

    pub fn has_typed_config(&self) -> bool {
        self.typed_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_typed_config(&mut self, v: ::protobuf::well_known_types::Any) {
        self.typed_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_typed_config(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.typed_config.is_none() {
            self.typed_config.set_default();
        }
        self.typed_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_typed_config(&mut self) -> ::protobuf::well_known_types::Any {
        self.typed_config.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }
}

impl ::protobuf::Message for RequestIDExtension {
    fn is_initialized(&self) -> bool {
        for v in &self.typed_config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.typed_config)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.typed_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.typed_config.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RequestIDExtension {
        RequestIDExtension::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "typed_config",
                |m: &RequestIDExtension| { &m.typed_config },
                |m: &mut RequestIDExtension| { &mut m.typed_config },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RequestIDExtension>(
                "RequestIDExtension",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RequestIDExtension {
        static instance: ::protobuf::rt::LazyV2<RequestIDExtension> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RequestIDExtension::new)
    }
}

impl ::protobuf::Clear for RequestIDExtension {
    fn clear(&mut self) {
        self.typed_config.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RequestIDExtension {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RequestIDExtension {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \nYenvoy/extensions/filters/network/http_connection_manager/v3/http_conn\
    ection_manager.proto\x12;envoy.extensions.filters.network.http_connectio\
    n_manager.v3\x1a)envoy/config/accesslog/v3/accesslog.proto\x1a\x1fenvoy/\
    config/core/v3/base.proto\x1a(envoy/config/core/v3/config_source.proto\
    \x1a$envoy/config/core/v3/extension.proto\x1a#envoy/config/core/v3/proto\
    col.proto\x1a5envoy/config/core/v3/substitution_format_string.proto\x1a!\
    envoy/config/route/v3/route.proto\x1a(envoy/config/route/v3/scoped_route\
    .proto\x1a'envoy/config/trace/v3/http_tracer.proto\x1a&envoy/type/tracin\
    g/v3/custom_tag.proto\x1a\x1benvoy/type/v3/percent.proto\x1a\x19google/p\
    rotobuf/any.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1cgoogle/pr\
    otobuf/struct.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a#envoy/anno\
    tations/deprecation.proto\x1a\x1eudpa/annotations/migrate.proto\x1a\x1fu\
    dpa/annotations/security.proto\x1a\x1dudpa/annotations/status.proto\x1a!\
    udpa/annotations/versioning.proto\x1a\x17validate/validate.proto\"\xb5*\
    \n\x15HttpConnectionManager\x12\x85\x01\n\ncodec_type\x18\x01\x20\x01(\
    \x0e2\\.envoy.extensions.filters.network.http_connection_manager.v3.Http\
    ConnectionManager.CodecTypeR\tcodecTypeB\x08\xfaB\x05\x82\x01\x02\x10\
    \x01\x12(\n\x0bstat_prefix\x18\x02\x20\x01(\tR\nstatPrefixB\x07\xfaB\x04\
    r\x02\x10\x01\x12T\n\x03rds\x18\x03\x20\x01(\x0b2@.envoy.extensions.filt\
    ers.network.http_connection_manager.v3.RdsH\0R\x03rds\x12N\n\x0croute_co\
    nfig\x18\x04\x20\x01(\x0b2).envoy.config.route.v3.RouteConfigurationH\0R\
    \x0brouteConfig\x12p\n\rscoped_routes\x18\x1f\x20\x01(\x0b2I.envoy.exten\
    sions.filters.network.http_connection_manager.v3.ScopedRoutesH\0R\x0csco\
    pedRoutes\x12j\n\x0chttp_filters\x18\x05\x20\x03(\x0b2G.envoy.extensions\
    .filters.network.http_connection_manager.v3.HttpFilterR\x0bhttpFilters\
    \x12@\n\x0eadd_user_agent\x18\x06\x20\x01(\x0b2\x1a.google.protobuf.Bool\
    ValueR\x0caddUserAgent\x12t\n\x07tracing\x18\x07\x20\x01(\x0b2Z.envoy.ex\
    tensions.filters.network.http_connection_manager.v3.HttpConnectionManage\
    r.TracingR\x07tracing\x12s\n\x1ccommon_http_protocol_options\x18#\x20\
    \x01(\x0b2).envoy.config.core.v3.HttpProtocolOptionsR\x19commonHttpProto\
    colOptionsB\x07\x8a\x93\xb7*\x02\x08\x01\x12^\n\x15http_protocol_options\
    \x18\x08\x20\x01(\x0b2*.envoy.config.core.v3.Http1ProtocolOptionsR\x13ht\
    tpProtocolOptions\x12i\n\x16http2_protocol_options\x18\t\x20\x01(\x0b2*.\
    envoy.config.core.v3.Http2ProtocolOptionsR\x14http2ProtocolOptionsB\x07\
    \x8a\x93\xb7*\x02\x08\x01\x12,\n\x0bserver_name\x18\n\x20\x01(\tR\nserve\
    rNameB\x0b\xfaB\x08r\x06\xc0\x01\x02\xc8\x01\0\x12\xb9\x01\n\x1cserver_h\
    eader_transformation\x18\"\x20\x01(\x0e2m.envoy.extensions.filters.netwo\
    rk.http_connection_manager.v3.HttpConnectionManager.ServerHeaderTransfor\
    mationR\x1aserverHeaderTransformationB\x08\xfaB\x05\x82\x01\x02\x10\x01\
    \x12\\\n\x16max_request_headers_kb\x18\x1d\x20\x01(\x0b2\x1c.google.prot\
    obuf.UInt32ValueR\x13maxRequestHeadersKbB\t\xfaB\x06*\x04\x18`\x20\0\x12\
    R\n\x13stream_idle_timeout\x18\x18\x20\x01(\x0b2\x19.google.protobuf.Dur\
    ationR\x11streamIdleTimeoutB\x07\x8a\x93\xb7*\x02\x08\x01\x12K\n\x0frequ\
    est_timeout\x18\x1c\x20\x01(\x0b2\x19.google.protobuf.DurationR\x0ereque\
    stTimeoutB\x07\x8a\x93\xb7*\x02\x08\x01\x12b\n\x17request_headers_timeou\
    t\x18)\x20\x01(\x0b2\x19.google.protobuf.DurationR\x15requestHeadersTime\
    outB\x0f\xfaB\x05\xaa\x01\x022\0\x8a\x93\xb7*\x02\x08\x01\x12>\n\rdrain_\
    timeout\x18\x0c\x20\x01(\x0b2\x19.google.protobuf.DurationR\x0cdrainTime\
    out\x12M\n\x15delayed_close_timeout\x18\x1a\x20\x01(\x0b2\x19.google.pro\
    tobuf.DurationR\x13delayedCloseTimeout\x12C\n\naccess_log\x18\r\x20\x03(\
    \x0b2$.envoy.config.accesslog.v3.AccessLogR\taccessLog\x12Q\n\x12use_rem\
    ote_address\x18\x0e\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\x10useR\
    emoteAddressB\x07\x8a\x93\xb7*\x02\x08\x01\x12/\n\x14xff_num_trusted_hop\
    s\x18\x13\x20\x01(\rR\x11xffNumTrustedHops\x12\xa0\x01\n\x17internal_add\
    ress_config\x18\x19\x20\x01(\x0b2h.envoy.extensions.filters.network.http\
    _connection_manager.v3.HttpConnectionManager.InternalAddressConfigR\x15i\
    nternalAddressConfig\x12&\n\x0fskip_xff_append\x18\x15\x20\x01(\x08R\rsk\
    ipXffAppend\x12\x10\n\x03via\x18\x16\x20\x01(\tR\x03via\x12J\n\x13genera\
    te_request_id\x18\x0f\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\x11ge\
    nerateRequestId\x12?\n\x1cpreserve_external_request_id\x18\x20\x20\x01(\
    \x08R\x19preserveExternalRequestId\x12G\n!always_set_request_id_in_respo\
    nse\x18%\x20\x01(\x08R\x1calwaysSetRequestIdInResponse\x12\xb4\x01\n\x1b\
    forward_client_cert_details\x18\x10\x20\x01(\x0e2k.envoy.extensions.filt\
    ers.network.http_connection_manager.v3.HttpConnectionManager.ForwardClie\
    ntCertDetailsR\x18forwardClientCertDetailsB\x08\xfaB\x05\x82\x01\x02\x10\
    \x01\x12\xb4\x01\n\x1fset_current_client_cert_details\x18\x11\x20\x01(\
    \x0b2n.envoy.extensions.filters.network.http_connection_manager.v3.HttpC\
    onnectionManager.SetCurrentClientCertDetailsR\x1bsetCurrentClientCertDet\
    ails\x12,\n\x12proxy_100_continue\x18\x12\x20\x01(\x08R\x10proxy100Conti\
    nue\x12e\n1represent_ipv4_remote_address_as_ipv4_mapped_ipv6\x18\x14\x20\
    \x01(\x08R*representIpv4RemoteAddressAsIpv4MappedIpv6\x12\x89\x01\n\x0fu\
    pgrade_configs\x18\x17\x20\x03(\x0b2`.envoy.extensions.filters.network.h\
    ttp_connection_manager.v3.HttpConnectionManager.UpgradeConfigR\x0eupgrad\
    eConfigs\x12A\n\x0enormalize_path\x18\x1e\x20\x01(\x0b2\x1a.google.proto\
    buf.BoolValueR\rnormalizePath\x12#\n\rmerge_slashes\x18!\x20\x01(\x08R\
    \x0cmergeSlashes\x12\x81\x01\n\x14request_id_extension\x18$\x20\x01(\x0b\
    2O.envoy.extensions.filters.network.http_connection_manager.v3.RequestID\
    ExtensionR\x12requestIdExtension\x12{\n\x12local_reply_config\x18&\x20\
    \x01(\x0b2M.envoy.extensions.filters.network.http_connection_manager.v3.\
    LocalReplyConfigR\x10localReplyConfig\x127\n\x18strip_matching_host_port\
    \x18'\x20\x01(\x08R\x15stripMatchingHostPort\x12i\n$stream_error_on_inva\
    lid_http_message\x18(\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\x1fst\
    reamErrorOnInvalidHttpMessage\x1a\xf6\x04\n\x07Tracing\x12?\n\x0fclient_\
    sampling\x18\x03\x20\x01(\x0b2\x16.envoy.type.v3.PercentR\x0eclientSampl\
    ing\x12?\n\x0frandom_sampling\x18\x04\x20\x01(\x0b2\x16.envoy.type.v3.Pe\
    rcentR\x0erandomSampling\x12A\n\x10overall_sampling\x18\x05\x20\x01(\x0b\
    2\x16.envoy.type.v3.PercentR\x0foverallSampling\x12\x18\n\x07verbose\x18\
    \x06\x20\x01(\x08R\x07verbose\x12K\n\x13max_path_tag_length\x18\x07\x20\
    \x01(\x0b2\x1c.google.protobuf.UInt32ValueR\x10maxPathTagLength\x12A\n\
    \x0bcustom_tags\x18\x08\x20\x03(\x0b2\x20.envoy.type.tracing.v3.CustomTa\
    gR\ncustomTags\x12?\n\x08provider\x18\t\x20\x01(\x0b2#.envoy.config.trac\
    e.v3.Tracing.HttpR\x08provider\"(\n\rOperationName\x12\x0b\n\x07INGRESS\
    \x10\0\x12\n\n\x06EGRESS\x10\x01:[\x9a\xc5\x88\x1eV\nTenvoy.config.filte\
    r.network.http_connection_manager.v2.HttpConnectionManager.TracingJ\x04\
    \x08\x01\x10\x02J\x04\x08\x02\x10\x03R\x0eoperation_nameR\x18request_hea\
    ders_for_tags\x1a\xa5\x01\n\x15InternalAddressConfig\x12!\n\x0cunix_sock\
    ets\x18\x01\x20\x01(\x08R\x0bunixSockets:i\x9a\xc5\x88\x1ed\nbenvoy.conf\
    ig.filter.network.http_connection_manager.v2.HttpConnectionManager.Inter\
    nalAddressConfig\x1a\x98\x02\n\x1bSetCurrentClientCertDetails\x124\n\x07\
    subject\x18\x01\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\x07subject\
    \x12\x12\n\x04cert\x18\x03\x20\x01(\x08R\x04cert\x12\x14\n\x05chain\x18\
    \x06\x20\x01(\x08R\x05chain\x12\x10\n\x03dns\x18\x04\x20\x01(\x08R\x03dn\
    s\x12\x10\n\x03uri\x18\x05\x20\x01(\x08R\x03uri:o\x9a\xc5\x88\x1ej\nhenv\
    oy.config.filter.network.http_connection_manager.v2.HttpConnectionManage\
    r.SetCurrentClientCertDetailsJ\x04\x08\x02\x10\x03\x1a\xae\x02\n\rUpgrad\
    eConfig\x12!\n\x0cupgrade_type\x18\x01\x20\x01(\tR\x0bupgradeType\x12a\n\
    \x07filters\x18\x02\x20\x03(\x0b2G.envoy.extensions.filters.network.http\
    _connection_manager.v3.HttpFilterR\x07filters\x124\n\x07enabled\x18\x03\
    \x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\x07enabled:a\x9a\xc5\x88\
    \x1e\\\nZenvoy.config.filter.network.http_connection_manager.v2.HttpConn\
    ectionManager.UpgradeConfig\"6\n\tCodecType\x12\x08\n\x04AUTO\x10\0\x12\
    \t\n\x05HTTP1\x10\x01\x12\t\n\x05HTTP2\x10\x02\x12\t\n\x05HTTP3\x10\x03\
    \"S\n\x1aServerHeaderTransformation\x12\r\n\tOVERWRITE\x10\0\x12\x14\n\
    \x10APPEND_IF_ABSENT\x10\x01\x12\x10\n\x0cPASS_THROUGH\x10\x02\"y\n\x18F\
    orwardClientCertDetails\x12\x0c\n\x08SANITIZE\x10\0\x12\x10\n\x0cFORWARD\
    _ONLY\x10\x01\x12\x12\n\x0eAPPEND_FORWARD\x10\x02\x12\x10\n\x0cSANITIZE_\
    SET\x10\x03\x12\x17\n\x13ALWAYS_FORWARD_ONLY\x10\x04B\x16\n\x0froute_spe\
    cifier\x12\x03\xf8B\x01:S\x9a\xc5\x88\x1eN\nLenvoy.config.filter.network\
    .http_connection_manager.v2.HttpConnectionManagerJ\x04\x08\x1b\x10\x1cJ\
    \x04\x08\x0b\x10\x0cR\x0cidle_timeout\"\xca\x01\n\x10LocalReplyConfig\
    \x12e\n\x07mappers\x18\x01\x20\x03(\x0b2K.envoy.extensions.filters.netwo\
    rk.http_connection_manager.v3.ResponseMapperR\x07mappers\x12O\n\x0bbody_\
    format\x18\x02\x20\x01(\x0b2..envoy.config.core.v3.SubstitutionFormatStr\
    ingR\nbodyFormat\"\x9c\x03\n\x0eResponseMapper\x12L\n\x06filter\x18\x01\
    \x20\x01(\x0b2*.envoy.config.accesslog.v3.AccessLogFilterR\x06filterB\
    \x08\xfaB\x05\x8a\x01\x02\x10\x01\x12J\n\x0bstatus_code\x18\x02\x20\x01(\
    \x0b2\x1c.google.protobuf.UInt32ValueR\nstatusCodeB\x0b\xfaB\x08*\x06\
    \x10\xd8\x04(\xc8\x01\x124\n\x04body\x18\x03\x20\x01(\x0b2\x20.envoy.con\
    fig.core.v3.DataSourceR\x04body\x12`\n\x14body_format_override\x18\x04\
    \x20\x01(\x0b2..envoy.config.core.v3.SubstitutionFormatStringR\x12bodyFo\
    rmatOverride\x12X\n\x0eheaders_to_add\x18\x05\x20\x03(\x0b2'.envoy.confi\
    g.core.v3.HeaderValueOptionR\x0cheadersToAddB\t\xfaB\x06\x92\x01\x03\x10\
    \xe8\x07\"\xc7\x01\n\x03Rds\x12Q\n\rconfig_source\x18\x01\x20\x01(\x0b2\
    \".envoy.config.core.v3.ConfigSourceR\x0cconfigSourceB\x08\xfaB\x05\x8a\
    \x01\x02\x10\x01\x12*\n\x11route_config_name\x18\x02\x20\x01(\tR\x0frout\
    eConfigName:A\x9a\xc5\x88\x1e<\n:envoy.config.filter.network.http_connec\
    tion_manager.v2.Rds\"\xf7\x01\n\x1dScopedRouteConfigurationsList\x12y\n\
    \x1bscoped_route_configurations\x18\x01\x20\x03(\x0b2/.envoy.config.rout\
    e.v3.ScopedRouteConfigurationR\x19scopedRouteConfigurationsB\x08\xfaB\
    \x05\x92\x01\x02\x08\x01:[\x9a\xc5\x88\x1eV\nTenvoy.config.filter.networ\
    k.http_connection_manager.v2.ScopedRouteConfigurationsList\"\xe9\x0e\n\
    \x0cScopedRoutes\x12\x1b\n\x04name\x18\x01\x20\x01(\tR\x04nameB\x07\xfaB\
    \x04r\x02\x10\x01\x12\x8f\x01\n\x11scope_key_builder\x18\x02\x20\x01(\
    \x0b2Y.envoy.extensions.filters.network.http_connection_manager.v3.Scope\
    dRoutes.ScopeKeyBuilderR\x0fscopeKeyBuilderB\x08\xfaB\x05\x8a\x01\x02\
    \x10\x01\x12X\n\x11rds_config_source\x18\x03\x20\x01(\x0b2\".envoy.confi\
    g.core.v3.ConfigSourceR\x0frdsConfigSourceB\x08\xfaB\x05\x8a\x01\x02\x10\
    \x01\x12\xa5\x01\n\x20scoped_route_configurations_list\x18\x04\x20\x01(\
    \x0b2Z.envoy.extensions.filters.network.http_connection_manager.v3.Scope\
    dRouteConfigurationsListH\0R\x1dscopedRouteConfigurationsList\x12g\n\nsc\
    oped_rds\x18\x05\x20\x01(\x0b2F.envoy.extensions.filters.network.http_co\
    nnection_manager.v3.ScopedRdsH\0R\tscopedRds\x1a\xd9\t\n\x0fScopeKeyBuil\
    der\x12\x91\x01\n\tfragments\x18\x01\x20\x03(\x0b2i.envoy.extensions.fil\
    ters.network.http_connection_manager.v3.ScopedRoutes.ScopeKeyBuilder.Fra\
    gmentBuilderR\tfragmentsB\x08\xfaB\x05\x92\x01\x02\x08\x01\x1a\xd5\x07\n\
    \x0fFragmentBuilder\x12\xb6\x01\n\x16header_value_extractor\x18\x01\x20\
    \x01(\x0b2~.envoy.extensions.filters.network.http_connection_manager.v3.\
    ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueExtractorH\0R\
    \x14headerValueExtractor\x1a\x8f\x05\n\x14HeaderValueExtractor\x12\x1b\n\
    \x04name\x18\x01\x20\x01(\tR\x04nameB\x07\xfaB\x04r\x02\x10\x01\x12+\n\
    \x11element_separator\x18\x02\x20\x01(\tR\x10elementSeparator\x12\x16\n\
    \x05index\x18\x03\x20\x01(\rH\0R\x05index\x12\xa5\x01\n\x07element\x18\
    \x04\x20\x01(\x0b2\x88\x01.envoy.extensions.filters.network.http_connect\
    ion_manager.v3.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValueE\
    xtractor.KvElementH\0R\x07element\x1a\xdb\x01\n\tKvElement\x12%\n\tsepar\
    ator\x18\x01\x20\x01(\tR\tseparatorB\x07\xfaB\x04r\x02\x10\x01\x12\x19\n\
    \x03key\x18\x02\x20\x01(\tR\x03keyB\x07\xfaB\x04r\x02\x10\x01:\x8b\x01\
    \x9a\xc5\x88\x1e\x85\x01\n\x82\x01envoy.config.filter.network.http_conne\
    ction_manager.v2.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder.HeaderValu\
    eExtractor.KvElementB\x0e\n\x0cextract_type:\x7f\x9a\xc5\x88\x1ez\nxenvo\
    y.config.filter.network.http_connection_manager.v2.ScopedRoutes.ScopeKey\
    Builder.FragmentBuilder.HeaderValueExtractorB\x0b\n\x04type\x12\x03\xf8B\
    \x01:j\x9a\xc5\x88\x1ee\ncenvoy.config.filter.network.http_connection_ma\
    nager.v2.ScopedRoutes.ScopeKeyBuilder.FragmentBuilder:Z\x9a\xc5\x88\x1eU\
    \nSenvoy.config.filter.network.http_connection_manager.v2.ScopedRoutes.S\
    copeKeyBuilderB\x17\n\x10config_specifier\x12\x03\xf8B\x01:J\x9a\xc5\x88\
    \x1eE\nCenvoy.config.filter.network.http_connection_manager.v2.ScopedRou\
    tes\"\xbb\x01\n\tScopedRds\x12e\n\x18scoped_rds_config_source\x18\x01\
    \x20\x01(\x0b2\".envoy.config.core.v3.ConfigSourceR\x15scopedRdsConfigSo\
    urceB\x08\xfaB\x05\x8a\x01\x02\x10\x01:G\x9a\xc5\x88\x1eB\n@envoy.config\
    .filter.network.http_connection_manager.v2.ScopedRds\"\xab\x02\n\nHttpFi\
    lter\x12\x1b\n\x04name\x18\x01\x20\x01(\tR\x04nameB\x07\xfaB\x04r\x02\
    \x10\x01\x129\n\x0ctyped_config\x18\x04\x20\x01(\x0b2\x14.google.protobu\
    f.AnyH\0R\x0btypedConfig\x12X\n\x10config_discovery\x18\x05\x20\x01(\x0b\
    2+.envoy.config.core.v3.ExtensionConfigSourceH\0R\x0fconfigDiscoveryB\r\
    \n\x0bconfig_type:H\x9a\xc5\x88\x1eC\nAenvoy.config.filter.network.http_\
    connection_manager.v2.HttpFilterJ\x04\x08\x03\x10\x04J\x04\x08\x02\x10\
    \x03R\x06config\"\x9f\x01\n\x12RequestIDExtension\x127\n\x0ctyped_config\
    \x18\x01\x20\x01(\x0b2\x14.google.protobuf.AnyR\x0btypedConfig:P\x9a\xc5\
    \x88\x1eK\nIenvoy.config.filter.network.http_connection_manager.v2.Reque\
    stIDExtensionBq\nIio.envoyproxy.envoy.extensions.filters.network.http_co\
    nnection_manager.v3B\x1aHttpConnectionManagerProtoP\x01\xba\x80\xc8\xd1\
    \x06\x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
