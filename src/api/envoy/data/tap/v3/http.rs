// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/data/tap/v3/http.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct HttpBufferedTrace {
    // message fields
    pub request: ::protobuf::SingularPtrField<HttpBufferedTrace_Message>,
    pub response: ::protobuf::SingularPtrField<HttpBufferedTrace_Message>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HttpBufferedTrace {
    fn default() -> &'a HttpBufferedTrace {
        <HttpBufferedTrace as ::protobuf::Message>::default_instance()
    }
}

impl HttpBufferedTrace {
    pub fn new() -> HttpBufferedTrace {
        ::std::default::Default::default()
    }

    // .envoy.data.tap.v3.HttpBufferedTrace.Message request = 1;


    pub fn get_request(&self) -> &HttpBufferedTrace_Message {
        self.request.as_ref().unwrap_or_else(|| <HttpBufferedTrace_Message as ::protobuf::Message>::default_instance())
    }
    pub fn clear_request(&mut self) {
        self.request.clear();
    }

    pub fn has_request(&self) -> bool {
        self.request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request(&mut self, v: HttpBufferedTrace_Message) {
        self.request = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request(&mut self) -> &mut HttpBufferedTrace_Message {
        if self.request.is_none() {
            self.request.set_default();
        }
        self.request.as_mut().unwrap()
    }

    // Take field
    pub fn take_request(&mut self) -> HttpBufferedTrace_Message {
        self.request.take().unwrap_or_else(|| HttpBufferedTrace_Message::new())
    }

    // .envoy.data.tap.v3.HttpBufferedTrace.Message response = 2;


    pub fn get_response(&self) -> &HttpBufferedTrace_Message {
        self.response.as_ref().unwrap_or_else(|| <HttpBufferedTrace_Message as ::protobuf::Message>::default_instance())
    }
    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: HttpBufferedTrace_Message) {
        self.response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response(&mut self) -> &mut HttpBufferedTrace_Message {
        if self.response.is_none() {
            self.response.set_default();
        }
        self.response.as_mut().unwrap()
    }

    // Take field
    pub fn take_response(&mut self) -> HttpBufferedTrace_Message {
        self.response.take().unwrap_or_else(|| HttpBufferedTrace_Message::new())
    }
}

impl ::protobuf::Message for HttpBufferedTrace {
    fn is_initialized(&self) -> bool {
        for v in &self.request {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.request)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.request.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.request.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.response.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HttpBufferedTrace {
        HttpBufferedTrace::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HttpBufferedTrace_Message>>(
                "request",
                |m: &HttpBufferedTrace| { &m.request },
                |m: &mut HttpBufferedTrace| { &mut m.request },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HttpBufferedTrace_Message>>(
                "response",
                |m: &HttpBufferedTrace| { &m.response },
                |m: &mut HttpBufferedTrace| { &mut m.response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HttpBufferedTrace>(
                "HttpBufferedTrace",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HttpBufferedTrace {
        static instance: ::protobuf::rt::LazyV2<HttpBufferedTrace> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HttpBufferedTrace::new)
    }
}

impl ::protobuf::Clear for HttpBufferedTrace {
    fn clear(&mut self) {
        self.request.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HttpBufferedTrace {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpBufferedTrace {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HttpBufferedTrace_Message {
    // message fields
    pub headers: ::protobuf::RepeatedField<super::base::HeaderValue>,
    pub body: ::protobuf::SingularPtrField<super::common::Body>,
    pub trailers: ::protobuf::RepeatedField<super::base::HeaderValue>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HttpBufferedTrace_Message {
    fn default() -> &'a HttpBufferedTrace_Message {
        <HttpBufferedTrace_Message as ::protobuf::Message>::default_instance()
    }
}

impl HttpBufferedTrace_Message {
    pub fn new() -> HttpBufferedTrace_Message {
        ::std::default::Default::default()
    }

    // repeated .envoy.config.core.v3.HeaderValue headers = 1;


    pub fn get_headers(&self) -> &[super::base::HeaderValue] {
        &self.headers
    }
    pub fn clear_headers(&mut self) {
        self.headers.clear();
    }

    // Param is passed by value, moved
    pub fn set_headers(&mut self, v: ::protobuf::RepeatedField<super::base::HeaderValue>) {
        self.headers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_headers(&mut self) -> &mut ::protobuf::RepeatedField<super::base::HeaderValue> {
        &mut self.headers
    }

    // Take field
    pub fn take_headers(&mut self) -> ::protobuf::RepeatedField<super::base::HeaderValue> {
        ::std::mem::replace(&mut self.headers, ::protobuf::RepeatedField::new())
    }

    // .envoy.data.tap.v3.Body body = 2;


    pub fn get_body(&self) -> &super::common::Body {
        self.body.as_ref().unwrap_or_else(|| <super::common::Body as ::protobuf::Message>::default_instance())
    }
    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    pub fn has_body(&self) -> bool {
        self.body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: super::common::Body) {
        self.body = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut super::common::Body {
        if self.body.is_none() {
            self.body.set_default();
        }
        self.body.as_mut().unwrap()
    }

    // Take field
    pub fn take_body(&mut self) -> super::common::Body {
        self.body.take().unwrap_or_else(|| super::common::Body::new())
    }

    // repeated .envoy.config.core.v3.HeaderValue trailers = 3;


    pub fn get_trailers(&self) -> &[super::base::HeaderValue] {
        &self.trailers
    }
    pub fn clear_trailers(&mut self) {
        self.trailers.clear();
    }

    // Param is passed by value, moved
    pub fn set_trailers(&mut self, v: ::protobuf::RepeatedField<super::base::HeaderValue>) {
        self.trailers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_trailers(&mut self) -> &mut ::protobuf::RepeatedField<super::base::HeaderValue> {
        &mut self.trailers
    }

    // Take field
    pub fn take_trailers(&mut self) -> ::protobuf::RepeatedField<super::base::HeaderValue> {
        ::std::mem::replace(&mut self.trailers, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for HttpBufferedTrace_Message {
    fn is_initialized(&self) -> bool {
        for v in &self.headers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.body {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.trailers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.headers)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.body)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.trailers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.headers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.body.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.trailers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.headers {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.body.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.trailers {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HttpBufferedTrace_Message {
        HttpBufferedTrace_Message::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::HeaderValue>>(
                "headers",
                |m: &HttpBufferedTrace_Message| { &m.headers },
                |m: &mut HttpBufferedTrace_Message| { &mut m.headers },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::Body>>(
                "body",
                |m: &HttpBufferedTrace_Message| { &m.body },
                |m: &mut HttpBufferedTrace_Message| { &mut m.body },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::HeaderValue>>(
                "trailers",
                |m: &HttpBufferedTrace_Message| { &m.trailers },
                |m: &mut HttpBufferedTrace_Message| { &mut m.trailers },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HttpBufferedTrace_Message>(
                "HttpBufferedTrace.Message",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HttpBufferedTrace_Message {
        static instance: ::protobuf::rt::LazyV2<HttpBufferedTrace_Message> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HttpBufferedTrace_Message::new)
    }
}

impl ::protobuf::Clear for HttpBufferedTrace_Message {
    fn clear(&mut self) {
        self.headers.clear();
        self.body.clear();
        self.trailers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HttpBufferedTrace_Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpBufferedTrace_Message {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HttpStreamedTraceSegment {
    // message fields
    pub trace_id: u64,
    // message oneof groups
    pub message_piece: ::std::option::Option<HttpStreamedTraceSegment_oneof_message_piece>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HttpStreamedTraceSegment {
    fn default() -> &'a HttpStreamedTraceSegment {
        <HttpStreamedTraceSegment as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum HttpStreamedTraceSegment_oneof_message_piece {
    request_headers(super::base::HeaderMap),
    request_body_chunk(super::common::Body),
    request_trailers(super::base::HeaderMap),
    response_headers(super::base::HeaderMap),
    response_body_chunk(super::common::Body),
    response_trailers(super::base::HeaderMap),
}

impl HttpStreamedTraceSegment {
    pub fn new() -> HttpStreamedTraceSegment {
        ::std::default::Default::default()
    }

    // uint64 trace_id = 1;


    pub fn get_trace_id(&self) -> u64 {
        self.trace_id
    }
    pub fn clear_trace_id(&mut self) {
        self.trace_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_trace_id(&mut self, v: u64) {
        self.trace_id = v;
    }

    // .envoy.config.core.v3.HeaderMap request_headers = 2;


    pub fn get_request_headers(&self) -> &super::base::HeaderMap {
        match self.message_piece {
            ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::request_headers(ref v)) => v,
            _ => <super::base::HeaderMap as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_request_headers(&mut self) {
        self.message_piece = ::std::option::Option::None;
    }

    pub fn has_request_headers(&self) -> bool {
        match self.message_piece {
            ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::request_headers(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_request_headers(&mut self, v: super::base::HeaderMap) {
        self.message_piece = ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::request_headers(v))
    }

    // Mutable pointer to the field.
    pub fn mut_request_headers(&mut self) -> &mut super::base::HeaderMap {
        if let ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::request_headers(_)) = self.message_piece {
        } else {
            self.message_piece = ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::request_headers(super::base::HeaderMap::new()));
        }
        match self.message_piece {
            ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::request_headers(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_request_headers(&mut self) -> super::base::HeaderMap {
        if self.has_request_headers() {
            match self.message_piece.take() {
                ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::request_headers(v)) => v,
                _ => panic!(),
            }
        } else {
            super::base::HeaderMap::new()
        }
    }

    // .envoy.data.tap.v3.Body request_body_chunk = 3;


    pub fn get_request_body_chunk(&self) -> &super::common::Body {
        match self.message_piece {
            ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::request_body_chunk(ref v)) => v,
            _ => <super::common::Body as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_request_body_chunk(&mut self) {
        self.message_piece = ::std::option::Option::None;
    }

    pub fn has_request_body_chunk(&self) -> bool {
        match self.message_piece {
            ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::request_body_chunk(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_request_body_chunk(&mut self, v: super::common::Body) {
        self.message_piece = ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::request_body_chunk(v))
    }

    // Mutable pointer to the field.
    pub fn mut_request_body_chunk(&mut self) -> &mut super::common::Body {
        if let ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::request_body_chunk(_)) = self.message_piece {
        } else {
            self.message_piece = ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::request_body_chunk(super::common::Body::new()));
        }
        match self.message_piece {
            ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::request_body_chunk(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_request_body_chunk(&mut self) -> super::common::Body {
        if self.has_request_body_chunk() {
            match self.message_piece.take() {
                ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::request_body_chunk(v)) => v,
                _ => panic!(),
            }
        } else {
            super::common::Body::new()
        }
    }

    // .envoy.config.core.v3.HeaderMap request_trailers = 4;


    pub fn get_request_trailers(&self) -> &super::base::HeaderMap {
        match self.message_piece {
            ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::request_trailers(ref v)) => v,
            _ => <super::base::HeaderMap as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_request_trailers(&mut self) {
        self.message_piece = ::std::option::Option::None;
    }

    pub fn has_request_trailers(&self) -> bool {
        match self.message_piece {
            ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::request_trailers(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_request_trailers(&mut self, v: super::base::HeaderMap) {
        self.message_piece = ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::request_trailers(v))
    }

    // Mutable pointer to the field.
    pub fn mut_request_trailers(&mut self) -> &mut super::base::HeaderMap {
        if let ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::request_trailers(_)) = self.message_piece {
        } else {
            self.message_piece = ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::request_trailers(super::base::HeaderMap::new()));
        }
        match self.message_piece {
            ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::request_trailers(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_request_trailers(&mut self) -> super::base::HeaderMap {
        if self.has_request_trailers() {
            match self.message_piece.take() {
                ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::request_trailers(v)) => v,
                _ => panic!(),
            }
        } else {
            super::base::HeaderMap::new()
        }
    }

    // .envoy.config.core.v3.HeaderMap response_headers = 5;


    pub fn get_response_headers(&self) -> &super::base::HeaderMap {
        match self.message_piece {
            ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::response_headers(ref v)) => v,
            _ => <super::base::HeaderMap as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_response_headers(&mut self) {
        self.message_piece = ::std::option::Option::None;
    }

    pub fn has_response_headers(&self) -> bool {
        match self.message_piece {
            ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::response_headers(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_response_headers(&mut self, v: super::base::HeaderMap) {
        self.message_piece = ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::response_headers(v))
    }

    // Mutable pointer to the field.
    pub fn mut_response_headers(&mut self) -> &mut super::base::HeaderMap {
        if let ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::response_headers(_)) = self.message_piece {
        } else {
            self.message_piece = ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::response_headers(super::base::HeaderMap::new()));
        }
        match self.message_piece {
            ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::response_headers(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_response_headers(&mut self) -> super::base::HeaderMap {
        if self.has_response_headers() {
            match self.message_piece.take() {
                ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::response_headers(v)) => v,
                _ => panic!(),
            }
        } else {
            super::base::HeaderMap::new()
        }
    }

    // .envoy.data.tap.v3.Body response_body_chunk = 6;


    pub fn get_response_body_chunk(&self) -> &super::common::Body {
        match self.message_piece {
            ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::response_body_chunk(ref v)) => v,
            _ => <super::common::Body as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_response_body_chunk(&mut self) {
        self.message_piece = ::std::option::Option::None;
    }

    pub fn has_response_body_chunk(&self) -> bool {
        match self.message_piece {
            ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::response_body_chunk(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_response_body_chunk(&mut self, v: super::common::Body) {
        self.message_piece = ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::response_body_chunk(v))
    }

    // Mutable pointer to the field.
    pub fn mut_response_body_chunk(&mut self) -> &mut super::common::Body {
        if let ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::response_body_chunk(_)) = self.message_piece {
        } else {
            self.message_piece = ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::response_body_chunk(super::common::Body::new()));
        }
        match self.message_piece {
            ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::response_body_chunk(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_response_body_chunk(&mut self) -> super::common::Body {
        if self.has_response_body_chunk() {
            match self.message_piece.take() {
                ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::response_body_chunk(v)) => v,
                _ => panic!(),
            }
        } else {
            super::common::Body::new()
        }
    }

    // .envoy.config.core.v3.HeaderMap response_trailers = 7;


    pub fn get_response_trailers(&self) -> &super::base::HeaderMap {
        match self.message_piece {
            ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::response_trailers(ref v)) => v,
            _ => <super::base::HeaderMap as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_response_trailers(&mut self) {
        self.message_piece = ::std::option::Option::None;
    }

    pub fn has_response_trailers(&self) -> bool {
        match self.message_piece {
            ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::response_trailers(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_response_trailers(&mut self, v: super::base::HeaderMap) {
        self.message_piece = ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::response_trailers(v))
    }

    // Mutable pointer to the field.
    pub fn mut_response_trailers(&mut self) -> &mut super::base::HeaderMap {
        if let ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::response_trailers(_)) = self.message_piece {
        } else {
            self.message_piece = ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::response_trailers(super::base::HeaderMap::new()));
        }
        match self.message_piece {
            ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::response_trailers(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_response_trailers(&mut self) -> super::base::HeaderMap {
        if self.has_response_trailers() {
            match self.message_piece.take() {
                ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::response_trailers(v)) => v,
                _ => panic!(),
            }
        } else {
            super::base::HeaderMap::new()
        }
    }
}

impl ::protobuf::Message for HttpStreamedTraceSegment {
    fn is_initialized(&self) -> bool {
        if let Some(HttpStreamedTraceSegment_oneof_message_piece::request_headers(ref v)) = self.message_piece {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(HttpStreamedTraceSegment_oneof_message_piece::request_body_chunk(ref v)) = self.message_piece {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(HttpStreamedTraceSegment_oneof_message_piece::request_trailers(ref v)) = self.message_piece {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(HttpStreamedTraceSegment_oneof_message_piece::response_headers(ref v)) = self.message_piece {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(HttpStreamedTraceSegment_oneof_message_piece::response_body_chunk(ref v)) = self.message_piece {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(HttpStreamedTraceSegment_oneof_message_piece::response_trailers(ref v)) = self.message_piece {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.trace_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message_piece = ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::request_headers(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message_piece = ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::request_body_chunk(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message_piece = ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::request_trailers(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message_piece = ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::response_headers(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message_piece = ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::response_body_chunk(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message_piece = ::std::option::Option::Some(HttpStreamedTraceSegment_oneof_message_piece::response_trailers(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.trace_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.trace_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.message_piece {
            match v {
                &HttpStreamedTraceSegment_oneof_message_piece::request_headers(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &HttpStreamedTraceSegment_oneof_message_piece::request_body_chunk(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &HttpStreamedTraceSegment_oneof_message_piece::request_trailers(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &HttpStreamedTraceSegment_oneof_message_piece::response_headers(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &HttpStreamedTraceSegment_oneof_message_piece::response_body_chunk(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &HttpStreamedTraceSegment_oneof_message_piece::response_trailers(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.trace_id != 0 {
            os.write_uint64(1, self.trace_id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.message_piece {
            match v {
                &HttpStreamedTraceSegment_oneof_message_piece::request_headers(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &HttpStreamedTraceSegment_oneof_message_piece::request_body_chunk(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &HttpStreamedTraceSegment_oneof_message_piece::request_trailers(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &HttpStreamedTraceSegment_oneof_message_piece::response_headers(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &HttpStreamedTraceSegment_oneof_message_piece::response_body_chunk(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &HttpStreamedTraceSegment_oneof_message_piece::response_trailers(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HttpStreamedTraceSegment {
        HttpStreamedTraceSegment::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "trace_id",
                |m: &HttpStreamedTraceSegment| { &m.trace_id },
                |m: &mut HttpStreamedTraceSegment| { &mut m.trace_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::base::HeaderMap>(
                "request_headers",
                HttpStreamedTraceSegment::has_request_headers,
                HttpStreamedTraceSegment::get_request_headers,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::common::Body>(
                "request_body_chunk",
                HttpStreamedTraceSegment::has_request_body_chunk,
                HttpStreamedTraceSegment::get_request_body_chunk,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::base::HeaderMap>(
                "request_trailers",
                HttpStreamedTraceSegment::has_request_trailers,
                HttpStreamedTraceSegment::get_request_trailers,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::base::HeaderMap>(
                "response_headers",
                HttpStreamedTraceSegment::has_response_headers,
                HttpStreamedTraceSegment::get_response_headers,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::common::Body>(
                "response_body_chunk",
                HttpStreamedTraceSegment::has_response_body_chunk,
                HttpStreamedTraceSegment::get_response_body_chunk,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::base::HeaderMap>(
                "response_trailers",
                HttpStreamedTraceSegment::has_response_trailers,
                HttpStreamedTraceSegment::get_response_trailers,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HttpStreamedTraceSegment>(
                "HttpStreamedTraceSegment",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HttpStreamedTraceSegment {
        static instance: ::protobuf::rt::LazyV2<HttpStreamedTraceSegment> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HttpStreamedTraceSegment::new)
    }
}

impl ::protobuf::Clear for HttpStreamedTraceSegment {
    fn clear(&mut self) {
        self.trace_id = 0;
        self.message_piece = ::std::option::Option::None;
        self.message_piece = ::std::option::Option::None;
        self.message_piece = ::std::option::Option::None;
        self.message_piece = ::std::option::Option::None;
        self.message_piece = ::std::option::Option::None;
        self.message_piece = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HttpStreamedTraceSegment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpStreamedTraceSegment {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cenvoy/data/tap/v3/http.proto\x12\x11envoy.data.tap.v3\x1a\x1fenvoy\
    /config/core/v3/base.proto\x1a\x1eenvoy/data/tap/v3/common.proto\x1a\x1d\
    udpa/annotations/status.proto\x1a!udpa/annotations/versioning.proto\"\
    \xc4\x03\n\x11HttpBufferedTrace\x12F\n\x07request\x18\x01\x20\x01(\x0b2,\
    .envoy.data.tap.v3.HttpBufferedTrace.MessageR\x07request\x12H\n\x08respo\
    nse\x18\x02\x20\x01(\x0b2,.envoy.data.tap.v3.HttpBufferedTrace.MessageR\
    \x08response\x1a\xeb\x01\n\x07Message\x12;\n\x07headers\x18\x01\x20\x03(\
    \x0b2!.envoy.config.core.v3.HeaderValueR\x07headers\x12+\n\x04body\x18\
    \x02\x20\x01(\x0b2\x17.envoy.data.tap.v3.BodyR\x04body\x12=\n\x08trailer\
    s\x18\x03\x20\x03(\x0b2!.envoy.config.core.v3.HeaderValueR\x08trailers:7\
    \x9a\xc5\x88\x1e2\n0envoy.data.tap.v2alpha.HttpBufferedTrace.Message:/\
    \x9a\xc5\x88\x1e*\n(envoy.data.tap.v2alpha.HttpBufferedTrace\"\xca\x04\n\
    \x18HttpStreamedTraceSegment\x12\x19\n\x08trace_id\x18\x01\x20\x01(\x04R\
    \x07traceId\x12J\n\x0frequest_headers\x18\x02\x20\x01(\x0b2\x1f.envoy.co\
    nfig.core.v3.HeaderMapH\0R\x0erequestHeaders\x12G\n\x12request_body_chun\
    k\x18\x03\x20\x01(\x0b2\x17.envoy.data.tap.v3.BodyH\0R\x10requestBodyChu\
    nk\x12L\n\x10request_trailers\x18\x04\x20\x01(\x0b2\x1f.envoy.config.cor\
    e.v3.HeaderMapH\0R\x0frequestTrailers\x12L\n\x10response_headers\x18\x05\
    \x20\x01(\x0b2\x1f.envoy.config.core.v3.HeaderMapH\0R\x0fresponseHeaders\
    \x12I\n\x13response_body_chunk\x18\x06\x20\x01(\x0b2\x17.envoy.data.tap.\
    v3.BodyH\0R\x11responseBodyChunk\x12N\n\x11response_trailers\x18\x07\x20\
    \x01(\x0b2\x1f.envoy.config.core.v3.HeaderMapH\0R\x10responseTrailersB\
    \x0f\n\rmessage_piece:6\x9a\xc5\x88\x1e1\n/envoy.data.tap.v2alpha.HttpSt\
    reamedTraceSegmentB6\n\x1fio.envoyproxy.envoy.data.tap.v3B\tHttpProtoP\
    \x01\xba\x80\xc8\xd1\x06\x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
