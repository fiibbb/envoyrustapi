// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/data/tap/v2alpha/transport.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct Connection {
    // message fields
    pub local_address: ::protobuf::SingularPtrField<super::address::Address>,
    pub remote_address: ::protobuf::SingularPtrField<super::address::Address>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Connection {
    fn default() -> &'a Connection {
        <Connection as ::protobuf::Message>::default_instance()
    }
}

impl Connection {
    pub fn new() -> Connection {
        ::std::default::Default::default()
    }

    // .envoy.api.v2.core.Address local_address = 2;


    pub fn get_local_address(&self) -> &super::address::Address {
        self.local_address.as_ref().unwrap_or_else(|| <super::address::Address as ::protobuf::Message>::default_instance())
    }
    pub fn clear_local_address(&mut self) {
        self.local_address.clear();
    }

    pub fn has_local_address(&self) -> bool {
        self.local_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_local_address(&mut self, v: super::address::Address) {
        self.local_address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_local_address(&mut self) -> &mut super::address::Address {
        if self.local_address.is_none() {
            self.local_address.set_default();
        }
        self.local_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_local_address(&mut self) -> super::address::Address {
        self.local_address.take().unwrap_or_else(|| super::address::Address::new())
    }

    // .envoy.api.v2.core.Address remote_address = 3;


    pub fn get_remote_address(&self) -> &super::address::Address {
        self.remote_address.as_ref().unwrap_or_else(|| <super::address::Address as ::protobuf::Message>::default_instance())
    }
    pub fn clear_remote_address(&mut self) {
        self.remote_address.clear();
    }

    pub fn has_remote_address(&self) -> bool {
        self.remote_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_remote_address(&mut self, v: super::address::Address) {
        self.remote_address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_remote_address(&mut self) -> &mut super::address::Address {
        if self.remote_address.is_none() {
            self.remote_address.set_default();
        }
        self.remote_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_remote_address(&mut self) -> super::address::Address {
        self.remote_address.take().unwrap_or_else(|| super::address::Address::new())
    }
}

impl ::protobuf::Message for Connection {
    fn is_initialized(&self) -> bool {
        for v in &self.local_address {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.remote_address {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.local_address)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.remote_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.local_address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.remote_address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.local_address.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.remote_address.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Connection {
        Connection::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::address::Address>>(
                "local_address",
                |m: &Connection| { &m.local_address },
                |m: &mut Connection| { &mut m.local_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::address::Address>>(
                "remote_address",
                |m: &Connection| { &m.remote_address },
                |m: &mut Connection| { &mut m.remote_address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Connection>(
                "Connection",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Connection {
        static instance: ::protobuf::rt::LazyV2<Connection> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Connection::new)
    }
}

impl ::protobuf::Clear for Connection {
    fn clear(&mut self) {
        self.local_address.clear();
        self.remote_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Connection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Connection {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SocketEvent {
    // message fields
    pub timestamp: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    // message oneof groups
    pub event_selector: ::std::option::Option<SocketEvent_oneof_event_selector>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SocketEvent {
    fn default() -> &'a SocketEvent {
        <SocketEvent as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum SocketEvent_oneof_event_selector {
    read(SocketEvent_Read),
    write(SocketEvent_Write),
    closed(SocketEvent_Closed),
}

impl SocketEvent {
    pub fn new() -> SocketEvent {
        ::std::default::Default::default()
    }

    // .google.protobuf.Timestamp timestamp = 1;


    pub fn get_timestamp(&self) -> &::protobuf::well_known_types::Timestamp {
        self.timestamp.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.timestamp.is_none() {
            self.timestamp.set_default();
        }
        self.timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_timestamp(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.timestamp.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .envoy.data.tap.v2alpha.SocketEvent.Read read = 2;


    pub fn get_read(&self) -> &SocketEvent_Read {
        match self.event_selector {
            ::std::option::Option::Some(SocketEvent_oneof_event_selector::read(ref v)) => v,
            _ => <SocketEvent_Read as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_read(&mut self) {
        self.event_selector = ::std::option::Option::None;
    }

    pub fn has_read(&self) -> bool {
        match self.event_selector {
            ::std::option::Option::Some(SocketEvent_oneof_event_selector::read(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_read(&mut self, v: SocketEvent_Read) {
        self.event_selector = ::std::option::Option::Some(SocketEvent_oneof_event_selector::read(v))
    }

    // Mutable pointer to the field.
    pub fn mut_read(&mut self) -> &mut SocketEvent_Read {
        if let ::std::option::Option::Some(SocketEvent_oneof_event_selector::read(_)) = self.event_selector {
        } else {
            self.event_selector = ::std::option::Option::Some(SocketEvent_oneof_event_selector::read(SocketEvent_Read::new()));
        }
        match self.event_selector {
            ::std::option::Option::Some(SocketEvent_oneof_event_selector::read(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_read(&mut self) -> SocketEvent_Read {
        if self.has_read() {
            match self.event_selector.take() {
                ::std::option::Option::Some(SocketEvent_oneof_event_selector::read(v)) => v,
                _ => panic!(),
            }
        } else {
            SocketEvent_Read::new()
        }
    }

    // .envoy.data.tap.v2alpha.SocketEvent.Write write = 3;


    pub fn get_write(&self) -> &SocketEvent_Write {
        match self.event_selector {
            ::std::option::Option::Some(SocketEvent_oneof_event_selector::write(ref v)) => v,
            _ => <SocketEvent_Write as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_write(&mut self) {
        self.event_selector = ::std::option::Option::None;
    }

    pub fn has_write(&self) -> bool {
        match self.event_selector {
            ::std::option::Option::Some(SocketEvent_oneof_event_selector::write(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_write(&mut self, v: SocketEvent_Write) {
        self.event_selector = ::std::option::Option::Some(SocketEvent_oneof_event_selector::write(v))
    }

    // Mutable pointer to the field.
    pub fn mut_write(&mut self) -> &mut SocketEvent_Write {
        if let ::std::option::Option::Some(SocketEvent_oneof_event_selector::write(_)) = self.event_selector {
        } else {
            self.event_selector = ::std::option::Option::Some(SocketEvent_oneof_event_selector::write(SocketEvent_Write::new()));
        }
        match self.event_selector {
            ::std::option::Option::Some(SocketEvent_oneof_event_selector::write(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_write(&mut self) -> SocketEvent_Write {
        if self.has_write() {
            match self.event_selector.take() {
                ::std::option::Option::Some(SocketEvent_oneof_event_selector::write(v)) => v,
                _ => panic!(),
            }
        } else {
            SocketEvent_Write::new()
        }
    }

    // .envoy.data.tap.v2alpha.SocketEvent.Closed closed = 4;


    pub fn get_closed(&self) -> &SocketEvent_Closed {
        match self.event_selector {
            ::std::option::Option::Some(SocketEvent_oneof_event_selector::closed(ref v)) => v,
            _ => <SocketEvent_Closed as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_closed(&mut self) {
        self.event_selector = ::std::option::Option::None;
    }

    pub fn has_closed(&self) -> bool {
        match self.event_selector {
            ::std::option::Option::Some(SocketEvent_oneof_event_selector::closed(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_closed(&mut self, v: SocketEvent_Closed) {
        self.event_selector = ::std::option::Option::Some(SocketEvent_oneof_event_selector::closed(v))
    }

    // Mutable pointer to the field.
    pub fn mut_closed(&mut self) -> &mut SocketEvent_Closed {
        if let ::std::option::Option::Some(SocketEvent_oneof_event_selector::closed(_)) = self.event_selector {
        } else {
            self.event_selector = ::std::option::Option::Some(SocketEvent_oneof_event_selector::closed(SocketEvent_Closed::new()));
        }
        match self.event_selector {
            ::std::option::Option::Some(SocketEvent_oneof_event_selector::closed(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_closed(&mut self) -> SocketEvent_Closed {
        if self.has_closed() {
            match self.event_selector.take() {
                ::std::option::Option::Some(SocketEvent_oneof_event_selector::closed(v)) => v,
                _ => panic!(),
            }
        } else {
            SocketEvent_Closed::new()
        }
    }
}

impl ::protobuf::Message for SocketEvent {
    fn is_initialized(&self) -> bool {
        for v in &self.timestamp {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(SocketEvent_oneof_event_selector::read(ref v)) = self.event_selector {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SocketEvent_oneof_event_selector::write(ref v)) = self.event_selector {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SocketEvent_oneof_event_selector::closed(ref v)) = self.event_selector {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.timestamp)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.event_selector = ::std::option::Option::Some(SocketEvent_oneof_event_selector::read(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.event_selector = ::std::option::Option::Some(SocketEvent_oneof_event_selector::write(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.event_selector = ::std::option::Option::Some(SocketEvent_oneof_event_selector::closed(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.event_selector {
            match v {
                &SocketEvent_oneof_event_selector::read(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SocketEvent_oneof_event_selector::write(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SocketEvent_oneof_event_selector::closed(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.timestamp.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.event_selector {
            match v {
                &SocketEvent_oneof_event_selector::read(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SocketEvent_oneof_event_selector::write(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SocketEvent_oneof_event_selector::closed(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SocketEvent {
        SocketEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "timestamp",
                |m: &SocketEvent| { &m.timestamp },
                |m: &mut SocketEvent| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SocketEvent_Read>(
                "read",
                SocketEvent::has_read,
                SocketEvent::get_read,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SocketEvent_Write>(
                "write",
                SocketEvent::has_write,
                SocketEvent::get_write,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SocketEvent_Closed>(
                "closed",
                SocketEvent::has_closed,
                SocketEvent::get_closed,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SocketEvent>(
                "SocketEvent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SocketEvent {
        static instance: ::protobuf::rt::LazyV2<SocketEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SocketEvent::new)
    }
}

impl ::protobuf::Clear for SocketEvent {
    fn clear(&mut self) {
        self.timestamp.clear();
        self.event_selector = ::std::option::Option::None;
        self.event_selector = ::std::option::Option::None;
        self.event_selector = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SocketEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SocketEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SocketEvent_Read {
    // message fields
    pub data: ::protobuf::SingularPtrField<super::common::Body>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SocketEvent_Read {
    fn default() -> &'a SocketEvent_Read {
        <SocketEvent_Read as ::protobuf::Message>::default_instance()
    }
}

impl SocketEvent_Read {
    pub fn new() -> SocketEvent_Read {
        ::std::default::Default::default()
    }

    // .envoy.data.tap.v2alpha.Body data = 1;


    pub fn get_data(&self) -> &super::common::Body {
        self.data.as_ref().unwrap_or_else(|| <super::common::Body as ::protobuf::Message>::default_instance())
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: super::common::Body) {
        self.data = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut super::common::Body {
        if self.data.is_none() {
            self.data.set_default();
        }
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> super::common::Body {
        self.data.take().unwrap_or_else(|| super::common::Body::new())
    }
}

impl ::protobuf::Message for SocketEvent_Read {
    fn is_initialized(&self) -> bool {
        for v in &self.data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.data.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SocketEvent_Read {
        SocketEvent_Read::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::Body>>(
                "data",
                |m: &SocketEvent_Read| { &m.data },
                |m: &mut SocketEvent_Read| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SocketEvent_Read>(
                "SocketEvent.Read",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SocketEvent_Read {
        static instance: ::protobuf::rt::LazyV2<SocketEvent_Read> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SocketEvent_Read::new)
    }
}

impl ::protobuf::Clear for SocketEvent_Read {
    fn clear(&mut self) {
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SocketEvent_Read {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SocketEvent_Read {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SocketEvent_Write {
    // message fields
    pub data: ::protobuf::SingularPtrField<super::common::Body>,
    pub end_stream: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SocketEvent_Write {
    fn default() -> &'a SocketEvent_Write {
        <SocketEvent_Write as ::protobuf::Message>::default_instance()
    }
}

impl SocketEvent_Write {
    pub fn new() -> SocketEvent_Write {
        ::std::default::Default::default()
    }

    // .envoy.data.tap.v2alpha.Body data = 1;


    pub fn get_data(&self) -> &super::common::Body {
        self.data.as_ref().unwrap_or_else(|| <super::common::Body as ::protobuf::Message>::default_instance())
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    pub fn has_data(&self) -> bool {
        self.data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: super::common::Body) {
        self.data = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut super::common::Body {
        if self.data.is_none() {
            self.data.set_default();
        }
        self.data.as_mut().unwrap()
    }

    // Take field
    pub fn take_data(&mut self) -> super::common::Body {
        self.data.take().unwrap_or_else(|| super::common::Body::new())
    }

    // bool end_stream = 2;


    pub fn get_end_stream(&self) -> bool {
        self.end_stream
    }
    pub fn clear_end_stream(&mut self) {
        self.end_stream = false;
    }

    // Param is passed by value, moved
    pub fn set_end_stream(&mut self, v: bool) {
        self.end_stream = v;
    }
}

impl ::protobuf::Message for SocketEvent_Write {
    fn is_initialized(&self) -> bool {
        for v in &self.data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.data)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.end_stream = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.end_stream != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.data.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.end_stream != false {
            os.write_bool(2, self.end_stream)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SocketEvent_Write {
        SocketEvent_Write::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::Body>>(
                "data",
                |m: &SocketEvent_Write| { &m.data },
                |m: &mut SocketEvent_Write| { &mut m.data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "end_stream",
                |m: &SocketEvent_Write| { &m.end_stream },
                |m: &mut SocketEvent_Write| { &mut m.end_stream },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SocketEvent_Write>(
                "SocketEvent.Write",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SocketEvent_Write {
        static instance: ::protobuf::rt::LazyV2<SocketEvent_Write> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SocketEvent_Write::new)
    }
}

impl ::protobuf::Clear for SocketEvent_Write {
    fn clear(&mut self) {
        self.data.clear();
        self.end_stream = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SocketEvent_Write {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SocketEvent_Write {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SocketEvent_Closed {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SocketEvent_Closed {
    fn default() -> &'a SocketEvent_Closed {
        <SocketEvent_Closed as ::protobuf::Message>::default_instance()
    }
}

impl SocketEvent_Closed {
    pub fn new() -> SocketEvent_Closed {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for SocketEvent_Closed {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SocketEvent_Closed {
        SocketEvent_Closed::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SocketEvent_Closed>(
                "SocketEvent.Closed",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SocketEvent_Closed {
        static instance: ::protobuf::rt::LazyV2<SocketEvent_Closed> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SocketEvent_Closed::new)
    }
}

impl ::protobuf::Clear for SocketEvent_Closed {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SocketEvent_Closed {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SocketEvent_Closed {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SocketBufferedTrace {
    // message fields
    pub trace_id: u64,
    pub connection: ::protobuf::SingularPtrField<Connection>,
    pub events: ::protobuf::RepeatedField<SocketEvent>,
    pub read_truncated: bool,
    pub write_truncated: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SocketBufferedTrace {
    fn default() -> &'a SocketBufferedTrace {
        <SocketBufferedTrace as ::protobuf::Message>::default_instance()
    }
}

impl SocketBufferedTrace {
    pub fn new() -> SocketBufferedTrace {
        ::std::default::Default::default()
    }

    // uint64 trace_id = 1;


    pub fn get_trace_id(&self) -> u64 {
        self.trace_id
    }
    pub fn clear_trace_id(&mut self) {
        self.trace_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_trace_id(&mut self, v: u64) {
        self.trace_id = v;
    }

    // .envoy.data.tap.v2alpha.Connection connection = 2;


    pub fn get_connection(&self) -> &Connection {
        self.connection.as_ref().unwrap_or_else(|| <Connection as ::protobuf::Message>::default_instance())
    }
    pub fn clear_connection(&mut self) {
        self.connection.clear();
    }

    pub fn has_connection(&self) -> bool {
        self.connection.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connection(&mut self, v: Connection) {
        self.connection = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connection(&mut self) -> &mut Connection {
        if self.connection.is_none() {
            self.connection.set_default();
        }
        self.connection.as_mut().unwrap()
    }

    // Take field
    pub fn take_connection(&mut self) -> Connection {
        self.connection.take().unwrap_or_else(|| Connection::new())
    }

    // repeated .envoy.data.tap.v2alpha.SocketEvent events = 3;


    pub fn get_events(&self) -> &[SocketEvent] {
        &self.events
    }
    pub fn clear_events(&mut self) {
        self.events.clear();
    }

    // Param is passed by value, moved
    pub fn set_events(&mut self, v: ::protobuf::RepeatedField<SocketEvent>) {
        self.events = v;
    }

    // Mutable pointer to the field.
    pub fn mut_events(&mut self) -> &mut ::protobuf::RepeatedField<SocketEvent> {
        &mut self.events
    }

    // Take field
    pub fn take_events(&mut self) -> ::protobuf::RepeatedField<SocketEvent> {
        ::std::mem::replace(&mut self.events, ::protobuf::RepeatedField::new())
    }

    // bool read_truncated = 4;


    pub fn get_read_truncated(&self) -> bool {
        self.read_truncated
    }
    pub fn clear_read_truncated(&mut self) {
        self.read_truncated = false;
    }

    // Param is passed by value, moved
    pub fn set_read_truncated(&mut self, v: bool) {
        self.read_truncated = v;
    }

    // bool write_truncated = 5;


    pub fn get_write_truncated(&self) -> bool {
        self.write_truncated
    }
    pub fn clear_write_truncated(&mut self) {
        self.write_truncated = false;
    }

    // Param is passed by value, moved
    pub fn set_write_truncated(&mut self, v: bool) {
        self.write_truncated = v;
    }
}

impl ::protobuf::Message for SocketBufferedTrace {
    fn is_initialized(&self) -> bool {
        for v in &self.connection {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.events {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.trace_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.connection)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.events)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.read_truncated = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.write_truncated = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.trace_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.trace_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.connection.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.events {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.read_truncated != false {
            my_size += 2;
        }
        if self.write_truncated != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.trace_id != 0 {
            os.write_uint64(1, self.trace_id)?;
        }
        if let Some(ref v) = self.connection.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.events {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.read_truncated != false {
            os.write_bool(4, self.read_truncated)?;
        }
        if self.write_truncated != false {
            os.write_bool(5, self.write_truncated)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SocketBufferedTrace {
        SocketBufferedTrace::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "trace_id",
                |m: &SocketBufferedTrace| { &m.trace_id },
                |m: &mut SocketBufferedTrace| { &mut m.trace_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Connection>>(
                "connection",
                |m: &SocketBufferedTrace| { &m.connection },
                |m: &mut SocketBufferedTrace| { &mut m.connection },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SocketEvent>>(
                "events",
                |m: &SocketBufferedTrace| { &m.events },
                |m: &mut SocketBufferedTrace| { &mut m.events },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "read_truncated",
                |m: &SocketBufferedTrace| { &m.read_truncated },
                |m: &mut SocketBufferedTrace| { &mut m.read_truncated },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "write_truncated",
                |m: &SocketBufferedTrace| { &m.write_truncated },
                |m: &mut SocketBufferedTrace| { &mut m.write_truncated },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SocketBufferedTrace>(
                "SocketBufferedTrace",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SocketBufferedTrace {
        static instance: ::protobuf::rt::LazyV2<SocketBufferedTrace> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SocketBufferedTrace::new)
    }
}

impl ::protobuf::Clear for SocketBufferedTrace {
    fn clear(&mut self) {
        self.trace_id = 0;
        self.connection.clear();
        self.events.clear();
        self.read_truncated = false;
        self.write_truncated = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SocketBufferedTrace {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SocketBufferedTrace {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SocketStreamedTraceSegment {
    // message fields
    pub trace_id: u64,
    // message oneof groups
    pub message_piece: ::std::option::Option<SocketStreamedTraceSegment_oneof_message_piece>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SocketStreamedTraceSegment {
    fn default() -> &'a SocketStreamedTraceSegment {
        <SocketStreamedTraceSegment as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum SocketStreamedTraceSegment_oneof_message_piece {
    connection(Connection),
    event(SocketEvent),
}

impl SocketStreamedTraceSegment {
    pub fn new() -> SocketStreamedTraceSegment {
        ::std::default::Default::default()
    }

    // uint64 trace_id = 1;


    pub fn get_trace_id(&self) -> u64 {
        self.trace_id
    }
    pub fn clear_trace_id(&mut self) {
        self.trace_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_trace_id(&mut self, v: u64) {
        self.trace_id = v;
    }

    // .envoy.data.tap.v2alpha.Connection connection = 2;


    pub fn get_connection(&self) -> &Connection {
        match self.message_piece {
            ::std::option::Option::Some(SocketStreamedTraceSegment_oneof_message_piece::connection(ref v)) => v,
            _ => <Connection as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_connection(&mut self) {
        self.message_piece = ::std::option::Option::None;
    }

    pub fn has_connection(&self) -> bool {
        match self.message_piece {
            ::std::option::Option::Some(SocketStreamedTraceSegment_oneof_message_piece::connection(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_connection(&mut self, v: Connection) {
        self.message_piece = ::std::option::Option::Some(SocketStreamedTraceSegment_oneof_message_piece::connection(v))
    }

    // Mutable pointer to the field.
    pub fn mut_connection(&mut self) -> &mut Connection {
        if let ::std::option::Option::Some(SocketStreamedTraceSegment_oneof_message_piece::connection(_)) = self.message_piece {
        } else {
            self.message_piece = ::std::option::Option::Some(SocketStreamedTraceSegment_oneof_message_piece::connection(Connection::new()));
        }
        match self.message_piece {
            ::std::option::Option::Some(SocketStreamedTraceSegment_oneof_message_piece::connection(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_connection(&mut self) -> Connection {
        if self.has_connection() {
            match self.message_piece.take() {
                ::std::option::Option::Some(SocketStreamedTraceSegment_oneof_message_piece::connection(v)) => v,
                _ => panic!(),
            }
        } else {
            Connection::new()
        }
    }

    // .envoy.data.tap.v2alpha.SocketEvent event = 3;


    pub fn get_event(&self) -> &SocketEvent {
        match self.message_piece {
            ::std::option::Option::Some(SocketStreamedTraceSegment_oneof_message_piece::event(ref v)) => v,
            _ => <SocketEvent as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_event(&mut self) {
        self.message_piece = ::std::option::Option::None;
    }

    pub fn has_event(&self) -> bool {
        match self.message_piece {
            ::std::option::Option::Some(SocketStreamedTraceSegment_oneof_message_piece::event(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_event(&mut self, v: SocketEvent) {
        self.message_piece = ::std::option::Option::Some(SocketStreamedTraceSegment_oneof_message_piece::event(v))
    }

    // Mutable pointer to the field.
    pub fn mut_event(&mut self) -> &mut SocketEvent {
        if let ::std::option::Option::Some(SocketStreamedTraceSegment_oneof_message_piece::event(_)) = self.message_piece {
        } else {
            self.message_piece = ::std::option::Option::Some(SocketStreamedTraceSegment_oneof_message_piece::event(SocketEvent::new()));
        }
        match self.message_piece {
            ::std::option::Option::Some(SocketStreamedTraceSegment_oneof_message_piece::event(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_event(&mut self) -> SocketEvent {
        if self.has_event() {
            match self.message_piece.take() {
                ::std::option::Option::Some(SocketStreamedTraceSegment_oneof_message_piece::event(v)) => v,
                _ => panic!(),
            }
        } else {
            SocketEvent::new()
        }
    }
}

impl ::protobuf::Message for SocketStreamedTraceSegment {
    fn is_initialized(&self) -> bool {
        if let Some(SocketStreamedTraceSegment_oneof_message_piece::connection(ref v)) = self.message_piece {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SocketStreamedTraceSegment_oneof_message_piece::event(ref v)) = self.message_piece {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.trace_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message_piece = ::std::option::Option::Some(SocketStreamedTraceSegment_oneof_message_piece::connection(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.message_piece = ::std::option::Option::Some(SocketStreamedTraceSegment_oneof_message_piece::event(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.trace_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.trace_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.message_piece {
            match v {
                &SocketStreamedTraceSegment_oneof_message_piece::connection(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SocketStreamedTraceSegment_oneof_message_piece::event(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.trace_id != 0 {
            os.write_uint64(1, self.trace_id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.message_piece {
            match v {
                &SocketStreamedTraceSegment_oneof_message_piece::connection(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SocketStreamedTraceSegment_oneof_message_piece::event(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SocketStreamedTraceSegment {
        SocketStreamedTraceSegment::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "trace_id",
                |m: &SocketStreamedTraceSegment| { &m.trace_id },
                |m: &mut SocketStreamedTraceSegment| { &mut m.trace_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Connection>(
                "connection",
                SocketStreamedTraceSegment::has_connection,
                SocketStreamedTraceSegment::get_connection,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SocketEvent>(
                "event",
                SocketStreamedTraceSegment::has_event,
                SocketStreamedTraceSegment::get_event,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SocketStreamedTraceSegment>(
                "SocketStreamedTraceSegment",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SocketStreamedTraceSegment {
        static instance: ::protobuf::rt::LazyV2<SocketStreamedTraceSegment> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SocketStreamedTraceSegment::new)
    }
}

impl ::protobuf::Clear for SocketStreamedTraceSegment {
    fn clear(&mut self) {
        self.trace_id = 0;
        self.message_piece = ::std::option::Option::None;
        self.message_piece = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SocketStreamedTraceSegment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SocketStreamedTraceSegment {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n&envoy/data/tap/v2alpha/transport.proto\x12\x16envoy.data.tap.v2alpha\
    \x1a\x1fenvoy/api/v2/core/address.proto\x1a#envoy/data/tap/v2alpha/commo\
    n.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1dudpa/annotations/s\
    tatus.proto\"\x90\x01\n\nConnection\x12?\n\rlocal_address\x18\x02\x20\
    \x01(\x0b2\x1a.envoy.api.v2.core.AddressR\x0clocalAddress\x12A\n\x0eremo\
    te_address\x18\x03\x20\x01(\x0b2\x1a.envoy.api.v2.core.AddressR\rremoteA\
    ddress\"\xc0\x03\n\x0bSocketEvent\x128\n\ttimestamp\x18\x01\x20\x01(\x0b\
    2\x1a.google.protobuf.TimestampR\ttimestamp\x12>\n\x04read\x18\x02\x20\
    \x01(\x0b2(.envoy.data.tap.v2alpha.SocketEvent.ReadH\0R\x04read\x12A\n\
    \x05write\x18\x03\x20\x01(\x0b2).envoy.data.tap.v2alpha.SocketEvent.Writ\
    eH\0R\x05write\x12D\n\x06closed\x18\x04\x20\x01(\x0b2*.envoy.data.tap.v2\
    alpha.SocketEvent.ClosedH\0R\x06closed\x1a8\n\x04Read\x120\n\x04data\x18\
    \x01\x20\x01(\x0b2\x1c.envoy.data.tap.v2alpha.BodyR\x04data\x1aX\n\x05Wr\
    ite\x120\n\x04data\x18\x01\x20\x01(\x0b2\x1c.envoy.data.tap.v2alpha.Body\
    R\x04data\x12\x1d\n\nend_stream\x18\x02\x20\x01(\x08R\tendStream\x1a\x08\
    \n\x06ClosedB\x10\n\x0eevent_selector\"\x81\x02\n\x13SocketBufferedTrace\
    \x12\x19\n\x08trace_id\x18\x01\x20\x01(\x04R\x07traceId\x12B\n\nconnecti\
    on\x18\x02\x20\x01(\x0b2\".envoy.data.tap.v2alpha.ConnectionR\nconnectio\
    n\x12;\n\x06events\x18\x03\x20\x03(\x0b2#.envoy.data.tap.v2alpha.SocketE\
    ventR\x06events\x12%\n\x0eread_truncated\x18\x04\x20\x01(\x08R\rreadTrun\
    cated\x12'\n\x0fwrite_truncated\x18\x05\x20\x01(\x08R\x0ewriteTruncated\
    \"\xcb\x01\n\x1aSocketStreamedTraceSegment\x12\x19\n\x08trace_id\x18\x01\
    \x20\x01(\x04R\x07traceId\x12D\n\nconnection\x18\x02\x20\x01(\x0b2\".env\
    oy.data.tap.v2alpha.ConnectionH\0R\nconnection\x12;\n\x05event\x18\x03\
    \x20\x01(\x0b2#.envoy.data.tap.v2alpha.SocketEventH\0R\x05eventB\x0f\n\r\
    message_pieceB@\n$io.envoyproxy.envoy.data.tap.v2alphaB\x0eTransportProt\
    oP\x01\xba\x80\xc8\xd1\x06\x02\x10\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
