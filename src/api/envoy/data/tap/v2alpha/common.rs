// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/data/tap/v2alpha/common.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct Body {
    // message fields
    pub truncated: bool,
    // message oneof groups
    pub body_type: ::std::option::Option<Body_oneof_body_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Body {
    fn default() -> &'a Body {
        <Body as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Body_oneof_body_type {
    as_bytes(::std::vec::Vec<u8>),
    as_string(::std::string::String),
}

impl Body {
    pub fn new() -> Body {
        ::std::default::Default::default()
    }

    // bytes as_bytes = 1;


    pub fn get_as_bytes(&self) -> &[u8] {
        match self.body_type {
            ::std::option::Option::Some(Body_oneof_body_type::as_bytes(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_as_bytes(&mut self) {
        self.body_type = ::std::option::Option::None;
    }

    pub fn has_as_bytes(&self) -> bool {
        match self.body_type {
            ::std::option::Option::Some(Body_oneof_body_type::as_bytes(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_as_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.body_type = ::std::option::Option::Some(Body_oneof_body_type::as_bytes(v))
    }

    // Mutable pointer to the field.
    pub fn mut_as_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(Body_oneof_body_type::as_bytes(_)) = self.body_type {
        } else {
            self.body_type = ::std::option::Option::Some(Body_oneof_body_type::as_bytes(::std::vec::Vec::new()));
        }
        match self.body_type {
            ::std::option::Option::Some(Body_oneof_body_type::as_bytes(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_as_bytes(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_as_bytes() {
            match self.body_type.take() {
                ::std::option::Option::Some(Body_oneof_body_type::as_bytes(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // string as_string = 2;


    pub fn get_as_string(&self) -> &str {
        match self.body_type {
            ::std::option::Option::Some(Body_oneof_body_type::as_string(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_as_string(&mut self) {
        self.body_type = ::std::option::Option::None;
    }

    pub fn has_as_string(&self) -> bool {
        match self.body_type {
            ::std::option::Option::Some(Body_oneof_body_type::as_string(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_as_string(&mut self, v: ::std::string::String) {
        self.body_type = ::std::option::Option::Some(Body_oneof_body_type::as_string(v))
    }

    // Mutable pointer to the field.
    pub fn mut_as_string(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(Body_oneof_body_type::as_string(_)) = self.body_type {
        } else {
            self.body_type = ::std::option::Option::Some(Body_oneof_body_type::as_string(::std::string::String::new()));
        }
        match self.body_type {
            ::std::option::Option::Some(Body_oneof_body_type::as_string(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_as_string(&mut self) -> ::std::string::String {
        if self.has_as_string() {
            match self.body_type.take() {
                ::std::option::Option::Some(Body_oneof_body_type::as_string(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // bool truncated = 3;


    pub fn get_truncated(&self) -> bool {
        self.truncated
    }
    pub fn clear_truncated(&mut self) {
        self.truncated = false;
    }

    // Param is passed by value, moved
    pub fn set_truncated(&mut self, v: bool) {
        self.truncated = v;
    }
}

impl ::protobuf::Message for Body {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body_type = ::std::option::Option::Some(Body_oneof_body_type::as_bytes(is.read_bytes()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body_type = ::std::option::Option::Some(Body_oneof_body_type::as_string(is.read_string()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.truncated = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.truncated != false {
            my_size += 2;
        }
        if let ::std::option::Option::Some(ref v) = self.body_type {
            match v {
                &Body_oneof_body_type::as_bytes(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(1, &v);
                },
                &Body_oneof_body_type::as_string(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.truncated != false {
            os.write_bool(3, self.truncated)?;
        }
        if let ::std::option::Option::Some(ref v) = self.body_type {
            match v {
                &Body_oneof_body_type::as_bytes(ref v) => {
                    os.write_bytes(1, v)?;
                },
                &Body_oneof_body_type::as_string(ref v) => {
                    os.write_string(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Body {
        Body::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                "as_bytes",
                Body::has_as_bytes,
                Body::get_as_bytes,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "as_string",
                Body::has_as_string,
                Body::get_as_string,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "truncated",
                |m: &Body| { &m.truncated },
                |m: &mut Body| { &mut m.truncated },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Body>(
                "Body",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Body {
        static instance: ::protobuf::rt::LazyV2<Body> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Body::new)
    }
}

impl ::protobuf::Clear for Body {
    fn clear(&mut self) {
        self.body_type = ::std::option::Option::None;
        self.body_type = ::std::option::Option::None;
        self.truncated = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Body {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Body {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#envoy/data/tap/v2alpha/common.proto\x12\x16envoy.data.tap.v2alpha\x1a\
    \x1dudpa/annotations/status.proto\"m\n\x04Body\x12\x1b\n\x08as_bytes\x18\
    \x01\x20\x01(\x0cH\0R\x07asBytes\x12\x1d\n\tas_string\x18\x02\x20\x01(\t\
    H\0R\x08asString\x12\x1c\n\ttruncated\x18\x03\x20\x01(\x08R\ttruncatedB\
    \x0b\n\tbody_typeB=\n$io.envoyproxy.envoy.data.tap.v2alphaB\x0bCommonPro\
    toP\x01\xba\x80\xc8\xd1\x06\x02\x10\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
