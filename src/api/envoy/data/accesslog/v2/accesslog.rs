// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/data/accesslog/v2/accesslog.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct TCPAccessLogEntry {
    // message fields
    pub common_properties: ::protobuf::SingularPtrField<AccessLogCommon>,
    pub connection_properties: ::protobuf::SingularPtrField<ConnectionProperties>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TCPAccessLogEntry {
    fn default() -> &'a TCPAccessLogEntry {
        <TCPAccessLogEntry as ::protobuf::Message>::default_instance()
    }
}

impl TCPAccessLogEntry {
    pub fn new() -> TCPAccessLogEntry {
        ::std::default::Default::default()
    }

    // .envoy.data.accesslog.v2.AccessLogCommon common_properties = 1;


    pub fn get_common_properties(&self) -> &AccessLogCommon {
        self.common_properties.as_ref().unwrap_or_else(|| <AccessLogCommon as ::protobuf::Message>::default_instance())
    }
    pub fn clear_common_properties(&mut self) {
        self.common_properties.clear();
    }

    pub fn has_common_properties(&self) -> bool {
        self.common_properties.is_some()
    }

    // Param is passed by value, moved
    pub fn set_common_properties(&mut self, v: AccessLogCommon) {
        self.common_properties = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_common_properties(&mut self) -> &mut AccessLogCommon {
        if self.common_properties.is_none() {
            self.common_properties.set_default();
        }
        self.common_properties.as_mut().unwrap()
    }

    // Take field
    pub fn take_common_properties(&mut self) -> AccessLogCommon {
        self.common_properties.take().unwrap_or_else(|| AccessLogCommon::new())
    }

    // .envoy.data.accesslog.v2.ConnectionProperties connection_properties = 2;


    pub fn get_connection_properties(&self) -> &ConnectionProperties {
        self.connection_properties.as_ref().unwrap_or_else(|| <ConnectionProperties as ::protobuf::Message>::default_instance())
    }
    pub fn clear_connection_properties(&mut self) {
        self.connection_properties.clear();
    }

    pub fn has_connection_properties(&self) -> bool {
        self.connection_properties.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connection_properties(&mut self, v: ConnectionProperties) {
        self.connection_properties = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connection_properties(&mut self) -> &mut ConnectionProperties {
        if self.connection_properties.is_none() {
            self.connection_properties.set_default();
        }
        self.connection_properties.as_mut().unwrap()
    }

    // Take field
    pub fn take_connection_properties(&mut self) -> ConnectionProperties {
        self.connection_properties.take().unwrap_or_else(|| ConnectionProperties::new())
    }
}

impl ::protobuf::Message for TCPAccessLogEntry {
    fn is_initialized(&self) -> bool {
        for v in &self.common_properties {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.connection_properties {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.common_properties)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.connection_properties)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.common_properties.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.connection_properties.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.common_properties.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.connection_properties.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TCPAccessLogEntry {
        TCPAccessLogEntry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AccessLogCommon>>(
                "common_properties",
                |m: &TCPAccessLogEntry| { &m.common_properties },
                |m: &mut TCPAccessLogEntry| { &mut m.common_properties },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ConnectionProperties>>(
                "connection_properties",
                |m: &TCPAccessLogEntry| { &m.connection_properties },
                |m: &mut TCPAccessLogEntry| { &mut m.connection_properties },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TCPAccessLogEntry>(
                "TCPAccessLogEntry",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TCPAccessLogEntry {
        static instance: ::protobuf::rt::LazyV2<TCPAccessLogEntry> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TCPAccessLogEntry::new)
    }
}

impl ::protobuf::Clear for TCPAccessLogEntry {
    fn clear(&mut self) {
        self.common_properties.clear();
        self.connection_properties.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TCPAccessLogEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TCPAccessLogEntry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HTTPAccessLogEntry {
    // message fields
    pub common_properties: ::protobuf::SingularPtrField<AccessLogCommon>,
    pub protocol_version: HTTPAccessLogEntry_HTTPVersion,
    pub request: ::protobuf::SingularPtrField<HTTPRequestProperties>,
    pub response: ::protobuf::SingularPtrField<HTTPResponseProperties>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HTTPAccessLogEntry {
    fn default() -> &'a HTTPAccessLogEntry {
        <HTTPAccessLogEntry as ::protobuf::Message>::default_instance()
    }
}

impl HTTPAccessLogEntry {
    pub fn new() -> HTTPAccessLogEntry {
        ::std::default::Default::default()
    }

    // .envoy.data.accesslog.v2.AccessLogCommon common_properties = 1;


    pub fn get_common_properties(&self) -> &AccessLogCommon {
        self.common_properties.as_ref().unwrap_or_else(|| <AccessLogCommon as ::protobuf::Message>::default_instance())
    }
    pub fn clear_common_properties(&mut self) {
        self.common_properties.clear();
    }

    pub fn has_common_properties(&self) -> bool {
        self.common_properties.is_some()
    }

    // Param is passed by value, moved
    pub fn set_common_properties(&mut self, v: AccessLogCommon) {
        self.common_properties = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_common_properties(&mut self) -> &mut AccessLogCommon {
        if self.common_properties.is_none() {
            self.common_properties.set_default();
        }
        self.common_properties.as_mut().unwrap()
    }

    // Take field
    pub fn take_common_properties(&mut self) -> AccessLogCommon {
        self.common_properties.take().unwrap_or_else(|| AccessLogCommon::new())
    }

    // .envoy.data.accesslog.v2.HTTPAccessLogEntry.HTTPVersion protocol_version = 2;


    pub fn get_protocol_version(&self) -> HTTPAccessLogEntry_HTTPVersion {
        self.protocol_version
    }
    pub fn clear_protocol_version(&mut self) {
        self.protocol_version = HTTPAccessLogEntry_HTTPVersion::PROTOCOL_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_protocol_version(&mut self, v: HTTPAccessLogEntry_HTTPVersion) {
        self.protocol_version = v;
    }

    // .envoy.data.accesslog.v2.HTTPRequestProperties request = 3;


    pub fn get_request(&self) -> &HTTPRequestProperties {
        self.request.as_ref().unwrap_or_else(|| <HTTPRequestProperties as ::protobuf::Message>::default_instance())
    }
    pub fn clear_request(&mut self) {
        self.request.clear();
    }

    pub fn has_request(&self) -> bool {
        self.request.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request(&mut self, v: HTTPRequestProperties) {
        self.request = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request(&mut self) -> &mut HTTPRequestProperties {
        if self.request.is_none() {
            self.request.set_default();
        }
        self.request.as_mut().unwrap()
    }

    // Take field
    pub fn take_request(&mut self) -> HTTPRequestProperties {
        self.request.take().unwrap_or_else(|| HTTPRequestProperties::new())
    }

    // .envoy.data.accesslog.v2.HTTPResponseProperties response = 4;


    pub fn get_response(&self) -> &HTTPResponseProperties {
        self.response.as_ref().unwrap_or_else(|| <HTTPResponseProperties as ::protobuf::Message>::default_instance())
    }
    pub fn clear_response(&mut self) {
        self.response.clear();
    }

    pub fn has_response(&self) -> bool {
        self.response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response(&mut self, v: HTTPResponseProperties) {
        self.response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response(&mut self) -> &mut HTTPResponseProperties {
        if self.response.is_none() {
            self.response.set_default();
        }
        self.response.as_mut().unwrap()
    }

    // Take field
    pub fn take_response(&mut self) -> HTTPResponseProperties {
        self.response.take().unwrap_or_else(|| HTTPResponseProperties::new())
    }
}

impl ::protobuf::Message for HTTPAccessLogEntry {
    fn is_initialized(&self) -> bool {
        for v in &self.common_properties {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.request {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.common_properties)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.protocol_version, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.request)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.common_properties.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.protocol_version != HTTPAccessLogEntry_HTTPVersion::PROTOCOL_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(2, self.protocol_version);
        }
        if let Some(ref v) = self.request.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.common_properties.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.protocol_version != HTTPAccessLogEntry_HTTPVersion::PROTOCOL_UNSPECIFIED {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.protocol_version))?;
        }
        if let Some(ref v) = self.request.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.response.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HTTPAccessLogEntry {
        HTTPAccessLogEntry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AccessLogCommon>>(
                "common_properties",
                |m: &HTTPAccessLogEntry| { &m.common_properties },
                |m: &mut HTTPAccessLogEntry| { &mut m.common_properties },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<HTTPAccessLogEntry_HTTPVersion>>(
                "protocol_version",
                |m: &HTTPAccessLogEntry| { &m.protocol_version },
                |m: &mut HTTPAccessLogEntry| { &mut m.protocol_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HTTPRequestProperties>>(
                "request",
                |m: &HTTPAccessLogEntry| { &m.request },
                |m: &mut HTTPAccessLogEntry| { &mut m.request },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HTTPResponseProperties>>(
                "response",
                |m: &HTTPAccessLogEntry| { &m.response },
                |m: &mut HTTPAccessLogEntry| { &mut m.response },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HTTPAccessLogEntry>(
                "HTTPAccessLogEntry",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HTTPAccessLogEntry {
        static instance: ::protobuf::rt::LazyV2<HTTPAccessLogEntry> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HTTPAccessLogEntry::new)
    }
}

impl ::protobuf::Clear for HTTPAccessLogEntry {
    fn clear(&mut self) {
        self.common_properties.clear();
        self.protocol_version = HTTPAccessLogEntry_HTTPVersion::PROTOCOL_UNSPECIFIED;
        self.request.clear();
        self.response.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HTTPAccessLogEntry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HTTPAccessLogEntry {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum HTTPAccessLogEntry_HTTPVersion {
    PROTOCOL_UNSPECIFIED = 0,
    HTTP10 = 1,
    HTTP11 = 2,
    HTTP2 = 3,
    HTTP3 = 4,
}

impl ::protobuf::ProtobufEnum for HTTPAccessLogEntry_HTTPVersion {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<HTTPAccessLogEntry_HTTPVersion> {
        match value {
            0 => ::std::option::Option::Some(HTTPAccessLogEntry_HTTPVersion::PROTOCOL_UNSPECIFIED),
            1 => ::std::option::Option::Some(HTTPAccessLogEntry_HTTPVersion::HTTP10),
            2 => ::std::option::Option::Some(HTTPAccessLogEntry_HTTPVersion::HTTP11),
            3 => ::std::option::Option::Some(HTTPAccessLogEntry_HTTPVersion::HTTP2),
            4 => ::std::option::Option::Some(HTTPAccessLogEntry_HTTPVersion::HTTP3),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [HTTPAccessLogEntry_HTTPVersion] = &[
            HTTPAccessLogEntry_HTTPVersion::PROTOCOL_UNSPECIFIED,
            HTTPAccessLogEntry_HTTPVersion::HTTP10,
            HTTPAccessLogEntry_HTTPVersion::HTTP11,
            HTTPAccessLogEntry_HTTPVersion::HTTP2,
            HTTPAccessLogEntry_HTTPVersion::HTTP3,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<HTTPAccessLogEntry_HTTPVersion>("HTTPAccessLogEntry.HTTPVersion", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for HTTPAccessLogEntry_HTTPVersion {
}

impl ::std::default::Default for HTTPAccessLogEntry_HTTPVersion {
    fn default() -> Self {
        HTTPAccessLogEntry_HTTPVersion::PROTOCOL_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for HTTPAccessLogEntry_HTTPVersion {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConnectionProperties {
    // message fields
    pub received_bytes: u64,
    pub sent_bytes: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConnectionProperties {
    fn default() -> &'a ConnectionProperties {
        <ConnectionProperties as ::protobuf::Message>::default_instance()
    }
}

impl ConnectionProperties {
    pub fn new() -> ConnectionProperties {
        ::std::default::Default::default()
    }

    // uint64 received_bytes = 1;


    pub fn get_received_bytes(&self) -> u64 {
        self.received_bytes
    }
    pub fn clear_received_bytes(&mut self) {
        self.received_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_received_bytes(&mut self, v: u64) {
        self.received_bytes = v;
    }

    // uint64 sent_bytes = 2;


    pub fn get_sent_bytes(&self) -> u64 {
        self.sent_bytes
    }
    pub fn clear_sent_bytes(&mut self) {
        self.sent_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_sent_bytes(&mut self, v: u64) {
        self.sent_bytes = v;
    }
}

impl ::protobuf::Message for ConnectionProperties {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.received_bytes = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.sent_bytes = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.received_bytes != 0 {
            my_size += ::protobuf::rt::value_size(1, self.received_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.sent_bytes != 0 {
            my_size += ::protobuf::rt::value_size(2, self.sent_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.received_bytes != 0 {
            os.write_uint64(1, self.received_bytes)?;
        }
        if self.sent_bytes != 0 {
            os.write_uint64(2, self.sent_bytes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConnectionProperties {
        ConnectionProperties::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "received_bytes",
                |m: &ConnectionProperties| { &m.received_bytes },
                |m: &mut ConnectionProperties| { &mut m.received_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "sent_bytes",
                |m: &ConnectionProperties| { &m.sent_bytes },
                |m: &mut ConnectionProperties| { &mut m.sent_bytes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConnectionProperties>(
                "ConnectionProperties",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConnectionProperties {
        static instance: ::protobuf::rt::LazyV2<ConnectionProperties> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConnectionProperties::new)
    }
}

impl ::protobuf::Clear for ConnectionProperties {
    fn clear(&mut self) {
        self.received_bytes = 0;
        self.sent_bytes = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConnectionProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConnectionProperties {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccessLogCommon {
    // message fields
    pub sample_rate: f64,
    pub downstream_remote_address: ::protobuf::SingularPtrField<super::address::Address>,
    pub downstream_local_address: ::protobuf::SingularPtrField<super::address::Address>,
    pub tls_properties: ::protobuf::SingularPtrField<TLSProperties>,
    pub start_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub time_to_last_rx_byte: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub time_to_first_upstream_tx_byte: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub time_to_last_upstream_tx_byte: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub time_to_first_upstream_rx_byte: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub time_to_last_upstream_rx_byte: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub time_to_first_downstream_tx_byte: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub time_to_last_downstream_tx_byte: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub upstream_remote_address: ::protobuf::SingularPtrField<super::address::Address>,
    pub upstream_local_address: ::protobuf::SingularPtrField<super::address::Address>,
    pub upstream_cluster: ::std::string::String,
    pub response_flags: ::protobuf::SingularPtrField<ResponseFlags>,
    pub metadata: ::protobuf::SingularPtrField<super::base::Metadata>,
    pub upstream_transport_failure_reason: ::std::string::String,
    pub route_name: ::std::string::String,
    pub downstream_direct_remote_address: ::protobuf::SingularPtrField<super::address::Address>,
    pub filter_state_objects: ::std::collections::HashMap<::std::string::String, ::protobuf::well_known_types::Any>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccessLogCommon {
    fn default() -> &'a AccessLogCommon {
        <AccessLogCommon as ::protobuf::Message>::default_instance()
    }
}

impl AccessLogCommon {
    pub fn new() -> AccessLogCommon {
        ::std::default::Default::default()
    }

    // double sample_rate = 1;


    pub fn get_sample_rate(&self) -> f64 {
        self.sample_rate
    }
    pub fn clear_sample_rate(&mut self) {
        self.sample_rate = 0.;
    }

    // Param is passed by value, moved
    pub fn set_sample_rate(&mut self, v: f64) {
        self.sample_rate = v;
    }

    // .envoy.api.v2.core.Address downstream_remote_address = 2;


    pub fn get_downstream_remote_address(&self) -> &super::address::Address {
        self.downstream_remote_address.as_ref().unwrap_or_else(|| <super::address::Address as ::protobuf::Message>::default_instance())
    }
    pub fn clear_downstream_remote_address(&mut self) {
        self.downstream_remote_address.clear();
    }

    pub fn has_downstream_remote_address(&self) -> bool {
        self.downstream_remote_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_downstream_remote_address(&mut self, v: super::address::Address) {
        self.downstream_remote_address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_downstream_remote_address(&mut self) -> &mut super::address::Address {
        if self.downstream_remote_address.is_none() {
            self.downstream_remote_address.set_default();
        }
        self.downstream_remote_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_downstream_remote_address(&mut self) -> super::address::Address {
        self.downstream_remote_address.take().unwrap_or_else(|| super::address::Address::new())
    }

    // .envoy.api.v2.core.Address downstream_local_address = 3;


    pub fn get_downstream_local_address(&self) -> &super::address::Address {
        self.downstream_local_address.as_ref().unwrap_or_else(|| <super::address::Address as ::protobuf::Message>::default_instance())
    }
    pub fn clear_downstream_local_address(&mut self) {
        self.downstream_local_address.clear();
    }

    pub fn has_downstream_local_address(&self) -> bool {
        self.downstream_local_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_downstream_local_address(&mut self, v: super::address::Address) {
        self.downstream_local_address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_downstream_local_address(&mut self) -> &mut super::address::Address {
        if self.downstream_local_address.is_none() {
            self.downstream_local_address.set_default();
        }
        self.downstream_local_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_downstream_local_address(&mut self) -> super::address::Address {
        self.downstream_local_address.take().unwrap_or_else(|| super::address::Address::new())
    }

    // .envoy.data.accesslog.v2.TLSProperties tls_properties = 4;


    pub fn get_tls_properties(&self) -> &TLSProperties {
        self.tls_properties.as_ref().unwrap_or_else(|| <TLSProperties as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tls_properties(&mut self) {
        self.tls_properties.clear();
    }

    pub fn has_tls_properties(&self) -> bool {
        self.tls_properties.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tls_properties(&mut self, v: TLSProperties) {
        self.tls_properties = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tls_properties(&mut self) -> &mut TLSProperties {
        if self.tls_properties.is_none() {
            self.tls_properties.set_default();
        }
        self.tls_properties.as_mut().unwrap()
    }

    // Take field
    pub fn take_tls_properties(&mut self) -> TLSProperties {
        self.tls_properties.take().unwrap_or_else(|| TLSProperties::new())
    }

    // .google.protobuf.Timestamp start_time = 5;


    pub fn get_start_time(&self) -> &::protobuf::well_known_types::Timestamp {
        self.start_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_start_time(&mut self) {
        self.start_time.clear();
    }

    pub fn has_start_time(&self) -> bool {
        self.start_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_start_time(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.start_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_start_time(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.start_time.is_none() {
            self.start_time.set_default();
        }
        self.start_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_start_time(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.start_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.Duration time_to_last_rx_byte = 6;


    pub fn get_time_to_last_rx_byte(&self) -> &::protobuf::well_known_types::Duration {
        self.time_to_last_rx_byte.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_time_to_last_rx_byte(&mut self) {
        self.time_to_last_rx_byte.clear();
    }

    pub fn has_time_to_last_rx_byte(&self) -> bool {
        self.time_to_last_rx_byte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_to_last_rx_byte(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.time_to_last_rx_byte = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_time_to_last_rx_byte(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.time_to_last_rx_byte.is_none() {
            self.time_to_last_rx_byte.set_default();
        }
        self.time_to_last_rx_byte.as_mut().unwrap()
    }

    // Take field
    pub fn take_time_to_last_rx_byte(&mut self) -> ::protobuf::well_known_types::Duration {
        self.time_to_last_rx_byte.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.Duration time_to_first_upstream_tx_byte = 7;


    pub fn get_time_to_first_upstream_tx_byte(&self) -> &::protobuf::well_known_types::Duration {
        self.time_to_first_upstream_tx_byte.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_time_to_first_upstream_tx_byte(&mut self) {
        self.time_to_first_upstream_tx_byte.clear();
    }

    pub fn has_time_to_first_upstream_tx_byte(&self) -> bool {
        self.time_to_first_upstream_tx_byte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_to_first_upstream_tx_byte(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.time_to_first_upstream_tx_byte = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_time_to_first_upstream_tx_byte(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.time_to_first_upstream_tx_byte.is_none() {
            self.time_to_first_upstream_tx_byte.set_default();
        }
        self.time_to_first_upstream_tx_byte.as_mut().unwrap()
    }

    // Take field
    pub fn take_time_to_first_upstream_tx_byte(&mut self) -> ::protobuf::well_known_types::Duration {
        self.time_to_first_upstream_tx_byte.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.Duration time_to_last_upstream_tx_byte = 8;


    pub fn get_time_to_last_upstream_tx_byte(&self) -> &::protobuf::well_known_types::Duration {
        self.time_to_last_upstream_tx_byte.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_time_to_last_upstream_tx_byte(&mut self) {
        self.time_to_last_upstream_tx_byte.clear();
    }

    pub fn has_time_to_last_upstream_tx_byte(&self) -> bool {
        self.time_to_last_upstream_tx_byte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_to_last_upstream_tx_byte(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.time_to_last_upstream_tx_byte = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_time_to_last_upstream_tx_byte(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.time_to_last_upstream_tx_byte.is_none() {
            self.time_to_last_upstream_tx_byte.set_default();
        }
        self.time_to_last_upstream_tx_byte.as_mut().unwrap()
    }

    // Take field
    pub fn take_time_to_last_upstream_tx_byte(&mut self) -> ::protobuf::well_known_types::Duration {
        self.time_to_last_upstream_tx_byte.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.Duration time_to_first_upstream_rx_byte = 9;


    pub fn get_time_to_first_upstream_rx_byte(&self) -> &::protobuf::well_known_types::Duration {
        self.time_to_first_upstream_rx_byte.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_time_to_first_upstream_rx_byte(&mut self) {
        self.time_to_first_upstream_rx_byte.clear();
    }

    pub fn has_time_to_first_upstream_rx_byte(&self) -> bool {
        self.time_to_first_upstream_rx_byte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_to_first_upstream_rx_byte(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.time_to_first_upstream_rx_byte = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_time_to_first_upstream_rx_byte(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.time_to_first_upstream_rx_byte.is_none() {
            self.time_to_first_upstream_rx_byte.set_default();
        }
        self.time_to_first_upstream_rx_byte.as_mut().unwrap()
    }

    // Take field
    pub fn take_time_to_first_upstream_rx_byte(&mut self) -> ::protobuf::well_known_types::Duration {
        self.time_to_first_upstream_rx_byte.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.Duration time_to_last_upstream_rx_byte = 10;


    pub fn get_time_to_last_upstream_rx_byte(&self) -> &::protobuf::well_known_types::Duration {
        self.time_to_last_upstream_rx_byte.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_time_to_last_upstream_rx_byte(&mut self) {
        self.time_to_last_upstream_rx_byte.clear();
    }

    pub fn has_time_to_last_upstream_rx_byte(&self) -> bool {
        self.time_to_last_upstream_rx_byte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_to_last_upstream_rx_byte(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.time_to_last_upstream_rx_byte = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_time_to_last_upstream_rx_byte(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.time_to_last_upstream_rx_byte.is_none() {
            self.time_to_last_upstream_rx_byte.set_default();
        }
        self.time_to_last_upstream_rx_byte.as_mut().unwrap()
    }

    // Take field
    pub fn take_time_to_last_upstream_rx_byte(&mut self) -> ::protobuf::well_known_types::Duration {
        self.time_to_last_upstream_rx_byte.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.Duration time_to_first_downstream_tx_byte = 11;


    pub fn get_time_to_first_downstream_tx_byte(&self) -> &::protobuf::well_known_types::Duration {
        self.time_to_first_downstream_tx_byte.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_time_to_first_downstream_tx_byte(&mut self) {
        self.time_to_first_downstream_tx_byte.clear();
    }

    pub fn has_time_to_first_downstream_tx_byte(&self) -> bool {
        self.time_to_first_downstream_tx_byte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_to_first_downstream_tx_byte(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.time_to_first_downstream_tx_byte = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_time_to_first_downstream_tx_byte(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.time_to_first_downstream_tx_byte.is_none() {
            self.time_to_first_downstream_tx_byte.set_default();
        }
        self.time_to_first_downstream_tx_byte.as_mut().unwrap()
    }

    // Take field
    pub fn take_time_to_first_downstream_tx_byte(&mut self) -> ::protobuf::well_known_types::Duration {
        self.time_to_first_downstream_tx_byte.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.Duration time_to_last_downstream_tx_byte = 12;


    pub fn get_time_to_last_downstream_tx_byte(&self) -> &::protobuf::well_known_types::Duration {
        self.time_to_last_downstream_tx_byte.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_time_to_last_downstream_tx_byte(&mut self) {
        self.time_to_last_downstream_tx_byte.clear();
    }

    pub fn has_time_to_last_downstream_tx_byte(&self) -> bool {
        self.time_to_last_downstream_tx_byte.is_some()
    }

    // Param is passed by value, moved
    pub fn set_time_to_last_downstream_tx_byte(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.time_to_last_downstream_tx_byte = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_time_to_last_downstream_tx_byte(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.time_to_last_downstream_tx_byte.is_none() {
            self.time_to_last_downstream_tx_byte.set_default();
        }
        self.time_to_last_downstream_tx_byte.as_mut().unwrap()
    }

    // Take field
    pub fn take_time_to_last_downstream_tx_byte(&mut self) -> ::protobuf::well_known_types::Duration {
        self.time_to_last_downstream_tx_byte.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .envoy.api.v2.core.Address upstream_remote_address = 13;


    pub fn get_upstream_remote_address(&self) -> &super::address::Address {
        self.upstream_remote_address.as_ref().unwrap_or_else(|| <super::address::Address as ::protobuf::Message>::default_instance())
    }
    pub fn clear_upstream_remote_address(&mut self) {
        self.upstream_remote_address.clear();
    }

    pub fn has_upstream_remote_address(&self) -> bool {
        self.upstream_remote_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upstream_remote_address(&mut self, v: super::address::Address) {
        self.upstream_remote_address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_upstream_remote_address(&mut self) -> &mut super::address::Address {
        if self.upstream_remote_address.is_none() {
            self.upstream_remote_address.set_default();
        }
        self.upstream_remote_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_upstream_remote_address(&mut self) -> super::address::Address {
        self.upstream_remote_address.take().unwrap_or_else(|| super::address::Address::new())
    }

    // .envoy.api.v2.core.Address upstream_local_address = 14;


    pub fn get_upstream_local_address(&self) -> &super::address::Address {
        self.upstream_local_address.as_ref().unwrap_or_else(|| <super::address::Address as ::protobuf::Message>::default_instance())
    }
    pub fn clear_upstream_local_address(&mut self) {
        self.upstream_local_address.clear();
    }

    pub fn has_upstream_local_address(&self) -> bool {
        self.upstream_local_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upstream_local_address(&mut self, v: super::address::Address) {
        self.upstream_local_address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_upstream_local_address(&mut self) -> &mut super::address::Address {
        if self.upstream_local_address.is_none() {
            self.upstream_local_address.set_default();
        }
        self.upstream_local_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_upstream_local_address(&mut self) -> super::address::Address {
        self.upstream_local_address.take().unwrap_or_else(|| super::address::Address::new())
    }

    // string upstream_cluster = 15;


    pub fn get_upstream_cluster(&self) -> &str {
        &self.upstream_cluster
    }
    pub fn clear_upstream_cluster(&mut self) {
        self.upstream_cluster.clear();
    }

    // Param is passed by value, moved
    pub fn set_upstream_cluster(&mut self, v: ::std::string::String) {
        self.upstream_cluster = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_upstream_cluster(&mut self) -> &mut ::std::string::String {
        &mut self.upstream_cluster
    }

    // Take field
    pub fn take_upstream_cluster(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.upstream_cluster, ::std::string::String::new())
    }

    // .envoy.data.accesslog.v2.ResponseFlags response_flags = 16;


    pub fn get_response_flags(&self) -> &ResponseFlags {
        self.response_flags.as_ref().unwrap_or_else(|| <ResponseFlags as ::protobuf::Message>::default_instance())
    }
    pub fn clear_response_flags(&mut self) {
        self.response_flags.clear();
    }

    pub fn has_response_flags(&self) -> bool {
        self.response_flags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response_flags(&mut self, v: ResponseFlags) {
        self.response_flags = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response_flags(&mut self) -> &mut ResponseFlags {
        if self.response_flags.is_none() {
            self.response_flags.set_default();
        }
        self.response_flags.as_mut().unwrap()
    }

    // Take field
    pub fn take_response_flags(&mut self) -> ResponseFlags {
        self.response_flags.take().unwrap_or_else(|| ResponseFlags::new())
    }

    // .envoy.api.v2.core.Metadata metadata = 17;


    pub fn get_metadata(&self) -> &super::base::Metadata {
        self.metadata.as_ref().unwrap_or_else(|| <super::base::Metadata as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: super::base::Metadata) {
        self.metadata = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut super::base::Metadata {
        if self.metadata.is_none() {
            self.metadata.set_default();
        }
        self.metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata(&mut self) -> super::base::Metadata {
        self.metadata.take().unwrap_or_else(|| super::base::Metadata::new())
    }

    // string upstream_transport_failure_reason = 18;


    pub fn get_upstream_transport_failure_reason(&self) -> &str {
        &self.upstream_transport_failure_reason
    }
    pub fn clear_upstream_transport_failure_reason(&mut self) {
        self.upstream_transport_failure_reason.clear();
    }

    // Param is passed by value, moved
    pub fn set_upstream_transport_failure_reason(&mut self, v: ::std::string::String) {
        self.upstream_transport_failure_reason = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_upstream_transport_failure_reason(&mut self) -> &mut ::std::string::String {
        &mut self.upstream_transport_failure_reason
    }

    // Take field
    pub fn take_upstream_transport_failure_reason(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.upstream_transport_failure_reason, ::std::string::String::new())
    }

    // string route_name = 19;


    pub fn get_route_name(&self) -> &str {
        &self.route_name
    }
    pub fn clear_route_name(&mut self) {
        self.route_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_route_name(&mut self, v: ::std::string::String) {
        self.route_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_route_name(&mut self) -> &mut ::std::string::String {
        &mut self.route_name
    }

    // Take field
    pub fn take_route_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.route_name, ::std::string::String::new())
    }

    // .envoy.api.v2.core.Address downstream_direct_remote_address = 20;


    pub fn get_downstream_direct_remote_address(&self) -> &super::address::Address {
        self.downstream_direct_remote_address.as_ref().unwrap_or_else(|| <super::address::Address as ::protobuf::Message>::default_instance())
    }
    pub fn clear_downstream_direct_remote_address(&mut self) {
        self.downstream_direct_remote_address.clear();
    }

    pub fn has_downstream_direct_remote_address(&self) -> bool {
        self.downstream_direct_remote_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_downstream_direct_remote_address(&mut self, v: super::address::Address) {
        self.downstream_direct_remote_address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_downstream_direct_remote_address(&mut self) -> &mut super::address::Address {
        if self.downstream_direct_remote_address.is_none() {
            self.downstream_direct_remote_address.set_default();
        }
        self.downstream_direct_remote_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_downstream_direct_remote_address(&mut self) -> super::address::Address {
        self.downstream_direct_remote_address.take().unwrap_or_else(|| super::address::Address::new())
    }

    // repeated .envoy.data.accesslog.v2.AccessLogCommon.FilterStateObjectsEntry filter_state_objects = 21;


    pub fn get_filter_state_objects(&self) -> &::std::collections::HashMap<::std::string::String, ::protobuf::well_known_types::Any> {
        &self.filter_state_objects
    }
    pub fn clear_filter_state_objects(&mut self) {
        self.filter_state_objects.clear();
    }

    // Param is passed by value, moved
    pub fn set_filter_state_objects(&mut self, v: ::std::collections::HashMap<::std::string::String, ::protobuf::well_known_types::Any>) {
        self.filter_state_objects = v;
    }

    // Mutable pointer to the field.
    pub fn mut_filter_state_objects(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::protobuf::well_known_types::Any> {
        &mut self.filter_state_objects
    }

    // Take field
    pub fn take_filter_state_objects(&mut self) -> ::std::collections::HashMap<::std::string::String, ::protobuf::well_known_types::Any> {
        ::std::mem::replace(&mut self.filter_state_objects, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for AccessLogCommon {
    fn is_initialized(&self) -> bool {
        for v in &self.downstream_remote_address {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.downstream_local_address {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tls_properties {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.start_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.time_to_last_rx_byte {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.time_to_first_upstream_tx_byte {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.time_to_last_upstream_tx_byte {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.time_to_first_upstream_rx_byte {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.time_to_last_upstream_rx_byte {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.time_to_first_downstream_tx_byte {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.time_to_last_downstream_tx_byte {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.upstream_remote_address {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.upstream_local_address {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.response_flags {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.downstream_direct_remote_address {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.sample_rate = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.downstream_remote_address)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.downstream_local_address)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tls_properties)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.start_time)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.time_to_last_rx_byte)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.time_to_first_upstream_tx_byte)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.time_to_last_upstream_tx_byte)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.time_to_first_upstream_rx_byte)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.time_to_last_upstream_rx_byte)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.time_to_first_downstream_tx_byte)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.time_to_last_downstream_tx_byte)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.upstream_remote_address)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.upstream_local_address)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.upstream_cluster)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response_flags)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.upstream_transport_failure_reason)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.route_name)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.downstream_direct_remote_address)?;
                },
                21 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(wire_type, is, &mut self.filter_state_objects)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.sample_rate != 0. {
            my_size += 9;
        }
        if let Some(ref v) = self.downstream_remote_address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.downstream_local_address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.tls_properties.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.start_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.time_to_last_rx_byte.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.time_to_first_upstream_tx_byte.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.time_to_last_upstream_tx_byte.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.time_to_first_upstream_rx_byte.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.time_to_last_upstream_rx_byte.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.time_to_first_downstream_tx_byte.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.time_to_last_downstream_tx_byte.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.upstream_remote_address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.upstream_local_address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.upstream_cluster.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.upstream_cluster);
        }
        if let Some(ref v) = self.response_flags.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.upstream_transport_failure_reason.is_empty() {
            my_size += ::protobuf::rt::string_size(18, &self.upstream_transport_failure_reason);
        }
        if !self.route_name.is_empty() {
            my_size += ::protobuf::rt::string_size(19, &self.route_name);
        }
        if let Some(ref v) = self.downstream_direct_remote_address.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(21, &self.filter_state_objects);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.sample_rate != 0. {
            os.write_double(1, self.sample_rate)?;
        }
        if let Some(ref v) = self.downstream_remote_address.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.downstream_local_address.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.tls_properties.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.start_time.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.time_to_last_rx_byte.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.time_to_first_upstream_tx_byte.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.time_to_last_upstream_tx_byte.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.time_to_first_upstream_rx_byte.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.time_to_last_upstream_rx_byte.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.time_to_first_downstream_tx_byte.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.time_to_last_downstream_tx_byte.as_ref() {
            os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.upstream_remote_address.as_ref() {
            os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.upstream_local_address.as_ref() {
            os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.upstream_cluster.is_empty() {
            os.write_string(15, &self.upstream_cluster)?;
        }
        if let Some(ref v) = self.response_flags.as_ref() {
            os.write_tag(16, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.metadata.as_ref() {
            os.write_tag(17, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.upstream_transport_failure_reason.is_empty() {
            os.write_string(18, &self.upstream_transport_failure_reason)?;
        }
        if !self.route_name.is_empty() {
            os.write_string(19, &self.route_name)?;
        }
        if let Some(ref v) = self.downstream_direct_remote_address.as_ref() {
            os.write_tag(20, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(21, &self.filter_state_objects, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccessLogCommon {
        AccessLogCommon::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "sample_rate",
                |m: &AccessLogCommon| { &m.sample_rate },
                |m: &mut AccessLogCommon| { &mut m.sample_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::address::Address>>(
                "downstream_remote_address",
                |m: &AccessLogCommon| { &m.downstream_remote_address },
                |m: &mut AccessLogCommon| { &mut m.downstream_remote_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::address::Address>>(
                "downstream_local_address",
                |m: &AccessLogCommon| { &m.downstream_local_address },
                |m: &mut AccessLogCommon| { &mut m.downstream_local_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TLSProperties>>(
                "tls_properties",
                |m: &AccessLogCommon| { &m.tls_properties },
                |m: &mut AccessLogCommon| { &mut m.tls_properties },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "start_time",
                |m: &AccessLogCommon| { &m.start_time },
                |m: &mut AccessLogCommon| { &mut m.start_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "time_to_last_rx_byte",
                |m: &AccessLogCommon| { &m.time_to_last_rx_byte },
                |m: &mut AccessLogCommon| { &mut m.time_to_last_rx_byte },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "time_to_first_upstream_tx_byte",
                |m: &AccessLogCommon| { &m.time_to_first_upstream_tx_byte },
                |m: &mut AccessLogCommon| { &mut m.time_to_first_upstream_tx_byte },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "time_to_last_upstream_tx_byte",
                |m: &AccessLogCommon| { &m.time_to_last_upstream_tx_byte },
                |m: &mut AccessLogCommon| { &mut m.time_to_last_upstream_tx_byte },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "time_to_first_upstream_rx_byte",
                |m: &AccessLogCommon| { &m.time_to_first_upstream_rx_byte },
                |m: &mut AccessLogCommon| { &mut m.time_to_first_upstream_rx_byte },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "time_to_last_upstream_rx_byte",
                |m: &AccessLogCommon| { &m.time_to_last_upstream_rx_byte },
                |m: &mut AccessLogCommon| { &mut m.time_to_last_upstream_rx_byte },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "time_to_first_downstream_tx_byte",
                |m: &AccessLogCommon| { &m.time_to_first_downstream_tx_byte },
                |m: &mut AccessLogCommon| { &mut m.time_to_first_downstream_tx_byte },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "time_to_last_downstream_tx_byte",
                |m: &AccessLogCommon| { &m.time_to_last_downstream_tx_byte },
                |m: &mut AccessLogCommon| { &mut m.time_to_last_downstream_tx_byte },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::address::Address>>(
                "upstream_remote_address",
                |m: &AccessLogCommon| { &m.upstream_remote_address },
                |m: &mut AccessLogCommon| { &mut m.upstream_remote_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::address::Address>>(
                "upstream_local_address",
                |m: &AccessLogCommon| { &m.upstream_local_address },
                |m: &mut AccessLogCommon| { &mut m.upstream_local_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "upstream_cluster",
                |m: &AccessLogCommon| { &m.upstream_cluster },
                |m: &mut AccessLogCommon| { &mut m.upstream_cluster },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ResponseFlags>>(
                "response_flags",
                |m: &AccessLogCommon| { &m.response_flags },
                |m: &mut AccessLogCommon| { &mut m.response_flags },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Metadata>>(
                "metadata",
                |m: &AccessLogCommon| { &m.metadata },
                |m: &mut AccessLogCommon| { &mut m.metadata },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "upstream_transport_failure_reason",
                |m: &AccessLogCommon| { &m.upstream_transport_failure_reason },
                |m: &mut AccessLogCommon| { &mut m.upstream_transport_failure_reason },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "route_name",
                |m: &AccessLogCommon| { &m.route_name },
                |m: &mut AccessLogCommon| { &mut m.route_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::address::Address>>(
                "downstream_direct_remote_address",
                |m: &AccessLogCommon| { &m.downstream_direct_remote_address },
                |m: &mut AccessLogCommon| { &mut m.downstream_direct_remote_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "filter_state_objects",
                |m: &AccessLogCommon| { &m.filter_state_objects },
                |m: &mut AccessLogCommon| { &mut m.filter_state_objects },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccessLogCommon>(
                "AccessLogCommon",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccessLogCommon {
        static instance: ::protobuf::rt::LazyV2<AccessLogCommon> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccessLogCommon::new)
    }
}

impl ::protobuf::Clear for AccessLogCommon {
    fn clear(&mut self) {
        self.sample_rate = 0.;
        self.downstream_remote_address.clear();
        self.downstream_local_address.clear();
        self.tls_properties.clear();
        self.start_time.clear();
        self.time_to_last_rx_byte.clear();
        self.time_to_first_upstream_tx_byte.clear();
        self.time_to_last_upstream_tx_byte.clear();
        self.time_to_first_upstream_rx_byte.clear();
        self.time_to_last_upstream_rx_byte.clear();
        self.time_to_first_downstream_tx_byte.clear();
        self.time_to_last_downstream_tx_byte.clear();
        self.upstream_remote_address.clear();
        self.upstream_local_address.clear();
        self.upstream_cluster.clear();
        self.response_flags.clear();
        self.metadata.clear();
        self.upstream_transport_failure_reason.clear();
        self.route_name.clear();
        self.downstream_direct_remote_address.clear();
        self.filter_state_objects.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccessLogCommon {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccessLogCommon {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ResponseFlags {
    // message fields
    pub failed_local_healthcheck: bool,
    pub no_healthy_upstream: bool,
    pub upstream_request_timeout: bool,
    pub local_reset: bool,
    pub upstream_remote_reset: bool,
    pub upstream_connection_failure: bool,
    pub upstream_connection_termination: bool,
    pub upstream_overflow: bool,
    pub no_route_found: bool,
    pub delay_injected: bool,
    pub fault_injected: bool,
    pub rate_limited: bool,
    pub unauthorized_details: ::protobuf::SingularPtrField<ResponseFlags_Unauthorized>,
    pub rate_limit_service_error: bool,
    pub downstream_connection_termination: bool,
    pub upstream_retry_limit_exceeded: bool,
    pub stream_idle_timeout: bool,
    pub invalid_envoy_request_headers: bool,
    pub downstream_protocol_error: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ResponseFlags {
    fn default() -> &'a ResponseFlags {
        <ResponseFlags as ::protobuf::Message>::default_instance()
    }
}

impl ResponseFlags {
    pub fn new() -> ResponseFlags {
        ::std::default::Default::default()
    }

    // bool failed_local_healthcheck = 1;


    pub fn get_failed_local_healthcheck(&self) -> bool {
        self.failed_local_healthcheck
    }
    pub fn clear_failed_local_healthcheck(&mut self) {
        self.failed_local_healthcheck = false;
    }

    // Param is passed by value, moved
    pub fn set_failed_local_healthcheck(&mut self, v: bool) {
        self.failed_local_healthcheck = v;
    }

    // bool no_healthy_upstream = 2;


    pub fn get_no_healthy_upstream(&self) -> bool {
        self.no_healthy_upstream
    }
    pub fn clear_no_healthy_upstream(&mut self) {
        self.no_healthy_upstream = false;
    }

    // Param is passed by value, moved
    pub fn set_no_healthy_upstream(&mut self, v: bool) {
        self.no_healthy_upstream = v;
    }

    // bool upstream_request_timeout = 3;


    pub fn get_upstream_request_timeout(&self) -> bool {
        self.upstream_request_timeout
    }
    pub fn clear_upstream_request_timeout(&mut self) {
        self.upstream_request_timeout = false;
    }

    // Param is passed by value, moved
    pub fn set_upstream_request_timeout(&mut self, v: bool) {
        self.upstream_request_timeout = v;
    }

    // bool local_reset = 4;


    pub fn get_local_reset(&self) -> bool {
        self.local_reset
    }
    pub fn clear_local_reset(&mut self) {
        self.local_reset = false;
    }

    // Param is passed by value, moved
    pub fn set_local_reset(&mut self, v: bool) {
        self.local_reset = v;
    }

    // bool upstream_remote_reset = 5;


    pub fn get_upstream_remote_reset(&self) -> bool {
        self.upstream_remote_reset
    }
    pub fn clear_upstream_remote_reset(&mut self) {
        self.upstream_remote_reset = false;
    }

    // Param is passed by value, moved
    pub fn set_upstream_remote_reset(&mut self, v: bool) {
        self.upstream_remote_reset = v;
    }

    // bool upstream_connection_failure = 6;


    pub fn get_upstream_connection_failure(&self) -> bool {
        self.upstream_connection_failure
    }
    pub fn clear_upstream_connection_failure(&mut self) {
        self.upstream_connection_failure = false;
    }

    // Param is passed by value, moved
    pub fn set_upstream_connection_failure(&mut self, v: bool) {
        self.upstream_connection_failure = v;
    }

    // bool upstream_connection_termination = 7;


    pub fn get_upstream_connection_termination(&self) -> bool {
        self.upstream_connection_termination
    }
    pub fn clear_upstream_connection_termination(&mut self) {
        self.upstream_connection_termination = false;
    }

    // Param is passed by value, moved
    pub fn set_upstream_connection_termination(&mut self, v: bool) {
        self.upstream_connection_termination = v;
    }

    // bool upstream_overflow = 8;


    pub fn get_upstream_overflow(&self) -> bool {
        self.upstream_overflow
    }
    pub fn clear_upstream_overflow(&mut self) {
        self.upstream_overflow = false;
    }

    // Param is passed by value, moved
    pub fn set_upstream_overflow(&mut self, v: bool) {
        self.upstream_overflow = v;
    }

    // bool no_route_found = 9;


    pub fn get_no_route_found(&self) -> bool {
        self.no_route_found
    }
    pub fn clear_no_route_found(&mut self) {
        self.no_route_found = false;
    }

    // Param is passed by value, moved
    pub fn set_no_route_found(&mut self, v: bool) {
        self.no_route_found = v;
    }

    // bool delay_injected = 10;


    pub fn get_delay_injected(&self) -> bool {
        self.delay_injected
    }
    pub fn clear_delay_injected(&mut self) {
        self.delay_injected = false;
    }

    // Param is passed by value, moved
    pub fn set_delay_injected(&mut self, v: bool) {
        self.delay_injected = v;
    }

    // bool fault_injected = 11;


    pub fn get_fault_injected(&self) -> bool {
        self.fault_injected
    }
    pub fn clear_fault_injected(&mut self) {
        self.fault_injected = false;
    }

    // Param is passed by value, moved
    pub fn set_fault_injected(&mut self, v: bool) {
        self.fault_injected = v;
    }

    // bool rate_limited = 12;


    pub fn get_rate_limited(&self) -> bool {
        self.rate_limited
    }
    pub fn clear_rate_limited(&mut self) {
        self.rate_limited = false;
    }

    // Param is passed by value, moved
    pub fn set_rate_limited(&mut self, v: bool) {
        self.rate_limited = v;
    }

    // .envoy.data.accesslog.v2.ResponseFlags.Unauthorized unauthorized_details = 13;


    pub fn get_unauthorized_details(&self) -> &ResponseFlags_Unauthorized {
        self.unauthorized_details.as_ref().unwrap_or_else(|| <ResponseFlags_Unauthorized as ::protobuf::Message>::default_instance())
    }
    pub fn clear_unauthorized_details(&mut self) {
        self.unauthorized_details.clear();
    }

    pub fn has_unauthorized_details(&self) -> bool {
        self.unauthorized_details.is_some()
    }

    // Param is passed by value, moved
    pub fn set_unauthorized_details(&mut self, v: ResponseFlags_Unauthorized) {
        self.unauthorized_details = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_unauthorized_details(&mut self) -> &mut ResponseFlags_Unauthorized {
        if self.unauthorized_details.is_none() {
            self.unauthorized_details.set_default();
        }
        self.unauthorized_details.as_mut().unwrap()
    }

    // Take field
    pub fn take_unauthorized_details(&mut self) -> ResponseFlags_Unauthorized {
        self.unauthorized_details.take().unwrap_or_else(|| ResponseFlags_Unauthorized::new())
    }

    // bool rate_limit_service_error = 14;


    pub fn get_rate_limit_service_error(&self) -> bool {
        self.rate_limit_service_error
    }
    pub fn clear_rate_limit_service_error(&mut self) {
        self.rate_limit_service_error = false;
    }

    // Param is passed by value, moved
    pub fn set_rate_limit_service_error(&mut self, v: bool) {
        self.rate_limit_service_error = v;
    }

    // bool downstream_connection_termination = 15;


    pub fn get_downstream_connection_termination(&self) -> bool {
        self.downstream_connection_termination
    }
    pub fn clear_downstream_connection_termination(&mut self) {
        self.downstream_connection_termination = false;
    }

    // Param is passed by value, moved
    pub fn set_downstream_connection_termination(&mut self, v: bool) {
        self.downstream_connection_termination = v;
    }

    // bool upstream_retry_limit_exceeded = 16;


    pub fn get_upstream_retry_limit_exceeded(&self) -> bool {
        self.upstream_retry_limit_exceeded
    }
    pub fn clear_upstream_retry_limit_exceeded(&mut self) {
        self.upstream_retry_limit_exceeded = false;
    }

    // Param is passed by value, moved
    pub fn set_upstream_retry_limit_exceeded(&mut self, v: bool) {
        self.upstream_retry_limit_exceeded = v;
    }

    // bool stream_idle_timeout = 17;


    pub fn get_stream_idle_timeout(&self) -> bool {
        self.stream_idle_timeout
    }
    pub fn clear_stream_idle_timeout(&mut self) {
        self.stream_idle_timeout = false;
    }

    // Param is passed by value, moved
    pub fn set_stream_idle_timeout(&mut self, v: bool) {
        self.stream_idle_timeout = v;
    }

    // bool invalid_envoy_request_headers = 18;


    pub fn get_invalid_envoy_request_headers(&self) -> bool {
        self.invalid_envoy_request_headers
    }
    pub fn clear_invalid_envoy_request_headers(&mut self) {
        self.invalid_envoy_request_headers = false;
    }

    // Param is passed by value, moved
    pub fn set_invalid_envoy_request_headers(&mut self, v: bool) {
        self.invalid_envoy_request_headers = v;
    }

    // bool downstream_protocol_error = 19;


    pub fn get_downstream_protocol_error(&self) -> bool {
        self.downstream_protocol_error
    }
    pub fn clear_downstream_protocol_error(&mut self) {
        self.downstream_protocol_error = false;
    }

    // Param is passed by value, moved
    pub fn set_downstream_protocol_error(&mut self, v: bool) {
        self.downstream_protocol_error = v;
    }
}

impl ::protobuf::Message for ResponseFlags {
    fn is_initialized(&self) -> bool {
        for v in &self.unauthorized_details {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.failed_local_healthcheck = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.no_healthy_upstream = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.upstream_request_timeout = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.local_reset = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.upstream_remote_reset = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.upstream_connection_failure = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.upstream_connection_termination = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.upstream_overflow = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.no_route_found = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.delay_injected = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.fault_injected = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.rate_limited = tmp;
                },
                13 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.unauthorized_details)?;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.rate_limit_service_error = tmp;
                },
                15 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.downstream_connection_termination = tmp;
                },
                16 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.upstream_retry_limit_exceeded = tmp;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.stream_idle_timeout = tmp;
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.invalid_envoy_request_headers = tmp;
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.downstream_protocol_error = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.failed_local_healthcheck != false {
            my_size += 2;
        }
        if self.no_healthy_upstream != false {
            my_size += 2;
        }
        if self.upstream_request_timeout != false {
            my_size += 2;
        }
        if self.local_reset != false {
            my_size += 2;
        }
        if self.upstream_remote_reset != false {
            my_size += 2;
        }
        if self.upstream_connection_failure != false {
            my_size += 2;
        }
        if self.upstream_connection_termination != false {
            my_size += 2;
        }
        if self.upstream_overflow != false {
            my_size += 2;
        }
        if self.no_route_found != false {
            my_size += 2;
        }
        if self.delay_injected != false {
            my_size += 2;
        }
        if self.fault_injected != false {
            my_size += 2;
        }
        if self.rate_limited != false {
            my_size += 2;
        }
        if let Some(ref v) = self.unauthorized_details.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.rate_limit_service_error != false {
            my_size += 2;
        }
        if self.downstream_connection_termination != false {
            my_size += 2;
        }
        if self.upstream_retry_limit_exceeded != false {
            my_size += 3;
        }
        if self.stream_idle_timeout != false {
            my_size += 3;
        }
        if self.invalid_envoy_request_headers != false {
            my_size += 3;
        }
        if self.downstream_protocol_error != false {
            my_size += 3;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.failed_local_healthcheck != false {
            os.write_bool(1, self.failed_local_healthcheck)?;
        }
        if self.no_healthy_upstream != false {
            os.write_bool(2, self.no_healthy_upstream)?;
        }
        if self.upstream_request_timeout != false {
            os.write_bool(3, self.upstream_request_timeout)?;
        }
        if self.local_reset != false {
            os.write_bool(4, self.local_reset)?;
        }
        if self.upstream_remote_reset != false {
            os.write_bool(5, self.upstream_remote_reset)?;
        }
        if self.upstream_connection_failure != false {
            os.write_bool(6, self.upstream_connection_failure)?;
        }
        if self.upstream_connection_termination != false {
            os.write_bool(7, self.upstream_connection_termination)?;
        }
        if self.upstream_overflow != false {
            os.write_bool(8, self.upstream_overflow)?;
        }
        if self.no_route_found != false {
            os.write_bool(9, self.no_route_found)?;
        }
        if self.delay_injected != false {
            os.write_bool(10, self.delay_injected)?;
        }
        if self.fault_injected != false {
            os.write_bool(11, self.fault_injected)?;
        }
        if self.rate_limited != false {
            os.write_bool(12, self.rate_limited)?;
        }
        if let Some(ref v) = self.unauthorized_details.as_ref() {
            os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.rate_limit_service_error != false {
            os.write_bool(14, self.rate_limit_service_error)?;
        }
        if self.downstream_connection_termination != false {
            os.write_bool(15, self.downstream_connection_termination)?;
        }
        if self.upstream_retry_limit_exceeded != false {
            os.write_bool(16, self.upstream_retry_limit_exceeded)?;
        }
        if self.stream_idle_timeout != false {
            os.write_bool(17, self.stream_idle_timeout)?;
        }
        if self.invalid_envoy_request_headers != false {
            os.write_bool(18, self.invalid_envoy_request_headers)?;
        }
        if self.downstream_protocol_error != false {
            os.write_bool(19, self.downstream_protocol_error)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResponseFlags {
        ResponseFlags::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "failed_local_healthcheck",
                |m: &ResponseFlags| { &m.failed_local_healthcheck },
                |m: &mut ResponseFlags| { &mut m.failed_local_healthcheck },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "no_healthy_upstream",
                |m: &ResponseFlags| { &m.no_healthy_upstream },
                |m: &mut ResponseFlags| { &mut m.no_healthy_upstream },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "upstream_request_timeout",
                |m: &ResponseFlags| { &m.upstream_request_timeout },
                |m: &mut ResponseFlags| { &mut m.upstream_request_timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "local_reset",
                |m: &ResponseFlags| { &m.local_reset },
                |m: &mut ResponseFlags| { &mut m.local_reset },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "upstream_remote_reset",
                |m: &ResponseFlags| { &m.upstream_remote_reset },
                |m: &mut ResponseFlags| { &mut m.upstream_remote_reset },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "upstream_connection_failure",
                |m: &ResponseFlags| { &m.upstream_connection_failure },
                |m: &mut ResponseFlags| { &mut m.upstream_connection_failure },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "upstream_connection_termination",
                |m: &ResponseFlags| { &m.upstream_connection_termination },
                |m: &mut ResponseFlags| { &mut m.upstream_connection_termination },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "upstream_overflow",
                |m: &ResponseFlags| { &m.upstream_overflow },
                |m: &mut ResponseFlags| { &mut m.upstream_overflow },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "no_route_found",
                |m: &ResponseFlags| { &m.no_route_found },
                |m: &mut ResponseFlags| { &mut m.no_route_found },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "delay_injected",
                |m: &ResponseFlags| { &m.delay_injected },
                |m: &mut ResponseFlags| { &mut m.delay_injected },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "fault_injected",
                |m: &ResponseFlags| { &m.fault_injected },
                |m: &mut ResponseFlags| { &mut m.fault_injected },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "rate_limited",
                |m: &ResponseFlags| { &m.rate_limited },
                |m: &mut ResponseFlags| { &mut m.rate_limited },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ResponseFlags_Unauthorized>>(
                "unauthorized_details",
                |m: &ResponseFlags| { &m.unauthorized_details },
                |m: &mut ResponseFlags| { &mut m.unauthorized_details },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "rate_limit_service_error",
                |m: &ResponseFlags| { &m.rate_limit_service_error },
                |m: &mut ResponseFlags| { &mut m.rate_limit_service_error },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "downstream_connection_termination",
                |m: &ResponseFlags| { &m.downstream_connection_termination },
                |m: &mut ResponseFlags| { &mut m.downstream_connection_termination },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "upstream_retry_limit_exceeded",
                |m: &ResponseFlags| { &m.upstream_retry_limit_exceeded },
                |m: &mut ResponseFlags| { &mut m.upstream_retry_limit_exceeded },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "stream_idle_timeout",
                |m: &ResponseFlags| { &m.stream_idle_timeout },
                |m: &mut ResponseFlags| { &mut m.stream_idle_timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "invalid_envoy_request_headers",
                |m: &ResponseFlags| { &m.invalid_envoy_request_headers },
                |m: &mut ResponseFlags| { &mut m.invalid_envoy_request_headers },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "downstream_protocol_error",
                |m: &ResponseFlags| { &m.downstream_protocol_error },
                |m: &mut ResponseFlags| { &mut m.downstream_protocol_error },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ResponseFlags>(
                "ResponseFlags",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ResponseFlags {
        static instance: ::protobuf::rt::LazyV2<ResponseFlags> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ResponseFlags::new)
    }
}

impl ::protobuf::Clear for ResponseFlags {
    fn clear(&mut self) {
        self.failed_local_healthcheck = false;
        self.no_healthy_upstream = false;
        self.upstream_request_timeout = false;
        self.local_reset = false;
        self.upstream_remote_reset = false;
        self.upstream_connection_failure = false;
        self.upstream_connection_termination = false;
        self.upstream_overflow = false;
        self.no_route_found = false;
        self.delay_injected = false;
        self.fault_injected = false;
        self.rate_limited = false;
        self.unauthorized_details.clear();
        self.rate_limit_service_error = false;
        self.downstream_connection_termination = false;
        self.upstream_retry_limit_exceeded = false;
        self.stream_idle_timeout = false;
        self.invalid_envoy_request_headers = false;
        self.downstream_protocol_error = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResponseFlags {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResponseFlags {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ResponseFlags_Unauthorized {
    // message fields
    pub reason: ResponseFlags_Unauthorized_Reason,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ResponseFlags_Unauthorized {
    fn default() -> &'a ResponseFlags_Unauthorized {
        <ResponseFlags_Unauthorized as ::protobuf::Message>::default_instance()
    }
}

impl ResponseFlags_Unauthorized {
    pub fn new() -> ResponseFlags_Unauthorized {
        ::std::default::Default::default()
    }

    // .envoy.data.accesslog.v2.ResponseFlags.Unauthorized.Reason reason = 1;


    pub fn get_reason(&self) -> ResponseFlags_Unauthorized_Reason {
        self.reason
    }
    pub fn clear_reason(&mut self) {
        self.reason = ResponseFlags_Unauthorized_Reason::REASON_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_reason(&mut self, v: ResponseFlags_Unauthorized_Reason) {
        self.reason = v;
    }
}

impl ::protobuf::Message for ResponseFlags_Unauthorized {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.reason, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.reason != ResponseFlags_Unauthorized_Reason::REASON_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.reason);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.reason != ResponseFlags_Unauthorized_Reason::REASON_UNSPECIFIED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.reason))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResponseFlags_Unauthorized {
        ResponseFlags_Unauthorized::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ResponseFlags_Unauthorized_Reason>>(
                "reason",
                |m: &ResponseFlags_Unauthorized| { &m.reason },
                |m: &mut ResponseFlags_Unauthorized| { &mut m.reason },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ResponseFlags_Unauthorized>(
                "ResponseFlags.Unauthorized",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ResponseFlags_Unauthorized {
        static instance: ::protobuf::rt::LazyV2<ResponseFlags_Unauthorized> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ResponseFlags_Unauthorized::new)
    }
}

impl ::protobuf::Clear for ResponseFlags_Unauthorized {
    fn clear(&mut self) {
        self.reason = ResponseFlags_Unauthorized_Reason::REASON_UNSPECIFIED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResponseFlags_Unauthorized {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResponseFlags_Unauthorized {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ResponseFlags_Unauthorized_Reason {
    REASON_UNSPECIFIED = 0,
    EXTERNAL_SERVICE = 1,
}

impl ::protobuf::ProtobufEnum for ResponseFlags_Unauthorized_Reason {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ResponseFlags_Unauthorized_Reason> {
        match value {
            0 => ::std::option::Option::Some(ResponseFlags_Unauthorized_Reason::REASON_UNSPECIFIED),
            1 => ::std::option::Option::Some(ResponseFlags_Unauthorized_Reason::EXTERNAL_SERVICE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ResponseFlags_Unauthorized_Reason] = &[
            ResponseFlags_Unauthorized_Reason::REASON_UNSPECIFIED,
            ResponseFlags_Unauthorized_Reason::EXTERNAL_SERVICE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ResponseFlags_Unauthorized_Reason>("ResponseFlags.Unauthorized.Reason", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ResponseFlags_Unauthorized_Reason {
}

impl ::std::default::Default for ResponseFlags_Unauthorized_Reason {
    fn default() -> Self {
        ResponseFlags_Unauthorized_Reason::REASON_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for ResponseFlags_Unauthorized_Reason {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TLSProperties {
    // message fields
    pub tls_version: TLSProperties_TLSVersion,
    pub tls_cipher_suite: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub tls_sni_hostname: ::std::string::String,
    pub local_certificate_properties: ::protobuf::SingularPtrField<TLSProperties_CertificateProperties>,
    pub peer_certificate_properties: ::protobuf::SingularPtrField<TLSProperties_CertificateProperties>,
    pub tls_session_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TLSProperties {
    fn default() -> &'a TLSProperties {
        <TLSProperties as ::protobuf::Message>::default_instance()
    }
}

impl TLSProperties {
    pub fn new() -> TLSProperties {
        ::std::default::Default::default()
    }

    // .envoy.data.accesslog.v2.TLSProperties.TLSVersion tls_version = 1;


    pub fn get_tls_version(&self) -> TLSProperties_TLSVersion {
        self.tls_version
    }
    pub fn clear_tls_version(&mut self) {
        self.tls_version = TLSProperties_TLSVersion::VERSION_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_tls_version(&mut self, v: TLSProperties_TLSVersion) {
        self.tls_version = v;
    }

    // .google.protobuf.UInt32Value tls_cipher_suite = 2;


    pub fn get_tls_cipher_suite(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.tls_cipher_suite.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tls_cipher_suite(&mut self) {
        self.tls_cipher_suite.clear();
    }

    pub fn has_tls_cipher_suite(&self) -> bool {
        self.tls_cipher_suite.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tls_cipher_suite(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.tls_cipher_suite = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tls_cipher_suite(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.tls_cipher_suite.is_none() {
            self.tls_cipher_suite.set_default();
        }
        self.tls_cipher_suite.as_mut().unwrap()
    }

    // Take field
    pub fn take_tls_cipher_suite(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.tls_cipher_suite.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // string tls_sni_hostname = 3;


    pub fn get_tls_sni_hostname(&self) -> &str {
        &self.tls_sni_hostname
    }
    pub fn clear_tls_sni_hostname(&mut self) {
        self.tls_sni_hostname.clear();
    }

    // Param is passed by value, moved
    pub fn set_tls_sni_hostname(&mut self, v: ::std::string::String) {
        self.tls_sni_hostname = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tls_sni_hostname(&mut self) -> &mut ::std::string::String {
        &mut self.tls_sni_hostname
    }

    // Take field
    pub fn take_tls_sni_hostname(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tls_sni_hostname, ::std::string::String::new())
    }

    // .envoy.data.accesslog.v2.TLSProperties.CertificateProperties local_certificate_properties = 4;


    pub fn get_local_certificate_properties(&self) -> &TLSProperties_CertificateProperties {
        self.local_certificate_properties.as_ref().unwrap_or_else(|| <TLSProperties_CertificateProperties as ::protobuf::Message>::default_instance())
    }
    pub fn clear_local_certificate_properties(&mut self) {
        self.local_certificate_properties.clear();
    }

    pub fn has_local_certificate_properties(&self) -> bool {
        self.local_certificate_properties.is_some()
    }

    // Param is passed by value, moved
    pub fn set_local_certificate_properties(&mut self, v: TLSProperties_CertificateProperties) {
        self.local_certificate_properties = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_local_certificate_properties(&mut self) -> &mut TLSProperties_CertificateProperties {
        if self.local_certificate_properties.is_none() {
            self.local_certificate_properties.set_default();
        }
        self.local_certificate_properties.as_mut().unwrap()
    }

    // Take field
    pub fn take_local_certificate_properties(&mut self) -> TLSProperties_CertificateProperties {
        self.local_certificate_properties.take().unwrap_or_else(|| TLSProperties_CertificateProperties::new())
    }

    // .envoy.data.accesslog.v2.TLSProperties.CertificateProperties peer_certificate_properties = 5;


    pub fn get_peer_certificate_properties(&self) -> &TLSProperties_CertificateProperties {
        self.peer_certificate_properties.as_ref().unwrap_or_else(|| <TLSProperties_CertificateProperties as ::protobuf::Message>::default_instance())
    }
    pub fn clear_peer_certificate_properties(&mut self) {
        self.peer_certificate_properties.clear();
    }

    pub fn has_peer_certificate_properties(&self) -> bool {
        self.peer_certificate_properties.is_some()
    }

    // Param is passed by value, moved
    pub fn set_peer_certificate_properties(&mut self, v: TLSProperties_CertificateProperties) {
        self.peer_certificate_properties = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_peer_certificate_properties(&mut self) -> &mut TLSProperties_CertificateProperties {
        if self.peer_certificate_properties.is_none() {
            self.peer_certificate_properties.set_default();
        }
        self.peer_certificate_properties.as_mut().unwrap()
    }

    // Take field
    pub fn take_peer_certificate_properties(&mut self) -> TLSProperties_CertificateProperties {
        self.peer_certificate_properties.take().unwrap_or_else(|| TLSProperties_CertificateProperties::new())
    }

    // string tls_session_id = 6;


    pub fn get_tls_session_id(&self) -> &str {
        &self.tls_session_id
    }
    pub fn clear_tls_session_id(&mut self) {
        self.tls_session_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_tls_session_id(&mut self, v: ::std::string::String) {
        self.tls_session_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tls_session_id(&mut self) -> &mut ::std::string::String {
        &mut self.tls_session_id
    }

    // Take field
    pub fn take_tls_session_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tls_session_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TLSProperties {
    fn is_initialized(&self) -> bool {
        for v in &self.tls_cipher_suite {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.local_certificate_properties {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.peer_certificate_properties {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.tls_version, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tls_cipher_suite)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tls_sni_hostname)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.local_certificate_properties)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.peer_certificate_properties)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tls_session_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.tls_version != TLSProperties_TLSVersion::VERSION_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.tls_version);
        }
        if let Some(ref v) = self.tls_cipher_suite.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.tls_sni_hostname.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.tls_sni_hostname);
        }
        if let Some(ref v) = self.local_certificate_properties.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.peer_certificate_properties.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.tls_session_id.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.tls_session_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.tls_version != TLSProperties_TLSVersion::VERSION_UNSPECIFIED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.tls_version))?;
        }
        if let Some(ref v) = self.tls_cipher_suite.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.tls_sni_hostname.is_empty() {
            os.write_string(3, &self.tls_sni_hostname)?;
        }
        if let Some(ref v) = self.local_certificate_properties.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.peer_certificate_properties.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.tls_session_id.is_empty() {
            os.write_string(6, &self.tls_session_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TLSProperties {
        TLSProperties::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TLSProperties_TLSVersion>>(
                "tls_version",
                |m: &TLSProperties| { &m.tls_version },
                |m: &mut TLSProperties| { &mut m.tls_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "tls_cipher_suite",
                |m: &TLSProperties| { &m.tls_cipher_suite },
                |m: &mut TLSProperties| { &mut m.tls_cipher_suite },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tls_sni_hostname",
                |m: &TLSProperties| { &m.tls_sni_hostname },
                |m: &mut TLSProperties| { &mut m.tls_sni_hostname },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TLSProperties_CertificateProperties>>(
                "local_certificate_properties",
                |m: &TLSProperties| { &m.local_certificate_properties },
                |m: &mut TLSProperties| { &mut m.local_certificate_properties },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TLSProperties_CertificateProperties>>(
                "peer_certificate_properties",
                |m: &TLSProperties| { &m.peer_certificate_properties },
                |m: &mut TLSProperties| { &mut m.peer_certificate_properties },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tls_session_id",
                |m: &TLSProperties| { &m.tls_session_id },
                |m: &mut TLSProperties| { &mut m.tls_session_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TLSProperties>(
                "TLSProperties",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TLSProperties {
        static instance: ::protobuf::rt::LazyV2<TLSProperties> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TLSProperties::new)
    }
}

impl ::protobuf::Clear for TLSProperties {
    fn clear(&mut self) {
        self.tls_version = TLSProperties_TLSVersion::VERSION_UNSPECIFIED;
        self.tls_cipher_suite.clear();
        self.tls_sni_hostname.clear();
        self.local_certificate_properties.clear();
        self.peer_certificate_properties.clear();
        self.tls_session_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TLSProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TLSProperties {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TLSProperties_CertificateProperties {
    // message fields
    pub subject_alt_name: ::protobuf::RepeatedField<TLSProperties_CertificateProperties_SubjectAltName>,
    pub subject: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TLSProperties_CertificateProperties {
    fn default() -> &'a TLSProperties_CertificateProperties {
        <TLSProperties_CertificateProperties as ::protobuf::Message>::default_instance()
    }
}

impl TLSProperties_CertificateProperties {
    pub fn new() -> TLSProperties_CertificateProperties {
        ::std::default::Default::default()
    }

    // repeated .envoy.data.accesslog.v2.TLSProperties.CertificateProperties.SubjectAltName subject_alt_name = 1;


    pub fn get_subject_alt_name(&self) -> &[TLSProperties_CertificateProperties_SubjectAltName] {
        &self.subject_alt_name
    }
    pub fn clear_subject_alt_name(&mut self) {
        self.subject_alt_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_subject_alt_name(&mut self, v: ::protobuf::RepeatedField<TLSProperties_CertificateProperties_SubjectAltName>) {
        self.subject_alt_name = v;
    }

    // Mutable pointer to the field.
    pub fn mut_subject_alt_name(&mut self) -> &mut ::protobuf::RepeatedField<TLSProperties_CertificateProperties_SubjectAltName> {
        &mut self.subject_alt_name
    }

    // Take field
    pub fn take_subject_alt_name(&mut self) -> ::protobuf::RepeatedField<TLSProperties_CertificateProperties_SubjectAltName> {
        ::std::mem::replace(&mut self.subject_alt_name, ::protobuf::RepeatedField::new())
    }

    // string subject = 2;


    pub fn get_subject(&self) -> &str {
        &self.subject
    }
    pub fn clear_subject(&mut self) {
        self.subject.clear();
    }

    // Param is passed by value, moved
    pub fn set_subject(&mut self, v: ::std::string::String) {
        self.subject = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subject(&mut self) -> &mut ::std::string::String {
        &mut self.subject
    }

    // Take field
    pub fn take_subject(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subject, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TLSProperties_CertificateProperties {
    fn is_initialized(&self) -> bool {
        for v in &self.subject_alt_name {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.subject_alt_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subject)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.subject_alt_name {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.subject.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.subject);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.subject_alt_name {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.subject.is_empty() {
            os.write_string(2, &self.subject)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TLSProperties_CertificateProperties {
        TLSProperties_CertificateProperties::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TLSProperties_CertificateProperties_SubjectAltName>>(
                "subject_alt_name",
                |m: &TLSProperties_CertificateProperties| { &m.subject_alt_name },
                |m: &mut TLSProperties_CertificateProperties| { &mut m.subject_alt_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "subject",
                |m: &TLSProperties_CertificateProperties| { &m.subject },
                |m: &mut TLSProperties_CertificateProperties| { &mut m.subject },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TLSProperties_CertificateProperties>(
                "TLSProperties.CertificateProperties",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TLSProperties_CertificateProperties {
        static instance: ::protobuf::rt::LazyV2<TLSProperties_CertificateProperties> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TLSProperties_CertificateProperties::new)
    }
}

impl ::protobuf::Clear for TLSProperties_CertificateProperties {
    fn clear(&mut self) {
        self.subject_alt_name.clear();
        self.subject.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TLSProperties_CertificateProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TLSProperties_CertificateProperties {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TLSProperties_CertificateProperties_SubjectAltName {
    // message oneof groups
    pub san: ::std::option::Option<TLSProperties_CertificateProperties_SubjectAltName_oneof_san>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TLSProperties_CertificateProperties_SubjectAltName {
    fn default() -> &'a TLSProperties_CertificateProperties_SubjectAltName {
        <TLSProperties_CertificateProperties_SubjectAltName as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum TLSProperties_CertificateProperties_SubjectAltName_oneof_san {
    uri(::std::string::String),
    dns(::std::string::String),
}

impl TLSProperties_CertificateProperties_SubjectAltName {
    pub fn new() -> TLSProperties_CertificateProperties_SubjectAltName {
        ::std::default::Default::default()
    }

    // string uri = 1;


    pub fn get_uri(&self) -> &str {
        match self.san {
            ::std::option::Option::Some(TLSProperties_CertificateProperties_SubjectAltName_oneof_san::uri(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_uri(&mut self) {
        self.san = ::std::option::Option::None;
    }

    pub fn has_uri(&self) -> bool {
        match self.san {
            ::std::option::Option::Some(TLSProperties_CertificateProperties_SubjectAltName_oneof_san::uri(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_uri(&mut self, v: ::std::string::String) {
        self.san = ::std::option::Option::Some(TLSProperties_CertificateProperties_SubjectAltName_oneof_san::uri(v))
    }

    // Mutable pointer to the field.
    pub fn mut_uri(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(TLSProperties_CertificateProperties_SubjectAltName_oneof_san::uri(_)) = self.san {
        } else {
            self.san = ::std::option::Option::Some(TLSProperties_CertificateProperties_SubjectAltName_oneof_san::uri(::std::string::String::new()));
        }
        match self.san {
            ::std::option::Option::Some(TLSProperties_CertificateProperties_SubjectAltName_oneof_san::uri(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_uri(&mut self) -> ::std::string::String {
        if self.has_uri() {
            match self.san.take() {
                ::std::option::Option::Some(TLSProperties_CertificateProperties_SubjectAltName_oneof_san::uri(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string dns = 2;


    pub fn get_dns(&self) -> &str {
        match self.san {
            ::std::option::Option::Some(TLSProperties_CertificateProperties_SubjectAltName_oneof_san::dns(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_dns(&mut self) {
        self.san = ::std::option::Option::None;
    }

    pub fn has_dns(&self) -> bool {
        match self.san {
            ::std::option::Option::Some(TLSProperties_CertificateProperties_SubjectAltName_oneof_san::dns(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_dns(&mut self, v: ::std::string::String) {
        self.san = ::std::option::Option::Some(TLSProperties_CertificateProperties_SubjectAltName_oneof_san::dns(v))
    }

    // Mutable pointer to the field.
    pub fn mut_dns(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(TLSProperties_CertificateProperties_SubjectAltName_oneof_san::dns(_)) = self.san {
        } else {
            self.san = ::std::option::Option::Some(TLSProperties_CertificateProperties_SubjectAltName_oneof_san::dns(::std::string::String::new()));
        }
        match self.san {
            ::std::option::Option::Some(TLSProperties_CertificateProperties_SubjectAltName_oneof_san::dns(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_dns(&mut self) -> ::std::string::String {
        if self.has_dns() {
            match self.san.take() {
                ::std::option::Option::Some(TLSProperties_CertificateProperties_SubjectAltName_oneof_san::dns(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }
}

impl ::protobuf::Message for TLSProperties_CertificateProperties_SubjectAltName {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.san = ::std::option::Option::Some(TLSProperties_CertificateProperties_SubjectAltName_oneof_san::uri(is.read_string()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.san = ::std::option::Option::Some(TLSProperties_CertificateProperties_SubjectAltName_oneof_san::dns(is.read_string()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.san {
            match v {
                &TLSProperties_CertificateProperties_SubjectAltName_oneof_san::uri(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
                &TLSProperties_CertificateProperties_SubjectAltName_oneof_san::dns(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.san {
            match v {
                &TLSProperties_CertificateProperties_SubjectAltName_oneof_san::uri(ref v) => {
                    os.write_string(1, v)?;
                },
                &TLSProperties_CertificateProperties_SubjectAltName_oneof_san::dns(ref v) => {
                    os.write_string(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TLSProperties_CertificateProperties_SubjectAltName {
        TLSProperties_CertificateProperties_SubjectAltName::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "uri",
                TLSProperties_CertificateProperties_SubjectAltName::has_uri,
                TLSProperties_CertificateProperties_SubjectAltName::get_uri,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "dns",
                TLSProperties_CertificateProperties_SubjectAltName::has_dns,
                TLSProperties_CertificateProperties_SubjectAltName::get_dns,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TLSProperties_CertificateProperties_SubjectAltName>(
                "TLSProperties.CertificateProperties.SubjectAltName",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TLSProperties_CertificateProperties_SubjectAltName {
        static instance: ::protobuf::rt::LazyV2<TLSProperties_CertificateProperties_SubjectAltName> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TLSProperties_CertificateProperties_SubjectAltName::new)
    }
}

impl ::protobuf::Clear for TLSProperties_CertificateProperties_SubjectAltName {
    fn clear(&mut self) {
        self.san = ::std::option::Option::None;
        self.san = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TLSProperties_CertificateProperties_SubjectAltName {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TLSProperties_CertificateProperties_SubjectAltName {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TLSProperties_TLSVersion {
    VERSION_UNSPECIFIED = 0,
    TLSv1 = 1,
    TLSv1_1 = 2,
    TLSv1_2 = 3,
    TLSv1_3 = 4,
}

impl ::protobuf::ProtobufEnum for TLSProperties_TLSVersion {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TLSProperties_TLSVersion> {
        match value {
            0 => ::std::option::Option::Some(TLSProperties_TLSVersion::VERSION_UNSPECIFIED),
            1 => ::std::option::Option::Some(TLSProperties_TLSVersion::TLSv1),
            2 => ::std::option::Option::Some(TLSProperties_TLSVersion::TLSv1_1),
            3 => ::std::option::Option::Some(TLSProperties_TLSVersion::TLSv1_2),
            4 => ::std::option::Option::Some(TLSProperties_TLSVersion::TLSv1_3),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TLSProperties_TLSVersion] = &[
            TLSProperties_TLSVersion::VERSION_UNSPECIFIED,
            TLSProperties_TLSVersion::TLSv1,
            TLSProperties_TLSVersion::TLSv1_1,
            TLSProperties_TLSVersion::TLSv1_2,
            TLSProperties_TLSVersion::TLSv1_3,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<TLSProperties_TLSVersion>("TLSProperties.TLSVersion", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for TLSProperties_TLSVersion {
}

impl ::std::default::Default for TLSProperties_TLSVersion {
    fn default() -> Self {
        TLSProperties_TLSVersion::VERSION_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for TLSProperties_TLSVersion {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HTTPRequestProperties {
    // message fields
    pub request_method: super::base::RequestMethod,
    pub scheme: ::std::string::String,
    pub authority: ::std::string::String,
    pub port: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub path: ::std::string::String,
    pub user_agent: ::std::string::String,
    pub referer: ::std::string::String,
    pub forwarded_for: ::std::string::String,
    pub request_id: ::std::string::String,
    pub original_path: ::std::string::String,
    pub request_headers_bytes: u64,
    pub request_body_bytes: u64,
    pub request_headers: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HTTPRequestProperties {
    fn default() -> &'a HTTPRequestProperties {
        <HTTPRequestProperties as ::protobuf::Message>::default_instance()
    }
}

impl HTTPRequestProperties {
    pub fn new() -> HTTPRequestProperties {
        ::std::default::Default::default()
    }

    // .envoy.api.v2.core.RequestMethod request_method = 1;


    pub fn get_request_method(&self) -> super::base::RequestMethod {
        self.request_method
    }
    pub fn clear_request_method(&mut self) {
        self.request_method = super::base::RequestMethod::METHOD_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_request_method(&mut self, v: super::base::RequestMethod) {
        self.request_method = v;
    }

    // string scheme = 2;


    pub fn get_scheme(&self) -> &str {
        &self.scheme
    }
    pub fn clear_scheme(&mut self) {
        self.scheme.clear();
    }

    // Param is passed by value, moved
    pub fn set_scheme(&mut self, v: ::std::string::String) {
        self.scheme = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scheme(&mut self) -> &mut ::std::string::String {
        &mut self.scheme
    }

    // Take field
    pub fn take_scheme(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.scheme, ::std::string::String::new())
    }

    // string authority = 3;


    pub fn get_authority(&self) -> &str {
        &self.authority
    }
    pub fn clear_authority(&mut self) {
        self.authority.clear();
    }

    // Param is passed by value, moved
    pub fn set_authority(&mut self, v: ::std::string::String) {
        self.authority = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_authority(&mut self) -> &mut ::std::string::String {
        &mut self.authority
    }

    // Take field
    pub fn take_authority(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.authority, ::std::string::String::new())
    }

    // .google.protobuf.UInt32Value port = 4;


    pub fn get_port(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.port.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_port(&mut self) {
        self.port.clear();
    }

    pub fn has_port(&self) -> bool {
        self.port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.port = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_port(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.port.is_none() {
            self.port.set_default();
        }
        self.port.as_mut().unwrap()
    }

    // Take field
    pub fn take_port(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.port.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // string path = 5;


    pub fn get_path(&self) -> &str {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    // string user_agent = 6;


    pub fn get_user_agent(&self) -> &str {
        &self.user_agent
    }
    pub fn clear_user_agent(&mut self) {
        self.user_agent.clear();
    }

    // Param is passed by value, moved
    pub fn set_user_agent(&mut self, v: ::std::string::String) {
        self.user_agent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_user_agent(&mut self) -> &mut ::std::string::String {
        &mut self.user_agent
    }

    // Take field
    pub fn take_user_agent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.user_agent, ::std::string::String::new())
    }

    // string referer = 7;


    pub fn get_referer(&self) -> &str {
        &self.referer
    }
    pub fn clear_referer(&mut self) {
        self.referer.clear();
    }

    // Param is passed by value, moved
    pub fn set_referer(&mut self, v: ::std::string::String) {
        self.referer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_referer(&mut self) -> &mut ::std::string::String {
        &mut self.referer
    }

    // Take field
    pub fn take_referer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.referer, ::std::string::String::new())
    }

    // string forwarded_for = 8;


    pub fn get_forwarded_for(&self) -> &str {
        &self.forwarded_for
    }
    pub fn clear_forwarded_for(&mut self) {
        self.forwarded_for.clear();
    }

    // Param is passed by value, moved
    pub fn set_forwarded_for(&mut self, v: ::std::string::String) {
        self.forwarded_for = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_forwarded_for(&mut self) -> &mut ::std::string::String {
        &mut self.forwarded_for
    }

    // Take field
    pub fn take_forwarded_for(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.forwarded_for, ::std::string::String::new())
    }

    // string request_id = 9;


    pub fn get_request_id(&self) -> &str {
        &self.request_id
    }
    pub fn clear_request_id(&mut self) {
        self.request_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_request_id(&mut self, v: ::std::string::String) {
        self.request_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_id(&mut self) -> &mut ::std::string::String {
        &mut self.request_id
    }

    // Take field
    pub fn take_request_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.request_id, ::std::string::String::new())
    }

    // string original_path = 10;


    pub fn get_original_path(&self) -> &str {
        &self.original_path
    }
    pub fn clear_original_path(&mut self) {
        self.original_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_original_path(&mut self, v: ::std::string::String) {
        self.original_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_original_path(&mut self) -> &mut ::std::string::String {
        &mut self.original_path
    }

    // Take field
    pub fn take_original_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.original_path, ::std::string::String::new())
    }

    // uint64 request_headers_bytes = 11;


    pub fn get_request_headers_bytes(&self) -> u64 {
        self.request_headers_bytes
    }
    pub fn clear_request_headers_bytes(&mut self) {
        self.request_headers_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_request_headers_bytes(&mut self, v: u64) {
        self.request_headers_bytes = v;
    }

    // uint64 request_body_bytes = 12;


    pub fn get_request_body_bytes(&self) -> u64 {
        self.request_body_bytes
    }
    pub fn clear_request_body_bytes(&mut self) {
        self.request_body_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_request_body_bytes(&mut self, v: u64) {
        self.request_body_bytes = v;
    }

    // repeated .envoy.data.accesslog.v2.HTTPRequestProperties.RequestHeadersEntry request_headers = 13;


    pub fn get_request_headers(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.request_headers
    }
    pub fn clear_request_headers(&mut self) {
        self.request_headers.clear();
    }

    // Param is passed by value, moved
    pub fn set_request_headers(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.request_headers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_request_headers(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.request_headers
    }

    // Take field
    pub fn take_request_headers(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.request_headers, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for HTTPRequestProperties {
    fn is_initialized(&self) -> bool {
        for v in &self.port {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.request_method, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.scheme)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.authority)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.port)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.user_agent)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.referer)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.forwarded_for)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.request_id)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.original_path)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.request_headers_bytes = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.request_body_bytes = tmp;
                },
                13 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.request_headers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.request_method != super::base::RequestMethod::METHOD_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(1, self.request_method);
        }
        if !self.scheme.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.scheme);
        }
        if !self.authority.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.authority);
        }
        if let Some(ref v) = self.port.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.path);
        }
        if !self.user_agent.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.user_agent);
        }
        if !self.referer.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.referer);
        }
        if !self.forwarded_for.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.forwarded_for);
        }
        if !self.request_id.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.request_id);
        }
        if !self.original_path.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.original_path);
        }
        if self.request_headers_bytes != 0 {
            my_size += ::protobuf::rt::value_size(11, self.request_headers_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.request_body_bytes != 0 {
            my_size += ::protobuf::rt::value_size(12, self.request_body_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(13, &self.request_headers);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.request_method != super::base::RequestMethod::METHOD_UNSPECIFIED {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.request_method))?;
        }
        if !self.scheme.is_empty() {
            os.write_string(2, &self.scheme)?;
        }
        if !self.authority.is_empty() {
            os.write_string(3, &self.authority)?;
        }
        if let Some(ref v) = self.port.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.path.is_empty() {
            os.write_string(5, &self.path)?;
        }
        if !self.user_agent.is_empty() {
            os.write_string(6, &self.user_agent)?;
        }
        if !self.referer.is_empty() {
            os.write_string(7, &self.referer)?;
        }
        if !self.forwarded_for.is_empty() {
            os.write_string(8, &self.forwarded_for)?;
        }
        if !self.request_id.is_empty() {
            os.write_string(9, &self.request_id)?;
        }
        if !self.original_path.is_empty() {
            os.write_string(10, &self.original_path)?;
        }
        if self.request_headers_bytes != 0 {
            os.write_uint64(11, self.request_headers_bytes)?;
        }
        if self.request_body_bytes != 0 {
            os.write_uint64(12, self.request_body_bytes)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(13, &self.request_headers, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HTTPRequestProperties {
        HTTPRequestProperties::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::base::RequestMethod>>(
                "request_method",
                |m: &HTTPRequestProperties| { &m.request_method },
                |m: &mut HTTPRequestProperties| { &mut m.request_method },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "scheme",
                |m: &HTTPRequestProperties| { &m.scheme },
                |m: &mut HTTPRequestProperties| { &mut m.scheme },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "authority",
                |m: &HTTPRequestProperties| { &m.authority },
                |m: &mut HTTPRequestProperties| { &mut m.authority },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "port",
                |m: &HTTPRequestProperties| { &m.port },
                |m: &mut HTTPRequestProperties| { &mut m.port },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path",
                |m: &HTTPRequestProperties| { &m.path },
                |m: &mut HTTPRequestProperties| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "user_agent",
                |m: &HTTPRequestProperties| { &m.user_agent },
                |m: &mut HTTPRequestProperties| { &mut m.user_agent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "referer",
                |m: &HTTPRequestProperties| { &m.referer },
                |m: &mut HTTPRequestProperties| { &mut m.referer },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "forwarded_for",
                |m: &HTTPRequestProperties| { &m.forwarded_for },
                |m: &mut HTTPRequestProperties| { &mut m.forwarded_for },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "request_id",
                |m: &HTTPRequestProperties| { &m.request_id },
                |m: &mut HTTPRequestProperties| { &mut m.request_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "original_path",
                |m: &HTTPRequestProperties| { &m.original_path },
                |m: &mut HTTPRequestProperties| { &mut m.original_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "request_headers_bytes",
                |m: &HTTPRequestProperties| { &m.request_headers_bytes },
                |m: &mut HTTPRequestProperties| { &mut m.request_headers_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "request_body_bytes",
                |m: &HTTPRequestProperties| { &m.request_body_bytes },
                |m: &mut HTTPRequestProperties| { &mut m.request_body_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "request_headers",
                |m: &HTTPRequestProperties| { &m.request_headers },
                |m: &mut HTTPRequestProperties| { &mut m.request_headers },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HTTPRequestProperties>(
                "HTTPRequestProperties",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HTTPRequestProperties {
        static instance: ::protobuf::rt::LazyV2<HTTPRequestProperties> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HTTPRequestProperties::new)
    }
}

impl ::protobuf::Clear for HTTPRequestProperties {
    fn clear(&mut self) {
        self.request_method = super::base::RequestMethod::METHOD_UNSPECIFIED;
        self.scheme.clear();
        self.authority.clear();
        self.port.clear();
        self.path.clear();
        self.user_agent.clear();
        self.referer.clear();
        self.forwarded_for.clear();
        self.request_id.clear();
        self.original_path.clear();
        self.request_headers_bytes = 0;
        self.request_body_bytes = 0;
        self.request_headers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HTTPRequestProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HTTPRequestProperties {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HTTPResponseProperties {
    // message fields
    pub response_code: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub response_headers_bytes: u64,
    pub response_body_bytes: u64,
    pub response_headers: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub response_trailers: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub response_code_details: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HTTPResponseProperties {
    fn default() -> &'a HTTPResponseProperties {
        <HTTPResponseProperties as ::protobuf::Message>::default_instance()
    }
}

impl HTTPResponseProperties {
    pub fn new() -> HTTPResponseProperties {
        ::std::default::Default::default()
    }

    // .google.protobuf.UInt32Value response_code = 1;


    pub fn get_response_code(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.response_code.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_response_code(&mut self) {
        self.response_code.clear();
    }

    pub fn has_response_code(&self) -> bool {
        self.response_code.is_some()
    }

    // Param is passed by value, moved
    pub fn set_response_code(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.response_code = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response_code(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.response_code.is_none() {
            self.response_code.set_default();
        }
        self.response_code.as_mut().unwrap()
    }

    // Take field
    pub fn take_response_code(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.response_code.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // uint64 response_headers_bytes = 2;


    pub fn get_response_headers_bytes(&self) -> u64 {
        self.response_headers_bytes
    }
    pub fn clear_response_headers_bytes(&mut self) {
        self.response_headers_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_response_headers_bytes(&mut self, v: u64) {
        self.response_headers_bytes = v;
    }

    // uint64 response_body_bytes = 3;


    pub fn get_response_body_bytes(&self) -> u64 {
        self.response_body_bytes
    }
    pub fn clear_response_body_bytes(&mut self) {
        self.response_body_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_response_body_bytes(&mut self, v: u64) {
        self.response_body_bytes = v;
    }

    // repeated .envoy.data.accesslog.v2.HTTPResponseProperties.ResponseHeadersEntry response_headers = 4;


    pub fn get_response_headers(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.response_headers
    }
    pub fn clear_response_headers(&mut self) {
        self.response_headers.clear();
    }

    // Param is passed by value, moved
    pub fn set_response_headers(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.response_headers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_response_headers(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.response_headers
    }

    // Take field
    pub fn take_response_headers(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.response_headers, ::std::collections::HashMap::new())
    }

    // repeated .envoy.data.accesslog.v2.HTTPResponseProperties.ResponseTrailersEntry response_trailers = 5;


    pub fn get_response_trailers(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.response_trailers
    }
    pub fn clear_response_trailers(&mut self) {
        self.response_trailers.clear();
    }

    // Param is passed by value, moved
    pub fn set_response_trailers(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.response_trailers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_response_trailers(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.response_trailers
    }

    // Take field
    pub fn take_response_trailers(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.response_trailers, ::std::collections::HashMap::new())
    }

    // string response_code_details = 6;


    pub fn get_response_code_details(&self) -> &str {
        &self.response_code_details
    }
    pub fn clear_response_code_details(&mut self) {
        self.response_code_details.clear();
    }

    // Param is passed by value, moved
    pub fn set_response_code_details(&mut self, v: ::std::string::String) {
        self.response_code_details = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response_code_details(&mut self) -> &mut ::std::string::String {
        &mut self.response_code_details
    }

    // Take field
    pub fn take_response_code_details(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.response_code_details, ::std::string::String::new())
    }
}

impl ::protobuf::Message for HTTPResponseProperties {
    fn is_initialized(&self) -> bool {
        for v in &self.response_code {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.response_code)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.response_headers_bytes = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.response_body_bytes = tmp;
                },
                4 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.response_headers)?;
                },
                5 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.response_trailers)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.response_code_details)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.response_code.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.response_headers_bytes != 0 {
            my_size += ::protobuf::rt::value_size(2, self.response_headers_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.response_body_bytes != 0 {
            my_size += ::protobuf::rt::value_size(3, self.response_body_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(4, &self.response_headers);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(5, &self.response_trailers);
        if !self.response_code_details.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.response_code_details);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.response_code.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.response_headers_bytes != 0 {
            os.write_uint64(2, self.response_headers_bytes)?;
        }
        if self.response_body_bytes != 0 {
            os.write_uint64(3, self.response_body_bytes)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(4, &self.response_headers, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(5, &self.response_trailers, os)?;
        if !self.response_code_details.is_empty() {
            os.write_string(6, &self.response_code_details)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HTTPResponseProperties {
        HTTPResponseProperties::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "response_code",
                |m: &HTTPResponseProperties| { &m.response_code },
                |m: &mut HTTPResponseProperties| { &mut m.response_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "response_headers_bytes",
                |m: &HTTPResponseProperties| { &m.response_headers_bytes },
                |m: &mut HTTPResponseProperties| { &mut m.response_headers_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "response_body_bytes",
                |m: &HTTPResponseProperties| { &m.response_body_bytes },
                |m: &mut HTTPResponseProperties| { &mut m.response_body_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "response_headers",
                |m: &HTTPResponseProperties| { &m.response_headers },
                |m: &mut HTTPResponseProperties| { &mut m.response_headers },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "response_trailers",
                |m: &HTTPResponseProperties| { &m.response_trailers },
                |m: &mut HTTPResponseProperties| { &mut m.response_trailers },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "response_code_details",
                |m: &HTTPResponseProperties| { &m.response_code_details },
                |m: &mut HTTPResponseProperties| { &mut m.response_code_details },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HTTPResponseProperties>(
                "HTTPResponseProperties",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HTTPResponseProperties {
        static instance: ::protobuf::rt::LazyV2<HTTPResponseProperties> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HTTPResponseProperties::new)
    }
}

impl ::protobuf::Clear for HTTPResponseProperties {
    fn clear(&mut self) {
        self.response_code.clear();
        self.response_headers_bytes = 0;
        self.response_body_bytes = 0;
        self.response_headers.clear();
        self.response_trailers.clear();
        self.response_code_details.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HTTPResponseProperties {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HTTPResponseProperties {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'envoy/data/accesslog/v2/accesslog.proto\x12\x17envoy.data.accesslog.v\
    2\x1a\x1fenvoy/api/v2/core/address.proto\x1a\x1cenvoy/api/v2/core/base.p\
    roto\x1a\x19google/protobuf/any.proto\x1a\x1egoogle/protobuf/duration.pr\
    oto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/wrappe\
    rs.proto\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/validate.p\
    roto\"\xce\x01\n\x11TCPAccessLogEntry\x12U\n\x11common_properties\x18\
    \x01\x20\x01(\x0b2(.envoy.data.accesslog.v2.AccessLogCommonR\x10commonPr\
    operties\x12b\n\x15connection_properties\x18\x02\x20\x01(\x0b2-.envoy.da\
    ta.accesslog.v2.ConnectionPropertiesR\x14connectionProperties\"\xbd\x03\
    \n\x12HTTPAccessLogEntry\x12U\n\x11common_properties\x18\x01\x20\x01(\
    \x0b2(.envoy.data.accesslog.v2.AccessLogCommonR\x10commonProperties\x12b\
    \n\x10protocol_version\x18\x02\x20\x01(\x0e27.envoy.data.accesslog.v2.HT\
    TPAccessLogEntry.HTTPVersionR\x0fprotocolVersion\x12H\n\x07request\x18\
    \x03\x20\x01(\x0b2..envoy.data.accesslog.v2.HTTPRequestPropertiesR\x07re\
    quest\x12K\n\x08response\x18\x04\x20\x01(\x0b2/.envoy.data.accesslog.v2.\
    HTTPResponsePropertiesR\x08response\"U\n\x0bHTTPVersion\x12\x18\n\x14PRO\
    TOCOL_UNSPECIFIED\x10\0\x12\n\n\x06HTTP10\x10\x01\x12\n\n\x06HTTP11\x10\
    \x02\x12\t\n\x05HTTP2\x10\x03\x12\t\n\x05HTTP3\x10\x04\"\\\n\x14Connecti\
    onProperties\x12%\n\x0ereceived_bytes\x18\x01\x20\x01(\x04R\rreceivedByt\
    es\x12\x1d\n\nsent_bytes\x18\x02\x20\x01(\x04R\tsentBytes\"\xfd\r\n\x0fA\
    ccessLogCommon\x128\n\x0bsample_rate\x18\x01\x20\x01(\x01R\nsampleRateB\
    \x17\xfaB\x14\x12\x12\x19\0\0\0\0\0\0\xf0?!\0\0\0\0\0\0\0\0\x12V\n\x19do\
    wnstream_remote_address\x18\x02\x20\x01(\x0b2\x1a.envoy.api.v2.core.Addr\
    essR\x17downstreamRemoteAddress\x12T\n\x18downstream_local_address\x18\
    \x03\x20\x01(\x0b2\x1a.envoy.api.v2.core.AddressR\x16downstreamLocalAddr\
    ess\x12M\n\x0etls_properties\x18\x04\x20\x01(\x0b2&.envoy.data.accesslog\
    .v2.TLSPropertiesR\rtlsProperties\x129\n\nstart_time\x18\x05\x20\x01(\
    \x0b2\x1a.google.protobuf.TimestampR\tstartTime\x12I\n\x14time_to_last_r\
    x_byte\x18\x06\x20\x01(\x0b2\x19.google.protobuf.DurationR\x10timeToLast\
    RxByte\x12\\\n\x1etime_to_first_upstream_tx_byte\x18\x07\x20\x01(\x0b2\
    \x19.google.protobuf.DurationR\x19timeToFirstUpstreamTxByte\x12Z\n\x1dti\
    me_to_last_upstream_tx_byte\x18\x08\x20\x01(\x0b2\x19.google.protobuf.Du\
    rationR\x18timeToLastUpstreamTxByte\x12\\\n\x1etime_to_first_upstream_rx\
    _byte\x18\t\x20\x01(\x0b2\x19.google.protobuf.DurationR\x19timeToFirstUp\
    streamRxByte\x12Z\n\x1dtime_to_last_upstream_rx_byte\x18\n\x20\x01(\x0b2\
    \x19.google.protobuf.DurationR\x18timeToLastUpstreamRxByte\x12`\n\x20tim\
    e_to_first_downstream_tx_byte\x18\x0b\x20\x01(\x0b2\x19.google.protobuf.\
    DurationR\x1btimeToFirstDownstreamTxByte\x12^\n\x1ftime_to_last_downstre\
    am_tx_byte\x18\x0c\x20\x01(\x0b2\x19.google.protobuf.DurationR\x1atimeTo\
    LastDownstreamTxByte\x12R\n\x17upstream_remote_address\x18\r\x20\x01(\
    \x0b2\x1a.envoy.api.v2.core.AddressR\x15upstreamRemoteAddress\x12P\n\x16\
    upstream_local_address\x18\x0e\x20\x01(\x0b2\x1a.envoy.api.v2.core.Addre\
    ssR\x14upstreamLocalAddress\x12)\n\x10upstream_cluster\x18\x0f\x20\x01(\
    \tR\x0fupstreamCluster\x12M\n\x0eresponse_flags\x18\x10\x20\x01(\x0b2&.e\
    nvoy.data.accesslog.v2.ResponseFlagsR\rresponseFlags\x127\n\x08metadata\
    \x18\x11\x20\x01(\x0b2\x1b.envoy.api.v2.core.MetadataR\x08metadata\x12I\
    \n!upstream_transport_failure_reason\x18\x12\x20\x01(\tR\x1eupstreamTran\
    sportFailureReason\x12\x1d\n\nroute_name\x18\x13\x20\x01(\tR\trouteName\
    \x12c\n\x20downstream_direct_remote_address\x18\x14\x20\x01(\x0b2\x1a.en\
    voy.api.v2.core.AddressR\x1ddownstreamDirectRemoteAddress\x12r\n\x14filt\
    er_state_objects\x18\x15\x20\x03(\x0b2@.envoy.data.accesslog.v2.AccessLo\
    gCommon.FilterStateObjectsEntryR\x12filterStateObjects\x1a[\n\x17FilterS\
    tateObjectsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12*\n\x05v\
    alue\x18\x02\x20\x01(\x0b2\x14.google.protobuf.AnyR\x05value:\x028\x01\"\
    \xd0\t\n\rResponseFlags\x128\n\x18failed_local_healthcheck\x18\x01\x20\
    \x01(\x08R\x16failedLocalHealthcheck\x12.\n\x13no_healthy_upstream\x18\
    \x02\x20\x01(\x08R\x11noHealthyUpstream\x128\n\x18upstream_request_timeo\
    ut\x18\x03\x20\x01(\x08R\x16upstreamRequestTimeout\x12\x1f\n\x0blocal_re\
    set\x18\x04\x20\x01(\x08R\nlocalReset\x122\n\x15upstream_remote_reset\
    \x18\x05\x20\x01(\x08R\x13upstreamRemoteReset\x12>\n\x1bupstream_connect\
    ion_failure\x18\x06\x20\x01(\x08R\x19upstreamConnectionFailure\x12F\n\
    \x1fupstream_connection_termination\x18\x07\x20\x01(\x08R\x1dupstreamCon\
    nectionTermination\x12+\n\x11upstream_overflow\x18\x08\x20\x01(\x08R\x10\
    upstreamOverflow\x12$\n\x0eno_route_found\x18\t\x20\x01(\x08R\x0cnoRoute\
    Found\x12%\n\x0edelay_injected\x18\n\x20\x01(\x08R\rdelayInjected\x12%\n\
    \x0efault_injected\x18\x0b\x20\x01(\x08R\rfaultInjected\x12!\n\x0crate_l\
    imited\x18\x0c\x20\x01(\x08R\x0brateLimited\x12f\n\x14unauthorized_detai\
    ls\x18\r\x20\x01(\x0b23.envoy.data.accesslog.v2.ResponseFlags.Unauthoriz\
    edR\x13unauthorizedDetails\x127\n\x18rate_limit_service_error\x18\x0e\
    \x20\x01(\x08R\x15rateLimitServiceError\x12J\n!downstream_connection_ter\
    mination\x18\x0f\x20\x01(\x08R\x1fdownstreamConnectionTermination\x12A\n\
    \x1dupstream_retry_limit_exceeded\x18\x10\x20\x01(\x08R\x1aupstreamRetry\
    LimitExceeded\x12.\n\x13stream_idle_timeout\x18\x11\x20\x01(\x08R\x11str\
    eamIdleTimeout\x12A\n\x1dinvalid_envoy_request_headers\x18\x12\x20\x01(\
    \x08R\x1ainvalidEnvoyRequestHeaders\x12:\n\x19downstream_protocol_error\
    \x18\x13\x20\x01(\x08R\x17downstreamProtocolError\x1a\x9a\x01\n\x0cUnaut\
    horized\x12R\n\x06reason\x18\x01\x20\x01(\x0e2:.envoy.data.accesslog.v2.\
    ResponseFlags.Unauthorized.ReasonR\x06reason\"6\n\x06Reason\x12\x16\n\
    \x12REASON_UNSPECIFIED\x10\0\x12\x14\n\x10EXTERNAL_SERVICE\x10\x01\"\xbe\
    \x06\n\rTLSProperties\x12R\n\x0btls_version\x18\x01\x20\x01(\x0e21.envoy\
    .data.accesslog.v2.TLSProperties.TLSVersionR\ntlsVersion\x12F\n\x10tls_c\
    ipher_suite\x18\x02\x20\x01(\x0b2\x1c.google.protobuf.UInt32ValueR\x0etl\
    sCipherSuite\x12(\n\x10tls_sni_hostname\x18\x03\x20\x01(\tR\x0etlsSniHos\
    tname\x12~\n\x1clocal_certificate_properties\x18\x04\x20\x01(\x0b2<.envo\
    y.data.accesslog.v2.TLSProperties.CertificatePropertiesR\x1alocalCertifi\
    cateProperties\x12|\n\x1bpeer_certificate_properties\x18\x05\x20\x01(\
    \x0b2<.envoy.data.accesslog.v2.TLSProperties.CertificatePropertiesR\x19p\
    eerCertificateProperties\x12$\n\x0etls_session_id\x18\x06\x20\x01(\tR\
    \x0ctlsSessionId\x1a\xe9\x01\n\x15CertificateProperties\x12u\n\x10subjec\
    t_alt_name\x18\x01\x20\x03(\x0b2K.envoy.data.accesslog.v2.TLSProperties.\
    CertificateProperties.SubjectAltNameR\x0esubjectAltName\x12\x18\n\x07sub\
    ject\x18\x02\x20\x01(\tR\x07subject\x1a?\n\x0eSubjectAltName\x12\x12\n\
    \x03uri\x18\x01\x20\x01(\tH\0R\x03uri\x12\x12\n\x03dns\x18\x02\x20\x01(\
    \tH\0R\x03dnsB\x05\n\x03san\"W\n\nTLSVersion\x12\x17\n\x13VERSION_UNSPEC\
    IFIED\x10\0\x12\t\n\x05TLSv1\x10\x01\x12\x0b\n\x07TLSv1_1\x10\x02\x12\
    \x0b\n\x07TLSv1_2\x10\x03\x12\x0b\n\x07TLSv1_3\x10\x04\"\x9a\x05\n\x15HT\
    TPRequestProperties\x12Q\n\x0erequest_method\x18\x01\x20\x01(\x0e2\x20.e\
    nvoy.api.v2.core.RequestMethodR\rrequestMethodB\x08\xfaB\x05\x82\x01\x02\
    \x10\x01\x12\x16\n\x06scheme\x18\x02\x20\x01(\tR\x06scheme\x12\x1c\n\tau\
    thority\x18\x03\x20\x01(\tR\tauthority\x120\n\x04port\x18\x04\x20\x01(\
    \x0b2\x1c.google.protobuf.UInt32ValueR\x04port\x12\x12\n\x04path\x18\x05\
    \x20\x01(\tR\x04path\x12\x1d\n\nuser_agent\x18\x06\x20\x01(\tR\tuserAgen\
    t\x12\x18\n\x07referer\x18\x07\x20\x01(\tR\x07referer\x12#\n\rforwarded_\
    for\x18\x08\x20\x01(\tR\x0cforwardedFor\x12\x1d\n\nrequest_id\x18\t\x20\
    \x01(\tR\trequestId\x12#\n\roriginal_path\x18\n\x20\x01(\tR\x0coriginalP\
    ath\x122\n\x15request_headers_bytes\x18\x0b\x20\x01(\x04R\x13requestHead\
    ersBytes\x12,\n\x12request_body_bytes\x18\x0c\x20\x01(\x04R\x10requestBo\
    dyBytes\x12k\n\x0frequest_headers\x18\r\x20\x03(\x0b2B.envoy.data.access\
    log.v2.HTTPRequestProperties.RequestHeadersEntryR\x0erequestHeaders\x1aA\
    \n\x13RequestHeadersEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\
    \x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"\xe3\x04\n\
    \x16HTTPResponseProperties\x12A\n\rresponse_code\x18\x01\x20\x01(\x0b2\
    \x1c.google.protobuf.UInt32ValueR\x0cresponseCode\x124\n\x16response_hea\
    ders_bytes\x18\x02\x20\x01(\x04R\x14responseHeadersBytes\x12.\n\x13respo\
    nse_body_bytes\x18\x03\x20\x01(\x04R\x11responseBodyBytes\x12o\n\x10resp\
    onse_headers\x18\x04\x20\x03(\x0b2D.envoy.data.accesslog.v2.HTTPResponse\
    Properties.ResponseHeadersEntryR\x0fresponseHeaders\x12r\n\x11response_t\
    railers\x18\x05\x20\x03(\x0b2E.envoy.data.accesslog.v2.HTTPResponsePrope\
    rties.ResponseTrailersEntryR\x10responseTrailers\x122\n\x15response_code\
    _details\x18\x06\x20\x01(\tR\x13responseCodeDetails\x1aB\n\x14ResponseHe\
    adersEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05valu\
    e\x18\x02\x20\x01(\tR\x05value:\x028\x01\x1aC\n\x15ResponseTrailersEntry\
    \x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\
    \x20\x01(\tR\x05value:\x028\x01BA\n%io.envoyproxy.envoy.data.accesslog.v\
    2B\x0eAccesslogProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
