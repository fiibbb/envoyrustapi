// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/type/matcher/v3/metadata.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct MetadataMatcher {
    // message fields
    pub filter: ::std::string::String,
    pub path: ::protobuf::RepeatedField<MetadataMatcher_PathSegment>,
    pub value: ::protobuf::SingularPtrField<super::value::ValueMatcher>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MetadataMatcher {
    fn default() -> &'a MetadataMatcher {
        <MetadataMatcher as ::protobuf::Message>::default_instance()
    }
}

impl MetadataMatcher {
    pub fn new() -> MetadataMatcher {
        ::std::default::Default::default()
    }

    // string filter = 1;


    pub fn get_filter(&self) -> &str {
        &self.filter
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: ::std::string::String) {
        self.filter = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut ::std::string::String {
        &mut self.filter
    }

    // Take field
    pub fn take_filter(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.filter, ::std::string::String::new())
    }

    // repeated .envoy.type.matcher.v3.MetadataMatcher.PathSegment path = 2;


    pub fn get_path(&self) -> &[MetadataMatcher_PathSegment] {
        &self.path
    }
    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::protobuf::RepeatedField<MetadataMatcher_PathSegment>) {
        self.path = v;
    }

    // Mutable pointer to the field.
    pub fn mut_path(&mut self) -> &mut ::protobuf::RepeatedField<MetadataMatcher_PathSegment> {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::protobuf::RepeatedField<MetadataMatcher_PathSegment> {
        ::std::mem::replace(&mut self.path, ::protobuf::RepeatedField::new())
    }

    // .envoy.type.matcher.v3.ValueMatcher value = 3;


    pub fn get_value(&self) -> &super::value::ValueMatcher {
        self.value.as_ref().unwrap_or_else(|| <super::value::ValueMatcher as ::protobuf::Message>::default_instance())
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: super::value::ValueMatcher) {
        self.value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut super::value::ValueMatcher {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> super::value::ValueMatcher {
        self.value.take().unwrap_or_else(|| super::value::ValueMatcher::new())
    }
}

impl ::protobuf::Message for MetadataMatcher {
    fn is_initialized(&self) -> bool {
        for v in &self.path {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.value {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.filter)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.path)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.filter.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.filter);
        }
        for value in &self.path {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.filter.is_empty() {
            os.write_string(1, &self.filter)?;
        }
        for v in &self.path {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.value.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MetadataMatcher {
        MetadataMatcher::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "filter",
                |m: &MetadataMatcher| { &m.filter },
                |m: &mut MetadataMatcher| { &mut m.filter },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MetadataMatcher_PathSegment>>(
                "path",
                |m: &MetadataMatcher| { &m.path },
                |m: &mut MetadataMatcher| { &mut m.path },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::value::ValueMatcher>>(
                "value",
                |m: &MetadataMatcher| { &m.value },
                |m: &mut MetadataMatcher| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MetadataMatcher>(
                "MetadataMatcher",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MetadataMatcher {
        static instance: ::protobuf::rt::LazyV2<MetadataMatcher> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MetadataMatcher::new)
    }
}

impl ::protobuf::Clear for MetadataMatcher {
    fn clear(&mut self) {
        self.filter.clear();
        self.path.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MetadataMatcher {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetadataMatcher {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MetadataMatcher_PathSegment {
    // message oneof groups
    pub segment: ::std::option::Option<MetadataMatcher_PathSegment_oneof_segment>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MetadataMatcher_PathSegment {
    fn default() -> &'a MetadataMatcher_PathSegment {
        <MetadataMatcher_PathSegment as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum MetadataMatcher_PathSegment_oneof_segment {
    key(::std::string::String),
}

impl MetadataMatcher_PathSegment {
    pub fn new() -> MetadataMatcher_PathSegment {
        ::std::default::Default::default()
    }

    // string key = 1;


    pub fn get_key(&self) -> &str {
        match self.segment {
            ::std::option::Option::Some(MetadataMatcher_PathSegment_oneof_segment::key(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_key(&mut self) {
        self.segment = ::std::option::Option::None;
    }

    pub fn has_key(&self) -> bool {
        match self.segment {
            ::std::option::Option::Some(MetadataMatcher_PathSegment_oneof_segment::key(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::string::String) {
        self.segment = ::std::option::Option::Some(MetadataMatcher_PathSegment_oneof_segment::key(v))
    }

    // Mutable pointer to the field.
    pub fn mut_key(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(MetadataMatcher_PathSegment_oneof_segment::key(_)) = self.segment {
        } else {
            self.segment = ::std::option::Option::Some(MetadataMatcher_PathSegment_oneof_segment::key(::std::string::String::new()));
        }
        match self.segment {
            ::std::option::Option::Some(MetadataMatcher_PathSegment_oneof_segment::key(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::string::String {
        if self.has_key() {
            match self.segment.take() {
                ::std::option::Option::Some(MetadataMatcher_PathSegment_oneof_segment::key(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }
}

impl ::protobuf::Message for MetadataMatcher_PathSegment {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.segment = ::std::option::Option::Some(MetadataMatcher_PathSegment_oneof_segment::key(is.read_string()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.segment {
            match v {
                &MetadataMatcher_PathSegment_oneof_segment::key(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.segment {
            match v {
                &MetadataMatcher_PathSegment_oneof_segment::key(ref v) => {
                    os.write_string(1, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MetadataMatcher_PathSegment {
        MetadataMatcher_PathSegment::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "key",
                MetadataMatcher_PathSegment::has_key,
                MetadataMatcher_PathSegment::get_key,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MetadataMatcher_PathSegment>(
                "MetadataMatcher.PathSegment",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MetadataMatcher_PathSegment {
        static instance: ::protobuf::rt::LazyV2<MetadataMatcher_PathSegment> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MetadataMatcher_PathSegment::new)
    }
}

impl ::protobuf::Clear for MetadataMatcher_PathSegment {
    fn clear(&mut self) {
        self.segment = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MetadataMatcher_PathSegment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetadataMatcher_PathSegment {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$envoy/type/matcher/v3/metadata.proto\x12\x15envoy.type.matcher.v3\x1a\
    !envoy/type/matcher/v3/value.proto\x1a\x1dudpa/annotations/status.proto\
    \x1a!udpa/annotations/versioning.proto\x1a\x17validate/validate.proto\"\
    \xe7\x02\n\x0fMetadataMatcher\x12\x1f\n\x06filter\x18\x01\x20\x01(\tR\
    \x06filterB\x07\xfaB\x04r\x02\x10\x01\x12P\n\x04path\x18\x02\x20\x03(\
    \x0b22.envoy.type.matcher.v3.MetadataMatcher.PathSegmentR\x04pathB\x08\
    \xfaB\x05\x92\x01\x02\x08\x01\x12C\n\x05value\x18\x03\x20\x01(\x0b2#.env\
    oy.type.matcher.v3.ValueMatcherR\x05valueB\x08\xfaB\x05\x8a\x01\x02\x10\
    \x01\x1aq\n\x0bPathSegment\x12\x1b\n\x03key\x18\x01\x20\x01(\tH\0R\x03ke\
    yB\x07\xfaB\x04r\x02\x10\x01B\x0e\n\x07segment\x12\x03\xf8B\x01:5\x9a\
    \xc5\x88\x1e0\n.envoy.type.matcher.MetadataMatcher.PathSegment:)\x9a\xc5\
    \x88\x1e$\n\"envoy.type.matcher.MetadataMatcherB>\n#io.envoyproxy.envoy.\
    type.matcher.v3B\rMetadataProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\x02b\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
