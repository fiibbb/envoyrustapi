// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/filter/network/dubbo_proxy/v2alpha1/route.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct RouteConfiguration {
    // message fields
    pub name: ::std::string::String,
    pub interface: ::std::string::String,
    pub group: ::std::string::String,
    pub version: ::std::string::String,
    pub routes: ::protobuf::RepeatedField<Route>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RouteConfiguration {
    fn default() -> &'a RouteConfiguration {
        <RouteConfiguration as ::protobuf::Message>::default_instance()
    }
}

impl RouteConfiguration {
    pub fn new() -> RouteConfiguration {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string interface = 2;


    pub fn get_interface(&self) -> &str {
        &self.interface
    }
    pub fn clear_interface(&mut self) {
        self.interface.clear();
    }

    // Param is passed by value, moved
    pub fn set_interface(&mut self, v: ::std::string::String) {
        self.interface = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interface(&mut self) -> &mut ::std::string::String {
        &mut self.interface
    }

    // Take field
    pub fn take_interface(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.interface, ::std::string::String::new())
    }

    // string group = 3;


    pub fn get_group(&self) -> &str {
        &self.group
    }
    pub fn clear_group(&mut self) {
        self.group.clear();
    }

    // Param is passed by value, moved
    pub fn set_group(&mut self, v: ::std::string::String) {
        self.group = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_group(&mut self) -> &mut ::std::string::String {
        &mut self.group
    }

    // Take field
    pub fn take_group(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.group, ::std::string::String::new())
    }

    // string version = 4;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    // repeated .envoy.config.filter.network.dubbo_proxy.v2alpha1.Route routes = 5;


    pub fn get_routes(&self) -> &[Route] {
        &self.routes
    }
    pub fn clear_routes(&mut self) {
        self.routes.clear();
    }

    // Param is passed by value, moved
    pub fn set_routes(&mut self, v: ::protobuf::RepeatedField<Route>) {
        self.routes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_routes(&mut self) -> &mut ::protobuf::RepeatedField<Route> {
        &mut self.routes
    }

    // Take field
    pub fn take_routes(&mut self) -> ::protobuf::RepeatedField<Route> {
        ::std::mem::replace(&mut self.routes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RouteConfiguration {
    fn is_initialized(&self) -> bool {
        for v in &self.routes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.interface)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.group)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.routes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.interface.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.interface);
        }
        if !self.group.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.group);
        }
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.version);
        }
        for value in &self.routes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.interface.is_empty() {
            os.write_string(2, &self.interface)?;
        }
        if !self.group.is_empty() {
            os.write_string(3, &self.group)?;
        }
        if !self.version.is_empty() {
            os.write_string(4, &self.version)?;
        }
        for v in &self.routes {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RouteConfiguration {
        RouteConfiguration::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &RouteConfiguration| { &m.name },
                |m: &mut RouteConfiguration| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "interface",
                |m: &RouteConfiguration| { &m.interface },
                |m: &mut RouteConfiguration| { &mut m.interface },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "group",
                |m: &RouteConfiguration| { &m.group },
                |m: &mut RouteConfiguration| { &mut m.group },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &RouteConfiguration| { &m.version },
                |m: &mut RouteConfiguration| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Route>>(
                "routes",
                |m: &RouteConfiguration| { &m.routes },
                |m: &mut RouteConfiguration| { &mut m.routes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RouteConfiguration>(
                "RouteConfiguration",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RouteConfiguration {
        static instance: ::protobuf::rt::LazyV2<RouteConfiguration> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RouteConfiguration::new)
    }
}

impl ::protobuf::Clear for RouteConfiguration {
    fn clear(&mut self) {
        self.name.clear();
        self.interface.clear();
        self.group.clear();
        self.version.clear();
        self.routes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RouteConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RouteConfiguration {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Route {
    // message fields
    pub field_match: ::protobuf::SingularPtrField<RouteMatch>,
    pub route: ::protobuf::SingularPtrField<RouteAction>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Route {
    fn default() -> &'a Route {
        <Route as ::protobuf::Message>::default_instance()
    }
}

impl Route {
    pub fn new() -> Route {
        ::std::default::Default::default()
    }

    // .envoy.config.filter.network.dubbo_proxy.v2alpha1.RouteMatch match = 1;


    pub fn get_field_match(&self) -> &RouteMatch {
        self.field_match.as_ref().unwrap_or_else(|| <RouteMatch as ::protobuf::Message>::default_instance())
    }
    pub fn clear_field_match(&mut self) {
        self.field_match.clear();
    }

    pub fn has_field_match(&self) -> bool {
        self.field_match.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_match(&mut self, v: RouteMatch) {
        self.field_match = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_match(&mut self) -> &mut RouteMatch {
        if self.field_match.is_none() {
            self.field_match.set_default();
        }
        self.field_match.as_mut().unwrap()
    }

    // Take field
    pub fn take_field_match(&mut self) -> RouteMatch {
        self.field_match.take().unwrap_or_else(|| RouteMatch::new())
    }

    // .envoy.config.filter.network.dubbo_proxy.v2alpha1.RouteAction route = 2;


    pub fn get_route(&self) -> &RouteAction {
        self.route.as_ref().unwrap_or_else(|| <RouteAction as ::protobuf::Message>::default_instance())
    }
    pub fn clear_route(&mut self) {
        self.route.clear();
    }

    pub fn has_route(&self) -> bool {
        self.route.is_some()
    }

    // Param is passed by value, moved
    pub fn set_route(&mut self, v: RouteAction) {
        self.route = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_route(&mut self) -> &mut RouteAction {
        if self.route.is_none() {
            self.route.set_default();
        }
        self.route.as_mut().unwrap()
    }

    // Take field
    pub fn take_route(&mut self) -> RouteAction {
        self.route.take().unwrap_or_else(|| RouteAction::new())
    }
}

impl ::protobuf::Message for Route {
    fn is_initialized(&self) -> bool {
        for v in &self.field_match {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.route {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.field_match)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.route)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.field_match.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.route.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.field_match.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.route.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Route {
        Route::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RouteMatch>>(
                "match",
                |m: &Route| { &m.field_match },
                |m: &mut Route| { &mut m.field_match },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RouteAction>>(
                "route",
                |m: &Route| { &m.route },
                |m: &mut Route| { &mut m.route },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Route>(
                "Route",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Route {
        static instance: ::protobuf::rt::LazyV2<Route> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Route::new)
    }
}

impl ::protobuf::Clear for Route {
    fn clear(&mut self) {
        self.field_match.clear();
        self.route.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Route {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Route {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RouteMatch {
    // message fields
    pub method: ::protobuf::SingularPtrField<MethodMatch>,
    pub headers: ::protobuf::RepeatedField<super::route_components::HeaderMatcher>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RouteMatch {
    fn default() -> &'a RouteMatch {
        <RouteMatch as ::protobuf::Message>::default_instance()
    }
}

impl RouteMatch {
    pub fn new() -> RouteMatch {
        ::std::default::Default::default()
    }

    // .envoy.config.filter.network.dubbo_proxy.v2alpha1.MethodMatch method = 1;


    pub fn get_method(&self) -> &MethodMatch {
        self.method.as_ref().unwrap_or_else(|| <MethodMatch as ::protobuf::Message>::default_instance())
    }
    pub fn clear_method(&mut self) {
        self.method.clear();
    }

    pub fn has_method(&self) -> bool {
        self.method.is_some()
    }

    // Param is passed by value, moved
    pub fn set_method(&mut self, v: MethodMatch) {
        self.method = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_method(&mut self) -> &mut MethodMatch {
        if self.method.is_none() {
            self.method.set_default();
        }
        self.method.as_mut().unwrap()
    }

    // Take field
    pub fn take_method(&mut self) -> MethodMatch {
        self.method.take().unwrap_or_else(|| MethodMatch::new())
    }

    // repeated .envoy.api.v2.route.HeaderMatcher headers = 2;


    pub fn get_headers(&self) -> &[super::route_components::HeaderMatcher] {
        &self.headers
    }
    pub fn clear_headers(&mut self) {
        self.headers.clear();
    }

    // Param is passed by value, moved
    pub fn set_headers(&mut self, v: ::protobuf::RepeatedField<super::route_components::HeaderMatcher>) {
        self.headers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_headers(&mut self) -> &mut ::protobuf::RepeatedField<super::route_components::HeaderMatcher> {
        &mut self.headers
    }

    // Take field
    pub fn take_headers(&mut self) -> ::protobuf::RepeatedField<super::route_components::HeaderMatcher> {
        ::std::mem::replace(&mut self.headers, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RouteMatch {
    fn is_initialized(&self) -> bool {
        for v in &self.method {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.headers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.method)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.headers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.method.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.headers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.method.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.headers {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RouteMatch {
        RouteMatch::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MethodMatch>>(
                "method",
                |m: &RouteMatch| { &m.method },
                |m: &mut RouteMatch| { &mut m.method },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::route_components::HeaderMatcher>>(
                "headers",
                |m: &RouteMatch| { &m.headers },
                |m: &mut RouteMatch| { &mut m.headers },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RouteMatch>(
                "RouteMatch",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RouteMatch {
        static instance: ::protobuf::rt::LazyV2<RouteMatch> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RouteMatch::new)
    }
}

impl ::protobuf::Clear for RouteMatch {
    fn clear(&mut self) {
        self.method.clear();
        self.headers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RouteMatch {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RouteMatch {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RouteAction {
    // message oneof groups
    pub cluster_specifier: ::std::option::Option<RouteAction_oneof_cluster_specifier>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RouteAction {
    fn default() -> &'a RouteAction {
        <RouteAction as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum RouteAction_oneof_cluster_specifier {
    cluster(::std::string::String),
    weighted_clusters(super::route_components::WeightedCluster),
}

impl RouteAction {
    pub fn new() -> RouteAction {
        ::std::default::Default::default()
    }

    // string cluster = 1;


    pub fn get_cluster(&self) -> &str {
        match self.cluster_specifier {
            ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::cluster(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_cluster(&mut self) {
        self.cluster_specifier = ::std::option::Option::None;
    }

    pub fn has_cluster(&self) -> bool {
        match self.cluster_specifier {
            ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::cluster(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cluster(&mut self, v: ::std::string::String) {
        self.cluster_specifier = ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::cluster(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cluster(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::cluster(_)) = self.cluster_specifier {
        } else {
            self.cluster_specifier = ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::cluster(::std::string::String::new()));
        }
        match self.cluster_specifier {
            ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::cluster(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cluster(&mut self) -> ::std::string::String {
        if self.has_cluster() {
            match self.cluster_specifier.take() {
                ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::cluster(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .envoy.api.v2.route.WeightedCluster weighted_clusters = 2;


    pub fn get_weighted_clusters(&self) -> &super::route_components::WeightedCluster {
        match self.cluster_specifier {
            ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::weighted_clusters(ref v)) => v,
            _ => <super::route_components::WeightedCluster as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_weighted_clusters(&mut self) {
        self.cluster_specifier = ::std::option::Option::None;
    }

    pub fn has_weighted_clusters(&self) -> bool {
        match self.cluster_specifier {
            ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::weighted_clusters(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_weighted_clusters(&mut self, v: super::route_components::WeightedCluster) {
        self.cluster_specifier = ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::weighted_clusters(v))
    }

    // Mutable pointer to the field.
    pub fn mut_weighted_clusters(&mut self) -> &mut super::route_components::WeightedCluster {
        if let ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::weighted_clusters(_)) = self.cluster_specifier {
        } else {
            self.cluster_specifier = ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::weighted_clusters(super::route_components::WeightedCluster::new()));
        }
        match self.cluster_specifier {
            ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::weighted_clusters(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_weighted_clusters(&mut self) -> super::route_components::WeightedCluster {
        if self.has_weighted_clusters() {
            match self.cluster_specifier.take() {
                ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::weighted_clusters(v)) => v,
                _ => panic!(),
            }
        } else {
            super::route_components::WeightedCluster::new()
        }
    }
}

impl ::protobuf::Message for RouteAction {
    fn is_initialized(&self) -> bool {
        if let Some(RouteAction_oneof_cluster_specifier::weighted_clusters(ref v)) = self.cluster_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cluster_specifier = ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::cluster(is.read_string()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cluster_specifier = ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::weighted_clusters(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.cluster_specifier {
            match v {
                &RouteAction_oneof_cluster_specifier::cluster(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
                &RouteAction_oneof_cluster_specifier::weighted_clusters(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.cluster_specifier {
            match v {
                &RouteAction_oneof_cluster_specifier::cluster(ref v) => {
                    os.write_string(1, v)?;
                },
                &RouteAction_oneof_cluster_specifier::weighted_clusters(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RouteAction {
        RouteAction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "cluster",
                RouteAction::has_cluster,
                RouteAction::get_cluster,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::route_components::WeightedCluster>(
                "weighted_clusters",
                RouteAction::has_weighted_clusters,
                RouteAction::get_weighted_clusters,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RouteAction>(
                "RouteAction",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RouteAction {
        static instance: ::protobuf::rt::LazyV2<RouteAction> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RouteAction::new)
    }
}

impl ::protobuf::Clear for RouteAction {
    fn clear(&mut self) {
        self.cluster_specifier = ::std::option::Option::None;
        self.cluster_specifier = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RouteAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RouteAction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MethodMatch {
    // message fields
    pub name: ::protobuf::SingularPtrField<super::string::StringMatcher>,
    pub params_match: ::std::collections::HashMap<u32, MethodMatch_ParameterMatchSpecifier>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MethodMatch {
    fn default() -> &'a MethodMatch {
        <MethodMatch as ::protobuf::Message>::default_instance()
    }
}

impl MethodMatch {
    pub fn new() -> MethodMatch {
        ::std::default::Default::default()
    }

    // .envoy.type.matcher.StringMatcher name = 1;


    pub fn get_name(&self) -> &super::string::StringMatcher {
        self.name.as_ref().unwrap_or_else(|| <super::string::StringMatcher as ::protobuf::Message>::default_instance())
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    pub fn has_name(&self) -> bool {
        self.name.is_some()
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: super::string::StringMatcher) {
        self.name = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut super::string::StringMatcher {
        if self.name.is_none() {
            self.name.set_default();
        }
        self.name.as_mut().unwrap()
    }

    // Take field
    pub fn take_name(&mut self) -> super::string::StringMatcher {
        self.name.take().unwrap_or_else(|| super::string::StringMatcher::new())
    }

    // repeated .envoy.config.filter.network.dubbo_proxy.v2alpha1.MethodMatch.ParamsMatchEntry params_match = 2;


    pub fn get_params_match(&self) -> &::std::collections::HashMap<u32, MethodMatch_ParameterMatchSpecifier> {
        &self.params_match
    }
    pub fn clear_params_match(&mut self) {
        self.params_match.clear();
    }

    // Param is passed by value, moved
    pub fn set_params_match(&mut self, v: ::std::collections::HashMap<u32, MethodMatch_ParameterMatchSpecifier>) {
        self.params_match = v;
    }

    // Mutable pointer to the field.
    pub fn mut_params_match(&mut self) -> &mut ::std::collections::HashMap<u32, MethodMatch_ParameterMatchSpecifier> {
        &mut self.params_match
    }

    // Take field
    pub fn take_params_match(&mut self) -> ::std::collections::HashMap<u32, MethodMatch_ParameterMatchSpecifier> {
        ::std::mem::replace(&mut self.params_match, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for MethodMatch {
    fn is_initialized(&self) -> bool {
        for v in &self.name {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeUint32, ::protobuf::types::ProtobufTypeMessage<MethodMatch_ParameterMatchSpecifier>>(wire_type, is, &mut self.params_match)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.name.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeUint32, ::protobuf::types::ProtobufTypeMessage<MethodMatch_ParameterMatchSpecifier>>(2, &self.params_match);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.name.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeUint32, ::protobuf::types::ProtobufTypeMessage<MethodMatch_ParameterMatchSpecifier>>(2, &self.params_match, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MethodMatch {
        MethodMatch::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::string::StringMatcher>>(
                "name",
                |m: &MethodMatch| { &m.name },
                |m: &mut MethodMatch| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeUint32, ::protobuf::types::ProtobufTypeMessage<MethodMatch_ParameterMatchSpecifier>>(
                "params_match",
                |m: &MethodMatch| { &m.params_match },
                |m: &mut MethodMatch| { &mut m.params_match },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MethodMatch>(
                "MethodMatch",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MethodMatch {
        static instance: ::protobuf::rt::LazyV2<MethodMatch> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MethodMatch::new)
    }
}

impl ::protobuf::Clear for MethodMatch {
    fn clear(&mut self) {
        self.name.clear();
        self.params_match.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MethodMatch {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MethodMatch {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MethodMatch_ParameterMatchSpecifier {
    // message oneof groups
    pub parameter_match_specifier: ::std::option::Option<MethodMatch_ParameterMatchSpecifier_oneof_parameter_match_specifier>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MethodMatch_ParameterMatchSpecifier {
    fn default() -> &'a MethodMatch_ParameterMatchSpecifier {
        <MethodMatch_ParameterMatchSpecifier as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum MethodMatch_ParameterMatchSpecifier_oneof_parameter_match_specifier {
    exact_match(::std::string::String),
    range_match(super::range::Int64Range),
}

impl MethodMatch_ParameterMatchSpecifier {
    pub fn new() -> MethodMatch_ParameterMatchSpecifier {
        ::std::default::Default::default()
    }

    // string exact_match = 3;


    pub fn get_exact_match(&self) -> &str {
        match self.parameter_match_specifier {
            ::std::option::Option::Some(MethodMatch_ParameterMatchSpecifier_oneof_parameter_match_specifier::exact_match(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_exact_match(&mut self) {
        self.parameter_match_specifier = ::std::option::Option::None;
    }

    pub fn has_exact_match(&self) -> bool {
        match self.parameter_match_specifier {
            ::std::option::Option::Some(MethodMatch_ParameterMatchSpecifier_oneof_parameter_match_specifier::exact_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_exact_match(&mut self, v: ::std::string::String) {
        self.parameter_match_specifier = ::std::option::Option::Some(MethodMatch_ParameterMatchSpecifier_oneof_parameter_match_specifier::exact_match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_exact_match(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(MethodMatch_ParameterMatchSpecifier_oneof_parameter_match_specifier::exact_match(_)) = self.parameter_match_specifier {
        } else {
            self.parameter_match_specifier = ::std::option::Option::Some(MethodMatch_ParameterMatchSpecifier_oneof_parameter_match_specifier::exact_match(::std::string::String::new()));
        }
        match self.parameter_match_specifier {
            ::std::option::Option::Some(MethodMatch_ParameterMatchSpecifier_oneof_parameter_match_specifier::exact_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_exact_match(&mut self) -> ::std::string::String {
        if self.has_exact_match() {
            match self.parameter_match_specifier.take() {
                ::std::option::Option::Some(MethodMatch_ParameterMatchSpecifier_oneof_parameter_match_specifier::exact_match(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .envoy.type.Int64Range range_match = 4;


    pub fn get_range_match(&self) -> &super::range::Int64Range {
        match self.parameter_match_specifier {
            ::std::option::Option::Some(MethodMatch_ParameterMatchSpecifier_oneof_parameter_match_specifier::range_match(ref v)) => v,
            _ => <super::range::Int64Range as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_range_match(&mut self) {
        self.parameter_match_specifier = ::std::option::Option::None;
    }

    pub fn has_range_match(&self) -> bool {
        match self.parameter_match_specifier {
            ::std::option::Option::Some(MethodMatch_ParameterMatchSpecifier_oneof_parameter_match_specifier::range_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_range_match(&mut self, v: super::range::Int64Range) {
        self.parameter_match_specifier = ::std::option::Option::Some(MethodMatch_ParameterMatchSpecifier_oneof_parameter_match_specifier::range_match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_range_match(&mut self) -> &mut super::range::Int64Range {
        if let ::std::option::Option::Some(MethodMatch_ParameterMatchSpecifier_oneof_parameter_match_specifier::range_match(_)) = self.parameter_match_specifier {
        } else {
            self.parameter_match_specifier = ::std::option::Option::Some(MethodMatch_ParameterMatchSpecifier_oneof_parameter_match_specifier::range_match(super::range::Int64Range::new()));
        }
        match self.parameter_match_specifier {
            ::std::option::Option::Some(MethodMatch_ParameterMatchSpecifier_oneof_parameter_match_specifier::range_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_range_match(&mut self) -> super::range::Int64Range {
        if self.has_range_match() {
            match self.parameter_match_specifier.take() {
                ::std::option::Option::Some(MethodMatch_ParameterMatchSpecifier_oneof_parameter_match_specifier::range_match(v)) => v,
                _ => panic!(),
            }
        } else {
            super::range::Int64Range::new()
        }
    }
}

impl ::protobuf::Message for MethodMatch_ParameterMatchSpecifier {
    fn is_initialized(&self) -> bool {
        if let Some(MethodMatch_ParameterMatchSpecifier_oneof_parameter_match_specifier::range_match(ref v)) = self.parameter_match_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.parameter_match_specifier = ::std::option::Option::Some(MethodMatch_ParameterMatchSpecifier_oneof_parameter_match_specifier::exact_match(is.read_string()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.parameter_match_specifier = ::std::option::Option::Some(MethodMatch_ParameterMatchSpecifier_oneof_parameter_match_specifier::range_match(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.parameter_match_specifier {
            match v {
                &MethodMatch_ParameterMatchSpecifier_oneof_parameter_match_specifier::exact_match(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
                &MethodMatch_ParameterMatchSpecifier_oneof_parameter_match_specifier::range_match(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.parameter_match_specifier {
            match v {
                &MethodMatch_ParameterMatchSpecifier_oneof_parameter_match_specifier::exact_match(ref v) => {
                    os.write_string(3, v)?;
                },
                &MethodMatch_ParameterMatchSpecifier_oneof_parameter_match_specifier::range_match(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MethodMatch_ParameterMatchSpecifier {
        MethodMatch_ParameterMatchSpecifier::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "exact_match",
                MethodMatch_ParameterMatchSpecifier::has_exact_match,
                MethodMatch_ParameterMatchSpecifier::get_exact_match,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::range::Int64Range>(
                "range_match",
                MethodMatch_ParameterMatchSpecifier::has_range_match,
                MethodMatch_ParameterMatchSpecifier::get_range_match,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MethodMatch_ParameterMatchSpecifier>(
                "MethodMatch.ParameterMatchSpecifier",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MethodMatch_ParameterMatchSpecifier {
        static instance: ::protobuf::rt::LazyV2<MethodMatch_ParameterMatchSpecifier> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MethodMatch_ParameterMatchSpecifier::new)
    }
}

impl ::protobuf::Clear for MethodMatch_ParameterMatchSpecifier {
    fn clear(&mut self) {
        self.parameter_match_specifier = ::std::option::Option::None;
        self.parameter_match_specifier = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MethodMatch_ParameterMatchSpecifier {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MethodMatch_ParameterMatchSpecifier {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n<envoy/config/filter/network/dubbo_proxy/v2alpha1/route.proto\x120envo\
    y.config.filter.network.dubbo_proxy.v2alpha1\x1a)envoy/api/v2/route/rout\
    e_components.proto\x1a\x1fenvoy/type/matcher/string.proto\x1a\x16envoy/t\
    ype/range.proto\x1a\x1eudpa/annotations/migrate.proto\x1a\x1dudpa/annota\
    tions/status.proto\x1a\x17validate/validate.proto\"\xc7\x01\n\x12RouteCo\
    nfiguration\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x1c\n\tint\
    erface\x18\x02\x20\x01(\tR\tinterface\x12\x14\n\x05group\x18\x03\x20\x01\
    (\tR\x05group\x12\x18\n\x07version\x18\x04\x20\x01(\tR\x07version\x12O\n\
    \x06routes\x18\x05\x20\x03(\x0b27.envoy.config.filter.network.dubbo_prox\
    y.v2alpha1.RouteR\x06routes\"\xc4\x01\n\x05Route\x12\\\n\x05match\x18\
    \x01\x20\x01(\x0b2<.envoy.config.filter.network.dubbo_proxy.v2alpha1.Rou\
    teMatchR\x05matchB\x08\xfaB\x05\x8a\x01\x02\x10\x01\x12]\n\x05route\x18\
    \x02\x20\x01(\x0b2=.envoy.config.filter.network.dubbo_proxy.v2alpha1.Rou\
    teActionR\x05routeB\x08\xfaB\x05\x8a\x01\x02\x10\x01\"\xa0\x01\n\nRouteM\
    atch\x12U\n\x06method\x18\x01\x20\x01(\x0b2=.envoy.config.filter.network\
    .dubbo_proxy.v2alpha1.MethodMatchR\x06method\x12;\n\x07headers\x18\x02\
    \x20\x03(\x0b2!.envoy.api.v2.route.HeaderMatcherR\x07headers\"\x97\x01\n\
    \x0bRouteAction\x12\x1a\n\x07cluster\x18\x01\x20\x01(\tH\0R\x07cluster\
    \x12R\n\x11weighted_clusters\x18\x02\x20\x01(\x0b2#.envoy.api.v2.route.W\
    eightedClusterH\0R\x10weightedClustersB\x18\n\x11cluster_specifier\x12\
    \x03\xf8B\x01\"\xe6\x03\n\x0bMethodMatch\x125\n\x04name\x18\x01\x20\x01(\
    \x0b2!.envoy.type.matcher.StringMatcherR\x04name\x12q\n\x0cparams_match\
    \x18\x02\x20\x03(\x0b2N.envoy.config.filter.network.dubbo_proxy.v2alpha1\
    .MethodMatch.ParamsMatchEntryR\x0bparamsMatch\x1a\x94\x01\n\x17Parameter\
    MatchSpecifier\x12!\n\x0bexact_match\x18\x03\x20\x01(\tH\0R\nexactMatch\
    \x129\n\x0brange_match\x18\x04\x20\x01(\x0b2\x16.envoy.type.Int64RangeH\
    \0R\nrangeMatchB\x1b\n\x19parameter_match_specifier\x1a\x95\x01\n\x10Par\
    amsMatchEntry\x12\x10\n\x03key\x18\x01\x20\x01(\rR\x03key\x12k\n\x05valu\
    e\x18\x02\x20\x01(\x0b2U.envoy.config.filter.network.dubbo_proxy.v2alpha\
    1.MethodMatch.ParameterMatchSpecifierR\x05value:\x028\x01B\x8d\x01\n>io.\
    envoyproxy.envoy.config.filter.network.dubbo_proxy.v2alpha1B\nRouteProto\
    P\x01\xba\x80\xc8\xd1\x06\x02\x10\x01\xf2\x98\xfe\x8f\x051\x12/envoy.ext\
    ensions.filters.network.dubbo_proxy.v3b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
