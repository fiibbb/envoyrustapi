// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/filter/network/thrift_proxy/v2alpha1/route.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct RouteConfiguration {
    // message fields
    pub name: ::std::string::String,
    pub routes: ::protobuf::RepeatedField<Route>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RouteConfiguration {
    fn default() -> &'a RouteConfiguration {
        <RouteConfiguration as ::protobuf::Message>::default_instance()
    }
}

impl RouteConfiguration {
    pub fn new() -> RouteConfiguration {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // repeated .envoy.config.filter.network.thrift_proxy.v2alpha1.Route routes = 2;


    pub fn get_routes(&self) -> &[Route] {
        &self.routes
    }
    pub fn clear_routes(&mut self) {
        self.routes.clear();
    }

    // Param is passed by value, moved
    pub fn set_routes(&mut self, v: ::protobuf::RepeatedField<Route>) {
        self.routes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_routes(&mut self) -> &mut ::protobuf::RepeatedField<Route> {
        &mut self.routes
    }

    // Take field
    pub fn take_routes(&mut self) -> ::protobuf::RepeatedField<Route> {
        ::std::mem::replace(&mut self.routes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RouteConfiguration {
    fn is_initialized(&self) -> bool {
        for v in &self.routes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.routes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        for value in &self.routes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        for v in &self.routes {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RouteConfiguration {
        RouteConfiguration::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &RouteConfiguration| { &m.name },
                |m: &mut RouteConfiguration| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Route>>(
                "routes",
                |m: &RouteConfiguration| { &m.routes },
                |m: &mut RouteConfiguration| { &mut m.routes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RouteConfiguration>(
                "RouteConfiguration",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RouteConfiguration {
        static instance: ::protobuf::rt::LazyV2<RouteConfiguration> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RouteConfiguration::new)
    }
}

impl ::protobuf::Clear for RouteConfiguration {
    fn clear(&mut self) {
        self.name.clear();
        self.routes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RouteConfiguration {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RouteConfiguration {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Route {
    // message fields
    pub field_match: ::protobuf::SingularPtrField<RouteMatch>,
    pub route: ::protobuf::SingularPtrField<RouteAction>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Route {
    fn default() -> &'a Route {
        <Route as ::protobuf::Message>::default_instance()
    }
}

impl Route {
    pub fn new() -> Route {
        ::std::default::Default::default()
    }

    // .envoy.config.filter.network.thrift_proxy.v2alpha1.RouteMatch match = 1;


    pub fn get_field_match(&self) -> &RouteMatch {
        self.field_match.as_ref().unwrap_or_else(|| <RouteMatch as ::protobuf::Message>::default_instance())
    }
    pub fn clear_field_match(&mut self) {
        self.field_match.clear();
    }

    pub fn has_field_match(&self) -> bool {
        self.field_match.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_match(&mut self, v: RouteMatch) {
        self.field_match = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_match(&mut self) -> &mut RouteMatch {
        if self.field_match.is_none() {
            self.field_match.set_default();
        }
        self.field_match.as_mut().unwrap()
    }

    // Take field
    pub fn take_field_match(&mut self) -> RouteMatch {
        self.field_match.take().unwrap_or_else(|| RouteMatch::new())
    }

    // .envoy.config.filter.network.thrift_proxy.v2alpha1.RouteAction route = 2;


    pub fn get_route(&self) -> &RouteAction {
        self.route.as_ref().unwrap_or_else(|| <RouteAction as ::protobuf::Message>::default_instance())
    }
    pub fn clear_route(&mut self) {
        self.route.clear();
    }

    pub fn has_route(&self) -> bool {
        self.route.is_some()
    }

    // Param is passed by value, moved
    pub fn set_route(&mut self, v: RouteAction) {
        self.route = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_route(&mut self) -> &mut RouteAction {
        if self.route.is_none() {
            self.route.set_default();
        }
        self.route.as_mut().unwrap()
    }

    // Take field
    pub fn take_route(&mut self) -> RouteAction {
        self.route.take().unwrap_or_else(|| RouteAction::new())
    }
}

impl ::protobuf::Message for Route {
    fn is_initialized(&self) -> bool {
        for v in &self.field_match {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.route {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.field_match)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.route)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.field_match.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.route.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.field_match.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.route.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Route {
        Route::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RouteMatch>>(
                "match",
                |m: &Route| { &m.field_match },
                |m: &mut Route| { &mut m.field_match },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RouteAction>>(
                "route",
                |m: &Route| { &m.route },
                |m: &mut Route| { &mut m.route },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Route>(
                "Route",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Route {
        static instance: ::protobuf::rt::LazyV2<Route> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Route::new)
    }
}

impl ::protobuf::Clear for Route {
    fn clear(&mut self) {
        self.field_match.clear();
        self.route.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Route {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Route {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RouteMatch {
    // message fields
    pub invert: bool,
    pub headers: ::protobuf::RepeatedField<super::route_components::HeaderMatcher>,
    // message oneof groups
    pub match_specifier: ::std::option::Option<RouteMatch_oneof_match_specifier>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RouteMatch {
    fn default() -> &'a RouteMatch {
        <RouteMatch as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum RouteMatch_oneof_match_specifier {
    method_name(::std::string::String),
    service_name(::std::string::String),
}

impl RouteMatch {
    pub fn new() -> RouteMatch {
        ::std::default::Default::default()
    }

    // string method_name = 1;


    pub fn get_method_name(&self) -> &str {
        match self.match_specifier {
            ::std::option::Option::Some(RouteMatch_oneof_match_specifier::method_name(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_method_name(&mut self) {
        self.match_specifier = ::std::option::Option::None;
    }

    pub fn has_method_name(&self) -> bool {
        match self.match_specifier {
            ::std::option::Option::Some(RouteMatch_oneof_match_specifier::method_name(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_method_name(&mut self, v: ::std::string::String) {
        self.match_specifier = ::std::option::Option::Some(RouteMatch_oneof_match_specifier::method_name(v))
    }

    // Mutable pointer to the field.
    pub fn mut_method_name(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(RouteMatch_oneof_match_specifier::method_name(_)) = self.match_specifier {
        } else {
            self.match_specifier = ::std::option::Option::Some(RouteMatch_oneof_match_specifier::method_name(::std::string::String::new()));
        }
        match self.match_specifier {
            ::std::option::Option::Some(RouteMatch_oneof_match_specifier::method_name(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_method_name(&mut self) -> ::std::string::String {
        if self.has_method_name() {
            match self.match_specifier.take() {
                ::std::option::Option::Some(RouteMatch_oneof_match_specifier::method_name(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string service_name = 2;


    pub fn get_service_name(&self) -> &str {
        match self.match_specifier {
            ::std::option::Option::Some(RouteMatch_oneof_match_specifier::service_name(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_service_name(&mut self) {
        self.match_specifier = ::std::option::Option::None;
    }

    pub fn has_service_name(&self) -> bool {
        match self.match_specifier {
            ::std::option::Option::Some(RouteMatch_oneof_match_specifier::service_name(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_service_name(&mut self, v: ::std::string::String) {
        self.match_specifier = ::std::option::Option::Some(RouteMatch_oneof_match_specifier::service_name(v))
    }

    // Mutable pointer to the field.
    pub fn mut_service_name(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(RouteMatch_oneof_match_specifier::service_name(_)) = self.match_specifier {
        } else {
            self.match_specifier = ::std::option::Option::Some(RouteMatch_oneof_match_specifier::service_name(::std::string::String::new()));
        }
        match self.match_specifier {
            ::std::option::Option::Some(RouteMatch_oneof_match_specifier::service_name(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_service_name(&mut self) -> ::std::string::String {
        if self.has_service_name() {
            match self.match_specifier.take() {
                ::std::option::Option::Some(RouteMatch_oneof_match_specifier::service_name(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // bool invert = 3;


    pub fn get_invert(&self) -> bool {
        self.invert
    }
    pub fn clear_invert(&mut self) {
        self.invert = false;
    }

    // Param is passed by value, moved
    pub fn set_invert(&mut self, v: bool) {
        self.invert = v;
    }

    // repeated .envoy.api.v2.route.HeaderMatcher headers = 4;


    pub fn get_headers(&self) -> &[super::route_components::HeaderMatcher] {
        &self.headers
    }
    pub fn clear_headers(&mut self) {
        self.headers.clear();
    }

    // Param is passed by value, moved
    pub fn set_headers(&mut self, v: ::protobuf::RepeatedField<super::route_components::HeaderMatcher>) {
        self.headers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_headers(&mut self) -> &mut ::protobuf::RepeatedField<super::route_components::HeaderMatcher> {
        &mut self.headers
    }

    // Take field
    pub fn take_headers(&mut self) -> ::protobuf::RepeatedField<super::route_components::HeaderMatcher> {
        ::std::mem::replace(&mut self.headers, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RouteMatch {
    fn is_initialized(&self) -> bool {
        for v in &self.headers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.match_specifier = ::std::option::Option::Some(RouteMatch_oneof_match_specifier::method_name(is.read_string()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.match_specifier = ::std::option::Option::Some(RouteMatch_oneof_match_specifier::service_name(is.read_string()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.invert = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.headers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.invert != false {
            my_size += 2;
        }
        for value in &self.headers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let ::std::option::Option::Some(ref v) = self.match_specifier {
            match v {
                &RouteMatch_oneof_match_specifier::method_name(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
                &RouteMatch_oneof_match_specifier::service_name(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.invert != false {
            os.write_bool(3, self.invert)?;
        }
        for v in &self.headers {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let ::std::option::Option::Some(ref v) = self.match_specifier {
            match v {
                &RouteMatch_oneof_match_specifier::method_name(ref v) => {
                    os.write_string(1, v)?;
                },
                &RouteMatch_oneof_match_specifier::service_name(ref v) => {
                    os.write_string(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RouteMatch {
        RouteMatch::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "method_name",
                RouteMatch::has_method_name,
                RouteMatch::get_method_name,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "service_name",
                RouteMatch::has_service_name,
                RouteMatch::get_service_name,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "invert",
                |m: &RouteMatch| { &m.invert },
                |m: &mut RouteMatch| { &mut m.invert },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::route_components::HeaderMatcher>>(
                "headers",
                |m: &RouteMatch| { &m.headers },
                |m: &mut RouteMatch| { &mut m.headers },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RouteMatch>(
                "RouteMatch",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RouteMatch {
        static instance: ::protobuf::rt::LazyV2<RouteMatch> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RouteMatch::new)
    }
}

impl ::protobuf::Clear for RouteMatch {
    fn clear(&mut self) {
        self.match_specifier = ::std::option::Option::None;
        self.match_specifier = ::std::option::Option::None;
        self.invert = false;
        self.headers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RouteMatch {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RouteMatch {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RouteAction {
    // message fields
    pub metadata_match: ::protobuf::SingularPtrField<super::base::Metadata>,
    pub rate_limits: ::protobuf::RepeatedField<super::route_components::RateLimit>,
    pub strip_service_name: bool,
    // message oneof groups
    pub cluster_specifier: ::std::option::Option<RouteAction_oneof_cluster_specifier>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RouteAction {
    fn default() -> &'a RouteAction {
        <RouteAction as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum RouteAction_oneof_cluster_specifier {
    cluster(::std::string::String),
    weighted_clusters(WeightedCluster),
    cluster_header(::std::string::String),
}

impl RouteAction {
    pub fn new() -> RouteAction {
        ::std::default::Default::default()
    }

    // string cluster = 1;


    pub fn get_cluster(&self) -> &str {
        match self.cluster_specifier {
            ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::cluster(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_cluster(&mut self) {
        self.cluster_specifier = ::std::option::Option::None;
    }

    pub fn has_cluster(&self) -> bool {
        match self.cluster_specifier {
            ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::cluster(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cluster(&mut self, v: ::std::string::String) {
        self.cluster_specifier = ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::cluster(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cluster(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::cluster(_)) = self.cluster_specifier {
        } else {
            self.cluster_specifier = ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::cluster(::std::string::String::new()));
        }
        match self.cluster_specifier {
            ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::cluster(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cluster(&mut self) -> ::std::string::String {
        if self.has_cluster() {
            match self.cluster_specifier.take() {
                ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::cluster(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedCluster weighted_clusters = 2;


    pub fn get_weighted_clusters(&self) -> &WeightedCluster {
        match self.cluster_specifier {
            ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::weighted_clusters(ref v)) => v,
            _ => <WeightedCluster as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_weighted_clusters(&mut self) {
        self.cluster_specifier = ::std::option::Option::None;
    }

    pub fn has_weighted_clusters(&self) -> bool {
        match self.cluster_specifier {
            ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::weighted_clusters(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_weighted_clusters(&mut self, v: WeightedCluster) {
        self.cluster_specifier = ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::weighted_clusters(v))
    }

    // Mutable pointer to the field.
    pub fn mut_weighted_clusters(&mut self) -> &mut WeightedCluster {
        if let ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::weighted_clusters(_)) = self.cluster_specifier {
        } else {
            self.cluster_specifier = ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::weighted_clusters(WeightedCluster::new()));
        }
        match self.cluster_specifier {
            ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::weighted_clusters(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_weighted_clusters(&mut self) -> WeightedCluster {
        if self.has_weighted_clusters() {
            match self.cluster_specifier.take() {
                ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::weighted_clusters(v)) => v,
                _ => panic!(),
            }
        } else {
            WeightedCluster::new()
        }
    }

    // string cluster_header = 6;


    pub fn get_cluster_header(&self) -> &str {
        match self.cluster_specifier {
            ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::cluster_header(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_cluster_header(&mut self) {
        self.cluster_specifier = ::std::option::Option::None;
    }

    pub fn has_cluster_header(&self) -> bool {
        match self.cluster_specifier {
            ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::cluster_header(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cluster_header(&mut self, v: ::std::string::String) {
        self.cluster_specifier = ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::cluster_header(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cluster_header(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::cluster_header(_)) = self.cluster_specifier {
        } else {
            self.cluster_specifier = ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::cluster_header(::std::string::String::new()));
        }
        match self.cluster_specifier {
            ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::cluster_header(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cluster_header(&mut self) -> ::std::string::String {
        if self.has_cluster_header() {
            match self.cluster_specifier.take() {
                ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::cluster_header(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .envoy.api.v2.core.Metadata metadata_match = 3;


    pub fn get_metadata_match(&self) -> &super::base::Metadata {
        self.metadata_match.as_ref().unwrap_or_else(|| <super::base::Metadata as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metadata_match(&mut self) {
        self.metadata_match.clear();
    }

    pub fn has_metadata_match(&self) -> bool {
        self.metadata_match.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata_match(&mut self, v: super::base::Metadata) {
        self.metadata_match = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata_match(&mut self) -> &mut super::base::Metadata {
        if self.metadata_match.is_none() {
            self.metadata_match.set_default();
        }
        self.metadata_match.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata_match(&mut self) -> super::base::Metadata {
        self.metadata_match.take().unwrap_or_else(|| super::base::Metadata::new())
    }

    // repeated .envoy.api.v2.route.RateLimit rate_limits = 4;


    pub fn get_rate_limits(&self) -> &[super::route_components::RateLimit] {
        &self.rate_limits
    }
    pub fn clear_rate_limits(&mut self) {
        self.rate_limits.clear();
    }

    // Param is passed by value, moved
    pub fn set_rate_limits(&mut self, v: ::protobuf::RepeatedField<super::route_components::RateLimit>) {
        self.rate_limits = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rate_limits(&mut self) -> &mut ::protobuf::RepeatedField<super::route_components::RateLimit> {
        &mut self.rate_limits
    }

    // Take field
    pub fn take_rate_limits(&mut self) -> ::protobuf::RepeatedField<super::route_components::RateLimit> {
        ::std::mem::replace(&mut self.rate_limits, ::protobuf::RepeatedField::new())
    }

    // bool strip_service_name = 5;


    pub fn get_strip_service_name(&self) -> bool {
        self.strip_service_name
    }
    pub fn clear_strip_service_name(&mut self) {
        self.strip_service_name = false;
    }

    // Param is passed by value, moved
    pub fn set_strip_service_name(&mut self, v: bool) {
        self.strip_service_name = v;
    }
}

impl ::protobuf::Message for RouteAction {
    fn is_initialized(&self) -> bool {
        if let Some(RouteAction_oneof_cluster_specifier::weighted_clusters(ref v)) = self.cluster_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.metadata_match {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.rate_limits {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cluster_specifier = ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::cluster(is.read_string()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cluster_specifier = ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::weighted_clusters(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cluster_specifier = ::std::option::Option::Some(RouteAction_oneof_cluster_specifier::cluster_header(is.read_string()?));
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata_match)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rate_limits)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.strip_service_name = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.metadata_match.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.rate_limits {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.strip_service_name != false {
            my_size += 2;
        }
        if let ::std::option::Option::Some(ref v) = self.cluster_specifier {
            match v {
                &RouteAction_oneof_cluster_specifier::cluster(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
                &RouteAction_oneof_cluster_specifier::weighted_clusters(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &RouteAction_oneof_cluster_specifier::cluster_header(ref v) => {
                    my_size += ::protobuf::rt::string_size(6, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.metadata_match.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.rate_limits {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.strip_service_name != false {
            os.write_bool(5, self.strip_service_name)?;
        }
        if let ::std::option::Option::Some(ref v) = self.cluster_specifier {
            match v {
                &RouteAction_oneof_cluster_specifier::cluster(ref v) => {
                    os.write_string(1, v)?;
                },
                &RouteAction_oneof_cluster_specifier::weighted_clusters(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &RouteAction_oneof_cluster_specifier::cluster_header(ref v) => {
                    os.write_string(6, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RouteAction {
        RouteAction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "cluster",
                RouteAction::has_cluster,
                RouteAction::get_cluster,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, WeightedCluster>(
                "weighted_clusters",
                RouteAction::has_weighted_clusters,
                RouteAction::get_weighted_clusters,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "cluster_header",
                RouteAction::has_cluster_header,
                RouteAction::get_cluster_header,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Metadata>>(
                "metadata_match",
                |m: &RouteAction| { &m.metadata_match },
                |m: &mut RouteAction| { &mut m.metadata_match },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::route_components::RateLimit>>(
                "rate_limits",
                |m: &RouteAction| { &m.rate_limits },
                |m: &mut RouteAction| { &mut m.rate_limits },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "strip_service_name",
                |m: &RouteAction| { &m.strip_service_name },
                |m: &mut RouteAction| { &mut m.strip_service_name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RouteAction>(
                "RouteAction",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RouteAction {
        static instance: ::protobuf::rt::LazyV2<RouteAction> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RouteAction::new)
    }
}

impl ::protobuf::Clear for RouteAction {
    fn clear(&mut self) {
        self.cluster_specifier = ::std::option::Option::None;
        self.cluster_specifier = ::std::option::Option::None;
        self.cluster_specifier = ::std::option::Option::None;
        self.metadata_match.clear();
        self.rate_limits.clear();
        self.strip_service_name = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RouteAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RouteAction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WeightedCluster {
    // message fields
    pub clusters: ::protobuf::RepeatedField<WeightedCluster_ClusterWeight>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WeightedCluster {
    fn default() -> &'a WeightedCluster {
        <WeightedCluster as ::protobuf::Message>::default_instance()
    }
}

impl WeightedCluster {
    pub fn new() -> WeightedCluster {
        ::std::default::Default::default()
    }

    // repeated .envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedCluster.ClusterWeight clusters = 1;


    pub fn get_clusters(&self) -> &[WeightedCluster_ClusterWeight] {
        &self.clusters
    }
    pub fn clear_clusters(&mut self) {
        self.clusters.clear();
    }

    // Param is passed by value, moved
    pub fn set_clusters(&mut self, v: ::protobuf::RepeatedField<WeightedCluster_ClusterWeight>) {
        self.clusters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_clusters(&mut self) -> &mut ::protobuf::RepeatedField<WeightedCluster_ClusterWeight> {
        &mut self.clusters
    }

    // Take field
    pub fn take_clusters(&mut self) -> ::protobuf::RepeatedField<WeightedCluster_ClusterWeight> {
        ::std::mem::replace(&mut self.clusters, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for WeightedCluster {
    fn is_initialized(&self) -> bool {
        for v in &self.clusters {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.clusters)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.clusters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.clusters {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WeightedCluster {
        WeightedCluster::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<WeightedCluster_ClusterWeight>>(
                "clusters",
                |m: &WeightedCluster| { &m.clusters },
                |m: &mut WeightedCluster| { &mut m.clusters },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WeightedCluster>(
                "WeightedCluster",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WeightedCluster {
        static instance: ::protobuf::rt::LazyV2<WeightedCluster> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WeightedCluster::new)
    }
}

impl ::protobuf::Clear for WeightedCluster {
    fn clear(&mut self) {
        self.clusters.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WeightedCluster {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WeightedCluster {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WeightedCluster_ClusterWeight {
    // message fields
    pub name: ::std::string::String,
    pub weight: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub metadata_match: ::protobuf::SingularPtrField<super::base::Metadata>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WeightedCluster_ClusterWeight {
    fn default() -> &'a WeightedCluster_ClusterWeight {
        <WeightedCluster_ClusterWeight as ::protobuf::Message>::default_instance()
    }
}

impl WeightedCluster_ClusterWeight {
    pub fn new() -> WeightedCluster_ClusterWeight {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .google.protobuf.UInt32Value weight = 2;


    pub fn get_weight(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.weight.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_weight(&mut self) {
        self.weight.clear();
    }

    pub fn has_weight(&self) -> bool {
        self.weight.is_some()
    }

    // Param is passed by value, moved
    pub fn set_weight(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.weight = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_weight(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.weight.is_none() {
            self.weight.set_default();
        }
        self.weight.as_mut().unwrap()
    }

    // Take field
    pub fn take_weight(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.weight.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .envoy.api.v2.core.Metadata metadata_match = 3;


    pub fn get_metadata_match(&self) -> &super::base::Metadata {
        self.metadata_match.as_ref().unwrap_or_else(|| <super::base::Metadata as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metadata_match(&mut self) {
        self.metadata_match.clear();
    }

    pub fn has_metadata_match(&self) -> bool {
        self.metadata_match.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata_match(&mut self, v: super::base::Metadata) {
        self.metadata_match = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata_match(&mut self) -> &mut super::base::Metadata {
        if self.metadata_match.is_none() {
            self.metadata_match.set_default();
        }
        self.metadata_match.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata_match(&mut self) -> super::base::Metadata {
        self.metadata_match.take().unwrap_or_else(|| super::base::Metadata::new())
    }
}

impl ::protobuf::Message for WeightedCluster_ClusterWeight {
    fn is_initialized(&self) -> bool {
        for v in &self.weight {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.metadata_match {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.weight)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata_match)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(ref v) = self.weight.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.metadata_match.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(ref v) = self.weight.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.metadata_match.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WeightedCluster_ClusterWeight {
        WeightedCluster_ClusterWeight::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &WeightedCluster_ClusterWeight| { &m.name },
                |m: &mut WeightedCluster_ClusterWeight| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "weight",
                |m: &WeightedCluster_ClusterWeight| { &m.weight },
                |m: &mut WeightedCluster_ClusterWeight| { &mut m.weight },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Metadata>>(
                "metadata_match",
                |m: &WeightedCluster_ClusterWeight| { &m.metadata_match },
                |m: &mut WeightedCluster_ClusterWeight| { &mut m.metadata_match },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WeightedCluster_ClusterWeight>(
                "WeightedCluster.ClusterWeight",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WeightedCluster_ClusterWeight {
        static instance: ::protobuf::rt::LazyV2<WeightedCluster_ClusterWeight> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WeightedCluster_ClusterWeight::new)
    }
}

impl ::protobuf::Clear for WeightedCluster_ClusterWeight {
    fn clear(&mut self) {
        self.name.clear();
        self.weight.clear();
        self.metadata_match.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WeightedCluster_ClusterWeight {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WeightedCluster_ClusterWeight {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n=envoy/config/filter/network/thrift_proxy/v2alpha1/route.proto\x121env\
    oy.config.filter.network.thrift_proxy.v2alpha1\x1a\x1cenvoy/api/v2/core/\
    base.proto\x1a)envoy/api/v2/route/route_components.proto\x1a\x1egoogle/p\
    rotobuf/wrappers.proto\x1a\x1eudpa/annotations/migrate.proto\x1a\x1dudpa\
    /annotations/status.proto\x1a\x17validate/validate.proto\"z\n\x12RouteCo\
    nfiguration\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12P\n\x06rout\
    es\x18\x02\x20\x03(\x0b28.envoy.config.filter.network.thrift_proxy.v2alp\
    ha1.RouteR\x06routes\"\xc6\x01\n\x05Route\x12]\n\x05match\x18\x01\x20\
    \x01(\x0b2=.envoy.config.filter.network.thrift_proxy.v2alpha1.RouteMatch\
    R\x05matchB\x08\xfaB\x05\x8a\x01\x02\x10\x01\x12^\n\x05route\x18\x02\x20\
    \x01(\x0b2>.envoy.config.filter.network.thrift_proxy.v2alpha1.RouteActio\
    nR\x05routeB\x08\xfaB\x05\x8a\x01\x02\x10\x01\"\xc1\x01\n\nRouteMatch\
    \x12!\n\x0bmethod_name\x18\x01\x20\x01(\tH\0R\nmethodName\x12#\n\x0cserv\
    ice_name\x18\x02\x20\x01(\tH\0R\x0bserviceName\x12\x16\n\x06invert\x18\
    \x03\x20\x01(\x08R\x06invert\x12;\n\x07headers\x18\x04\x20\x03(\x0b2!.en\
    voy.api.v2.route.HeaderMatcherR\x07headersB\x16\n\x0fmatch_specifier\x12\
    \x03\xf8B\x01\"\xa3\x03\n\x0bRouteAction\x12#\n\x07cluster\x18\x01\x20\
    \x01(\tH\0R\x07clusterB\x07\xfaB\x04r\x02\x20\x01\x12q\n\x11weighted_clu\
    sters\x18\x02\x20\x01(\x0b2B.envoy.config.filter.network.thrift_proxy.v2\
    alpha1.WeightedClusterH\0R\x10weightedClusters\x120\n\x0ecluster_header\
    \x18\x06\x20\x01(\tH\0R\rclusterHeaderB\x07\xfaB\x04r\x02\x20\x01\x12B\n\
    \x0emetadata_match\x18\x03\x20\x01(\x0b2\x1b.envoy.api.v2.core.MetadataR\
    \rmetadataMatch\x12>\n\x0brate_limits\x18\x04\x20\x03(\x0b2\x1d.envoy.ap\
    i.v2.route.RateLimitR\nrateLimits\x12,\n\x12strip_service_name\x18\x05\
    \x20\x01(\x08R\x10stripServiceNameB\x18\n\x11cluster_specifier\x12\x03\
    \xf8B\x01\"\xbb\x02\n\x0fWeightedCluster\x12v\n\x08clusters\x18\x01\x20\
    \x03(\x0b2P.envoy.config.filter.network.thrift_proxy.v2alpha1.WeightedCl\
    uster.ClusterWeightR\x08clustersB\x08\xfaB\x05\x92\x01\x02\x08\x01\x1a\
    \xaf\x01\n\rClusterWeight\x12\x1b\n\x04name\x18\x01\x20\x01(\tR\x04nameB\
    \x07\xfaB\x04r\x02\x20\x01\x12=\n\x06weight\x18\x02\x20\x01(\x0b2\x1c.go\
    ogle.protobuf.UInt32ValueR\x06weightB\x07\xfaB\x04*\x02(\x01\x12B\n\x0em\
    etadata_match\x18\x03\x20\x01(\x0b2\x1b.envoy.api.v2.core.MetadataR\rmet\
    adataMatchB\x8f\x01\n?io.envoyproxy.envoy.config.filter.network.thrift_p\
    roxy.v2alpha1B\nRouteProtoP\x01\xf2\x98\xfe\x8f\x052\x120envoy.extension\
    s.filters.network.thrift_proxy.v3\xba\x80\xc8\xd1\x06\x02\x10\x01b\x06pr\
    oto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
