// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/filter/network/thrift_proxy/v2alpha1/thrift_proxy.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct ThriftProxy {
    // message fields
    pub transport: TransportType,
    pub protocol: ProtocolType,
    pub stat_prefix: ::std::string::String,
    pub route_config: ::protobuf::SingularPtrField<super::route::RouteConfiguration>,
    pub thrift_filters: ::protobuf::RepeatedField<ThriftFilter>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ThriftProxy {
    fn default() -> &'a ThriftProxy {
        <ThriftProxy as ::protobuf::Message>::default_instance()
    }
}

impl ThriftProxy {
    pub fn new() -> ThriftProxy {
        ::std::default::Default::default()
    }

    // .envoy.config.filter.network.thrift_proxy.v2alpha1.TransportType transport = 2;


    pub fn get_transport(&self) -> TransportType {
        self.transport
    }
    pub fn clear_transport(&mut self) {
        self.transport = TransportType::AUTO_TRANSPORT;
    }

    // Param is passed by value, moved
    pub fn set_transport(&mut self, v: TransportType) {
        self.transport = v;
    }

    // .envoy.config.filter.network.thrift_proxy.v2alpha1.ProtocolType protocol = 3;


    pub fn get_protocol(&self) -> ProtocolType {
        self.protocol
    }
    pub fn clear_protocol(&mut self) {
        self.protocol = ProtocolType::AUTO_PROTOCOL;
    }

    // Param is passed by value, moved
    pub fn set_protocol(&mut self, v: ProtocolType) {
        self.protocol = v;
    }

    // string stat_prefix = 1;


    pub fn get_stat_prefix(&self) -> &str {
        &self.stat_prefix
    }
    pub fn clear_stat_prefix(&mut self) {
        self.stat_prefix.clear();
    }

    // Param is passed by value, moved
    pub fn set_stat_prefix(&mut self, v: ::std::string::String) {
        self.stat_prefix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stat_prefix(&mut self) -> &mut ::std::string::String {
        &mut self.stat_prefix
    }

    // Take field
    pub fn take_stat_prefix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.stat_prefix, ::std::string::String::new())
    }

    // .envoy.config.filter.network.thrift_proxy.v2alpha1.RouteConfiguration route_config = 4;


    pub fn get_route_config(&self) -> &super::route::RouteConfiguration {
        self.route_config.as_ref().unwrap_or_else(|| <super::route::RouteConfiguration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_route_config(&mut self) {
        self.route_config.clear();
    }

    pub fn has_route_config(&self) -> bool {
        self.route_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_route_config(&mut self, v: super::route::RouteConfiguration) {
        self.route_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_route_config(&mut self) -> &mut super::route::RouteConfiguration {
        if self.route_config.is_none() {
            self.route_config.set_default();
        }
        self.route_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_route_config(&mut self) -> super::route::RouteConfiguration {
        self.route_config.take().unwrap_or_else(|| super::route::RouteConfiguration::new())
    }

    // repeated .envoy.config.filter.network.thrift_proxy.v2alpha1.ThriftFilter thrift_filters = 5;


    pub fn get_thrift_filters(&self) -> &[ThriftFilter] {
        &self.thrift_filters
    }
    pub fn clear_thrift_filters(&mut self) {
        self.thrift_filters.clear();
    }

    // Param is passed by value, moved
    pub fn set_thrift_filters(&mut self, v: ::protobuf::RepeatedField<ThriftFilter>) {
        self.thrift_filters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_thrift_filters(&mut self) -> &mut ::protobuf::RepeatedField<ThriftFilter> {
        &mut self.thrift_filters
    }

    // Take field
    pub fn take_thrift_filters(&mut self) -> ::protobuf::RepeatedField<ThriftFilter> {
        ::std::mem::replace(&mut self.thrift_filters, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ThriftProxy {
    fn is_initialized(&self) -> bool {
        for v in &self.route_config {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.thrift_filters {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.transport, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.protocol, 3, &mut self.unknown_fields)?
                },
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.stat_prefix)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.route_config)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.thrift_filters)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.transport != TransportType::AUTO_TRANSPORT {
            my_size += ::protobuf::rt::enum_size(2, self.transport);
        }
        if self.protocol != ProtocolType::AUTO_PROTOCOL {
            my_size += ::protobuf::rt::enum_size(3, self.protocol);
        }
        if !self.stat_prefix.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.stat_prefix);
        }
        if let Some(ref v) = self.route_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.thrift_filters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.transport != TransportType::AUTO_TRANSPORT {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.transport))?;
        }
        if self.protocol != ProtocolType::AUTO_PROTOCOL {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.protocol))?;
        }
        if !self.stat_prefix.is_empty() {
            os.write_string(1, &self.stat_prefix)?;
        }
        if let Some(ref v) = self.route_config.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.thrift_filters {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ThriftProxy {
        ThriftProxy::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TransportType>>(
                "transport",
                |m: &ThriftProxy| { &m.transport },
                |m: &mut ThriftProxy| { &mut m.transport },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ProtocolType>>(
                "protocol",
                |m: &ThriftProxy| { &m.protocol },
                |m: &mut ThriftProxy| { &mut m.protocol },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "stat_prefix",
                |m: &ThriftProxy| { &m.stat_prefix },
                |m: &mut ThriftProxy| { &mut m.stat_prefix },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::route::RouteConfiguration>>(
                "route_config",
                |m: &ThriftProxy| { &m.route_config },
                |m: &mut ThriftProxy| { &mut m.route_config },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ThriftFilter>>(
                "thrift_filters",
                |m: &ThriftProxy| { &m.thrift_filters },
                |m: &mut ThriftProxy| { &mut m.thrift_filters },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ThriftProxy>(
                "ThriftProxy",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ThriftProxy {
        static instance: ::protobuf::rt::LazyV2<ThriftProxy> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ThriftProxy::new)
    }
}

impl ::protobuf::Clear for ThriftProxy {
    fn clear(&mut self) {
        self.transport = TransportType::AUTO_TRANSPORT;
        self.protocol = ProtocolType::AUTO_PROTOCOL;
        self.stat_prefix.clear();
        self.route_config.clear();
        self.thrift_filters.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ThriftProxy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ThriftProxy {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ThriftFilter {
    // message fields
    pub name: ::std::string::String,
    // message oneof groups
    pub config_type: ::std::option::Option<ThriftFilter_oneof_config_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ThriftFilter {
    fn default() -> &'a ThriftFilter {
        <ThriftFilter as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ThriftFilter_oneof_config_type {
    config(::protobuf::well_known_types::Struct),
    typed_config(::protobuf::well_known_types::Any),
}

impl ThriftFilter {
    pub fn new() -> ThriftFilter {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .google.protobuf.Struct config = 2;


    pub fn get_config(&self) -> &::protobuf::well_known_types::Struct {
        match self.config_type {
            ::std::option::Option::Some(ThriftFilter_oneof_config_type::config(ref v)) => v,
            _ => <::protobuf::well_known_types::Struct as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_config(&mut self) {
        self.config_type = ::std::option::Option::None;
    }

    pub fn has_config(&self) -> bool {
        match self.config_type {
            ::std::option::Option::Some(ThriftFilter_oneof_config_type::config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_config(&mut self, v: ::protobuf::well_known_types::Struct) {
        self.config_type = ::std::option::Option::Some(ThriftFilter_oneof_config_type::config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_config(&mut self) -> &mut ::protobuf::well_known_types::Struct {
        if let ::std::option::Option::Some(ThriftFilter_oneof_config_type::config(_)) = self.config_type {
        } else {
            self.config_type = ::std::option::Option::Some(ThriftFilter_oneof_config_type::config(::protobuf::well_known_types::Struct::new()));
        }
        match self.config_type {
            ::std::option::Option::Some(ThriftFilter_oneof_config_type::config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_config(&mut self) -> ::protobuf::well_known_types::Struct {
        if self.has_config() {
            match self.config_type.take() {
                ::std::option::Option::Some(ThriftFilter_oneof_config_type::config(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Struct::new()
        }
    }

    // .google.protobuf.Any typed_config = 3;


    pub fn get_typed_config(&self) -> &::protobuf::well_known_types::Any {
        match self.config_type {
            ::std::option::Option::Some(ThriftFilter_oneof_config_type::typed_config(ref v)) => v,
            _ => <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_typed_config(&mut self) {
        self.config_type = ::std::option::Option::None;
    }

    pub fn has_typed_config(&self) -> bool {
        match self.config_type {
            ::std::option::Option::Some(ThriftFilter_oneof_config_type::typed_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_typed_config(&mut self, v: ::protobuf::well_known_types::Any) {
        self.config_type = ::std::option::Option::Some(ThriftFilter_oneof_config_type::typed_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_typed_config(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if let ::std::option::Option::Some(ThriftFilter_oneof_config_type::typed_config(_)) = self.config_type {
        } else {
            self.config_type = ::std::option::Option::Some(ThriftFilter_oneof_config_type::typed_config(::protobuf::well_known_types::Any::new()));
        }
        match self.config_type {
            ::std::option::Option::Some(ThriftFilter_oneof_config_type::typed_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_typed_config(&mut self) -> ::protobuf::well_known_types::Any {
        if self.has_typed_config() {
            match self.config_type.take() {
                ::std::option::Option::Some(ThriftFilter_oneof_config_type::typed_config(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Any::new()
        }
    }
}

impl ::protobuf::Message for ThriftFilter {
    fn is_initialized(&self) -> bool {
        if let Some(ThriftFilter_oneof_config_type::config(ref v)) = self.config_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ThriftFilter_oneof_config_type::typed_config(ref v)) = self.config_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config_type = ::std::option::Option::Some(ThriftFilter_oneof_config_type::config(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config_type = ::std::option::Option::Some(ThriftFilter_oneof_config_type::typed_config(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let ::std::option::Option::Some(ref v) = self.config_type {
            match v {
                &ThriftFilter_oneof_config_type::config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ThriftFilter_oneof_config_type::typed_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let ::std::option::Option::Some(ref v) = self.config_type {
            match v {
                &ThriftFilter_oneof_config_type::config(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ThriftFilter_oneof_config_type::typed_config(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ThriftFilter {
        ThriftFilter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &ThriftFilter| { &m.name },
                |m: &mut ThriftFilter| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Struct>(
                "config",
                ThriftFilter::has_config,
                ThriftFilter::get_config,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Any>(
                "typed_config",
                ThriftFilter::has_typed_config,
                ThriftFilter::get_typed_config,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ThriftFilter>(
                "ThriftFilter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ThriftFilter {
        static instance: ::protobuf::rt::LazyV2<ThriftFilter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ThriftFilter::new)
    }
}

impl ::protobuf::Clear for ThriftFilter {
    fn clear(&mut self) {
        self.name.clear();
        self.config_type = ::std::option::Option::None;
        self.config_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ThriftFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ThriftFilter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ThriftProtocolOptions {
    // message fields
    pub transport: TransportType,
    pub protocol: ProtocolType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ThriftProtocolOptions {
    fn default() -> &'a ThriftProtocolOptions {
        <ThriftProtocolOptions as ::protobuf::Message>::default_instance()
    }
}

impl ThriftProtocolOptions {
    pub fn new() -> ThriftProtocolOptions {
        ::std::default::Default::default()
    }

    // .envoy.config.filter.network.thrift_proxy.v2alpha1.TransportType transport = 1;


    pub fn get_transport(&self) -> TransportType {
        self.transport
    }
    pub fn clear_transport(&mut self) {
        self.transport = TransportType::AUTO_TRANSPORT;
    }

    // Param is passed by value, moved
    pub fn set_transport(&mut self, v: TransportType) {
        self.transport = v;
    }

    // .envoy.config.filter.network.thrift_proxy.v2alpha1.ProtocolType protocol = 2;


    pub fn get_protocol(&self) -> ProtocolType {
        self.protocol
    }
    pub fn clear_protocol(&mut self) {
        self.protocol = ProtocolType::AUTO_PROTOCOL;
    }

    // Param is passed by value, moved
    pub fn set_protocol(&mut self, v: ProtocolType) {
        self.protocol = v;
    }
}

impl ::protobuf::Message for ThriftProtocolOptions {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.transport, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.protocol, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.transport != TransportType::AUTO_TRANSPORT {
            my_size += ::protobuf::rt::enum_size(1, self.transport);
        }
        if self.protocol != ProtocolType::AUTO_PROTOCOL {
            my_size += ::protobuf::rt::enum_size(2, self.protocol);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.transport != TransportType::AUTO_TRANSPORT {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.transport))?;
        }
        if self.protocol != ProtocolType::AUTO_PROTOCOL {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.protocol))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ThriftProtocolOptions {
        ThriftProtocolOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TransportType>>(
                "transport",
                |m: &ThriftProtocolOptions| { &m.transport },
                |m: &mut ThriftProtocolOptions| { &mut m.transport },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ProtocolType>>(
                "protocol",
                |m: &ThriftProtocolOptions| { &m.protocol },
                |m: &mut ThriftProtocolOptions| { &mut m.protocol },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ThriftProtocolOptions>(
                "ThriftProtocolOptions",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ThriftProtocolOptions {
        static instance: ::protobuf::rt::LazyV2<ThriftProtocolOptions> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ThriftProtocolOptions::new)
    }
}

impl ::protobuf::Clear for ThriftProtocolOptions {
    fn clear(&mut self) {
        self.transport = TransportType::AUTO_TRANSPORT;
        self.protocol = ProtocolType::AUTO_PROTOCOL;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ThriftProtocolOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ThriftProtocolOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TransportType {
    AUTO_TRANSPORT = 0,
    FRAMED = 1,
    UNFRAMED = 2,
    HEADER = 3,
}

impl ::protobuf::ProtobufEnum for TransportType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TransportType> {
        match value {
            0 => ::std::option::Option::Some(TransportType::AUTO_TRANSPORT),
            1 => ::std::option::Option::Some(TransportType::FRAMED),
            2 => ::std::option::Option::Some(TransportType::UNFRAMED),
            3 => ::std::option::Option::Some(TransportType::HEADER),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TransportType] = &[
            TransportType::AUTO_TRANSPORT,
            TransportType::FRAMED,
            TransportType::UNFRAMED,
            TransportType::HEADER,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<TransportType>("TransportType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for TransportType {
}

impl ::std::default::Default for TransportType {
    fn default() -> Self {
        TransportType::AUTO_TRANSPORT
    }
}

impl ::protobuf::reflect::ProtobufValue for TransportType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ProtocolType {
    AUTO_PROTOCOL = 0,
    BINARY = 1,
    LAX_BINARY = 2,
    COMPACT = 3,
    TWITTER = 4,
}

impl ::protobuf::ProtobufEnum for ProtocolType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ProtocolType> {
        match value {
            0 => ::std::option::Option::Some(ProtocolType::AUTO_PROTOCOL),
            1 => ::std::option::Option::Some(ProtocolType::BINARY),
            2 => ::std::option::Option::Some(ProtocolType::LAX_BINARY),
            3 => ::std::option::Option::Some(ProtocolType::COMPACT),
            4 => ::std::option::Option::Some(ProtocolType::TWITTER),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ProtocolType] = &[
            ProtocolType::AUTO_PROTOCOL,
            ProtocolType::BINARY,
            ProtocolType::LAX_BINARY,
            ProtocolType::COMPACT,
            ProtocolType::TWITTER,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ProtocolType>("ProtocolType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ProtocolType {
}

impl ::std::default::Default for ProtocolType {
    fn default() -> Self {
        ProtocolType::AUTO_PROTOCOL
    }
}

impl ::protobuf::reflect::ProtobufValue for ProtocolType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \nDenvoy/config/filter/network/thrift_proxy/v2alpha1/thrift_proxy.proto\
    \x121envoy.config.filter.network.thrift_proxy.v2alpha1\x1a=envoy/config/\
    filter/network/thrift_proxy/v2alpha1/route.proto\x1a\x19google/protobuf/\
    any.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1eudpa/annotations/mi\
    grate.proto\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/validat\
    e.proto\"\xda\x03\n\x0bThriftProxy\x12h\n\ttransport\x18\x02\x20\x01(\
    \x0e2@.envoy.config.filter.network.thrift_proxy.v2alpha1.TransportTypeR\
    \ttransportB\x08\xfaB\x05\x82\x01\x02\x10\x01\x12e\n\x08protocol\x18\x03\
    \x20\x01(\x0e2?.envoy.config.filter.network.thrift_proxy.v2alpha1.Protoc\
    olTypeR\x08protocolB\x08\xfaB\x05\x82\x01\x02\x10\x01\x12(\n\x0bstat_pre\
    fix\x18\x01\x20\x01(\tR\nstatPrefixB\x07\xfaB\x04r\x02\x20\x01\x12h\n\
    \x0croute_config\x18\x04\x20\x01(\x0b2E.envoy.config.filter.network.thri\
    ft_proxy.v2alpha1.RouteConfigurationR\x0brouteConfig\x12f\n\x0ethrift_fi\
    lters\x18\x05\x20\x03(\x0b2?.envoy.config.filter.network.thrift_proxy.v2\
    alpha1.ThriftFilterR\rthriftFilters\"\xac\x01\n\x0cThriftFilter\x12\x1b\
    \n\x04name\x18\x01\x20\x01(\tR\x04nameB\x07\xfaB\x04r\x02\x20\x01\x125\n\
    \x06config\x18\x02\x20\x01(\x0b2\x17.google.protobuf.StructH\0R\x06confi\
    gB\x02\x18\x01\x129\n\x0ctyped_config\x18\x03\x20\x01(\x0b2\x14.google.p\
    rotobuf.AnyH\0R\x0btypedConfigB\r\n\x0bconfig_type\"\xe8\x01\n\x15Thrift\
    ProtocolOptions\x12h\n\ttransport\x18\x01\x20\x01(\x0e2@.envoy.config.fi\
    lter.network.thrift_proxy.v2alpha1.TransportTypeR\ttransportB\x08\xfaB\
    \x05\x82\x01\x02\x10\x01\x12e\n\x08protocol\x18\x02\x20\x01(\x0e2?.envoy\
    .config.filter.network.thrift_proxy.v2alpha1.ProtocolTypeR\x08protocolB\
    \x08\xfaB\x05\x82\x01\x02\x10\x01*I\n\rTransportType\x12\x12\n\x0eAUTO_T\
    RANSPORT\x10\0\x12\n\n\x06FRAMED\x10\x01\x12\x0c\n\x08UNFRAMED\x10\x02\
    \x12\n\n\x06HEADER\x10\x03*W\n\x0cProtocolType\x12\x11\n\rAUTO_PROTOCOL\
    \x10\0\x12\n\n\x06BINARY\x10\x01\x12\x0e\n\nLAX_BINARY\x10\x02\x12\x0b\n\
    \x07COMPACT\x10\x03\x12\x0b\n\x07TWITTER\x10\x04B\x95\x01\n?io.envoyprox\
    y.envoy.config.filter.network.thrift_proxy.v2alpha1B\x10ThriftProxyProto\
    P\x01\xf2\x98\xfe\x8f\x052\x120envoy.extensions.filters.network.thrift_p\
    roxy.v3\xba\x80\xc8\xd1\x06\x02\x10\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
