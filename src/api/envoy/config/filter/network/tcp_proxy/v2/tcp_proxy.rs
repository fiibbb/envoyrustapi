// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/filter/network/tcp_proxy/v2/tcp_proxy.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct TcpProxy {
    // message fields
    pub stat_prefix: ::std::string::String,
    pub metadata_match: ::protobuf::SingularPtrField<super::base::Metadata>,
    pub idle_timeout: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub downstream_idle_timeout: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub upstream_idle_timeout: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub access_log: ::protobuf::RepeatedField<super::accesslog::AccessLog>,
    pub deprecated_v1: ::protobuf::SingularPtrField<TcpProxy_DeprecatedV1>,
    pub max_connect_attempts: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub hash_policy: ::protobuf::RepeatedField<super::hash_policy::HashPolicy>,
    pub tunneling_config: ::protobuf::SingularPtrField<TcpProxy_TunnelingConfig>,
    // message oneof groups
    pub cluster_specifier: ::std::option::Option<TcpProxy_oneof_cluster_specifier>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TcpProxy {
    fn default() -> &'a TcpProxy {
        <TcpProxy as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum TcpProxy_oneof_cluster_specifier {
    cluster(::std::string::String),
    weighted_clusters(TcpProxy_WeightedCluster),
}

impl TcpProxy {
    pub fn new() -> TcpProxy {
        ::std::default::Default::default()
    }

    // string stat_prefix = 1;


    pub fn get_stat_prefix(&self) -> &str {
        &self.stat_prefix
    }
    pub fn clear_stat_prefix(&mut self) {
        self.stat_prefix.clear();
    }

    // Param is passed by value, moved
    pub fn set_stat_prefix(&mut self, v: ::std::string::String) {
        self.stat_prefix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stat_prefix(&mut self) -> &mut ::std::string::String {
        &mut self.stat_prefix
    }

    // Take field
    pub fn take_stat_prefix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.stat_prefix, ::std::string::String::new())
    }

    // string cluster = 2;


    pub fn get_cluster(&self) -> &str {
        match self.cluster_specifier {
            ::std::option::Option::Some(TcpProxy_oneof_cluster_specifier::cluster(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_cluster(&mut self) {
        self.cluster_specifier = ::std::option::Option::None;
    }

    pub fn has_cluster(&self) -> bool {
        match self.cluster_specifier {
            ::std::option::Option::Some(TcpProxy_oneof_cluster_specifier::cluster(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cluster(&mut self, v: ::std::string::String) {
        self.cluster_specifier = ::std::option::Option::Some(TcpProxy_oneof_cluster_specifier::cluster(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cluster(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(TcpProxy_oneof_cluster_specifier::cluster(_)) = self.cluster_specifier {
        } else {
            self.cluster_specifier = ::std::option::Option::Some(TcpProxy_oneof_cluster_specifier::cluster(::std::string::String::new()));
        }
        match self.cluster_specifier {
            ::std::option::Option::Some(TcpProxy_oneof_cluster_specifier::cluster(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cluster(&mut self) -> ::std::string::String {
        if self.has_cluster() {
            match self.cluster_specifier.take() {
                ::std::option::Option::Some(TcpProxy_oneof_cluster_specifier::cluster(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .envoy.config.filter.network.tcp_proxy.v2.TcpProxy.WeightedCluster weighted_clusters = 10;


    pub fn get_weighted_clusters(&self) -> &TcpProxy_WeightedCluster {
        match self.cluster_specifier {
            ::std::option::Option::Some(TcpProxy_oneof_cluster_specifier::weighted_clusters(ref v)) => v,
            _ => <TcpProxy_WeightedCluster as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_weighted_clusters(&mut self) {
        self.cluster_specifier = ::std::option::Option::None;
    }

    pub fn has_weighted_clusters(&self) -> bool {
        match self.cluster_specifier {
            ::std::option::Option::Some(TcpProxy_oneof_cluster_specifier::weighted_clusters(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_weighted_clusters(&mut self, v: TcpProxy_WeightedCluster) {
        self.cluster_specifier = ::std::option::Option::Some(TcpProxy_oneof_cluster_specifier::weighted_clusters(v))
    }

    // Mutable pointer to the field.
    pub fn mut_weighted_clusters(&mut self) -> &mut TcpProxy_WeightedCluster {
        if let ::std::option::Option::Some(TcpProxy_oneof_cluster_specifier::weighted_clusters(_)) = self.cluster_specifier {
        } else {
            self.cluster_specifier = ::std::option::Option::Some(TcpProxy_oneof_cluster_specifier::weighted_clusters(TcpProxy_WeightedCluster::new()));
        }
        match self.cluster_specifier {
            ::std::option::Option::Some(TcpProxy_oneof_cluster_specifier::weighted_clusters(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_weighted_clusters(&mut self) -> TcpProxy_WeightedCluster {
        if self.has_weighted_clusters() {
            match self.cluster_specifier.take() {
                ::std::option::Option::Some(TcpProxy_oneof_cluster_specifier::weighted_clusters(v)) => v,
                _ => panic!(),
            }
        } else {
            TcpProxy_WeightedCluster::new()
        }
    }

    // .envoy.api.v2.core.Metadata metadata_match = 9;


    pub fn get_metadata_match(&self) -> &super::base::Metadata {
        self.metadata_match.as_ref().unwrap_or_else(|| <super::base::Metadata as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metadata_match(&mut self) {
        self.metadata_match.clear();
    }

    pub fn has_metadata_match(&self) -> bool {
        self.metadata_match.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata_match(&mut self, v: super::base::Metadata) {
        self.metadata_match = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata_match(&mut self) -> &mut super::base::Metadata {
        if self.metadata_match.is_none() {
            self.metadata_match.set_default();
        }
        self.metadata_match.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata_match(&mut self) -> super::base::Metadata {
        self.metadata_match.take().unwrap_or_else(|| super::base::Metadata::new())
    }

    // .google.protobuf.Duration idle_timeout = 8;


    pub fn get_idle_timeout(&self) -> &::protobuf::well_known_types::Duration {
        self.idle_timeout.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_idle_timeout(&mut self) {
        self.idle_timeout.clear();
    }

    pub fn has_idle_timeout(&self) -> bool {
        self.idle_timeout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_idle_timeout(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.idle_timeout = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_idle_timeout(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.idle_timeout.is_none() {
            self.idle_timeout.set_default();
        }
        self.idle_timeout.as_mut().unwrap()
    }

    // Take field
    pub fn take_idle_timeout(&mut self) -> ::protobuf::well_known_types::Duration {
        self.idle_timeout.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.Duration downstream_idle_timeout = 3;


    pub fn get_downstream_idle_timeout(&self) -> &::protobuf::well_known_types::Duration {
        self.downstream_idle_timeout.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_downstream_idle_timeout(&mut self) {
        self.downstream_idle_timeout.clear();
    }

    pub fn has_downstream_idle_timeout(&self) -> bool {
        self.downstream_idle_timeout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_downstream_idle_timeout(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.downstream_idle_timeout = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_downstream_idle_timeout(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.downstream_idle_timeout.is_none() {
            self.downstream_idle_timeout.set_default();
        }
        self.downstream_idle_timeout.as_mut().unwrap()
    }

    // Take field
    pub fn take_downstream_idle_timeout(&mut self) -> ::protobuf::well_known_types::Duration {
        self.downstream_idle_timeout.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.Duration upstream_idle_timeout = 4;


    pub fn get_upstream_idle_timeout(&self) -> &::protobuf::well_known_types::Duration {
        self.upstream_idle_timeout.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_upstream_idle_timeout(&mut self) {
        self.upstream_idle_timeout.clear();
    }

    pub fn has_upstream_idle_timeout(&self) -> bool {
        self.upstream_idle_timeout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upstream_idle_timeout(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.upstream_idle_timeout = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_upstream_idle_timeout(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.upstream_idle_timeout.is_none() {
            self.upstream_idle_timeout.set_default();
        }
        self.upstream_idle_timeout.as_mut().unwrap()
    }

    // Take field
    pub fn take_upstream_idle_timeout(&mut self) -> ::protobuf::well_known_types::Duration {
        self.upstream_idle_timeout.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // repeated .envoy.config.filter.accesslog.v2.AccessLog access_log = 5;


    pub fn get_access_log(&self) -> &[super::accesslog::AccessLog] {
        &self.access_log
    }
    pub fn clear_access_log(&mut self) {
        self.access_log.clear();
    }

    // Param is passed by value, moved
    pub fn set_access_log(&mut self, v: ::protobuf::RepeatedField<super::accesslog::AccessLog>) {
        self.access_log = v;
    }

    // Mutable pointer to the field.
    pub fn mut_access_log(&mut self) -> &mut ::protobuf::RepeatedField<super::accesslog::AccessLog> {
        &mut self.access_log
    }

    // Take field
    pub fn take_access_log(&mut self) -> ::protobuf::RepeatedField<super::accesslog::AccessLog> {
        ::std::mem::replace(&mut self.access_log, ::protobuf::RepeatedField::new())
    }

    // .envoy.config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1 deprecated_v1 = 6;


    pub fn get_deprecated_v1(&self) -> &TcpProxy_DeprecatedV1 {
        self.deprecated_v1.as_ref().unwrap_or_else(|| <TcpProxy_DeprecatedV1 as ::protobuf::Message>::default_instance())
    }
    pub fn clear_deprecated_v1(&mut self) {
        self.deprecated_v1.clear();
    }

    pub fn has_deprecated_v1(&self) -> bool {
        self.deprecated_v1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deprecated_v1(&mut self, v: TcpProxy_DeprecatedV1) {
        self.deprecated_v1 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deprecated_v1(&mut self) -> &mut TcpProxy_DeprecatedV1 {
        if self.deprecated_v1.is_none() {
            self.deprecated_v1.set_default();
        }
        self.deprecated_v1.as_mut().unwrap()
    }

    // Take field
    pub fn take_deprecated_v1(&mut self) -> TcpProxy_DeprecatedV1 {
        self.deprecated_v1.take().unwrap_or_else(|| TcpProxy_DeprecatedV1::new())
    }

    // .google.protobuf.UInt32Value max_connect_attempts = 7;


    pub fn get_max_connect_attempts(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.max_connect_attempts.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_max_connect_attempts(&mut self) {
        self.max_connect_attempts.clear();
    }

    pub fn has_max_connect_attempts(&self) -> bool {
        self.max_connect_attempts.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_connect_attempts(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.max_connect_attempts = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_connect_attempts(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.max_connect_attempts.is_none() {
            self.max_connect_attempts.set_default();
        }
        self.max_connect_attempts.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_connect_attempts(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.max_connect_attempts.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // repeated .envoy.type.HashPolicy hash_policy = 11;


    pub fn get_hash_policy(&self) -> &[super::hash_policy::HashPolicy] {
        &self.hash_policy
    }
    pub fn clear_hash_policy(&mut self) {
        self.hash_policy.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash_policy(&mut self, v: ::protobuf::RepeatedField<super::hash_policy::HashPolicy>) {
        self.hash_policy = v;
    }

    // Mutable pointer to the field.
    pub fn mut_hash_policy(&mut self) -> &mut ::protobuf::RepeatedField<super::hash_policy::HashPolicy> {
        &mut self.hash_policy
    }

    // Take field
    pub fn take_hash_policy(&mut self) -> ::protobuf::RepeatedField<super::hash_policy::HashPolicy> {
        ::std::mem::replace(&mut self.hash_policy, ::protobuf::RepeatedField::new())
    }

    // .envoy.config.filter.network.tcp_proxy.v2.TcpProxy.TunnelingConfig tunneling_config = 12;


    pub fn get_tunneling_config(&self) -> &TcpProxy_TunnelingConfig {
        self.tunneling_config.as_ref().unwrap_or_else(|| <TcpProxy_TunnelingConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tunneling_config(&mut self) {
        self.tunneling_config.clear();
    }

    pub fn has_tunneling_config(&self) -> bool {
        self.tunneling_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tunneling_config(&mut self, v: TcpProxy_TunnelingConfig) {
        self.tunneling_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tunneling_config(&mut self) -> &mut TcpProxy_TunnelingConfig {
        if self.tunneling_config.is_none() {
            self.tunneling_config.set_default();
        }
        self.tunneling_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_tunneling_config(&mut self) -> TcpProxy_TunnelingConfig {
        self.tunneling_config.take().unwrap_or_else(|| TcpProxy_TunnelingConfig::new())
    }
}

impl ::protobuf::Message for TcpProxy {
    fn is_initialized(&self) -> bool {
        if let Some(TcpProxy_oneof_cluster_specifier::weighted_clusters(ref v)) = self.cluster_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.metadata_match {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.idle_timeout {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.downstream_idle_timeout {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.upstream_idle_timeout {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.access_log {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.deprecated_v1 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.max_connect_attempts {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.hash_policy {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tunneling_config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.stat_prefix)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cluster_specifier = ::std::option::Option::Some(TcpProxy_oneof_cluster_specifier::cluster(is.read_string()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cluster_specifier = ::std::option::Option::Some(TcpProxy_oneof_cluster_specifier::weighted_clusters(is.read_message()?));
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata_match)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.idle_timeout)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.downstream_idle_timeout)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.upstream_idle_timeout)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.access_log)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.deprecated_v1)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_connect_attempts)?;
                },
                11 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.hash_policy)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tunneling_config)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.stat_prefix.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.stat_prefix);
        }
        if let Some(ref v) = self.metadata_match.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.idle_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.downstream_idle_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.upstream_idle_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.access_log {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.deprecated_v1.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.max_connect_attempts.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.hash_policy {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.tunneling_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.cluster_specifier {
            match v {
                &TcpProxy_oneof_cluster_specifier::cluster(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
                &TcpProxy_oneof_cluster_specifier::weighted_clusters(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.stat_prefix.is_empty() {
            os.write_string(1, &self.stat_prefix)?;
        }
        if let Some(ref v) = self.metadata_match.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.idle_timeout.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.downstream_idle_timeout.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.upstream_idle_timeout.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.access_log {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.deprecated_v1.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.max_connect_attempts.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.hash_policy {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.tunneling_config.as_ref() {
            os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.cluster_specifier {
            match v {
                &TcpProxy_oneof_cluster_specifier::cluster(ref v) => {
                    os.write_string(2, v)?;
                },
                &TcpProxy_oneof_cluster_specifier::weighted_clusters(ref v) => {
                    os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TcpProxy {
        TcpProxy::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "stat_prefix",
                |m: &TcpProxy| { &m.stat_prefix },
                |m: &mut TcpProxy| { &mut m.stat_prefix },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "cluster",
                TcpProxy::has_cluster,
                TcpProxy::get_cluster,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, TcpProxy_WeightedCluster>(
                "weighted_clusters",
                TcpProxy::has_weighted_clusters,
                TcpProxy::get_weighted_clusters,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Metadata>>(
                "metadata_match",
                |m: &TcpProxy| { &m.metadata_match },
                |m: &mut TcpProxy| { &mut m.metadata_match },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "idle_timeout",
                |m: &TcpProxy| { &m.idle_timeout },
                |m: &mut TcpProxy| { &mut m.idle_timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "downstream_idle_timeout",
                |m: &TcpProxy| { &m.downstream_idle_timeout },
                |m: &mut TcpProxy| { &mut m.downstream_idle_timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "upstream_idle_timeout",
                |m: &TcpProxy| { &m.upstream_idle_timeout },
                |m: &mut TcpProxy| { &mut m.upstream_idle_timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::accesslog::AccessLog>>(
                "access_log",
                |m: &TcpProxy| { &m.access_log },
                |m: &mut TcpProxy| { &mut m.access_log },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TcpProxy_DeprecatedV1>>(
                "deprecated_v1",
                |m: &TcpProxy| { &m.deprecated_v1 },
                |m: &mut TcpProxy| { &mut m.deprecated_v1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "max_connect_attempts",
                |m: &TcpProxy| { &m.max_connect_attempts },
                |m: &mut TcpProxy| { &mut m.max_connect_attempts },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::hash_policy::HashPolicy>>(
                "hash_policy",
                |m: &TcpProxy| { &m.hash_policy },
                |m: &mut TcpProxy| { &mut m.hash_policy },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TcpProxy_TunnelingConfig>>(
                "tunneling_config",
                |m: &TcpProxy| { &m.tunneling_config },
                |m: &mut TcpProxy| { &mut m.tunneling_config },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TcpProxy>(
                "TcpProxy",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TcpProxy {
        static instance: ::protobuf::rt::LazyV2<TcpProxy> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TcpProxy::new)
    }
}

impl ::protobuf::Clear for TcpProxy {
    fn clear(&mut self) {
        self.stat_prefix.clear();
        self.cluster_specifier = ::std::option::Option::None;
        self.cluster_specifier = ::std::option::Option::None;
        self.metadata_match.clear();
        self.idle_timeout.clear();
        self.downstream_idle_timeout.clear();
        self.upstream_idle_timeout.clear();
        self.access_log.clear();
        self.deprecated_v1.clear();
        self.max_connect_attempts.clear();
        self.hash_policy.clear();
        self.tunneling_config.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TcpProxy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TcpProxy {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TcpProxy_DeprecatedV1 {
    // message fields
    pub routes: ::protobuf::RepeatedField<TcpProxy_DeprecatedV1_TCPRoute>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TcpProxy_DeprecatedV1 {
    fn default() -> &'a TcpProxy_DeprecatedV1 {
        <TcpProxy_DeprecatedV1 as ::protobuf::Message>::default_instance()
    }
}

impl TcpProxy_DeprecatedV1 {
    pub fn new() -> TcpProxy_DeprecatedV1 {
        ::std::default::Default::default()
    }

    // repeated .envoy.config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1.TCPRoute routes = 1;


    pub fn get_routes(&self) -> &[TcpProxy_DeprecatedV1_TCPRoute] {
        &self.routes
    }
    pub fn clear_routes(&mut self) {
        self.routes.clear();
    }

    // Param is passed by value, moved
    pub fn set_routes(&mut self, v: ::protobuf::RepeatedField<TcpProxy_DeprecatedV1_TCPRoute>) {
        self.routes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_routes(&mut self) -> &mut ::protobuf::RepeatedField<TcpProxy_DeprecatedV1_TCPRoute> {
        &mut self.routes
    }

    // Take field
    pub fn take_routes(&mut self) -> ::protobuf::RepeatedField<TcpProxy_DeprecatedV1_TCPRoute> {
        ::std::mem::replace(&mut self.routes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TcpProxy_DeprecatedV1 {
    fn is_initialized(&self) -> bool {
        for v in &self.routes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.routes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.routes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.routes {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TcpProxy_DeprecatedV1 {
        TcpProxy_DeprecatedV1::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TcpProxy_DeprecatedV1_TCPRoute>>(
                "routes",
                |m: &TcpProxy_DeprecatedV1| { &m.routes },
                |m: &mut TcpProxy_DeprecatedV1| { &mut m.routes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TcpProxy_DeprecatedV1>(
                "TcpProxy.DeprecatedV1",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TcpProxy_DeprecatedV1 {
        static instance: ::protobuf::rt::LazyV2<TcpProxy_DeprecatedV1> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TcpProxy_DeprecatedV1::new)
    }
}

impl ::protobuf::Clear for TcpProxy_DeprecatedV1 {
    fn clear(&mut self) {
        self.routes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TcpProxy_DeprecatedV1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TcpProxy_DeprecatedV1 {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TcpProxy_DeprecatedV1_TCPRoute {
    // message fields
    pub cluster: ::std::string::String,
    pub destination_ip_list: ::protobuf::RepeatedField<super::address::CidrRange>,
    pub destination_ports: ::std::string::String,
    pub source_ip_list: ::protobuf::RepeatedField<super::address::CidrRange>,
    pub source_ports: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TcpProxy_DeprecatedV1_TCPRoute {
    fn default() -> &'a TcpProxy_DeprecatedV1_TCPRoute {
        <TcpProxy_DeprecatedV1_TCPRoute as ::protobuf::Message>::default_instance()
    }
}

impl TcpProxy_DeprecatedV1_TCPRoute {
    pub fn new() -> TcpProxy_DeprecatedV1_TCPRoute {
        ::std::default::Default::default()
    }

    // string cluster = 1;


    pub fn get_cluster(&self) -> &str {
        &self.cluster
    }
    pub fn clear_cluster(&mut self) {
        self.cluster.clear();
    }

    // Param is passed by value, moved
    pub fn set_cluster(&mut self, v: ::std::string::String) {
        self.cluster = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cluster(&mut self) -> &mut ::std::string::String {
        &mut self.cluster
    }

    // Take field
    pub fn take_cluster(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cluster, ::std::string::String::new())
    }

    // repeated .envoy.api.v2.core.CidrRange destination_ip_list = 2;


    pub fn get_destination_ip_list(&self) -> &[super::address::CidrRange] {
        &self.destination_ip_list
    }
    pub fn clear_destination_ip_list(&mut self) {
        self.destination_ip_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_destination_ip_list(&mut self, v: ::protobuf::RepeatedField<super::address::CidrRange>) {
        self.destination_ip_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_destination_ip_list(&mut self) -> &mut ::protobuf::RepeatedField<super::address::CidrRange> {
        &mut self.destination_ip_list
    }

    // Take field
    pub fn take_destination_ip_list(&mut self) -> ::protobuf::RepeatedField<super::address::CidrRange> {
        ::std::mem::replace(&mut self.destination_ip_list, ::protobuf::RepeatedField::new())
    }

    // string destination_ports = 3;


    pub fn get_destination_ports(&self) -> &str {
        &self.destination_ports
    }
    pub fn clear_destination_ports(&mut self) {
        self.destination_ports.clear();
    }

    // Param is passed by value, moved
    pub fn set_destination_ports(&mut self, v: ::std::string::String) {
        self.destination_ports = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_destination_ports(&mut self) -> &mut ::std::string::String {
        &mut self.destination_ports
    }

    // Take field
    pub fn take_destination_ports(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.destination_ports, ::std::string::String::new())
    }

    // repeated .envoy.api.v2.core.CidrRange source_ip_list = 4;


    pub fn get_source_ip_list(&self) -> &[super::address::CidrRange] {
        &self.source_ip_list
    }
    pub fn clear_source_ip_list(&mut self) {
        self.source_ip_list.clear();
    }

    // Param is passed by value, moved
    pub fn set_source_ip_list(&mut self, v: ::protobuf::RepeatedField<super::address::CidrRange>) {
        self.source_ip_list = v;
    }

    // Mutable pointer to the field.
    pub fn mut_source_ip_list(&mut self) -> &mut ::protobuf::RepeatedField<super::address::CidrRange> {
        &mut self.source_ip_list
    }

    // Take field
    pub fn take_source_ip_list(&mut self) -> ::protobuf::RepeatedField<super::address::CidrRange> {
        ::std::mem::replace(&mut self.source_ip_list, ::protobuf::RepeatedField::new())
    }

    // string source_ports = 5;


    pub fn get_source_ports(&self) -> &str {
        &self.source_ports
    }
    pub fn clear_source_ports(&mut self) {
        self.source_ports.clear();
    }

    // Param is passed by value, moved
    pub fn set_source_ports(&mut self, v: ::std::string::String) {
        self.source_ports = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_ports(&mut self) -> &mut ::std::string::String {
        &mut self.source_ports
    }

    // Take field
    pub fn take_source_ports(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.source_ports, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TcpProxy_DeprecatedV1_TCPRoute {
    fn is_initialized(&self) -> bool {
        for v in &self.destination_ip_list {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.source_ip_list {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cluster)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.destination_ip_list)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.destination_ports)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.source_ip_list)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.source_ports)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.cluster.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.cluster);
        }
        for value in &self.destination_ip_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.destination_ports.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.destination_ports);
        }
        for value in &self.source_ip_list {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.source_ports.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.source_ports);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.cluster.is_empty() {
            os.write_string(1, &self.cluster)?;
        }
        for v in &self.destination_ip_list {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.destination_ports.is_empty() {
            os.write_string(3, &self.destination_ports)?;
        }
        for v in &self.source_ip_list {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.source_ports.is_empty() {
            os.write_string(5, &self.source_ports)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TcpProxy_DeprecatedV1_TCPRoute {
        TcpProxy_DeprecatedV1_TCPRoute::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cluster",
                |m: &TcpProxy_DeprecatedV1_TCPRoute| { &m.cluster },
                |m: &mut TcpProxy_DeprecatedV1_TCPRoute| { &mut m.cluster },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::address::CidrRange>>(
                "destination_ip_list",
                |m: &TcpProxy_DeprecatedV1_TCPRoute| { &m.destination_ip_list },
                |m: &mut TcpProxy_DeprecatedV1_TCPRoute| { &mut m.destination_ip_list },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "destination_ports",
                |m: &TcpProxy_DeprecatedV1_TCPRoute| { &m.destination_ports },
                |m: &mut TcpProxy_DeprecatedV1_TCPRoute| { &mut m.destination_ports },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::address::CidrRange>>(
                "source_ip_list",
                |m: &TcpProxy_DeprecatedV1_TCPRoute| { &m.source_ip_list },
                |m: &mut TcpProxy_DeprecatedV1_TCPRoute| { &mut m.source_ip_list },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "source_ports",
                |m: &TcpProxy_DeprecatedV1_TCPRoute| { &m.source_ports },
                |m: &mut TcpProxy_DeprecatedV1_TCPRoute| { &mut m.source_ports },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TcpProxy_DeprecatedV1_TCPRoute>(
                "TcpProxy.DeprecatedV1.TCPRoute",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TcpProxy_DeprecatedV1_TCPRoute {
        static instance: ::protobuf::rt::LazyV2<TcpProxy_DeprecatedV1_TCPRoute> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TcpProxy_DeprecatedV1_TCPRoute::new)
    }
}

impl ::protobuf::Clear for TcpProxy_DeprecatedV1_TCPRoute {
    fn clear(&mut self) {
        self.cluster.clear();
        self.destination_ip_list.clear();
        self.destination_ports.clear();
        self.source_ip_list.clear();
        self.source_ports.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TcpProxy_DeprecatedV1_TCPRoute {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TcpProxy_DeprecatedV1_TCPRoute {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TcpProxy_WeightedCluster {
    // message fields
    pub clusters: ::protobuf::RepeatedField<TcpProxy_WeightedCluster_ClusterWeight>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TcpProxy_WeightedCluster {
    fn default() -> &'a TcpProxy_WeightedCluster {
        <TcpProxy_WeightedCluster as ::protobuf::Message>::default_instance()
    }
}

impl TcpProxy_WeightedCluster {
    pub fn new() -> TcpProxy_WeightedCluster {
        ::std::default::Default::default()
    }

    // repeated .envoy.config.filter.network.tcp_proxy.v2.TcpProxy.WeightedCluster.ClusterWeight clusters = 1;


    pub fn get_clusters(&self) -> &[TcpProxy_WeightedCluster_ClusterWeight] {
        &self.clusters
    }
    pub fn clear_clusters(&mut self) {
        self.clusters.clear();
    }

    // Param is passed by value, moved
    pub fn set_clusters(&mut self, v: ::protobuf::RepeatedField<TcpProxy_WeightedCluster_ClusterWeight>) {
        self.clusters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_clusters(&mut self) -> &mut ::protobuf::RepeatedField<TcpProxy_WeightedCluster_ClusterWeight> {
        &mut self.clusters
    }

    // Take field
    pub fn take_clusters(&mut self) -> ::protobuf::RepeatedField<TcpProxy_WeightedCluster_ClusterWeight> {
        ::std::mem::replace(&mut self.clusters, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TcpProxy_WeightedCluster {
    fn is_initialized(&self) -> bool {
        for v in &self.clusters {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.clusters)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.clusters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.clusters {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TcpProxy_WeightedCluster {
        TcpProxy_WeightedCluster::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TcpProxy_WeightedCluster_ClusterWeight>>(
                "clusters",
                |m: &TcpProxy_WeightedCluster| { &m.clusters },
                |m: &mut TcpProxy_WeightedCluster| { &mut m.clusters },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TcpProxy_WeightedCluster>(
                "TcpProxy.WeightedCluster",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TcpProxy_WeightedCluster {
        static instance: ::protobuf::rt::LazyV2<TcpProxy_WeightedCluster> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TcpProxy_WeightedCluster::new)
    }
}

impl ::protobuf::Clear for TcpProxy_WeightedCluster {
    fn clear(&mut self) {
        self.clusters.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TcpProxy_WeightedCluster {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TcpProxy_WeightedCluster {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TcpProxy_WeightedCluster_ClusterWeight {
    // message fields
    pub name: ::std::string::String,
    pub weight: u32,
    pub metadata_match: ::protobuf::SingularPtrField<super::base::Metadata>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TcpProxy_WeightedCluster_ClusterWeight {
    fn default() -> &'a TcpProxy_WeightedCluster_ClusterWeight {
        <TcpProxy_WeightedCluster_ClusterWeight as ::protobuf::Message>::default_instance()
    }
}

impl TcpProxy_WeightedCluster_ClusterWeight {
    pub fn new() -> TcpProxy_WeightedCluster_ClusterWeight {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // uint32 weight = 2;


    pub fn get_weight(&self) -> u32 {
        self.weight
    }
    pub fn clear_weight(&mut self) {
        self.weight = 0;
    }

    // Param is passed by value, moved
    pub fn set_weight(&mut self, v: u32) {
        self.weight = v;
    }

    // .envoy.api.v2.core.Metadata metadata_match = 3;


    pub fn get_metadata_match(&self) -> &super::base::Metadata {
        self.metadata_match.as_ref().unwrap_or_else(|| <super::base::Metadata as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metadata_match(&mut self) {
        self.metadata_match.clear();
    }

    pub fn has_metadata_match(&self) -> bool {
        self.metadata_match.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata_match(&mut self, v: super::base::Metadata) {
        self.metadata_match = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata_match(&mut self) -> &mut super::base::Metadata {
        if self.metadata_match.is_none() {
            self.metadata_match.set_default();
        }
        self.metadata_match.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata_match(&mut self) -> super::base::Metadata {
        self.metadata_match.take().unwrap_or_else(|| super::base::Metadata::new())
    }
}

impl ::protobuf::Message for TcpProxy_WeightedCluster_ClusterWeight {
    fn is_initialized(&self) -> bool {
        for v in &self.metadata_match {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.weight = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata_match)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.weight != 0 {
            my_size += ::protobuf::rt::value_size(2, self.weight, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.metadata_match.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.weight != 0 {
            os.write_uint32(2, self.weight)?;
        }
        if let Some(ref v) = self.metadata_match.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TcpProxy_WeightedCluster_ClusterWeight {
        TcpProxy_WeightedCluster_ClusterWeight::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &TcpProxy_WeightedCluster_ClusterWeight| { &m.name },
                |m: &mut TcpProxy_WeightedCluster_ClusterWeight| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "weight",
                |m: &TcpProxy_WeightedCluster_ClusterWeight| { &m.weight },
                |m: &mut TcpProxy_WeightedCluster_ClusterWeight| { &mut m.weight },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Metadata>>(
                "metadata_match",
                |m: &TcpProxy_WeightedCluster_ClusterWeight| { &m.metadata_match },
                |m: &mut TcpProxy_WeightedCluster_ClusterWeight| { &mut m.metadata_match },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TcpProxy_WeightedCluster_ClusterWeight>(
                "TcpProxy.WeightedCluster.ClusterWeight",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TcpProxy_WeightedCluster_ClusterWeight {
        static instance: ::protobuf::rt::LazyV2<TcpProxy_WeightedCluster_ClusterWeight> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TcpProxy_WeightedCluster_ClusterWeight::new)
    }
}

impl ::protobuf::Clear for TcpProxy_WeightedCluster_ClusterWeight {
    fn clear(&mut self) {
        self.name.clear();
        self.weight = 0;
        self.metadata_match.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TcpProxy_WeightedCluster_ClusterWeight {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TcpProxy_WeightedCluster_ClusterWeight {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TcpProxy_TunnelingConfig {
    // message fields
    pub hostname: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TcpProxy_TunnelingConfig {
    fn default() -> &'a TcpProxy_TunnelingConfig {
        <TcpProxy_TunnelingConfig as ::protobuf::Message>::default_instance()
    }
}

impl TcpProxy_TunnelingConfig {
    pub fn new() -> TcpProxy_TunnelingConfig {
        ::std::default::Default::default()
    }

    // string hostname = 1;


    pub fn get_hostname(&self) -> &str {
        &self.hostname
    }
    pub fn clear_hostname(&mut self) {
        self.hostname.clear();
    }

    // Param is passed by value, moved
    pub fn set_hostname(&mut self, v: ::std::string::String) {
        self.hostname = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hostname(&mut self) -> &mut ::std::string::String {
        &mut self.hostname
    }

    // Take field
    pub fn take_hostname(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hostname, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TcpProxy_TunnelingConfig {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hostname)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.hostname.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.hostname);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.hostname.is_empty() {
            os.write_string(1, &self.hostname)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TcpProxy_TunnelingConfig {
        TcpProxy_TunnelingConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "hostname",
                |m: &TcpProxy_TunnelingConfig| { &m.hostname },
                |m: &mut TcpProxy_TunnelingConfig| { &mut m.hostname },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TcpProxy_TunnelingConfig>(
                "TcpProxy.TunnelingConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TcpProxy_TunnelingConfig {
        static instance: ::protobuf::rt::LazyV2<TcpProxy_TunnelingConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TcpProxy_TunnelingConfig::new)
    }
}

impl ::protobuf::Clear for TcpProxy_TunnelingConfig {
    fn clear(&mut self) {
        self.hostname.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TcpProxy_TunnelingConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TcpProxy_TunnelingConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n8envoy/config/filter/network/tcp_proxy/v2/tcp_proxy.proto\x12(envoy.co\
    nfig.filter.network.tcp_proxy.v2\x1a\x1fenvoy/api/v2/core/address.proto\
    \x1a\x1cenvoy/api/v2/core/base.proto\x1a0envoy/config/filter/accesslog/v\
    2/accesslog.proto\x1a\x1cenvoy/type/hash_policy.proto\x1a\x1egoogle/prot\
    obuf/duration.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1eudpa/an\
    notations/migrate.proto\x1a\x1dudpa/annotations/status.proto\x1a\x17vali\
    date/validate.proto\"\xad\r\n\x08TcpProxy\x12(\n\x0bstat_prefix\x18\x01\
    \x20\x01(\tR\nstatPrefixB\x07\xfaB\x04r\x02\x20\x01\x12\x1a\n\x07cluster\
    \x18\x02\x20\x01(\tH\0R\x07cluster\x12q\n\x11weighted_clusters\x18\n\x20\
    \x01(\x0b2B.envoy.config.filter.network.tcp_proxy.v2.TcpProxy.WeightedCl\
    usterH\0R\x10weightedClusters\x12B\n\x0emetadata_match\x18\t\x20\x01(\
    \x0b2\x1b.envoy.api.v2.core.MetadataR\rmetadataMatch\x12<\n\x0cidle_time\
    out\x18\x08\x20\x01(\x0b2\x19.google.protobuf.DurationR\x0bidleTimeout\
    \x12Q\n\x17downstream_idle_timeout\x18\x03\x20\x01(\x0b2\x19.google.prot\
    obuf.DurationR\x15downstreamIdleTimeout\x12M\n\x15upstream_idle_timeout\
    \x18\x04\x20\x01(\x0b2\x19.google.protobuf.DurationR\x13upstreamIdleTime\
    out\x12J\n\naccess_log\x18\x05\x20\x03(\x0b2+.envoy.config.filter.access\
    log.v2.AccessLogR\taccessLog\x12h\n\rdeprecated_v1\x18\x06\x20\x01(\x0b2\
    ?.envoy.config.filter.network.tcp_proxy.v2.TcpProxy.DeprecatedV1R\x0cdep\
    recatedV1B\x02\x18\x01\x12W\n\x14max_connect_attempts\x18\x07\x20\x01(\
    \x0b2\x1c.google.protobuf.UInt32ValueR\x12maxConnectAttemptsB\x07\xfaB\
    \x04*\x02(\x01\x12A\n\x0bhash_policy\x18\x0b\x20\x03(\x0b2\x16.envoy.typ\
    e.HashPolicyR\nhashPolicyB\x08\xfaB\x05\x92\x01\x02\x10\x01\x12m\n\x10tu\
    nneling_config\x18\x0c\x20\x01(\x0b2B.envoy.config.filter.network.tcp_pr\
    oxy.v2.TcpProxy.TunnelingConfigR\x0ftunnelingConfig\x1a\x90\x03\n\x0cDep\
    recatedV1\x12j\n\x06routes\x18\x01\x20\x03(\x0b2H.envoy.config.filter.ne\
    twork.tcp_proxy.v2.TcpProxy.DeprecatedV1.TCPRouteR\x06routesB\x08\xfaB\
    \x05\x92\x01\x02\x08\x01\x1a\x8f\x02\n\x08TCPRoute\x12!\n\x07cluster\x18\
    \x01\x20\x01(\tR\x07clusterB\x07\xfaB\x04r\x02\x20\x01\x12L\n\x13destina\
    tion_ip_list\x18\x02\x20\x03(\x0b2\x1c.envoy.api.v2.core.CidrRangeR\x11d\
    estinationIpList\x12+\n\x11destination_ports\x18\x03\x20\x01(\tR\x10dest\
    inationPorts\x12B\n\x0esource_ip_list\x18\x04\x20\x03(\x0b2\x1c.envoy.ap\
    i.v2.core.CidrRangeR\x0csourceIpList\x12!\n\x0csource_ports\x18\x05\x20\
    \x01(\tR\x0bsourcePorts:\x02\x18\x01\x1a\x9d\x02\n\x0fWeightedCluster\
    \x12v\n\x08clusters\x18\x01\x20\x03(\x0b2P.envoy.config.filter.network.t\
    cp_proxy.v2.TcpProxy.WeightedCluster.ClusterWeightR\x08clustersB\x08\xfa\
    B\x05\x92\x01\x02\x08\x01\x1a\x91\x01\n\rClusterWeight\x12\x1b\n\x04name\
    \x18\x01\x20\x01(\tR\x04nameB\x07\xfaB\x04r\x02\x20\x01\x12\x1f\n\x06wei\
    ght\x18\x02\x20\x01(\rR\x06weightB\x07\xfaB\x04*\x02(\x01\x12B\n\x0emeta\
    data_match\x18\x03\x20\x01(\x0b2\x1b.envoy.api.v2.core.MetadataR\rmetada\
    taMatch\x1a6\n\x0fTunnelingConfig\x12#\n\x08hostname\x18\x01\x20\x01(\tR\
    \x08hostnameB\x07\xfaB\x04r\x02\x20\x01B\x18\n\x11cluster_specifier\x12\
    \x03\xf8B\x01B\x86\x01\n6io.envoyproxy.envoy.config.filter.network.tcp_p\
    roxy.v2B\rTcpProxyProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\x01\xf2\x98\xfe\
    \x8f\x05/\x12-envoy.extensions.filters.network.tcp_proxy.v3b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
