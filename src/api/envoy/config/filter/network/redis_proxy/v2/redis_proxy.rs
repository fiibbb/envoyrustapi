// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/filter/network/redis_proxy/v2/redis_proxy.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct RedisProxy {
    // message fields
    pub stat_prefix: ::std::string::String,
    pub cluster: ::std::string::String,
    pub settings: ::protobuf::SingularPtrField<RedisProxy_ConnPoolSettings>,
    pub latency_in_micros: bool,
    pub prefix_routes: ::protobuf::SingularPtrField<RedisProxy_PrefixRoutes>,
    pub downstream_auth_password: ::protobuf::SingularPtrField<super::base::DataSource>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RedisProxy {
    fn default() -> &'a RedisProxy {
        <RedisProxy as ::protobuf::Message>::default_instance()
    }
}

impl RedisProxy {
    pub fn new() -> RedisProxy {
        ::std::default::Default::default()
    }

    // string stat_prefix = 1;


    pub fn get_stat_prefix(&self) -> &str {
        &self.stat_prefix
    }
    pub fn clear_stat_prefix(&mut self) {
        self.stat_prefix.clear();
    }

    // Param is passed by value, moved
    pub fn set_stat_prefix(&mut self, v: ::std::string::String) {
        self.stat_prefix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stat_prefix(&mut self) -> &mut ::std::string::String {
        &mut self.stat_prefix
    }

    // Take field
    pub fn take_stat_prefix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.stat_prefix, ::std::string::String::new())
    }

    // string cluster = 2;


    pub fn get_cluster(&self) -> &str {
        &self.cluster
    }
    pub fn clear_cluster(&mut self) {
        self.cluster.clear();
    }

    // Param is passed by value, moved
    pub fn set_cluster(&mut self, v: ::std::string::String) {
        self.cluster = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cluster(&mut self) -> &mut ::std::string::String {
        &mut self.cluster
    }

    // Take field
    pub fn take_cluster(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cluster, ::std::string::String::new())
    }

    // .envoy.config.filter.network.redis_proxy.v2.RedisProxy.ConnPoolSettings settings = 3;


    pub fn get_settings(&self) -> &RedisProxy_ConnPoolSettings {
        self.settings.as_ref().unwrap_or_else(|| <RedisProxy_ConnPoolSettings as ::protobuf::Message>::default_instance())
    }
    pub fn clear_settings(&mut self) {
        self.settings.clear();
    }

    pub fn has_settings(&self) -> bool {
        self.settings.is_some()
    }

    // Param is passed by value, moved
    pub fn set_settings(&mut self, v: RedisProxy_ConnPoolSettings) {
        self.settings = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_settings(&mut self) -> &mut RedisProxy_ConnPoolSettings {
        if self.settings.is_none() {
            self.settings.set_default();
        }
        self.settings.as_mut().unwrap()
    }

    // Take field
    pub fn take_settings(&mut self) -> RedisProxy_ConnPoolSettings {
        self.settings.take().unwrap_or_else(|| RedisProxy_ConnPoolSettings::new())
    }

    // bool latency_in_micros = 4;


    pub fn get_latency_in_micros(&self) -> bool {
        self.latency_in_micros
    }
    pub fn clear_latency_in_micros(&mut self) {
        self.latency_in_micros = false;
    }

    // Param is passed by value, moved
    pub fn set_latency_in_micros(&mut self, v: bool) {
        self.latency_in_micros = v;
    }

    // .envoy.config.filter.network.redis_proxy.v2.RedisProxy.PrefixRoutes prefix_routes = 5;


    pub fn get_prefix_routes(&self) -> &RedisProxy_PrefixRoutes {
        self.prefix_routes.as_ref().unwrap_or_else(|| <RedisProxy_PrefixRoutes as ::protobuf::Message>::default_instance())
    }
    pub fn clear_prefix_routes(&mut self) {
        self.prefix_routes.clear();
    }

    pub fn has_prefix_routes(&self) -> bool {
        self.prefix_routes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_prefix_routes(&mut self, v: RedisProxy_PrefixRoutes) {
        self.prefix_routes = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prefix_routes(&mut self) -> &mut RedisProxy_PrefixRoutes {
        if self.prefix_routes.is_none() {
            self.prefix_routes.set_default();
        }
        self.prefix_routes.as_mut().unwrap()
    }

    // Take field
    pub fn take_prefix_routes(&mut self) -> RedisProxy_PrefixRoutes {
        self.prefix_routes.take().unwrap_or_else(|| RedisProxy_PrefixRoutes::new())
    }

    // .envoy.api.v2.core.DataSource downstream_auth_password = 6;


    pub fn get_downstream_auth_password(&self) -> &super::base::DataSource {
        self.downstream_auth_password.as_ref().unwrap_or_else(|| <super::base::DataSource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_downstream_auth_password(&mut self) {
        self.downstream_auth_password.clear();
    }

    pub fn has_downstream_auth_password(&self) -> bool {
        self.downstream_auth_password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_downstream_auth_password(&mut self, v: super::base::DataSource) {
        self.downstream_auth_password = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_downstream_auth_password(&mut self) -> &mut super::base::DataSource {
        if self.downstream_auth_password.is_none() {
            self.downstream_auth_password.set_default();
        }
        self.downstream_auth_password.as_mut().unwrap()
    }

    // Take field
    pub fn take_downstream_auth_password(&mut self) -> super::base::DataSource {
        self.downstream_auth_password.take().unwrap_or_else(|| super::base::DataSource::new())
    }
}

impl ::protobuf::Message for RedisProxy {
    fn is_initialized(&self) -> bool {
        for v in &self.settings {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.prefix_routes {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.downstream_auth_password {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.stat_prefix)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cluster)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.settings)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.latency_in_micros = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.prefix_routes)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.downstream_auth_password)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.stat_prefix.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.stat_prefix);
        }
        if !self.cluster.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.cluster);
        }
        if let Some(ref v) = self.settings.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.latency_in_micros != false {
            my_size += 2;
        }
        if let Some(ref v) = self.prefix_routes.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.downstream_auth_password.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.stat_prefix.is_empty() {
            os.write_string(1, &self.stat_prefix)?;
        }
        if !self.cluster.is_empty() {
            os.write_string(2, &self.cluster)?;
        }
        if let Some(ref v) = self.settings.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.latency_in_micros != false {
            os.write_bool(4, self.latency_in_micros)?;
        }
        if let Some(ref v) = self.prefix_routes.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.downstream_auth_password.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RedisProxy {
        RedisProxy::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "stat_prefix",
                |m: &RedisProxy| { &m.stat_prefix },
                |m: &mut RedisProxy| { &mut m.stat_prefix },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cluster",
                |m: &RedisProxy| { &m.cluster },
                |m: &mut RedisProxy| { &mut m.cluster },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RedisProxy_ConnPoolSettings>>(
                "settings",
                |m: &RedisProxy| { &m.settings },
                |m: &mut RedisProxy| { &mut m.settings },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "latency_in_micros",
                |m: &RedisProxy| { &m.latency_in_micros },
                |m: &mut RedisProxy| { &mut m.latency_in_micros },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RedisProxy_PrefixRoutes>>(
                "prefix_routes",
                |m: &RedisProxy| { &m.prefix_routes },
                |m: &mut RedisProxy| { &mut m.prefix_routes },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::DataSource>>(
                "downstream_auth_password",
                |m: &RedisProxy| { &m.downstream_auth_password },
                |m: &mut RedisProxy| { &mut m.downstream_auth_password },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RedisProxy>(
                "RedisProxy",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RedisProxy {
        static instance: ::protobuf::rt::LazyV2<RedisProxy> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RedisProxy::new)
    }
}

impl ::protobuf::Clear for RedisProxy {
    fn clear(&mut self) {
        self.stat_prefix.clear();
        self.cluster.clear();
        self.settings.clear();
        self.latency_in_micros = false;
        self.prefix_routes.clear();
        self.downstream_auth_password.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RedisProxy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RedisProxy {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RedisProxy_ConnPoolSettings {
    // message fields
    pub op_timeout: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub enable_hashtagging: bool,
    pub enable_redirection: bool,
    pub max_buffer_size_before_flush: u32,
    pub buffer_flush_timeout: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub max_upstream_unknown_connections: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub enable_command_stats: bool,
    pub read_policy: RedisProxy_ConnPoolSettings_ReadPolicy,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RedisProxy_ConnPoolSettings {
    fn default() -> &'a RedisProxy_ConnPoolSettings {
        <RedisProxy_ConnPoolSettings as ::protobuf::Message>::default_instance()
    }
}

impl RedisProxy_ConnPoolSettings {
    pub fn new() -> RedisProxy_ConnPoolSettings {
        ::std::default::Default::default()
    }

    // .google.protobuf.Duration op_timeout = 1;


    pub fn get_op_timeout(&self) -> &::protobuf::well_known_types::Duration {
        self.op_timeout.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_op_timeout(&mut self) {
        self.op_timeout.clear();
    }

    pub fn has_op_timeout(&self) -> bool {
        self.op_timeout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_op_timeout(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.op_timeout = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_op_timeout(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.op_timeout.is_none() {
            self.op_timeout.set_default();
        }
        self.op_timeout.as_mut().unwrap()
    }

    // Take field
    pub fn take_op_timeout(&mut self) -> ::protobuf::well_known_types::Duration {
        self.op_timeout.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // bool enable_hashtagging = 2;


    pub fn get_enable_hashtagging(&self) -> bool {
        self.enable_hashtagging
    }
    pub fn clear_enable_hashtagging(&mut self) {
        self.enable_hashtagging = false;
    }

    // Param is passed by value, moved
    pub fn set_enable_hashtagging(&mut self, v: bool) {
        self.enable_hashtagging = v;
    }

    // bool enable_redirection = 3;


    pub fn get_enable_redirection(&self) -> bool {
        self.enable_redirection
    }
    pub fn clear_enable_redirection(&mut self) {
        self.enable_redirection = false;
    }

    // Param is passed by value, moved
    pub fn set_enable_redirection(&mut self, v: bool) {
        self.enable_redirection = v;
    }

    // uint32 max_buffer_size_before_flush = 4;


    pub fn get_max_buffer_size_before_flush(&self) -> u32 {
        self.max_buffer_size_before_flush
    }
    pub fn clear_max_buffer_size_before_flush(&mut self) {
        self.max_buffer_size_before_flush = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_buffer_size_before_flush(&mut self, v: u32) {
        self.max_buffer_size_before_flush = v;
    }

    // .google.protobuf.Duration buffer_flush_timeout = 5;


    pub fn get_buffer_flush_timeout(&self) -> &::protobuf::well_known_types::Duration {
        self.buffer_flush_timeout.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_buffer_flush_timeout(&mut self) {
        self.buffer_flush_timeout.clear();
    }

    pub fn has_buffer_flush_timeout(&self) -> bool {
        self.buffer_flush_timeout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_buffer_flush_timeout(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.buffer_flush_timeout = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_buffer_flush_timeout(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.buffer_flush_timeout.is_none() {
            self.buffer_flush_timeout.set_default();
        }
        self.buffer_flush_timeout.as_mut().unwrap()
    }

    // Take field
    pub fn take_buffer_flush_timeout(&mut self) -> ::protobuf::well_known_types::Duration {
        self.buffer_flush_timeout.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.UInt32Value max_upstream_unknown_connections = 6;


    pub fn get_max_upstream_unknown_connections(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.max_upstream_unknown_connections.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_max_upstream_unknown_connections(&mut self) {
        self.max_upstream_unknown_connections.clear();
    }

    pub fn has_max_upstream_unknown_connections(&self) -> bool {
        self.max_upstream_unknown_connections.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_upstream_unknown_connections(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.max_upstream_unknown_connections = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_upstream_unknown_connections(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.max_upstream_unknown_connections.is_none() {
            self.max_upstream_unknown_connections.set_default();
        }
        self.max_upstream_unknown_connections.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_upstream_unknown_connections(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.max_upstream_unknown_connections.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // bool enable_command_stats = 8;


    pub fn get_enable_command_stats(&self) -> bool {
        self.enable_command_stats
    }
    pub fn clear_enable_command_stats(&mut self) {
        self.enable_command_stats = false;
    }

    // Param is passed by value, moved
    pub fn set_enable_command_stats(&mut self, v: bool) {
        self.enable_command_stats = v;
    }

    // .envoy.config.filter.network.redis_proxy.v2.RedisProxy.ConnPoolSettings.ReadPolicy read_policy = 7;


    pub fn get_read_policy(&self) -> RedisProxy_ConnPoolSettings_ReadPolicy {
        self.read_policy
    }
    pub fn clear_read_policy(&mut self) {
        self.read_policy = RedisProxy_ConnPoolSettings_ReadPolicy::MASTER;
    }

    // Param is passed by value, moved
    pub fn set_read_policy(&mut self, v: RedisProxy_ConnPoolSettings_ReadPolicy) {
        self.read_policy = v;
    }
}

impl ::protobuf::Message for RedisProxy_ConnPoolSettings {
    fn is_initialized(&self) -> bool {
        for v in &self.op_timeout {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.buffer_flush_timeout {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.max_upstream_unknown_connections {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.op_timeout)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.enable_hashtagging = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.enable_redirection = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.max_buffer_size_before_flush = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.buffer_flush_timeout)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_upstream_unknown_connections)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.enable_command_stats = tmp;
                },
                7 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.read_policy, 7, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.op_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.enable_hashtagging != false {
            my_size += 2;
        }
        if self.enable_redirection != false {
            my_size += 2;
        }
        if self.max_buffer_size_before_flush != 0 {
            my_size += ::protobuf::rt::value_size(4, self.max_buffer_size_before_flush, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.buffer_flush_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.max_upstream_unknown_connections.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.enable_command_stats != false {
            my_size += 2;
        }
        if self.read_policy != RedisProxy_ConnPoolSettings_ReadPolicy::MASTER {
            my_size += ::protobuf::rt::enum_size(7, self.read_policy);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.op_timeout.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.enable_hashtagging != false {
            os.write_bool(2, self.enable_hashtagging)?;
        }
        if self.enable_redirection != false {
            os.write_bool(3, self.enable_redirection)?;
        }
        if self.max_buffer_size_before_flush != 0 {
            os.write_uint32(4, self.max_buffer_size_before_flush)?;
        }
        if let Some(ref v) = self.buffer_flush_timeout.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.max_upstream_unknown_connections.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.enable_command_stats != false {
            os.write_bool(8, self.enable_command_stats)?;
        }
        if self.read_policy != RedisProxy_ConnPoolSettings_ReadPolicy::MASTER {
            os.write_enum(7, ::protobuf::ProtobufEnum::value(&self.read_policy))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RedisProxy_ConnPoolSettings {
        RedisProxy_ConnPoolSettings::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "op_timeout",
                |m: &RedisProxy_ConnPoolSettings| { &m.op_timeout },
                |m: &mut RedisProxy_ConnPoolSettings| { &mut m.op_timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "enable_hashtagging",
                |m: &RedisProxy_ConnPoolSettings| { &m.enable_hashtagging },
                |m: &mut RedisProxy_ConnPoolSettings| { &mut m.enable_hashtagging },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "enable_redirection",
                |m: &RedisProxy_ConnPoolSettings| { &m.enable_redirection },
                |m: &mut RedisProxy_ConnPoolSettings| { &mut m.enable_redirection },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "max_buffer_size_before_flush",
                |m: &RedisProxy_ConnPoolSettings| { &m.max_buffer_size_before_flush },
                |m: &mut RedisProxy_ConnPoolSettings| { &mut m.max_buffer_size_before_flush },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "buffer_flush_timeout",
                |m: &RedisProxy_ConnPoolSettings| { &m.buffer_flush_timeout },
                |m: &mut RedisProxy_ConnPoolSettings| { &mut m.buffer_flush_timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "max_upstream_unknown_connections",
                |m: &RedisProxy_ConnPoolSettings| { &m.max_upstream_unknown_connections },
                |m: &mut RedisProxy_ConnPoolSettings| { &mut m.max_upstream_unknown_connections },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "enable_command_stats",
                |m: &RedisProxy_ConnPoolSettings| { &m.enable_command_stats },
                |m: &mut RedisProxy_ConnPoolSettings| { &mut m.enable_command_stats },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RedisProxy_ConnPoolSettings_ReadPolicy>>(
                "read_policy",
                |m: &RedisProxy_ConnPoolSettings| { &m.read_policy },
                |m: &mut RedisProxy_ConnPoolSettings| { &mut m.read_policy },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RedisProxy_ConnPoolSettings>(
                "RedisProxy.ConnPoolSettings",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RedisProxy_ConnPoolSettings {
        static instance: ::protobuf::rt::LazyV2<RedisProxy_ConnPoolSettings> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RedisProxy_ConnPoolSettings::new)
    }
}

impl ::protobuf::Clear for RedisProxy_ConnPoolSettings {
    fn clear(&mut self) {
        self.op_timeout.clear();
        self.enable_hashtagging = false;
        self.enable_redirection = false;
        self.max_buffer_size_before_flush = 0;
        self.buffer_flush_timeout.clear();
        self.max_upstream_unknown_connections.clear();
        self.enable_command_stats = false;
        self.read_policy = RedisProxy_ConnPoolSettings_ReadPolicy::MASTER;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RedisProxy_ConnPoolSettings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RedisProxy_ConnPoolSettings {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RedisProxy_ConnPoolSettings_ReadPolicy {
    MASTER = 0,
    PREFER_MASTER = 1,
    REPLICA = 2,
    PREFER_REPLICA = 3,
    ANY = 4,
}

impl ::protobuf::ProtobufEnum for RedisProxy_ConnPoolSettings_ReadPolicy {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RedisProxy_ConnPoolSettings_ReadPolicy> {
        match value {
            0 => ::std::option::Option::Some(RedisProxy_ConnPoolSettings_ReadPolicy::MASTER),
            1 => ::std::option::Option::Some(RedisProxy_ConnPoolSettings_ReadPolicy::PREFER_MASTER),
            2 => ::std::option::Option::Some(RedisProxy_ConnPoolSettings_ReadPolicy::REPLICA),
            3 => ::std::option::Option::Some(RedisProxy_ConnPoolSettings_ReadPolicy::PREFER_REPLICA),
            4 => ::std::option::Option::Some(RedisProxy_ConnPoolSettings_ReadPolicy::ANY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RedisProxy_ConnPoolSettings_ReadPolicy] = &[
            RedisProxy_ConnPoolSettings_ReadPolicy::MASTER,
            RedisProxy_ConnPoolSettings_ReadPolicy::PREFER_MASTER,
            RedisProxy_ConnPoolSettings_ReadPolicy::REPLICA,
            RedisProxy_ConnPoolSettings_ReadPolicy::PREFER_REPLICA,
            RedisProxy_ConnPoolSettings_ReadPolicy::ANY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<RedisProxy_ConnPoolSettings_ReadPolicy>("RedisProxy.ConnPoolSettings.ReadPolicy", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for RedisProxy_ConnPoolSettings_ReadPolicy {
}

impl ::std::default::Default for RedisProxy_ConnPoolSettings_ReadPolicy {
    fn default() -> Self {
        RedisProxy_ConnPoolSettings_ReadPolicy::MASTER
    }
}

impl ::protobuf::reflect::ProtobufValue for RedisProxy_ConnPoolSettings_ReadPolicy {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RedisProxy_PrefixRoutes {
    // message fields
    pub routes: ::protobuf::RepeatedField<RedisProxy_PrefixRoutes_Route>,
    pub case_insensitive: bool,
    pub catch_all_cluster: ::std::string::String,
    pub catch_all_route: ::protobuf::SingularPtrField<RedisProxy_PrefixRoutes_Route>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RedisProxy_PrefixRoutes {
    fn default() -> &'a RedisProxy_PrefixRoutes {
        <RedisProxy_PrefixRoutes as ::protobuf::Message>::default_instance()
    }
}

impl RedisProxy_PrefixRoutes {
    pub fn new() -> RedisProxy_PrefixRoutes {
        ::std::default::Default::default()
    }

    // repeated .envoy.config.filter.network.redis_proxy.v2.RedisProxy.PrefixRoutes.Route routes = 1;


    pub fn get_routes(&self) -> &[RedisProxy_PrefixRoutes_Route] {
        &self.routes
    }
    pub fn clear_routes(&mut self) {
        self.routes.clear();
    }

    // Param is passed by value, moved
    pub fn set_routes(&mut self, v: ::protobuf::RepeatedField<RedisProxy_PrefixRoutes_Route>) {
        self.routes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_routes(&mut self) -> &mut ::protobuf::RepeatedField<RedisProxy_PrefixRoutes_Route> {
        &mut self.routes
    }

    // Take field
    pub fn take_routes(&mut self) -> ::protobuf::RepeatedField<RedisProxy_PrefixRoutes_Route> {
        ::std::mem::replace(&mut self.routes, ::protobuf::RepeatedField::new())
    }

    // bool case_insensitive = 2;


    pub fn get_case_insensitive(&self) -> bool {
        self.case_insensitive
    }
    pub fn clear_case_insensitive(&mut self) {
        self.case_insensitive = false;
    }

    // Param is passed by value, moved
    pub fn set_case_insensitive(&mut self, v: bool) {
        self.case_insensitive = v;
    }

    // string catch_all_cluster = 3;


    pub fn get_catch_all_cluster(&self) -> &str {
        &self.catch_all_cluster
    }
    pub fn clear_catch_all_cluster(&mut self) {
        self.catch_all_cluster.clear();
    }

    // Param is passed by value, moved
    pub fn set_catch_all_cluster(&mut self, v: ::std::string::String) {
        self.catch_all_cluster = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_catch_all_cluster(&mut self) -> &mut ::std::string::String {
        &mut self.catch_all_cluster
    }

    // Take field
    pub fn take_catch_all_cluster(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.catch_all_cluster, ::std::string::String::new())
    }

    // .envoy.config.filter.network.redis_proxy.v2.RedisProxy.PrefixRoutes.Route catch_all_route = 4;


    pub fn get_catch_all_route(&self) -> &RedisProxy_PrefixRoutes_Route {
        self.catch_all_route.as_ref().unwrap_or_else(|| <RedisProxy_PrefixRoutes_Route as ::protobuf::Message>::default_instance())
    }
    pub fn clear_catch_all_route(&mut self) {
        self.catch_all_route.clear();
    }

    pub fn has_catch_all_route(&self) -> bool {
        self.catch_all_route.is_some()
    }

    // Param is passed by value, moved
    pub fn set_catch_all_route(&mut self, v: RedisProxy_PrefixRoutes_Route) {
        self.catch_all_route = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_catch_all_route(&mut self) -> &mut RedisProxy_PrefixRoutes_Route {
        if self.catch_all_route.is_none() {
            self.catch_all_route.set_default();
        }
        self.catch_all_route.as_mut().unwrap()
    }

    // Take field
    pub fn take_catch_all_route(&mut self) -> RedisProxy_PrefixRoutes_Route {
        self.catch_all_route.take().unwrap_or_else(|| RedisProxy_PrefixRoutes_Route::new())
    }
}

impl ::protobuf::Message for RedisProxy_PrefixRoutes {
    fn is_initialized(&self) -> bool {
        for v in &self.routes {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.catch_all_route {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.routes)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.case_insensitive = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.catch_all_cluster)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.catch_all_route)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.routes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.case_insensitive != false {
            my_size += 2;
        }
        if !self.catch_all_cluster.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.catch_all_cluster);
        }
        if let Some(ref v) = self.catch_all_route.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.routes {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.case_insensitive != false {
            os.write_bool(2, self.case_insensitive)?;
        }
        if !self.catch_all_cluster.is_empty() {
            os.write_string(3, &self.catch_all_cluster)?;
        }
        if let Some(ref v) = self.catch_all_route.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RedisProxy_PrefixRoutes {
        RedisProxy_PrefixRoutes::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RedisProxy_PrefixRoutes_Route>>(
                "routes",
                |m: &RedisProxy_PrefixRoutes| { &m.routes },
                |m: &mut RedisProxy_PrefixRoutes| { &mut m.routes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "case_insensitive",
                |m: &RedisProxy_PrefixRoutes| { &m.case_insensitive },
                |m: &mut RedisProxy_PrefixRoutes| { &mut m.case_insensitive },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "catch_all_cluster",
                |m: &RedisProxy_PrefixRoutes| { &m.catch_all_cluster },
                |m: &mut RedisProxy_PrefixRoutes| { &mut m.catch_all_cluster },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RedisProxy_PrefixRoutes_Route>>(
                "catch_all_route",
                |m: &RedisProxy_PrefixRoutes| { &m.catch_all_route },
                |m: &mut RedisProxy_PrefixRoutes| { &mut m.catch_all_route },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RedisProxy_PrefixRoutes>(
                "RedisProxy.PrefixRoutes",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RedisProxy_PrefixRoutes {
        static instance: ::protobuf::rt::LazyV2<RedisProxy_PrefixRoutes> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RedisProxy_PrefixRoutes::new)
    }
}

impl ::protobuf::Clear for RedisProxy_PrefixRoutes {
    fn clear(&mut self) {
        self.routes.clear();
        self.case_insensitive = false;
        self.catch_all_cluster.clear();
        self.catch_all_route.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RedisProxy_PrefixRoutes {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RedisProxy_PrefixRoutes {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RedisProxy_PrefixRoutes_Route {
    // message fields
    pub prefix: ::std::string::String,
    pub remove_prefix: bool,
    pub cluster: ::std::string::String,
    pub request_mirror_policy: ::protobuf::RepeatedField<RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RedisProxy_PrefixRoutes_Route {
    fn default() -> &'a RedisProxy_PrefixRoutes_Route {
        <RedisProxy_PrefixRoutes_Route as ::protobuf::Message>::default_instance()
    }
}

impl RedisProxy_PrefixRoutes_Route {
    pub fn new() -> RedisProxy_PrefixRoutes_Route {
        ::std::default::Default::default()
    }

    // string prefix = 1;


    pub fn get_prefix(&self) -> &str {
        &self.prefix
    }
    pub fn clear_prefix(&mut self) {
        self.prefix.clear();
    }

    // Param is passed by value, moved
    pub fn set_prefix(&mut self, v: ::std::string::String) {
        self.prefix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prefix(&mut self) -> &mut ::std::string::String {
        &mut self.prefix
    }

    // Take field
    pub fn take_prefix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prefix, ::std::string::String::new())
    }

    // bool remove_prefix = 2;


    pub fn get_remove_prefix(&self) -> bool {
        self.remove_prefix
    }
    pub fn clear_remove_prefix(&mut self) {
        self.remove_prefix = false;
    }

    // Param is passed by value, moved
    pub fn set_remove_prefix(&mut self, v: bool) {
        self.remove_prefix = v;
    }

    // string cluster = 3;


    pub fn get_cluster(&self) -> &str {
        &self.cluster
    }
    pub fn clear_cluster(&mut self) {
        self.cluster.clear();
    }

    // Param is passed by value, moved
    pub fn set_cluster(&mut self, v: ::std::string::String) {
        self.cluster = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cluster(&mut self) -> &mut ::std::string::String {
        &mut self.cluster
    }

    // Take field
    pub fn take_cluster(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cluster, ::std::string::String::new())
    }

    // repeated .envoy.config.filter.network.redis_proxy.v2.RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy request_mirror_policy = 4;


    pub fn get_request_mirror_policy(&self) -> &[RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy] {
        &self.request_mirror_policy
    }
    pub fn clear_request_mirror_policy(&mut self) {
        self.request_mirror_policy.clear();
    }

    // Param is passed by value, moved
    pub fn set_request_mirror_policy(&mut self, v: ::protobuf::RepeatedField<RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy>) {
        self.request_mirror_policy = v;
    }

    // Mutable pointer to the field.
    pub fn mut_request_mirror_policy(&mut self) -> &mut ::protobuf::RepeatedField<RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy> {
        &mut self.request_mirror_policy
    }

    // Take field
    pub fn take_request_mirror_policy(&mut self) -> ::protobuf::RepeatedField<RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy> {
        ::std::mem::replace(&mut self.request_mirror_policy, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RedisProxy_PrefixRoutes_Route {
    fn is_initialized(&self) -> bool {
        for v in &self.request_mirror_policy {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prefix)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.remove_prefix = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cluster)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.request_mirror_policy)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.prefix.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.prefix);
        }
        if self.remove_prefix != false {
            my_size += 2;
        }
        if !self.cluster.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.cluster);
        }
        for value in &self.request_mirror_policy {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.prefix.is_empty() {
            os.write_string(1, &self.prefix)?;
        }
        if self.remove_prefix != false {
            os.write_bool(2, self.remove_prefix)?;
        }
        if !self.cluster.is_empty() {
            os.write_string(3, &self.cluster)?;
        }
        for v in &self.request_mirror_policy {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RedisProxy_PrefixRoutes_Route {
        RedisProxy_PrefixRoutes_Route::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "prefix",
                |m: &RedisProxy_PrefixRoutes_Route| { &m.prefix },
                |m: &mut RedisProxy_PrefixRoutes_Route| { &mut m.prefix },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "remove_prefix",
                |m: &RedisProxy_PrefixRoutes_Route| { &m.remove_prefix },
                |m: &mut RedisProxy_PrefixRoutes_Route| { &mut m.remove_prefix },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cluster",
                |m: &RedisProxy_PrefixRoutes_Route| { &m.cluster },
                |m: &mut RedisProxy_PrefixRoutes_Route| { &mut m.cluster },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy>>(
                "request_mirror_policy",
                |m: &RedisProxy_PrefixRoutes_Route| { &m.request_mirror_policy },
                |m: &mut RedisProxy_PrefixRoutes_Route| { &mut m.request_mirror_policy },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RedisProxy_PrefixRoutes_Route>(
                "RedisProxy.PrefixRoutes.Route",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RedisProxy_PrefixRoutes_Route {
        static instance: ::protobuf::rt::LazyV2<RedisProxy_PrefixRoutes_Route> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RedisProxy_PrefixRoutes_Route::new)
    }
}

impl ::protobuf::Clear for RedisProxy_PrefixRoutes_Route {
    fn clear(&mut self) {
        self.prefix.clear();
        self.remove_prefix = false;
        self.cluster.clear();
        self.request_mirror_policy.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RedisProxy_PrefixRoutes_Route {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RedisProxy_PrefixRoutes_Route {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy {
    // message fields
    pub cluster: ::std::string::String,
    pub runtime_fraction: ::protobuf::SingularPtrField<super::base::RuntimeFractionalPercent>,
    pub exclude_read_commands: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy {
    fn default() -> &'a RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy {
        <RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy as ::protobuf::Message>::default_instance()
    }
}

impl RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy {
    pub fn new() -> RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy {
        ::std::default::Default::default()
    }

    // string cluster = 1;


    pub fn get_cluster(&self) -> &str {
        &self.cluster
    }
    pub fn clear_cluster(&mut self) {
        self.cluster.clear();
    }

    // Param is passed by value, moved
    pub fn set_cluster(&mut self, v: ::std::string::String) {
        self.cluster = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cluster(&mut self) -> &mut ::std::string::String {
        &mut self.cluster
    }

    // Take field
    pub fn take_cluster(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cluster, ::std::string::String::new())
    }

    // .envoy.api.v2.core.RuntimeFractionalPercent runtime_fraction = 2;


    pub fn get_runtime_fraction(&self) -> &super::base::RuntimeFractionalPercent {
        self.runtime_fraction.as_ref().unwrap_or_else(|| <super::base::RuntimeFractionalPercent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_runtime_fraction(&mut self) {
        self.runtime_fraction.clear();
    }

    pub fn has_runtime_fraction(&self) -> bool {
        self.runtime_fraction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_runtime_fraction(&mut self, v: super::base::RuntimeFractionalPercent) {
        self.runtime_fraction = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_runtime_fraction(&mut self) -> &mut super::base::RuntimeFractionalPercent {
        if self.runtime_fraction.is_none() {
            self.runtime_fraction.set_default();
        }
        self.runtime_fraction.as_mut().unwrap()
    }

    // Take field
    pub fn take_runtime_fraction(&mut self) -> super::base::RuntimeFractionalPercent {
        self.runtime_fraction.take().unwrap_or_else(|| super::base::RuntimeFractionalPercent::new())
    }

    // bool exclude_read_commands = 3;


    pub fn get_exclude_read_commands(&self) -> bool {
        self.exclude_read_commands
    }
    pub fn clear_exclude_read_commands(&mut self) {
        self.exclude_read_commands = false;
    }

    // Param is passed by value, moved
    pub fn set_exclude_read_commands(&mut self, v: bool) {
        self.exclude_read_commands = v;
    }
}

impl ::protobuf::Message for RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy {
    fn is_initialized(&self) -> bool {
        for v in &self.runtime_fraction {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cluster)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.runtime_fraction)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.exclude_read_commands = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.cluster.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.cluster);
        }
        if let Some(ref v) = self.runtime_fraction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.exclude_read_commands != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.cluster.is_empty() {
            os.write_string(1, &self.cluster)?;
        }
        if let Some(ref v) = self.runtime_fraction.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.exclude_read_commands != false {
            os.write_bool(3, self.exclude_read_commands)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy {
        RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cluster",
                |m: &RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy| { &m.cluster },
                |m: &mut RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy| { &mut m.cluster },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::RuntimeFractionalPercent>>(
                "runtime_fraction",
                |m: &RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy| { &m.runtime_fraction },
                |m: &mut RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy| { &mut m.runtime_fraction },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "exclude_read_commands",
                |m: &RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy| { &m.exclude_read_commands },
                |m: &mut RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy| { &mut m.exclude_read_commands },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy>(
                "RedisProxy.PrefixRoutes.Route.RequestMirrorPolicy",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy {
        static instance: ::protobuf::rt::LazyV2<RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy::new)
    }
}

impl ::protobuf::Clear for RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy {
    fn clear(&mut self) {
        self.cluster.clear();
        self.runtime_fraction.clear();
        self.exclude_read_commands = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RedisProxy_PrefixRoutes_Route_RequestMirrorPolicy {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RedisProtocolOptions {
    // message fields
    pub auth_password: ::protobuf::SingularPtrField<super::base::DataSource>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RedisProtocolOptions {
    fn default() -> &'a RedisProtocolOptions {
        <RedisProtocolOptions as ::protobuf::Message>::default_instance()
    }
}

impl RedisProtocolOptions {
    pub fn new() -> RedisProtocolOptions {
        ::std::default::Default::default()
    }

    // .envoy.api.v2.core.DataSource auth_password = 1;


    pub fn get_auth_password(&self) -> &super::base::DataSource {
        self.auth_password.as_ref().unwrap_or_else(|| <super::base::DataSource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_auth_password(&mut self) {
        self.auth_password.clear();
    }

    pub fn has_auth_password(&self) -> bool {
        self.auth_password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_auth_password(&mut self, v: super::base::DataSource) {
        self.auth_password = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_auth_password(&mut self) -> &mut super::base::DataSource {
        if self.auth_password.is_none() {
            self.auth_password.set_default();
        }
        self.auth_password.as_mut().unwrap()
    }

    // Take field
    pub fn take_auth_password(&mut self) -> super::base::DataSource {
        self.auth_password.take().unwrap_or_else(|| super::base::DataSource::new())
    }
}

impl ::protobuf::Message for RedisProtocolOptions {
    fn is_initialized(&self) -> bool {
        for v in &self.auth_password {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.auth_password)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.auth_password.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.auth_password.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RedisProtocolOptions {
        RedisProtocolOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::DataSource>>(
                "auth_password",
                |m: &RedisProtocolOptions| { &m.auth_password },
                |m: &mut RedisProtocolOptions| { &mut m.auth_password },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RedisProtocolOptions>(
                "RedisProtocolOptions",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RedisProtocolOptions {
        static instance: ::protobuf::rt::LazyV2<RedisProtocolOptions> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RedisProtocolOptions::new)
    }
}

impl ::protobuf::Clear for RedisProtocolOptions {
    fn clear(&mut self) {
        self.auth_password.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RedisProtocolOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RedisProtocolOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n<envoy/config/filter/network/redis_proxy/v2/redis_proxy.proto\x12*envo\
    y.config.filter.network.redis_proxy.v2\x1a\x1cenvoy/api/v2/core/base.pro\
    to\x1a\x1egoogle/protobuf/duration.proto\x1a\x1egoogle/protobuf/wrappers\
    .proto\x1a#envoy/annotations/deprecation.proto\x1a\x1eudpa/annotations/m\
    igrate.proto\x1a\x20udpa/annotations/sensitive.proto\x1a\x1dudpa/annotat\
    ions/status.proto\x1a\x17validate/validate.proto\"\x80\x0f\n\nRedisProxy\
    \x12(\n\x0bstat_prefix\x18\x01\x20\x01(\tR\nstatPrefixB\x07\xfaB\x04r\
    \x02\x20\x01\x12\"\n\x07cluster\x18\x02\x20\x01(\tR\x07clusterB\x08\x18\
    \x01\xb8\xee\xf2\xd2\x05\x01\x12m\n\x08settings\x18\x03\x20\x01(\x0b2G.e\
    nvoy.config.filter.network.redis_proxy.v2.RedisProxy.ConnPoolSettingsR\
    \x08settingsB\x08\xfaB\x05\x8a\x01\x02\x10\x01\x12*\n\x11latency_in_micr\
    os\x18\x04\x20\x01(\x08R\x0flatencyInMicros\x12h\n\rprefix_routes\x18\
    \x05\x20\x01(\x0b2C.envoy.config.filter.network.redis_proxy.v2.RedisProx\
    y.PrefixRoutesR\x0cprefixRoutes\x12_\n\x18downstream_auth_password\x18\
    \x06\x20\x01(\x0b2\x1d.envoy.api.v2.core.DataSourceR\x16downstreamAuthPa\
    sswordB\x06\xb8\xb7\x8b\xa4\x02\x01\x1a\xb0\x05\n\x10ConnPoolSettings\
    \x12B\n\nop_timeout\x18\x01\x20\x01(\x0b2\x19.google.protobuf.DurationR\
    \topTimeoutB\x08\xfaB\x05\xaa\x01\x02\x08\x01\x12-\n\x12enable_hashtaggi\
    ng\x18\x02\x20\x01(\x08R\x11enableHashtagging\x12-\n\x12enable_redirecti\
    on\x18\x03\x20\x01(\x08R\x11enableRedirection\x12>\n\x1cmax_buffer_size_\
    before_flush\x18\x04\x20\x01(\rR\x18maxBufferSizeBeforeFlush\x12K\n\x14b\
    uffer_flush_timeout\x18\x05\x20\x01(\x0b2\x19.google.protobuf.DurationR\
    \x12bufferFlushTimeout\x12e\n\x20max_upstream_unknown_connections\x18\
    \x06\x20\x01(\x0b2\x1c.google.protobuf.UInt32ValueR\x1dmaxUpstreamUnknow\
    nConnections\x120\n\x14enable_command_stats\x18\x08\x20\x01(\x08R\x12ena\
    bleCommandStats\x12}\n\x0bread_policy\x18\x07\x20\x01(\x0e2R.envoy.confi\
    g.filter.network.redis_proxy.v2.RedisProxy.ConnPoolSettings.ReadPolicyR\
    \nreadPolicyB\x08\xfaB\x05\x82\x01\x02\x10\x01\"U\n\nReadPolicy\x12\n\n\
    \x06MASTER\x10\0\x12\x11\n\rPREFER_MASTER\x10\x01\x12\x0b\n\x07REPLICA\
    \x10\x02\x12\x12\n\x0ePREFER_REPLICA\x10\x03\x12\x07\n\x03ANY\x10\x04\
    \x1a\x8a\x06\n\x0cPrefixRoutes\x12a\n\x06routes\x18\x01\x20\x03(\x0b2I.e\
    nvoy.config.filter.network.redis_proxy.v2.RedisProxy.PrefixRoutes.RouteR\
    \x06routes\x12)\n\x10case_insensitive\x18\x02\x20\x01(\x08R\x0fcaseInsen\
    sitive\x124\n\x11catch_all_cluster\x18\x03\x20\x01(\tR\x0fcatchAllCluste\
    rB\x08\x18\x01\xb8\xee\xf2\xd2\x05\x01\x12q\n\x0fcatch_all_route\x18\x04\
    \x20\x01(\x0b2I.envoy.config.filter.network.redis_proxy.v2.RedisProxy.Pr\
    efixRoutes.RouteR\rcatchAllRoute\x1a\xc2\x03\n\x05Route\x12\x16\n\x06pre\
    fix\x18\x01\x20\x01(\tR\x06prefix\x12#\n\rremove_prefix\x18\x02\x20\x01(\
    \x08R\x0cremovePrefix\x12!\n\x07cluster\x18\x03\x20\x01(\tR\x07clusterB\
    \x07\xfaB\x04r\x02\x20\x01\x12\x91\x01\n\x15request_mirror_policy\x18\
    \x04\x20\x03(\x0b2].envoy.config.filter.network.redis_proxy.v2.RedisProx\
    y.PrefixRoutes.Route.RequestMirrorPolicyR\x13requestMirrorPolicy\x1a\xc4\
    \x01\n\x13RequestMirrorPolicy\x12!\n\x07cluster\x18\x01\x20\x01(\tR\x07c\
    lusterB\x07\xfaB\x04r\x02\x20\x01\x12V\n\x10runtime_fraction\x18\x02\x20\
    \x01(\x0b2+.envoy.api.v2.core.RuntimeFractionalPercentR\x0fruntimeFracti\
    on\x122\n\x15exclude_read_commands\x18\x03\x20\x01(\x08R\x13excludeReadC\
    ommands\"b\n\x14RedisProtocolOptions\x12J\n\rauth_password\x18\x01\x20\
    \x01(\x0b2\x1d.envoy.api.v2.core.DataSourceR\x0cauthPasswordB\x06\xb8\
    \xb7\x8b\xa4\x02\x01B\x8c\x01\n8io.envoyproxy.envoy.config.filter.networ\
    k.redis_proxy.v2B\x0fRedisProxyProtoP\x01\xf2\x98\xfe\x8f\x051\x12/envoy\
    .extensions.filters.network.redis_proxy.v3\xba\x80\xc8\xd1\x06\x02\x10\
    \x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
