// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/filter/http/cache/v2alpha/cache.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct CacheConfig {
    // message fields
    pub typed_config: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    pub allowed_vary_headers: ::protobuf::RepeatedField<super::string::StringMatcher>,
    pub key_creator_params: ::protobuf::SingularPtrField<CacheConfig_KeyCreatorParams>,
    pub max_body_bytes: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CacheConfig {
    fn default() -> &'a CacheConfig {
        <CacheConfig as ::protobuf::Message>::default_instance()
    }
}

impl CacheConfig {
    pub fn new() -> CacheConfig {
        ::std::default::Default::default()
    }

    // .google.protobuf.Any typed_config = 1;


    pub fn get_typed_config(&self) -> &::protobuf::well_known_types::Any {
        self.typed_config.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_typed_config(&mut self) {
        self.typed_config.clear();
    }

    pub fn has_typed_config(&self) -> bool {
        self.typed_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_typed_config(&mut self, v: ::protobuf::well_known_types::Any) {
        self.typed_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_typed_config(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.typed_config.is_none() {
            self.typed_config.set_default();
        }
        self.typed_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_typed_config(&mut self) -> ::protobuf::well_known_types::Any {
        self.typed_config.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }

    // repeated .envoy.type.matcher.StringMatcher allowed_vary_headers = 2;


    pub fn get_allowed_vary_headers(&self) -> &[super::string::StringMatcher] {
        &self.allowed_vary_headers
    }
    pub fn clear_allowed_vary_headers(&mut self) {
        self.allowed_vary_headers.clear();
    }

    // Param is passed by value, moved
    pub fn set_allowed_vary_headers(&mut self, v: ::protobuf::RepeatedField<super::string::StringMatcher>) {
        self.allowed_vary_headers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_allowed_vary_headers(&mut self) -> &mut ::protobuf::RepeatedField<super::string::StringMatcher> {
        &mut self.allowed_vary_headers
    }

    // Take field
    pub fn take_allowed_vary_headers(&mut self) -> ::protobuf::RepeatedField<super::string::StringMatcher> {
        ::std::mem::replace(&mut self.allowed_vary_headers, ::protobuf::RepeatedField::new())
    }

    // .envoy.config.filter.http.cache.v2alpha.CacheConfig.KeyCreatorParams key_creator_params = 3;


    pub fn get_key_creator_params(&self) -> &CacheConfig_KeyCreatorParams {
        self.key_creator_params.as_ref().unwrap_or_else(|| <CacheConfig_KeyCreatorParams as ::protobuf::Message>::default_instance())
    }
    pub fn clear_key_creator_params(&mut self) {
        self.key_creator_params.clear();
    }

    pub fn has_key_creator_params(&self) -> bool {
        self.key_creator_params.is_some()
    }

    // Param is passed by value, moved
    pub fn set_key_creator_params(&mut self, v: CacheConfig_KeyCreatorParams) {
        self.key_creator_params = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key_creator_params(&mut self) -> &mut CacheConfig_KeyCreatorParams {
        if self.key_creator_params.is_none() {
            self.key_creator_params.set_default();
        }
        self.key_creator_params.as_mut().unwrap()
    }

    // Take field
    pub fn take_key_creator_params(&mut self) -> CacheConfig_KeyCreatorParams {
        self.key_creator_params.take().unwrap_or_else(|| CacheConfig_KeyCreatorParams::new())
    }

    // uint32 max_body_bytes = 4;


    pub fn get_max_body_bytes(&self) -> u32 {
        self.max_body_bytes
    }
    pub fn clear_max_body_bytes(&mut self) {
        self.max_body_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_max_body_bytes(&mut self, v: u32) {
        self.max_body_bytes = v;
    }
}

impl ::protobuf::Message for CacheConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.typed_config {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.allowed_vary_headers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.key_creator_params {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.typed_config)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.allowed_vary_headers)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.key_creator_params)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.max_body_bytes = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.typed_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.allowed_vary_headers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.key_creator_params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.max_body_bytes != 0 {
            my_size += ::protobuf::rt::value_size(4, self.max_body_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.typed_config.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.allowed_vary_headers {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.key_creator_params.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.max_body_bytes != 0 {
            os.write_uint32(4, self.max_body_bytes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CacheConfig {
        CacheConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "typed_config",
                |m: &CacheConfig| { &m.typed_config },
                |m: &mut CacheConfig| { &mut m.typed_config },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::string::StringMatcher>>(
                "allowed_vary_headers",
                |m: &CacheConfig| { &m.allowed_vary_headers },
                |m: &mut CacheConfig| { &mut m.allowed_vary_headers },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CacheConfig_KeyCreatorParams>>(
                "key_creator_params",
                |m: &CacheConfig| { &m.key_creator_params },
                |m: &mut CacheConfig| { &mut m.key_creator_params },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "max_body_bytes",
                |m: &CacheConfig| { &m.max_body_bytes },
                |m: &mut CacheConfig| { &mut m.max_body_bytes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CacheConfig>(
                "CacheConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CacheConfig {
        static instance: ::protobuf::rt::LazyV2<CacheConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CacheConfig::new)
    }
}

impl ::protobuf::Clear for CacheConfig {
    fn clear(&mut self) {
        self.typed_config.clear();
        self.allowed_vary_headers.clear();
        self.key_creator_params.clear();
        self.max_body_bytes = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CacheConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CacheConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CacheConfig_KeyCreatorParams {
    // message fields
    pub exclude_scheme: bool,
    pub exclude_host: bool,
    pub query_parameters_included: ::protobuf::RepeatedField<super::route_components::QueryParameterMatcher>,
    pub query_parameters_excluded: ::protobuf::RepeatedField<super::route_components::QueryParameterMatcher>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CacheConfig_KeyCreatorParams {
    fn default() -> &'a CacheConfig_KeyCreatorParams {
        <CacheConfig_KeyCreatorParams as ::protobuf::Message>::default_instance()
    }
}

impl CacheConfig_KeyCreatorParams {
    pub fn new() -> CacheConfig_KeyCreatorParams {
        ::std::default::Default::default()
    }

    // bool exclude_scheme = 1;


    pub fn get_exclude_scheme(&self) -> bool {
        self.exclude_scheme
    }
    pub fn clear_exclude_scheme(&mut self) {
        self.exclude_scheme = false;
    }

    // Param is passed by value, moved
    pub fn set_exclude_scheme(&mut self, v: bool) {
        self.exclude_scheme = v;
    }

    // bool exclude_host = 2;


    pub fn get_exclude_host(&self) -> bool {
        self.exclude_host
    }
    pub fn clear_exclude_host(&mut self) {
        self.exclude_host = false;
    }

    // Param is passed by value, moved
    pub fn set_exclude_host(&mut self, v: bool) {
        self.exclude_host = v;
    }

    // repeated .envoy.api.v2.route.QueryParameterMatcher query_parameters_included = 3;


    pub fn get_query_parameters_included(&self) -> &[super::route_components::QueryParameterMatcher] {
        &self.query_parameters_included
    }
    pub fn clear_query_parameters_included(&mut self) {
        self.query_parameters_included.clear();
    }

    // Param is passed by value, moved
    pub fn set_query_parameters_included(&mut self, v: ::protobuf::RepeatedField<super::route_components::QueryParameterMatcher>) {
        self.query_parameters_included = v;
    }

    // Mutable pointer to the field.
    pub fn mut_query_parameters_included(&mut self) -> &mut ::protobuf::RepeatedField<super::route_components::QueryParameterMatcher> {
        &mut self.query_parameters_included
    }

    // Take field
    pub fn take_query_parameters_included(&mut self) -> ::protobuf::RepeatedField<super::route_components::QueryParameterMatcher> {
        ::std::mem::replace(&mut self.query_parameters_included, ::protobuf::RepeatedField::new())
    }

    // repeated .envoy.api.v2.route.QueryParameterMatcher query_parameters_excluded = 4;


    pub fn get_query_parameters_excluded(&self) -> &[super::route_components::QueryParameterMatcher] {
        &self.query_parameters_excluded
    }
    pub fn clear_query_parameters_excluded(&mut self) {
        self.query_parameters_excluded.clear();
    }

    // Param is passed by value, moved
    pub fn set_query_parameters_excluded(&mut self, v: ::protobuf::RepeatedField<super::route_components::QueryParameterMatcher>) {
        self.query_parameters_excluded = v;
    }

    // Mutable pointer to the field.
    pub fn mut_query_parameters_excluded(&mut self) -> &mut ::protobuf::RepeatedField<super::route_components::QueryParameterMatcher> {
        &mut self.query_parameters_excluded
    }

    // Take field
    pub fn take_query_parameters_excluded(&mut self) -> ::protobuf::RepeatedField<super::route_components::QueryParameterMatcher> {
        ::std::mem::replace(&mut self.query_parameters_excluded, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CacheConfig_KeyCreatorParams {
    fn is_initialized(&self) -> bool {
        for v in &self.query_parameters_included {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.query_parameters_excluded {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.exclude_scheme = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.exclude_host = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.query_parameters_included)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.query_parameters_excluded)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.exclude_scheme != false {
            my_size += 2;
        }
        if self.exclude_host != false {
            my_size += 2;
        }
        for value in &self.query_parameters_included {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.query_parameters_excluded {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.exclude_scheme != false {
            os.write_bool(1, self.exclude_scheme)?;
        }
        if self.exclude_host != false {
            os.write_bool(2, self.exclude_host)?;
        }
        for v in &self.query_parameters_included {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.query_parameters_excluded {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CacheConfig_KeyCreatorParams {
        CacheConfig_KeyCreatorParams::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "exclude_scheme",
                |m: &CacheConfig_KeyCreatorParams| { &m.exclude_scheme },
                |m: &mut CacheConfig_KeyCreatorParams| { &mut m.exclude_scheme },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "exclude_host",
                |m: &CacheConfig_KeyCreatorParams| { &m.exclude_host },
                |m: &mut CacheConfig_KeyCreatorParams| { &mut m.exclude_host },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::route_components::QueryParameterMatcher>>(
                "query_parameters_included",
                |m: &CacheConfig_KeyCreatorParams| { &m.query_parameters_included },
                |m: &mut CacheConfig_KeyCreatorParams| { &mut m.query_parameters_included },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::route_components::QueryParameterMatcher>>(
                "query_parameters_excluded",
                |m: &CacheConfig_KeyCreatorParams| { &m.query_parameters_excluded },
                |m: &mut CacheConfig_KeyCreatorParams| { &mut m.query_parameters_excluded },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CacheConfig_KeyCreatorParams>(
                "CacheConfig.KeyCreatorParams",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CacheConfig_KeyCreatorParams {
        static instance: ::protobuf::rt::LazyV2<CacheConfig_KeyCreatorParams> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CacheConfig_KeyCreatorParams::new)
    }
}

impl ::protobuf::Clear for CacheConfig_KeyCreatorParams {
    fn clear(&mut self) {
        self.exclude_scheme = false;
        self.exclude_host = false;
        self.query_parameters_included.clear();
        self.query_parameters_excluded.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CacheConfig_KeyCreatorParams {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CacheConfig_KeyCreatorParams {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n2envoy/config/filter/http/cache/v2alpha/cache.proto\x12&envoy.config.f\
    ilter.http.cache.v2alpha\x1a)envoy/api/v2/route/route_components.proto\
    \x1a\x1fenvoy/type/matcher/string.proto\x1a\x19google/protobuf/any.proto\
    \x1a\x1eudpa/annotations/migrate.proto\x1a\x1dudpa/annotations/status.pr\
    oto\x1a\x17validate/validate.proto\"\xec\x04\n\x0bCacheConfig\x12A\n\x0c\
    typed_config\x18\x01\x20\x01(\x0b2\x14.google.protobuf.AnyR\x0btypedConf\
    igB\x08\xfaB\x05\xa2\x01\x02\x08\x01\x12S\n\x14allowed_vary_headers\x18\
    \x02\x20\x03(\x0b2!.envoy.type.matcher.StringMatcherR\x12allowedVaryHead\
    ers\x12r\n\x12key_creator_params\x18\x03\x20\x01(\x0b2D.envoy.config.fil\
    ter.http.cache.v2alpha.CacheConfig.KeyCreatorParamsR\x10keyCreatorParams\
    \x12$\n\x0emax_body_bytes\x18\x04\x20\x01(\rR\x0cmaxBodyBytes\x1a\xaa\
    \x02\n\x10KeyCreatorParams\x12%\n\x0eexclude_scheme\x18\x01\x20\x01(\x08\
    R\rexcludeScheme\x12!\n\x0cexclude_host\x18\x02\x20\x01(\x08R\x0bexclude\
    Host\x12e\n\x19query_parameters_included\x18\x03\x20\x03(\x0b2).envoy.ap\
    i.v2.route.QueryParameterMatcherR\x17queryParametersIncluded\x12e\n\x19q\
    uery_parameters_excluded\x18\x04\x20\x03(\x0b2).envoy.api.v2.route.Query\
    ParameterMatcherR\x17queryParametersExcludedB\x87\x01\n4io.envoyproxy.en\
    voy.config.filter.http.cache.v2alphaB\nCacheProtoP\x01\xba\x80\xc8\xd1\
    \x06\x02\x08\x01\xba\x80\xc8\xd1\x06\x02\x10\x01\xf2\x98\xfe\x8f\x05-\
    \x12+envoy.extensions.filters.http.cache.v3alphab\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
