// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/filter/http/grpc_stats/v2alpha/config.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct FilterConfig {
    // message fields
    pub emit_filter_state: bool,
    // message oneof groups
    pub per_method_stat_specifier: ::std::option::Option<FilterConfig_oneof_per_method_stat_specifier>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FilterConfig {
    fn default() -> &'a FilterConfig {
        <FilterConfig as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum FilterConfig_oneof_per_method_stat_specifier {
    individual_method_stats_allowlist(super::grpc_method_list::GrpcMethodList),
    stats_for_all_methods(::protobuf::well_known_types::BoolValue),
}

impl FilterConfig {
    pub fn new() -> FilterConfig {
        ::std::default::Default::default()
    }

    // bool emit_filter_state = 1;


    pub fn get_emit_filter_state(&self) -> bool {
        self.emit_filter_state
    }
    pub fn clear_emit_filter_state(&mut self) {
        self.emit_filter_state = false;
    }

    // Param is passed by value, moved
    pub fn set_emit_filter_state(&mut self, v: bool) {
        self.emit_filter_state = v;
    }

    // .envoy.api.v2.core.GrpcMethodList individual_method_stats_allowlist = 2;


    pub fn get_individual_method_stats_allowlist(&self) -> &super::grpc_method_list::GrpcMethodList {
        match self.per_method_stat_specifier {
            ::std::option::Option::Some(FilterConfig_oneof_per_method_stat_specifier::individual_method_stats_allowlist(ref v)) => v,
            _ => <super::grpc_method_list::GrpcMethodList as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_individual_method_stats_allowlist(&mut self) {
        self.per_method_stat_specifier = ::std::option::Option::None;
    }

    pub fn has_individual_method_stats_allowlist(&self) -> bool {
        match self.per_method_stat_specifier {
            ::std::option::Option::Some(FilterConfig_oneof_per_method_stat_specifier::individual_method_stats_allowlist(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_individual_method_stats_allowlist(&mut self, v: super::grpc_method_list::GrpcMethodList) {
        self.per_method_stat_specifier = ::std::option::Option::Some(FilterConfig_oneof_per_method_stat_specifier::individual_method_stats_allowlist(v))
    }

    // Mutable pointer to the field.
    pub fn mut_individual_method_stats_allowlist(&mut self) -> &mut super::grpc_method_list::GrpcMethodList {
        if let ::std::option::Option::Some(FilterConfig_oneof_per_method_stat_specifier::individual_method_stats_allowlist(_)) = self.per_method_stat_specifier {
        } else {
            self.per_method_stat_specifier = ::std::option::Option::Some(FilterConfig_oneof_per_method_stat_specifier::individual_method_stats_allowlist(super::grpc_method_list::GrpcMethodList::new()));
        }
        match self.per_method_stat_specifier {
            ::std::option::Option::Some(FilterConfig_oneof_per_method_stat_specifier::individual_method_stats_allowlist(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_individual_method_stats_allowlist(&mut self) -> super::grpc_method_list::GrpcMethodList {
        if self.has_individual_method_stats_allowlist() {
            match self.per_method_stat_specifier.take() {
                ::std::option::Option::Some(FilterConfig_oneof_per_method_stat_specifier::individual_method_stats_allowlist(v)) => v,
                _ => panic!(),
            }
        } else {
            super::grpc_method_list::GrpcMethodList::new()
        }
    }

    // .google.protobuf.BoolValue stats_for_all_methods = 3;


    pub fn get_stats_for_all_methods(&self) -> &::protobuf::well_known_types::BoolValue {
        match self.per_method_stat_specifier {
            ::std::option::Option::Some(FilterConfig_oneof_per_method_stat_specifier::stats_for_all_methods(ref v)) => v,
            _ => <::protobuf::well_known_types::BoolValue as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_stats_for_all_methods(&mut self) {
        self.per_method_stat_specifier = ::std::option::Option::None;
    }

    pub fn has_stats_for_all_methods(&self) -> bool {
        match self.per_method_stat_specifier {
            ::std::option::Option::Some(FilterConfig_oneof_per_method_stat_specifier::stats_for_all_methods(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_stats_for_all_methods(&mut self, v: ::protobuf::well_known_types::BoolValue) {
        self.per_method_stat_specifier = ::std::option::Option::Some(FilterConfig_oneof_per_method_stat_specifier::stats_for_all_methods(v))
    }

    // Mutable pointer to the field.
    pub fn mut_stats_for_all_methods(&mut self) -> &mut ::protobuf::well_known_types::BoolValue {
        if let ::std::option::Option::Some(FilterConfig_oneof_per_method_stat_specifier::stats_for_all_methods(_)) = self.per_method_stat_specifier {
        } else {
            self.per_method_stat_specifier = ::std::option::Option::Some(FilterConfig_oneof_per_method_stat_specifier::stats_for_all_methods(::protobuf::well_known_types::BoolValue::new()));
        }
        match self.per_method_stat_specifier {
            ::std::option::Option::Some(FilterConfig_oneof_per_method_stat_specifier::stats_for_all_methods(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_stats_for_all_methods(&mut self) -> ::protobuf::well_known_types::BoolValue {
        if self.has_stats_for_all_methods() {
            match self.per_method_stat_specifier.take() {
                ::std::option::Option::Some(FilterConfig_oneof_per_method_stat_specifier::stats_for_all_methods(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::BoolValue::new()
        }
    }
}

impl ::protobuf::Message for FilterConfig {
    fn is_initialized(&self) -> bool {
        if let Some(FilterConfig_oneof_per_method_stat_specifier::individual_method_stats_allowlist(ref v)) = self.per_method_stat_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(FilterConfig_oneof_per_method_stat_specifier::stats_for_all_methods(ref v)) = self.per_method_stat_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.emit_filter_state = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.per_method_stat_specifier = ::std::option::Option::Some(FilterConfig_oneof_per_method_stat_specifier::individual_method_stats_allowlist(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.per_method_stat_specifier = ::std::option::Option::Some(FilterConfig_oneof_per_method_stat_specifier::stats_for_all_methods(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.emit_filter_state != false {
            my_size += 2;
        }
        if let ::std::option::Option::Some(ref v) = self.per_method_stat_specifier {
            match v {
                &FilterConfig_oneof_per_method_stat_specifier::individual_method_stats_allowlist(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &FilterConfig_oneof_per_method_stat_specifier::stats_for_all_methods(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.emit_filter_state != false {
            os.write_bool(1, self.emit_filter_state)?;
        }
        if let ::std::option::Option::Some(ref v) = self.per_method_stat_specifier {
            match v {
                &FilterConfig_oneof_per_method_stat_specifier::individual_method_stats_allowlist(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &FilterConfig_oneof_per_method_stat_specifier::stats_for_all_methods(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FilterConfig {
        FilterConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "emit_filter_state",
                |m: &FilterConfig| { &m.emit_filter_state },
                |m: &mut FilterConfig| { &mut m.emit_filter_state },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::grpc_method_list::GrpcMethodList>(
                "individual_method_stats_allowlist",
                FilterConfig::has_individual_method_stats_allowlist,
                FilterConfig::get_individual_method_stats_allowlist,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::BoolValue>(
                "stats_for_all_methods",
                FilterConfig::has_stats_for_all_methods,
                FilterConfig::get_stats_for_all_methods,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FilterConfig>(
                "FilterConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FilterConfig {
        static instance: ::protobuf::rt::LazyV2<FilterConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FilterConfig::new)
    }
}

impl ::protobuf::Clear for FilterConfig {
    fn clear(&mut self) {
        self.emit_filter_state = false;
        self.per_method_stat_specifier = ::std::option::Option::None;
        self.per_method_stat_specifier = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FilterConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FilterConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FilterObject {
    // message fields
    pub request_message_count: u64,
    pub response_message_count: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FilterObject {
    fn default() -> &'a FilterObject {
        <FilterObject as ::protobuf::Message>::default_instance()
    }
}

impl FilterObject {
    pub fn new() -> FilterObject {
        ::std::default::Default::default()
    }

    // uint64 request_message_count = 1;


    pub fn get_request_message_count(&self) -> u64 {
        self.request_message_count
    }
    pub fn clear_request_message_count(&mut self) {
        self.request_message_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_request_message_count(&mut self, v: u64) {
        self.request_message_count = v;
    }

    // uint64 response_message_count = 2;


    pub fn get_response_message_count(&self) -> u64 {
        self.response_message_count
    }
    pub fn clear_response_message_count(&mut self) {
        self.response_message_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_response_message_count(&mut self, v: u64) {
        self.response_message_count = v;
    }
}

impl ::protobuf::Message for FilterObject {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.request_message_count = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.response_message_count = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.request_message_count != 0 {
            my_size += ::protobuf::rt::value_size(1, self.request_message_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.response_message_count != 0 {
            my_size += ::protobuf::rt::value_size(2, self.response_message_count, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.request_message_count != 0 {
            os.write_uint64(1, self.request_message_count)?;
        }
        if self.response_message_count != 0 {
            os.write_uint64(2, self.response_message_count)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FilterObject {
        FilterObject::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "request_message_count",
                |m: &FilterObject| { &m.request_message_count },
                |m: &mut FilterObject| { &mut m.request_message_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "response_message_count",
                |m: &FilterObject| { &m.response_message_count },
                |m: &mut FilterObject| { &mut m.response_message_count },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FilterObject>(
                "FilterObject",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FilterObject {
        static instance: ::protobuf::rt::LazyV2<FilterObject> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FilterObject::new)
    }
}

impl ::protobuf::Clear for FilterObject {
    fn clear(&mut self) {
        self.request_message_count = 0;
        self.response_message_count = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FilterObject {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FilterObject {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n8envoy/config/filter/http/grpc_stats/v2alpha/config.proto\x12+envoy.co\
    nfig.filter.http.grpc_stats.v2alpha\x1a(envoy/api/v2/core/grpc_method_li\
    st.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1eudpa/annotations/m\
    igrate.proto\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/valida\
    te.proto\"\x98\x02\n\x0cFilterConfig\x12*\n\x11emit_filter_state\x18\x01\
    \x20\x01(\x08R\x0femitFilterState\x12n\n!individual_method_stats_allowli\
    st\x18\x02\x20\x01(\x0b2!.envoy.api.v2.core.GrpcMethodListH\0R\x1eindivi\
    dualMethodStatsAllowlist\x12O\n\x15stats_for_all_methods\x18\x03\x20\x01\
    (\x0b2\x1a.google.protobuf.BoolValueH\0R\x12statsForAllMethodsB\x1b\n\
    \x19per_method_stat_specifier\"x\n\x0cFilterObject\x122\n\x15request_mes\
    sage_count\x18\x01\x20\x01(\x04R\x13requestMessageCount\x124\n\x16respon\
    se_message_count\x18\x02\x20\x01(\x04R\x14responseMessageCountB\x85\x01\
    \n9io.envoyproxy.envoy.config.filter.http.grpc_stats.v2alphaB\x0bConfigP\
    rotoP\x01\xba\x80\xc8\xd1\x06\x02\x10\x01\xf2\x98\xfe\x8f\x05-\x12+envoy\
    .extensions.filters.http.grpc_stats.v3b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
