// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/filter/http/compressor/v2/compressor.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct Compressor {
    // message fields
    pub content_length: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub content_type: ::protobuf::RepeatedField<::std::string::String>,
    pub disable_on_etag_header: bool,
    pub remove_accept_encoding_header: bool,
    pub runtime_enabled: ::protobuf::SingularPtrField<super::base::RuntimeFeatureFlag>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Compressor {
    fn default() -> &'a Compressor {
        <Compressor as ::protobuf::Message>::default_instance()
    }
}

impl Compressor {
    pub fn new() -> Compressor {
        ::std::default::Default::default()
    }

    // .google.protobuf.UInt32Value content_length = 1;


    pub fn get_content_length(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.content_length.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_content_length(&mut self) {
        self.content_length.clear();
    }

    pub fn has_content_length(&self) -> bool {
        self.content_length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_content_length(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.content_length = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_content_length(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.content_length.is_none() {
            self.content_length.set_default();
        }
        self.content_length.as_mut().unwrap()
    }

    // Take field
    pub fn take_content_length(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.content_length.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // repeated string content_type = 2;


    pub fn get_content_type(&self) -> &[::std::string::String] {
        &self.content_type
    }
    pub fn clear_content_type(&mut self) {
        self.content_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_content_type(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.content_type = v;
    }

    // Mutable pointer to the field.
    pub fn mut_content_type(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.content_type
    }

    // Take field
    pub fn take_content_type(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.content_type, ::protobuf::RepeatedField::new())
    }

    // bool disable_on_etag_header = 3;


    pub fn get_disable_on_etag_header(&self) -> bool {
        self.disable_on_etag_header
    }
    pub fn clear_disable_on_etag_header(&mut self) {
        self.disable_on_etag_header = false;
    }

    // Param is passed by value, moved
    pub fn set_disable_on_etag_header(&mut self, v: bool) {
        self.disable_on_etag_header = v;
    }

    // bool remove_accept_encoding_header = 4;


    pub fn get_remove_accept_encoding_header(&self) -> bool {
        self.remove_accept_encoding_header
    }
    pub fn clear_remove_accept_encoding_header(&mut self) {
        self.remove_accept_encoding_header = false;
    }

    // Param is passed by value, moved
    pub fn set_remove_accept_encoding_header(&mut self, v: bool) {
        self.remove_accept_encoding_header = v;
    }

    // .envoy.api.v2.core.RuntimeFeatureFlag runtime_enabled = 5;


    pub fn get_runtime_enabled(&self) -> &super::base::RuntimeFeatureFlag {
        self.runtime_enabled.as_ref().unwrap_or_else(|| <super::base::RuntimeFeatureFlag as ::protobuf::Message>::default_instance())
    }
    pub fn clear_runtime_enabled(&mut self) {
        self.runtime_enabled.clear();
    }

    pub fn has_runtime_enabled(&self) -> bool {
        self.runtime_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_runtime_enabled(&mut self, v: super::base::RuntimeFeatureFlag) {
        self.runtime_enabled = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_runtime_enabled(&mut self) -> &mut super::base::RuntimeFeatureFlag {
        if self.runtime_enabled.is_none() {
            self.runtime_enabled.set_default();
        }
        self.runtime_enabled.as_mut().unwrap()
    }

    // Take field
    pub fn take_runtime_enabled(&mut self) -> super::base::RuntimeFeatureFlag {
        self.runtime_enabled.take().unwrap_or_else(|| super::base::RuntimeFeatureFlag::new())
    }
}

impl ::protobuf::Message for Compressor {
    fn is_initialized(&self) -> bool {
        for v in &self.content_length {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.runtime_enabled {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.content_length)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.content_type)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.disable_on_etag_header = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.remove_accept_encoding_header = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.runtime_enabled)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.content_length.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.content_type {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        if self.disable_on_etag_header != false {
            my_size += 2;
        }
        if self.remove_accept_encoding_header != false {
            my_size += 2;
        }
        if let Some(ref v) = self.runtime_enabled.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.content_length.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.content_type {
            os.write_string(2, &v)?;
        };
        if self.disable_on_etag_header != false {
            os.write_bool(3, self.disable_on_etag_header)?;
        }
        if self.remove_accept_encoding_header != false {
            os.write_bool(4, self.remove_accept_encoding_header)?;
        }
        if let Some(ref v) = self.runtime_enabled.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Compressor {
        Compressor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "content_length",
                |m: &Compressor| { &m.content_length },
                |m: &mut Compressor| { &mut m.content_length },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "content_type",
                |m: &Compressor| { &m.content_type },
                |m: &mut Compressor| { &mut m.content_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "disable_on_etag_header",
                |m: &Compressor| { &m.disable_on_etag_header },
                |m: &mut Compressor| { &mut m.disable_on_etag_header },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "remove_accept_encoding_header",
                |m: &Compressor| { &m.remove_accept_encoding_header },
                |m: &mut Compressor| { &mut m.remove_accept_encoding_header },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::RuntimeFeatureFlag>>(
                "runtime_enabled",
                |m: &Compressor| { &m.runtime_enabled },
                |m: &mut Compressor| { &mut m.runtime_enabled },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Compressor>(
                "Compressor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Compressor {
        static instance: ::protobuf::rt::LazyV2<Compressor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Compressor::new)
    }
}

impl ::protobuf::Clear for Compressor {
    fn clear(&mut self) {
        self.content_length.clear();
        self.content_type.clear();
        self.disable_on_etag_header = false;
        self.remove_accept_encoding_header = false;
        self.runtime_enabled.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Compressor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Compressor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n7envoy/config/filter/http/compressor/v2/compressor.proto\x12&envoy.con\
    fig.filter.http.compressor.v2\x1a\x1cenvoy/api/v2/core/base.proto\x1a\
    \x1egoogle/protobuf/wrappers.proto\x1a\x1eudpa/annotations/migrate.proto\
    \x1a\x1dudpa/annotations/status.proto\"\xbc\x02\n\nCompressor\x12C\n\x0e\
    content_length\x18\x01\x20\x01(\x0b2\x1c.google.protobuf.UInt32ValueR\rc\
    ontentLength\x12!\n\x0ccontent_type\x18\x02\x20\x03(\tR\x0bcontentType\
    \x123\n\x16disable_on_etag_header\x18\x03\x20\x01(\x08R\x13disableOnEtag\
    Header\x12A\n\x1dremove_accept_encoding_header\x18\x04\x20\x01(\x08R\x1a\
    removeAcceptEncodingHeader\x12N\n\x0fruntime_enabled\x18\x05\x20\x01(\
    \x0b2%.envoy.api.v2.core.RuntimeFeatureFlagR\x0eruntimeEnabledB\x84\x01\
    \n4io.envoyproxy.envoy.config.filter.http.compressor.v2B\x0fCompressorPr\
    otoP\x01\xf2\x98\xfe\x8f\x05-\x12+envoy.extensions.filters.http.compress\
    or.v3\xba\x80\xc8\xd1\x06\x02\x10\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
