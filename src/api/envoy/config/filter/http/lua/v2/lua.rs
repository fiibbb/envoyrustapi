// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/filter/http/lua/v2/lua.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct Lua {
    // message fields
    pub inline_code: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Lua {
    fn default() -> &'a Lua {
        <Lua as ::protobuf::Message>::default_instance()
    }
}

impl Lua {
    pub fn new() -> Lua {
        ::std::default::Default::default()
    }

    // string inline_code = 1;


    pub fn get_inline_code(&self) -> &str {
        &self.inline_code
    }
    pub fn clear_inline_code(&mut self) {
        self.inline_code.clear();
    }

    // Param is passed by value, moved
    pub fn set_inline_code(&mut self, v: ::std::string::String) {
        self.inline_code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_inline_code(&mut self) -> &mut ::std::string::String {
        &mut self.inline_code
    }

    // Take field
    pub fn take_inline_code(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.inline_code, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Lua {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.inline_code)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.inline_code.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.inline_code);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.inline_code.is_empty() {
            os.write_string(1, &self.inline_code)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Lua {
        Lua::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "inline_code",
                |m: &Lua| { &m.inline_code },
                |m: &mut Lua| { &mut m.inline_code },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Lua>(
                "Lua",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Lua {
        static instance: ::protobuf::rt::LazyV2<Lua> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Lua::new)
    }
}

impl ::protobuf::Clear for Lua {
    fn clear(&mut self) {
        self.inline_code.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Lua {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Lua {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)envoy/config/filter/http/lua/v2/lua.proto\x12\x1fenvoy.config.filter.\
    http.lua.v2\x1a\x1eudpa/annotations/migrate.proto\x1a\x1dudpa/annotation\
    s/status.proto\x1a\x17validate/validate.proto\"/\n\x03Lua\x12(\n\x0binli\
    ne_code\x18\x01\x20\x01(\tR\ninlineCodeB\x07\xfaB\x04r\x02\x20\x01Bo\n-i\
    o.envoyproxy.envoy.config.filter.http.lua.v2B\x08LuaProtoP\x01\xba\x80\
    \xc8\xd1\x06\x02\x10\x01\xf2\x98\xfe\x8f\x05&\x12$envoy.extensions.filte\
    rs.http.lua.v3b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
