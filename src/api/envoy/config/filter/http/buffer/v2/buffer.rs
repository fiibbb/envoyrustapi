// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/filter/http/buffer/v2/buffer.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct Buffer {
    // message fields
    pub max_request_bytes: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Buffer {
    fn default() -> &'a Buffer {
        <Buffer as ::protobuf::Message>::default_instance()
    }
}

impl Buffer {
    pub fn new() -> Buffer {
        ::std::default::Default::default()
    }

    // .google.protobuf.UInt32Value max_request_bytes = 1;


    pub fn get_max_request_bytes(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.max_request_bytes.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_max_request_bytes(&mut self) {
        self.max_request_bytes.clear();
    }

    pub fn has_max_request_bytes(&self) -> bool {
        self.max_request_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_request_bytes(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.max_request_bytes = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_request_bytes(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.max_request_bytes.is_none() {
            self.max_request_bytes.set_default();
        }
        self.max_request_bytes.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_request_bytes(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.max_request_bytes.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }
}

impl ::protobuf::Message for Buffer {
    fn is_initialized(&self) -> bool {
        for v in &self.max_request_bytes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_request_bytes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.max_request_bytes.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.max_request_bytes.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Buffer {
        Buffer::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "max_request_bytes",
                |m: &Buffer| { &m.max_request_bytes },
                |m: &mut Buffer| { &mut m.max_request_bytes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Buffer>(
                "Buffer",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Buffer {
        static instance: ::protobuf::rt::LazyV2<Buffer> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Buffer::new)
    }
}

impl ::protobuf::Clear for Buffer {
    fn clear(&mut self) {
        self.max_request_bytes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Buffer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Buffer {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BufferPerRoute {
    // message oneof groups
    pub field_override: ::std::option::Option<BufferPerRoute_oneof_override>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BufferPerRoute {
    fn default() -> &'a BufferPerRoute {
        <BufferPerRoute as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum BufferPerRoute_oneof_override {
    disabled(bool),
    buffer(Buffer),
}

impl BufferPerRoute {
    pub fn new() -> BufferPerRoute {
        ::std::default::Default::default()
    }

    // bool disabled = 1;


    pub fn get_disabled(&self) -> bool {
        match self.field_override {
            ::std::option::Option::Some(BufferPerRoute_oneof_override::disabled(v)) => v,
            _ => false,
        }
    }
    pub fn clear_disabled(&mut self) {
        self.field_override = ::std::option::Option::None;
    }

    pub fn has_disabled(&self) -> bool {
        match self.field_override {
            ::std::option::Option::Some(BufferPerRoute_oneof_override::disabled(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_disabled(&mut self, v: bool) {
        self.field_override = ::std::option::Option::Some(BufferPerRoute_oneof_override::disabled(v))
    }

    // .envoy.config.filter.http.buffer.v2.Buffer buffer = 2;


    pub fn get_buffer(&self) -> &Buffer {
        match self.field_override {
            ::std::option::Option::Some(BufferPerRoute_oneof_override::buffer(ref v)) => v,
            _ => <Buffer as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_buffer(&mut self) {
        self.field_override = ::std::option::Option::None;
    }

    pub fn has_buffer(&self) -> bool {
        match self.field_override {
            ::std::option::Option::Some(BufferPerRoute_oneof_override::buffer(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_buffer(&mut self, v: Buffer) {
        self.field_override = ::std::option::Option::Some(BufferPerRoute_oneof_override::buffer(v))
    }

    // Mutable pointer to the field.
    pub fn mut_buffer(&mut self) -> &mut Buffer {
        if let ::std::option::Option::Some(BufferPerRoute_oneof_override::buffer(_)) = self.field_override {
        } else {
            self.field_override = ::std::option::Option::Some(BufferPerRoute_oneof_override::buffer(Buffer::new()));
        }
        match self.field_override {
            ::std::option::Option::Some(BufferPerRoute_oneof_override::buffer(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_buffer(&mut self) -> Buffer {
        if self.has_buffer() {
            match self.field_override.take() {
                ::std::option::Option::Some(BufferPerRoute_oneof_override::buffer(v)) => v,
                _ => panic!(),
            }
        } else {
            Buffer::new()
        }
    }
}

impl ::protobuf::Message for BufferPerRoute {
    fn is_initialized(&self) -> bool {
        if let Some(BufferPerRoute_oneof_override::buffer(ref v)) = self.field_override {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_override = ::std::option::Option::Some(BufferPerRoute_oneof_override::disabled(is.read_bool()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.field_override = ::std::option::Option::Some(BufferPerRoute_oneof_override::buffer(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.field_override {
            match v {
                &BufferPerRoute_oneof_override::disabled(v) => {
                    my_size += 2;
                },
                &BufferPerRoute_oneof_override::buffer(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.field_override {
            match v {
                &BufferPerRoute_oneof_override::disabled(v) => {
                    os.write_bool(1, v)?;
                },
                &BufferPerRoute_oneof_override::buffer(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BufferPerRoute {
        BufferPerRoute::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "disabled",
                BufferPerRoute::has_disabled,
                BufferPerRoute::get_disabled,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Buffer>(
                "buffer",
                BufferPerRoute::has_buffer,
                BufferPerRoute::get_buffer,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BufferPerRoute>(
                "BufferPerRoute",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BufferPerRoute {
        static instance: ::protobuf::rt::LazyV2<BufferPerRoute> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BufferPerRoute::new)
    }
}

impl ::protobuf::Clear for BufferPerRoute {
    fn clear(&mut self) {
        self.field_override = ::std::option::Option::None;
        self.field_override = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BufferPerRoute {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BufferPerRoute {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n/envoy/config/filter/http/buffer/v2/buffer.proto\x12\"envoy.config.fil\
    ter.http.buffer.v2\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1eudpa/ann\
    otations/migrate.proto\x1a\x1dudpa/annotations/status.proto\x1a\x17valid\
    ate/validate.proto\"i\n\x06Buffer\x12Y\n\x11max_request_bytes\x18\x01\
    \x20\x01(\x0b2\x1c.google.protobuf.UInt32ValueR\x0fmaxRequestBytesB\x0f\
    \xfaB\x04*\x02\x20\0\xfaB\x05\x8a\x01\x02\x10\x01J\x04\x08\x02\x10\x03\"\
    \x98\x01\n\x0eBufferPerRoute\x12%\n\x08disabled\x18\x01\x20\x01(\x08H\0R\
    \x08disabledB\x07\xfaB\x04j\x02\x08\x01\x12N\n\x06buffer\x18\x02\x20\x01\
    (\x0b2*.envoy.config.filter.http.buffer.v2.BufferH\0R\x06bufferB\x08\xfa\
    B\x05\x8a\x01\x02\x10\x01B\x0f\n\x08override\x12\x03\xf8B\x01Bx\n0io.env\
    oyproxy.envoy.config.filter.http.buffer.v2B\x0bBufferProtoP\x01\xba\x80\
    \xc8\xd1\x06\x02\x10\x01\xf2\x98\xfe\x8f\x05)\x12'envoy.extensions.filte\
    rs.http.buffer.v3b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
