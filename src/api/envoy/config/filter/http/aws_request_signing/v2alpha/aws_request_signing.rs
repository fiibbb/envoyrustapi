// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/filter/http/aws_request_signing/v2alpha/aws_request_signing.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct AwsRequestSigning {
    // message fields
    pub service_name: ::std::string::String,
    pub region: ::std::string::String,
    pub host_rewrite: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AwsRequestSigning {
    fn default() -> &'a AwsRequestSigning {
        <AwsRequestSigning as ::protobuf::Message>::default_instance()
    }
}

impl AwsRequestSigning {
    pub fn new() -> AwsRequestSigning {
        ::std::default::Default::default()
    }

    // string service_name = 1;


    pub fn get_service_name(&self) -> &str {
        &self.service_name
    }
    pub fn clear_service_name(&mut self) {
        self.service_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_service_name(&mut self, v: ::std::string::String) {
        self.service_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_name(&mut self) -> &mut ::std::string::String {
        &mut self.service_name
    }

    // Take field
    pub fn take_service_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.service_name, ::std::string::String::new())
    }

    // string region = 2;


    pub fn get_region(&self) -> &str {
        &self.region
    }
    pub fn clear_region(&mut self) {
        self.region.clear();
    }

    // Param is passed by value, moved
    pub fn set_region(&mut self, v: ::std::string::String) {
        self.region = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_region(&mut self) -> &mut ::std::string::String {
        &mut self.region
    }

    // Take field
    pub fn take_region(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.region, ::std::string::String::new())
    }

    // string host_rewrite = 3;


    pub fn get_host_rewrite(&self) -> &str {
        &self.host_rewrite
    }
    pub fn clear_host_rewrite(&mut self) {
        self.host_rewrite.clear();
    }

    // Param is passed by value, moved
    pub fn set_host_rewrite(&mut self, v: ::std::string::String) {
        self.host_rewrite = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_host_rewrite(&mut self) -> &mut ::std::string::String {
        &mut self.host_rewrite
    }

    // Take field
    pub fn take_host_rewrite(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.host_rewrite, ::std::string::String::new())
    }
}

impl ::protobuf::Message for AwsRequestSigning {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.service_name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.region)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.host_rewrite)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.service_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.service_name);
        }
        if !self.region.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.region);
        }
        if !self.host_rewrite.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.host_rewrite);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.service_name.is_empty() {
            os.write_string(1, &self.service_name)?;
        }
        if !self.region.is_empty() {
            os.write_string(2, &self.region)?;
        }
        if !self.host_rewrite.is_empty() {
            os.write_string(3, &self.host_rewrite)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AwsRequestSigning {
        AwsRequestSigning::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "service_name",
                |m: &AwsRequestSigning| { &m.service_name },
                |m: &mut AwsRequestSigning| { &mut m.service_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "region",
                |m: &AwsRequestSigning| { &m.region },
                |m: &mut AwsRequestSigning| { &mut m.region },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "host_rewrite",
                |m: &AwsRequestSigning| { &m.host_rewrite },
                |m: &mut AwsRequestSigning| { &mut m.host_rewrite },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AwsRequestSigning>(
                "AwsRequestSigning",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AwsRequestSigning {
        static instance: ::protobuf::rt::LazyV2<AwsRequestSigning> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AwsRequestSigning::new)
    }
}

impl ::protobuf::Clear for AwsRequestSigning {
    fn clear(&mut self) {
        self.service_name.clear();
        self.region.clear();
        self.host_rewrite.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AwsRequestSigning {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AwsRequestSigning {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \nNenvoy/config/filter/http/aws_request_signing/v2alpha/aws_request_sign\
    ing.proto\x124envoy.config.filter.http.aws_request_signing.v2alpha\x1a\
    \x1eudpa/annotations/migrate.proto\x1a\x1dudpa/annotations/status.proto\
    \x1a\x17validate/validate.proto\"\x83\x01\n\x11AwsRequestSigning\x12*\n\
    \x0cservice_name\x18\x01\x20\x01(\tR\x0bserviceNameB\x07\xfaB\x04r\x02\
    \x20\x01\x12\x1f\n\x06region\x18\x02\x20\x01(\tR\x06regionB\x07\xfaB\x04\
    r\x02\x20\x01\x12!\n\x0chost_rewrite\x18\x03\x20\x01(\tR\x0bhostRewriteB\
    \xa2\x01\nBio.envoyproxy.envoy.config.filter.http.aws_request_signing.v2\
    alphaB\x16AwsRequestSigningProtoP\x01\xf2\x98\xfe\x8f\x056\x124envoy.ext\
    ensions.filters.http.aws_request_signing.v3\xba\x80\xc8\xd1\x06\x02\x10\
    \x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
