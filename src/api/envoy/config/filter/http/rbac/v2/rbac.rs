// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/filter/http/rbac/v2/rbac.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct RBAC {
    // message fields
    pub rules: ::protobuf::SingularPtrField<super::rbac::RBAC>,
    pub shadow_rules: ::protobuf::SingularPtrField<super::rbac::RBAC>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RBAC {
    fn default() -> &'a RBAC {
        <RBAC as ::protobuf::Message>::default_instance()
    }
}

impl RBAC {
    pub fn new() -> RBAC {
        ::std::default::Default::default()
    }

    // .envoy.config.rbac.v2.RBAC rules = 1;


    pub fn get_rules(&self) -> &super::rbac::RBAC {
        self.rules.as_ref().unwrap_or_else(|| <super::rbac::RBAC as ::protobuf::Message>::default_instance())
    }
    pub fn clear_rules(&mut self) {
        self.rules.clear();
    }

    pub fn has_rules(&self) -> bool {
        self.rules.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rules(&mut self, v: super::rbac::RBAC) {
        self.rules = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rules(&mut self) -> &mut super::rbac::RBAC {
        if self.rules.is_none() {
            self.rules.set_default();
        }
        self.rules.as_mut().unwrap()
    }

    // Take field
    pub fn take_rules(&mut self) -> super::rbac::RBAC {
        self.rules.take().unwrap_or_else(|| super::rbac::RBAC::new())
    }

    // .envoy.config.rbac.v2.RBAC shadow_rules = 2;


    pub fn get_shadow_rules(&self) -> &super::rbac::RBAC {
        self.shadow_rules.as_ref().unwrap_or_else(|| <super::rbac::RBAC as ::protobuf::Message>::default_instance())
    }
    pub fn clear_shadow_rules(&mut self) {
        self.shadow_rules.clear();
    }

    pub fn has_shadow_rules(&self) -> bool {
        self.shadow_rules.is_some()
    }

    // Param is passed by value, moved
    pub fn set_shadow_rules(&mut self, v: super::rbac::RBAC) {
        self.shadow_rules = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_shadow_rules(&mut self) -> &mut super::rbac::RBAC {
        if self.shadow_rules.is_none() {
            self.shadow_rules.set_default();
        }
        self.shadow_rules.as_mut().unwrap()
    }

    // Take field
    pub fn take_shadow_rules(&mut self) -> super::rbac::RBAC {
        self.shadow_rules.take().unwrap_or_else(|| super::rbac::RBAC::new())
    }
}

impl ::protobuf::Message for RBAC {
    fn is_initialized(&self) -> bool {
        for v in &self.rules {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.shadow_rules {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.rules)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.shadow_rules)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.rules.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.shadow_rules.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.rules.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.shadow_rules.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RBAC {
        RBAC::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::rbac::RBAC>>(
                "rules",
                |m: &RBAC| { &m.rules },
                |m: &mut RBAC| { &mut m.rules },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::rbac::RBAC>>(
                "shadow_rules",
                |m: &RBAC| { &m.shadow_rules },
                |m: &mut RBAC| { &mut m.shadow_rules },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RBAC>(
                "RBAC",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RBAC {
        static instance: ::protobuf::rt::LazyV2<RBAC> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RBAC::new)
    }
}

impl ::protobuf::Clear for RBAC {
    fn clear(&mut self) {
        self.rules.clear();
        self.shadow_rules.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RBAC {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RBAC {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RBACPerRoute {
    // message fields
    pub rbac: ::protobuf::SingularPtrField<RBAC>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RBACPerRoute {
    fn default() -> &'a RBACPerRoute {
        <RBACPerRoute as ::protobuf::Message>::default_instance()
    }
}

impl RBACPerRoute {
    pub fn new() -> RBACPerRoute {
        ::std::default::Default::default()
    }

    // .envoy.config.filter.http.rbac.v2.RBAC rbac = 2;


    pub fn get_rbac(&self) -> &RBAC {
        self.rbac.as_ref().unwrap_or_else(|| <RBAC as ::protobuf::Message>::default_instance())
    }
    pub fn clear_rbac(&mut self) {
        self.rbac.clear();
    }

    pub fn has_rbac(&self) -> bool {
        self.rbac.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rbac(&mut self, v: RBAC) {
        self.rbac = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rbac(&mut self) -> &mut RBAC {
        if self.rbac.is_none() {
            self.rbac.set_default();
        }
        self.rbac.as_mut().unwrap()
    }

    // Take field
    pub fn take_rbac(&mut self) -> RBAC {
        self.rbac.take().unwrap_or_else(|| RBAC::new())
    }
}

impl ::protobuf::Message for RBACPerRoute {
    fn is_initialized(&self) -> bool {
        for v in &self.rbac {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.rbac)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.rbac.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.rbac.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RBACPerRoute {
        RBACPerRoute::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RBAC>>(
                "rbac",
                |m: &RBACPerRoute| { &m.rbac },
                |m: &mut RBACPerRoute| { &mut m.rbac },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RBACPerRoute>(
                "RBACPerRoute",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RBACPerRoute {
        static instance: ::protobuf::rt::LazyV2<RBACPerRoute> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RBACPerRoute::new)
    }
}

impl ::protobuf::Clear for RBACPerRoute {
    fn clear(&mut self) {
        self.rbac.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RBACPerRoute {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RBACPerRoute {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n+envoy/config/filter/http/rbac/v2/rbac.proto\x12\x20envoy.config.filte\
    r.http.rbac.v2\x1a\x1fenvoy/config/rbac/v2/rbac.proto\x1a\x1eudpa/annota\
    tions/migrate.proto\x1a\x1dudpa/annotations/status.proto\x1a\x17validate\
    /validate.proto\"w\n\x04RBAC\x120\n\x05rules\x18\x01\x20\x01(\x0b2\x1a.e\
    nvoy.config.rbac.v2.RBACR\x05rules\x12=\n\x0cshadow_rules\x18\x02\x20\
    \x01(\x0b2\x1a.envoy.config.rbac.v2.RBACR\x0bshadowRules\"P\n\x0cRBACPer\
    Route\x12:\n\x04rbac\x18\x02\x20\x01(\x0b2&.envoy.config.filter.http.rba\
    c.v2.RBACR\x04rbacJ\x04\x08\x01\x10\x02Br\n.io.envoyproxy.envoy.config.f\
    ilter.http.rbac.v2B\tRbacProtoP\x01\xf2\x98\xfe\x8f\x05'\x12%envoy.exten\
    sions.filters.http.rbac.v3\xba\x80\xc8\xd1\x06\x02\x10\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
