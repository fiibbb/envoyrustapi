// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/trace/v2/zipkin.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct ZipkinConfig {
    // message fields
    pub collector_cluster: ::std::string::String,
    pub collector_endpoint: ::std::string::String,
    pub trace_id_128bit: bool,
    pub shared_span_context: ::protobuf::SingularPtrField<::protobuf::well_known_types::BoolValue>,
    pub collector_endpoint_version: ZipkinConfig_CollectorEndpointVersion,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ZipkinConfig {
    fn default() -> &'a ZipkinConfig {
        <ZipkinConfig as ::protobuf::Message>::default_instance()
    }
}

impl ZipkinConfig {
    pub fn new() -> ZipkinConfig {
        ::std::default::Default::default()
    }

    // string collector_cluster = 1;


    pub fn get_collector_cluster(&self) -> &str {
        &self.collector_cluster
    }
    pub fn clear_collector_cluster(&mut self) {
        self.collector_cluster.clear();
    }

    // Param is passed by value, moved
    pub fn set_collector_cluster(&mut self, v: ::std::string::String) {
        self.collector_cluster = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_collector_cluster(&mut self) -> &mut ::std::string::String {
        &mut self.collector_cluster
    }

    // Take field
    pub fn take_collector_cluster(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.collector_cluster, ::std::string::String::new())
    }

    // string collector_endpoint = 2;


    pub fn get_collector_endpoint(&self) -> &str {
        &self.collector_endpoint
    }
    pub fn clear_collector_endpoint(&mut self) {
        self.collector_endpoint.clear();
    }

    // Param is passed by value, moved
    pub fn set_collector_endpoint(&mut self, v: ::std::string::String) {
        self.collector_endpoint = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_collector_endpoint(&mut self) -> &mut ::std::string::String {
        &mut self.collector_endpoint
    }

    // Take field
    pub fn take_collector_endpoint(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.collector_endpoint, ::std::string::String::new())
    }

    // bool trace_id_128bit = 3;


    pub fn get_trace_id_128bit(&self) -> bool {
        self.trace_id_128bit
    }
    pub fn clear_trace_id_128bit(&mut self) {
        self.trace_id_128bit = false;
    }

    // Param is passed by value, moved
    pub fn set_trace_id_128bit(&mut self, v: bool) {
        self.trace_id_128bit = v;
    }

    // .google.protobuf.BoolValue shared_span_context = 4;


    pub fn get_shared_span_context(&self) -> &::protobuf::well_known_types::BoolValue {
        self.shared_span_context.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::BoolValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_shared_span_context(&mut self) {
        self.shared_span_context.clear();
    }

    pub fn has_shared_span_context(&self) -> bool {
        self.shared_span_context.is_some()
    }

    // Param is passed by value, moved
    pub fn set_shared_span_context(&mut self, v: ::protobuf::well_known_types::BoolValue) {
        self.shared_span_context = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_shared_span_context(&mut self) -> &mut ::protobuf::well_known_types::BoolValue {
        if self.shared_span_context.is_none() {
            self.shared_span_context.set_default();
        }
        self.shared_span_context.as_mut().unwrap()
    }

    // Take field
    pub fn take_shared_span_context(&mut self) -> ::protobuf::well_known_types::BoolValue {
        self.shared_span_context.take().unwrap_or_else(|| ::protobuf::well_known_types::BoolValue::new())
    }

    // .envoy.config.trace.v2.ZipkinConfig.CollectorEndpointVersion collector_endpoint_version = 5;


    pub fn get_collector_endpoint_version(&self) -> ZipkinConfig_CollectorEndpointVersion {
        self.collector_endpoint_version
    }
    pub fn clear_collector_endpoint_version(&mut self) {
        self.collector_endpoint_version = ZipkinConfig_CollectorEndpointVersion::HTTP_JSON_V1;
    }

    // Param is passed by value, moved
    pub fn set_collector_endpoint_version(&mut self, v: ZipkinConfig_CollectorEndpointVersion) {
        self.collector_endpoint_version = v;
    }
}

impl ::protobuf::Message for ZipkinConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.shared_span_context {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.collector_cluster)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.collector_endpoint)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.trace_id_128bit = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.shared_span_context)?;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.collector_endpoint_version, 5, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.collector_cluster.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.collector_cluster);
        }
        if !self.collector_endpoint.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.collector_endpoint);
        }
        if self.trace_id_128bit != false {
            my_size += 2;
        }
        if let Some(ref v) = self.shared_span_context.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.collector_endpoint_version != ZipkinConfig_CollectorEndpointVersion::HTTP_JSON_V1 {
            my_size += ::protobuf::rt::enum_size(5, self.collector_endpoint_version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.collector_cluster.is_empty() {
            os.write_string(1, &self.collector_cluster)?;
        }
        if !self.collector_endpoint.is_empty() {
            os.write_string(2, &self.collector_endpoint)?;
        }
        if self.trace_id_128bit != false {
            os.write_bool(3, self.trace_id_128bit)?;
        }
        if let Some(ref v) = self.shared_span_context.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.collector_endpoint_version != ZipkinConfig_CollectorEndpointVersion::HTTP_JSON_V1 {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(&self.collector_endpoint_version))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ZipkinConfig {
        ZipkinConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "collector_cluster",
                |m: &ZipkinConfig| { &m.collector_cluster },
                |m: &mut ZipkinConfig| { &mut m.collector_cluster },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "collector_endpoint",
                |m: &ZipkinConfig| { &m.collector_endpoint },
                |m: &mut ZipkinConfig| { &mut m.collector_endpoint },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "trace_id_128bit",
                |m: &ZipkinConfig| { &m.trace_id_128bit },
                |m: &mut ZipkinConfig| { &mut m.trace_id_128bit },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::BoolValue>>(
                "shared_span_context",
                |m: &ZipkinConfig| { &m.shared_span_context },
                |m: &mut ZipkinConfig| { &mut m.shared_span_context },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ZipkinConfig_CollectorEndpointVersion>>(
                "collector_endpoint_version",
                |m: &ZipkinConfig| { &m.collector_endpoint_version },
                |m: &mut ZipkinConfig| { &mut m.collector_endpoint_version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ZipkinConfig>(
                "ZipkinConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ZipkinConfig {
        static instance: ::protobuf::rt::LazyV2<ZipkinConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ZipkinConfig::new)
    }
}

impl ::protobuf::Clear for ZipkinConfig {
    fn clear(&mut self) {
        self.collector_cluster.clear();
        self.collector_endpoint.clear();
        self.trace_id_128bit = false;
        self.shared_span_context.clear();
        self.collector_endpoint_version = ZipkinConfig_CollectorEndpointVersion::HTTP_JSON_V1;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ZipkinConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ZipkinConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ZipkinConfig_CollectorEndpointVersion {
    HTTP_JSON_V1 = 0,
    HTTP_JSON = 1,
    HTTP_PROTO = 2,
    GRPC = 3,
}

impl ::protobuf::ProtobufEnum for ZipkinConfig_CollectorEndpointVersion {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ZipkinConfig_CollectorEndpointVersion> {
        match value {
            0 => ::std::option::Option::Some(ZipkinConfig_CollectorEndpointVersion::HTTP_JSON_V1),
            1 => ::std::option::Option::Some(ZipkinConfig_CollectorEndpointVersion::HTTP_JSON),
            2 => ::std::option::Option::Some(ZipkinConfig_CollectorEndpointVersion::HTTP_PROTO),
            3 => ::std::option::Option::Some(ZipkinConfig_CollectorEndpointVersion::GRPC),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ZipkinConfig_CollectorEndpointVersion] = &[
            ZipkinConfig_CollectorEndpointVersion::HTTP_JSON_V1,
            ZipkinConfig_CollectorEndpointVersion::HTTP_JSON,
            ZipkinConfig_CollectorEndpointVersion::HTTP_PROTO,
            ZipkinConfig_CollectorEndpointVersion::GRPC,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ZipkinConfig_CollectorEndpointVersion>("ZipkinConfig.CollectorEndpointVersion", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ZipkinConfig_CollectorEndpointVersion {
}

impl ::std::default::Default for ZipkinConfig_CollectorEndpointVersion {
    fn default() -> Self {
        ZipkinConfig_CollectorEndpointVersion::HTTP_JSON_V1
    }
}

impl ::protobuf::reflect::ProtobufValue for ZipkinConfig_CollectorEndpointVersion {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"envoy/config/trace/v2/zipkin.proto\x12\x15envoy.config.trace.v2\x1a\
    \x1egoogle/protobuf/wrappers.proto\x1a#envoy/annotations/deprecation.pro\
    to\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/validate.proto\"\
    \xcd\x03\n\x0cZipkinConfig\x124\n\x11collector_cluster\x18\x01\x20\x01(\
    \tR\x10collectorClusterB\x07\xfaB\x04r\x02\x20\x01\x126\n\x12collector_e\
    ndpoint\x18\x02\x20\x01(\tR\x11collectorEndpointB\x07\xfaB\x04r\x02\x20\
    \x01\x12&\n\x0ftrace_id_128bit\x18\x03\x20\x01(\x08R\rtraceId128bit\x12J\
    \n\x13shared_span_context\x18\x04\x20\x01(\x0b2\x1a.google.protobuf.Bool\
    ValueR\x11sharedSpanContext\x12z\n\x1acollector_endpoint_version\x18\x05\
    \x20\x01(\x0e2<.envoy.config.trace.v2.ZipkinConfig.CollectorEndpointVers\
    ionR\x18collectorEndpointVersion\"_\n\x18CollectorEndpointVersion\x12\
    \x1a\n\x0cHTTP_JSON_V1\x10\0\x1a\x08\x08\x01\xa8\xf7\xb4\x8b\x02\x01\x12\
    \r\n\tHTTP_JSON\x10\x01\x12\x0e\n\nHTTP_PROTO\x10\x02\x12\x08\n\x04GRPC\
    \x10\x03B<\n#io.envoyproxy.envoy.config.trace.v2B\x0bZipkinProtoP\x01\
    \xba\x80\xc8\xd1\x06\x02\x10\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
