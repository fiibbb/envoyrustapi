// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/trace/v3/xray.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct XRayConfig {
    // message fields
    pub daemon_endpoint: ::protobuf::SingularPtrField<super::address::SocketAddress>,
    pub segment_name: ::std::string::String,
    pub sampling_rule_manifest: ::protobuf::SingularPtrField<super::base::DataSource>,
    pub segment_fields: ::protobuf::SingularPtrField<XRayConfig_SegmentFields>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a XRayConfig {
    fn default() -> &'a XRayConfig {
        <XRayConfig as ::protobuf::Message>::default_instance()
    }
}

impl XRayConfig {
    pub fn new() -> XRayConfig {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.SocketAddress daemon_endpoint = 1;


    pub fn get_daemon_endpoint(&self) -> &super::address::SocketAddress {
        self.daemon_endpoint.as_ref().unwrap_or_else(|| <super::address::SocketAddress as ::protobuf::Message>::default_instance())
    }
    pub fn clear_daemon_endpoint(&mut self) {
        self.daemon_endpoint.clear();
    }

    pub fn has_daemon_endpoint(&self) -> bool {
        self.daemon_endpoint.is_some()
    }

    // Param is passed by value, moved
    pub fn set_daemon_endpoint(&mut self, v: super::address::SocketAddress) {
        self.daemon_endpoint = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_daemon_endpoint(&mut self) -> &mut super::address::SocketAddress {
        if self.daemon_endpoint.is_none() {
            self.daemon_endpoint.set_default();
        }
        self.daemon_endpoint.as_mut().unwrap()
    }

    // Take field
    pub fn take_daemon_endpoint(&mut self) -> super::address::SocketAddress {
        self.daemon_endpoint.take().unwrap_or_else(|| super::address::SocketAddress::new())
    }

    // string segment_name = 2;


    pub fn get_segment_name(&self) -> &str {
        &self.segment_name
    }
    pub fn clear_segment_name(&mut self) {
        self.segment_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_segment_name(&mut self, v: ::std::string::String) {
        self.segment_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_segment_name(&mut self) -> &mut ::std::string::String {
        &mut self.segment_name
    }

    // Take field
    pub fn take_segment_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.segment_name, ::std::string::String::new())
    }

    // .envoy.config.core.v3.DataSource sampling_rule_manifest = 3;


    pub fn get_sampling_rule_manifest(&self) -> &super::base::DataSource {
        self.sampling_rule_manifest.as_ref().unwrap_or_else(|| <super::base::DataSource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_sampling_rule_manifest(&mut self) {
        self.sampling_rule_manifest.clear();
    }

    pub fn has_sampling_rule_manifest(&self) -> bool {
        self.sampling_rule_manifest.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sampling_rule_manifest(&mut self, v: super::base::DataSource) {
        self.sampling_rule_manifest = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sampling_rule_manifest(&mut self) -> &mut super::base::DataSource {
        if self.sampling_rule_manifest.is_none() {
            self.sampling_rule_manifest.set_default();
        }
        self.sampling_rule_manifest.as_mut().unwrap()
    }

    // Take field
    pub fn take_sampling_rule_manifest(&mut self) -> super::base::DataSource {
        self.sampling_rule_manifest.take().unwrap_or_else(|| super::base::DataSource::new())
    }

    // .envoy.config.trace.v3.XRayConfig.SegmentFields segment_fields = 4;


    pub fn get_segment_fields(&self) -> &XRayConfig_SegmentFields {
        self.segment_fields.as_ref().unwrap_or_else(|| <XRayConfig_SegmentFields as ::protobuf::Message>::default_instance())
    }
    pub fn clear_segment_fields(&mut self) {
        self.segment_fields.clear();
    }

    pub fn has_segment_fields(&self) -> bool {
        self.segment_fields.is_some()
    }

    // Param is passed by value, moved
    pub fn set_segment_fields(&mut self, v: XRayConfig_SegmentFields) {
        self.segment_fields = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_segment_fields(&mut self) -> &mut XRayConfig_SegmentFields {
        if self.segment_fields.is_none() {
            self.segment_fields.set_default();
        }
        self.segment_fields.as_mut().unwrap()
    }

    // Take field
    pub fn take_segment_fields(&mut self) -> XRayConfig_SegmentFields {
        self.segment_fields.take().unwrap_or_else(|| XRayConfig_SegmentFields::new())
    }
}

impl ::protobuf::Message for XRayConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.daemon_endpoint {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.sampling_rule_manifest {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.segment_fields {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.daemon_endpoint)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.segment_name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sampling_rule_manifest)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.segment_fields)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.daemon_endpoint.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.segment_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.segment_name);
        }
        if let Some(ref v) = self.sampling_rule_manifest.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.segment_fields.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.daemon_endpoint.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.segment_name.is_empty() {
            os.write_string(2, &self.segment_name)?;
        }
        if let Some(ref v) = self.sampling_rule_manifest.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.segment_fields.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> XRayConfig {
        XRayConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::address::SocketAddress>>(
                "daemon_endpoint",
                |m: &XRayConfig| { &m.daemon_endpoint },
                |m: &mut XRayConfig| { &mut m.daemon_endpoint },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "segment_name",
                |m: &XRayConfig| { &m.segment_name },
                |m: &mut XRayConfig| { &mut m.segment_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::DataSource>>(
                "sampling_rule_manifest",
                |m: &XRayConfig| { &m.sampling_rule_manifest },
                |m: &mut XRayConfig| { &mut m.sampling_rule_manifest },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<XRayConfig_SegmentFields>>(
                "segment_fields",
                |m: &XRayConfig| { &m.segment_fields },
                |m: &mut XRayConfig| { &mut m.segment_fields },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<XRayConfig>(
                "XRayConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static XRayConfig {
        static instance: ::protobuf::rt::LazyV2<XRayConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(XRayConfig::new)
    }
}

impl ::protobuf::Clear for XRayConfig {
    fn clear(&mut self) {
        self.daemon_endpoint.clear();
        self.segment_name.clear();
        self.sampling_rule_manifest.clear();
        self.segment_fields.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for XRayConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for XRayConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct XRayConfig_SegmentFields {
    // message fields
    pub origin: ::std::string::String,
    pub aws: ::protobuf::SingularPtrField<::protobuf::well_known_types::Struct>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a XRayConfig_SegmentFields {
    fn default() -> &'a XRayConfig_SegmentFields {
        <XRayConfig_SegmentFields as ::protobuf::Message>::default_instance()
    }
}

impl XRayConfig_SegmentFields {
    pub fn new() -> XRayConfig_SegmentFields {
        ::std::default::Default::default()
    }

    // string origin = 1;


    pub fn get_origin(&self) -> &str {
        &self.origin
    }
    pub fn clear_origin(&mut self) {
        self.origin.clear();
    }

    // Param is passed by value, moved
    pub fn set_origin(&mut self, v: ::std::string::String) {
        self.origin = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_origin(&mut self) -> &mut ::std::string::String {
        &mut self.origin
    }

    // Take field
    pub fn take_origin(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.origin, ::std::string::String::new())
    }

    // .google.protobuf.Struct aws = 2;


    pub fn get_aws(&self) -> &::protobuf::well_known_types::Struct {
        self.aws.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Struct as ::protobuf::Message>::default_instance())
    }
    pub fn clear_aws(&mut self) {
        self.aws.clear();
    }

    pub fn has_aws(&self) -> bool {
        self.aws.is_some()
    }

    // Param is passed by value, moved
    pub fn set_aws(&mut self, v: ::protobuf::well_known_types::Struct) {
        self.aws = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_aws(&mut self) -> &mut ::protobuf::well_known_types::Struct {
        if self.aws.is_none() {
            self.aws.set_default();
        }
        self.aws.as_mut().unwrap()
    }

    // Take field
    pub fn take_aws(&mut self) -> ::protobuf::well_known_types::Struct {
        self.aws.take().unwrap_or_else(|| ::protobuf::well_known_types::Struct::new())
    }
}

impl ::protobuf::Message for XRayConfig_SegmentFields {
    fn is_initialized(&self) -> bool {
        for v in &self.aws {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.origin)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.aws)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.origin.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.origin);
        }
        if let Some(ref v) = self.aws.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.origin.is_empty() {
            os.write_string(1, &self.origin)?;
        }
        if let Some(ref v) = self.aws.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> XRayConfig_SegmentFields {
        XRayConfig_SegmentFields::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "origin",
                |m: &XRayConfig_SegmentFields| { &m.origin },
                |m: &mut XRayConfig_SegmentFields| { &mut m.origin },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Struct>>(
                "aws",
                |m: &XRayConfig_SegmentFields| { &m.aws },
                |m: &mut XRayConfig_SegmentFields| { &mut m.aws },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<XRayConfig_SegmentFields>(
                "XRayConfig.SegmentFields",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static XRayConfig_SegmentFields {
        static instance: ::protobuf::rt::LazyV2<XRayConfig_SegmentFields> = ::protobuf::rt::LazyV2::INIT;
        instance.get(XRayConfig_SegmentFields::new)
    }
}

impl ::protobuf::Clear for XRayConfig_SegmentFields {
    fn clear(&mut self) {
        self.origin.clear();
        self.aws.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for XRayConfig_SegmentFields {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for XRayConfig_SegmentFields {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x20envoy/config/trace/v3/xray.proto\x12\x15envoy.config.trace.v3\x1a\
    \"envoy/config/core/v3/address.proto\x1a\x1fenvoy/config/core/v3/base.pr\
    oto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1eudpa/annotations/migrate.\
    proto\x1a\x1dudpa/annotations/status.proto\x1a!udpa/annotations/versioni\
    ng.proto\x1a\x17validate/validate.proto\"\xb8\x03\n\nXRayConfig\x12L\n\
    \x0fdaemon_endpoint\x18\x01\x20\x01(\x0b2#.envoy.config.core.v3.SocketAd\
    dressR\x0edaemonEndpoint\x12*\n\x0csegment_name\x18\x02\x20\x01(\tR\x0bs\
    egmentNameB\x07\xfaB\x04r\x02\x10\x01\x12V\n\x16sampling_rule_manifest\
    \x18\x03\x20\x01(\x0b2\x20.envoy.config.core.v3.DataSourceR\x14samplingR\
    uleManifest\x12V\n\x0esegment_fields\x18\x04\x20\x01(\x0b2/.envoy.config\
    .trace.v3.XRayConfig.SegmentFieldsR\rsegmentFields\x1aR\n\rSegmentFields\
    \x12\x16\n\x06origin\x18\x01\x20\x01(\tR\x06origin\x12)\n\x03aws\x18\x02\
    \x20\x01(\x0b2\x17.google.protobuf.StructR\x03aws:,\x9a\xc5\x88\x1e'\n%e\
    nvoy.config.trace.v2alpha.XRayConfigBg\n#io.envoyproxy.envoy.config.trac\
    e.v3B\tXrayProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\x02\xf2\x98\xfe\x8f\
    \x05'\x12%envoy.extensions.tracers.xray.v4alphab\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
