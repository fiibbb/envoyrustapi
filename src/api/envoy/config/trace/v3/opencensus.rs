// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/trace/v3/opencensus.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct OpenCensusConfig {
    // message fields
    pub trace_config: ::protobuf::SingularPtrField<super::trace_config::TraceConfig>,
    pub stdout_exporter_enabled: bool,
    pub stackdriver_exporter_enabled: bool,
    pub stackdriver_project_id: ::std::string::String,
    pub stackdriver_address: ::std::string::String,
    pub stackdriver_grpc_service: ::protobuf::SingularPtrField<super::grpc_service::GrpcService>,
    pub zipkin_exporter_enabled: bool,
    pub zipkin_url: ::std::string::String,
    pub ocagent_exporter_enabled: bool,
    pub ocagent_address: ::std::string::String,
    pub ocagent_grpc_service: ::protobuf::SingularPtrField<super::grpc_service::GrpcService>,
    pub incoming_trace_context: ::std::vec::Vec<OpenCensusConfig_TraceContext>,
    pub outgoing_trace_context: ::std::vec::Vec<OpenCensusConfig_TraceContext>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OpenCensusConfig {
    fn default() -> &'a OpenCensusConfig {
        <OpenCensusConfig as ::protobuf::Message>::default_instance()
    }
}

impl OpenCensusConfig {
    pub fn new() -> OpenCensusConfig {
        ::std::default::Default::default()
    }

    // .opencensus.proto.trace.v1.TraceConfig trace_config = 1;


    pub fn get_trace_config(&self) -> &super::trace_config::TraceConfig {
        self.trace_config.as_ref().unwrap_or_else(|| <super::trace_config::TraceConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_trace_config(&mut self) {
        self.trace_config.clear();
    }

    pub fn has_trace_config(&self) -> bool {
        self.trace_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trace_config(&mut self, v: super::trace_config::TraceConfig) {
        self.trace_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trace_config(&mut self) -> &mut super::trace_config::TraceConfig {
        if self.trace_config.is_none() {
            self.trace_config.set_default();
        }
        self.trace_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_trace_config(&mut self) -> super::trace_config::TraceConfig {
        self.trace_config.take().unwrap_or_else(|| super::trace_config::TraceConfig::new())
    }

    // bool stdout_exporter_enabled = 2;


    pub fn get_stdout_exporter_enabled(&self) -> bool {
        self.stdout_exporter_enabled
    }
    pub fn clear_stdout_exporter_enabled(&mut self) {
        self.stdout_exporter_enabled = false;
    }

    // Param is passed by value, moved
    pub fn set_stdout_exporter_enabled(&mut self, v: bool) {
        self.stdout_exporter_enabled = v;
    }

    // bool stackdriver_exporter_enabled = 3;


    pub fn get_stackdriver_exporter_enabled(&self) -> bool {
        self.stackdriver_exporter_enabled
    }
    pub fn clear_stackdriver_exporter_enabled(&mut self) {
        self.stackdriver_exporter_enabled = false;
    }

    // Param is passed by value, moved
    pub fn set_stackdriver_exporter_enabled(&mut self, v: bool) {
        self.stackdriver_exporter_enabled = v;
    }

    // string stackdriver_project_id = 4;


    pub fn get_stackdriver_project_id(&self) -> &str {
        &self.stackdriver_project_id
    }
    pub fn clear_stackdriver_project_id(&mut self) {
        self.stackdriver_project_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_stackdriver_project_id(&mut self, v: ::std::string::String) {
        self.stackdriver_project_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stackdriver_project_id(&mut self) -> &mut ::std::string::String {
        &mut self.stackdriver_project_id
    }

    // Take field
    pub fn take_stackdriver_project_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.stackdriver_project_id, ::std::string::String::new())
    }

    // string stackdriver_address = 10;


    pub fn get_stackdriver_address(&self) -> &str {
        &self.stackdriver_address
    }
    pub fn clear_stackdriver_address(&mut self) {
        self.stackdriver_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_stackdriver_address(&mut self, v: ::std::string::String) {
        self.stackdriver_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stackdriver_address(&mut self) -> &mut ::std::string::String {
        &mut self.stackdriver_address
    }

    // Take field
    pub fn take_stackdriver_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.stackdriver_address, ::std::string::String::new())
    }

    // .envoy.config.core.v3.GrpcService stackdriver_grpc_service = 13;


    pub fn get_stackdriver_grpc_service(&self) -> &super::grpc_service::GrpcService {
        self.stackdriver_grpc_service.as_ref().unwrap_or_else(|| <super::grpc_service::GrpcService as ::protobuf::Message>::default_instance())
    }
    pub fn clear_stackdriver_grpc_service(&mut self) {
        self.stackdriver_grpc_service.clear();
    }

    pub fn has_stackdriver_grpc_service(&self) -> bool {
        self.stackdriver_grpc_service.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stackdriver_grpc_service(&mut self, v: super::grpc_service::GrpcService) {
        self.stackdriver_grpc_service = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stackdriver_grpc_service(&mut self) -> &mut super::grpc_service::GrpcService {
        if self.stackdriver_grpc_service.is_none() {
            self.stackdriver_grpc_service.set_default();
        }
        self.stackdriver_grpc_service.as_mut().unwrap()
    }

    // Take field
    pub fn take_stackdriver_grpc_service(&mut self) -> super::grpc_service::GrpcService {
        self.stackdriver_grpc_service.take().unwrap_or_else(|| super::grpc_service::GrpcService::new())
    }

    // bool zipkin_exporter_enabled = 5;


    pub fn get_zipkin_exporter_enabled(&self) -> bool {
        self.zipkin_exporter_enabled
    }
    pub fn clear_zipkin_exporter_enabled(&mut self) {
        self.zipkin_exporter_enabled = false;
    }

    // Param is passed by value, moved
    pub fn set_zipkin_exporter_enabled(&mut self, v: bool) {
        self.zipkin_exporter_enabled = v;
    }

    // string zipkin_url = 6;


    pub fn get_zipkin_url(&self) -> &str {
        &self.zipkin_url
    }
    pub fn clear_zipkin_url(&mut self) {
        self.zipkin_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_zipkin_url(&mut self, v: ::std::string::String) {
        self.zipkin_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_zipkin_url(&mut self) -> &mut ::std::string::String {
        &mut self.zipkin_url
    }

    // Take field
    pub fn take_zipkin_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.zipkin_url, ::std::string::String::new())
    }

    // bool ocagent_exporter_enabled = 11;


    pub fn get_ocagent_exporter_enabled(&self) -> bool {
        self.ocagent_exporter_enabled
    }
    pub fn clear_ocagent_exporter_enabled(&mut self) {
        self.ocagent_exporter_enabled = false;
    }

    // Param is passed by value, moved
    pub fn set_ocagent_exporter_enabled(&mut self, v: bool) {
        self.ocagent_exporter_enabled = v;
    }

    // string ocagent_address = 12;


    pub fn get_ocagent_address(&self) -> &str {
        &self.ocagent_address
    }
    pub fn clear_ocagent_address(&mut self) {
        self.ocagent_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_ocagent_address(&mut self, v: ::std::string::String) {
        self.ocagent_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ocagent_address(&mut self) -> &mut ::std::string::String {
        &mut self.ocagent_address
    }

    // Take field
    pub fn take_ocagent_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ocagent_address, ::std::string::String::new())
    }

    // .envoy.config.core.v3.GrpcService ocagent_grpc_service = 14;


    pub fn get_ocagent_grpc_service(&self) -> &super::grpc_service::GrpcService {
        self.ocagent_grpc_service.as_ref().unwrap_or_else(|| <super::grpc_service::GrpcService as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ocagent_grpc_service(&mut self) {
        self.ocagent_grpc_service.clear();
    }

    pub fn has_ocagent_grpc_service(&self) -> bool {
        self.ocagent_grpc_service.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ocagent_grpc_service(&mut self, v: super::grpc_service::GrpcService) {
        self.ocagent_grpc_service = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ocagent_grpc_service(&mut self) -> &mut super::grpc_service::GrpcService {
        if self.ocagent_grpc_service.is_none() {
            self.ocagent_grpc_service.set_default();
        }
        self.ocagent_grpc_service.as_mut().unwrap()
    }

    // Take field
    pub fn take_ocagent_grpc_service(&mut self) -> super::grpc_service::GrpcService {
        self.ocagent_grpc_service.take().unwrap_or_else(|| super::grpc_service::GrpcService::new())
    }

    // repeated .envoy.config.trace.v3.OpenCensusConfig.TraceContext incoming_trace_context = 8;


    pub fn get_incoming_trace_context(&self) -> &[OpenCensusConfig_TraceContext] {
        &self.incoming_trace_context
    }
    pub fn clear_incoming_trace_context(&mut self) {
        self.incoming_trace_context.clear();
    }

    // Param is passed by value, moved
    pub fn set_incoming_trace_context(&mut self, v: ::std::vec::Vec<OpenCensusConfig_TraceContext>) {
        self.incoming_trace_context = v;
    }

    // Mutable pointer to the field.
    pub fn mut_incoming_trace_context(&mut self) -> &mut ::std::vec::Vec<OpenCensusConfig_TraceContext> {
        &mut self.incoming_trace_context
    }

    // Take field
    pub fn take_incoming_trace_context(&mut self) -> ::std::vec::Vec<OpenCensusConfig_TraceContext> {
        ::std::mem::replace(&mut self.incoming_trace_context, ::std::vec::Vec::new())
    }

    // repeated .envoy.config.trace.v3.OpenCensusConfig.TraceContext outgoing_trace_context = 9;


    pub fn get_outgoing_trace_context(&self) -> &[OpenCensusConfig_TraceContext] {
        &self.outgoing_trace_context
    }
    pub fn clear_outgoing_trace_context(&mut self) {
        self.outgoing_trace_context.clear();
    }

    // Param is passed by value, moved
    pub fn set_outgoing_trace_context(&mut self, v: ::std::vec::Vec<OpenCensusConfig_TraceContext>) {
        self.outgoing_trace_context = v;
    }

    // Mutable pointer to the field.
    pub fn mut_outgoing_trace_context(&mut self) -> &mut ::std::vec::Vec<OpenCensusConfig_TraceContext> {
        &mut self.outgoing_trace_context
    }

    // Take field
    pub fn take_outgoing_trace_context(&mut self) -> ::std::vec::Vec<OpenCensusConfig_TraceContext> {
        ::std::mem::replace(&mut self.outgoing_trace_context, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for OpenCensusConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.trace_config {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.stackdriver_grpc_service {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ocagent_grpc_service {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.trace_config)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.stdout_exporter_enabled = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.stackdriver_exporter_enabled = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.stackdriver_project_id)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.stackdriver_address)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.stackdriver_grpc_service)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.zipkin_exporter_enabled = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.zipkin_url)?;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.ocagent_exporter_enabled = tmp;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ocagent_address)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ocagent_grpc_service)?;
                },
                8 => {
                    ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(wire_type, is, &mut self.incoming_trace_context, 8, &mut self.unknown_fields)?
                },
                9 => {
                    ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(wire_type, is, &mut self.outgoing_trace_context, 9, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.trace_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.stdout_exporter_enabled != false {
            my_size += 2;
        }
        if self.stackdriver_exporter_enabled != false {
            my_size += 2;
        }
        if !self.stackdriver_project_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.stackdriver_project_id);
        }
        if !self.stackdriver_address.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.stackdriver_address);
        }
        if let Some(ref v) = self.stackdriver_grpc_service.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.zipkin_exporter_enabled != false {
            my_size += 2;
        }
        if !self.zipkin_url.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.zipkin_url);
        }
        if self.ocagent_exporter_enabled != false {
            my_size += 2;
        }
        if !self.ocagent_address.is_empty() {
            my_size += ::protobuf::rt::string_size(12, &self.ocagent_address);
        }
        if let Some(ref v) = self.ocagent_grpc_service.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.incoming_trace_context {
            my_size += ::protobuf::rt::enum_size(8, *value);
        };
        for value in &self.outgoing_trace_context {
            my_size += ::protobuf::rt::enum_size(9, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.trace_config.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.stdout_exporter_enabled != false {
            os.write_bool(2, self.stdout_exporter_enabled)?;
        }
        if self.stackdriver_exporter_enabled != false {
            os.write_bool(3, self.stackdriver_exporter_enabled)?;
        }
        if !self.stackdriver_project_id.is_empty() {
            os.write_string(4, &self.stackdriver_project_id)?;
        }
        if !self.stackdriver_address.is_empty() {
            os.write_string(10, &self.stackdriver_address)?;
        }
        if let Some(ref v) = self.stackdriver_grpc_service.as_ref() {
            os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.zipkin_exporter_enabled != false {
            os.write_bool(5, self.zipkin_exporter_enabled)?;
        }
        if !self.zipkin_url.is_empty() {
            os.write_string(6, &self.zipkin_url)?;
        }
        if self.ocagent_exporter_enabled != false {
            os.write_bool(11, self.ocagent_exporter_enabled)?;
        }
        if !self.ocagent_address.is_empty() {
            os.write_string(12, &self.ocagent_address)?;
        }
        if let Some(ref v) = self.ocagent_grpc_service.as_ref() {
            os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.incoming_trace_context {
            os.write_enum(8, ::protobuf::ProtobufEnum::value(v))?;
        };
        for v in &self.outgoing_trace_context {
            os.write_enum(9, ::protobuf::ProtobufEnum::value(v))?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OpenCensusConfig {
        OpenCensusConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::trace_config::TraceConfig>>(
                "trace_config",
                |m: &OpenCensusConfig| { &m.trace_config },
                |m: &mut OpenCensusConfig| { &mut m.trace_config },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "stdout_exporter_enabled",
                |m: &OpenCensusConfig| { &m.stdout_exporter_enabled },
                |m: &mut OpenCensusConfig| { &mut m.stdout_exporter_enabled },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "stackdriver_exporter_enabled",
                |m: &OpenCensusConfig| { &m.stackdriver_exporter_enabled },
                |m: &mut OpenCensusConfig| { &mut m.stackdriver_exporter_enabled },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "stackdriver_project_id",
                |m: &OpenCensusConfig| { &m.stackdriver_project_id },
                |m: &mut OpenCensusConfig| { &mut m.stackdriver_project_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "stackdriver_address",
                |m: &OpenCensusConfig| { &m.stackdriver_address },
                |m: &mut OpenCensusConfig| { &mut m.stackdriver_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::grpc_service::GrpcService>>(
                "stackdriver_grpc_service",
                |m: &OpenCensusConfig| { &m.stackdriver_grpc_service },
                |m: &mut OpenCensusConfig| { &mut m.stackdriver_grpc_service },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "zipkin_exporter_enabled",
                |m: &OpenCensusConfig| { &m.zipkin_exporter_enabled },
                |m: &mut OpenCensusConfig| { &mut m.zipkin_exporter_enabled },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "zipkin_url",
                |m: &OpenCensusConfig| { &m.zipkin_url },
                |m: &mut OpenCensusConfig| { &mut m.zipkin_url },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "ocagent_exporter_enabled",
                |m: &OpenCensusConfig| { &m.ocagent_exporter_enabled },
                |m: &mut OpenCensusConfig| { &mut m.ocagent_exporter_enabled },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ocagent_address",
                |m: &OpenCensusConfig| { &m.ocagent_address },
                |m: &mut OpenCensusConfig| { &mut m.ocagent_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::grpc_service::GrpcService>>(
                "ocagent_grpc_service",
                |m: &OpenCensusConfig| { &m.ocagent_grpc_service },
                |m: &mut OpenCensusConfig| { &mut m.ocagent_grpc_service },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeEnum<OpenCensusConfig_TraceContext>>(
                "incoming_trace_context",
                |m: &OpenCensusConfig| { &m.incoming_trace_context },
                |m: &mut OpenCensusConfig| { &mut m.incoming_trace_context },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeEnum<OpenCensusConfig_TraceContext>>(
                "outgoing_trace_context",
                |m: &OpenCensusConfig| { &m.outgoing_trace_context },
                |m: &mut OpenCensusConfig| { &mut m.outgoing_trace_context },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OpenCensusConfig>(
                "OpenCensusConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OpenCensusConfig {
        static instance: ::protobuf::rt::LazyV2<OpenCensusConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OpenCensusConfig::new)
    }
}

impl ::protobuf::Clear for OpenCensusConfig {
    fn clear(&mut self) {
        self.trace_config.clear();
        self.stdout_exporter_enabled = false;
        self.stackdriver_exporter_enabled = false;
        self.stackdriver_project_id.clear();
        self.stackdriver_address.clear();
        self.stackdriver_grpc_service.clear();
        self.zipkin_exporter_enabled = false;
        self.zipkin_url.clear();
        self.ocagent_exporter_enabled = false;
        self.ocagent_address.clear();
        self.ocagent_grpc_service.clear();
        self.incoming_trace_context.clear();
        self.outgoing_trace_context.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OpenCensusConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OpenCensusConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum OpenCensusConfig_TraceContext {
    NONE = 0,
    TRACE_CONTEXT = 1,
    GRPC_TRACE_BIN = 2,
    CLOUD_TRACE_CONTEXT = 3,
    B3 = 4,
}

impl ::protobuf::ProtobufEnum for OpenCensusConfig_TraceContext {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<OpenCensusConfig_TraceContext> {
        match value {
            0 => ::std::option::Option::Some(OpenCensusConfig_TraceContext::NONE),
            1 => ::std::option::Option::Some(OpenCensusConfig_TraceContext::TRACE_CONTEXT),
            2 => ::std::option::Option::Some(OpenCensusConfig_TraceContext::GRPC_TRACE_BIN),
            3 => ::std::option::Option::Some(OpenCensusConfig_TraceContext::CLOUD_TRACE_CONTEXT),
            4 => ::std::option::Option::Some(OpenCensusConfig_TraceContext::B3),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [OpenCensusConfig_TraceContext] = &[
            OpenCensusConfig_TraceContext::NONE,
            OpenCensusConfig_TraceContext::TRACE_CONTEXT,
            OpenCensusConfig_TraceContext::GRPC_TRACE_BIN,
            OpenCensusConfig_TraceContext::CLOUD_TRACE_CONTEXT,
            OpenCensusConfig_TraceContext::B3,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<OpenCensusConfig_TraceContext>("OpenCensusConfig.TraceContext", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for OpenCensusConfig_TraceContext {
}

impl ::std::default::Default for OpenCensusConfig_TraceContext {
    fn default() -> Self {
        OpenCensusConfig_TraceContext::NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for OpenCensusConfig_TraceContext {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n&envoy/config/trace/v3/opencensus.proto\x12\x15envoy.config.trace.v3\
    \x1a'envoy/config/core/v3/grpc_service.proto\x1a,opencensus/proto/trace/\
    v1/trace_config.proto\x1a\x1eudpa/annotations/migrate.proto\x1a\x1dudpa/\
    annotations/status.proto\x1a!udpa/annotations/versioning.proto\x1a\x17va\
    lidate/validate.proto\"\x99\x08\n\x10OpenCensusConfig\x12I\n\x0ctrace_co\
    nfig\x18\x01\x20\x01(\x0b2&.opencensus.proto.trace.v1.TraceConfigR\x0btr\
    aceConfig\x126\n\x17stdout_exporter_enabled\x18\x02\x20\x01(\x08R\x15std\
    outExporterEnabled\x12@\n\x1cstackdriver_exporter_enabled\x18\x03\x20\
    \x01(\x08R\x1astackdriverExporterEnabled\x124\n\x16stackdriver_project_i\
    d\x18\x04\x20\x01(\tR\x14stackdriverProjectId\x12/\n\x13stackdriver_addr\
    ess\x18\n\x20\x01(\tR\x12stackdriverAddress\x12[\n\x18stackdriver_grpc_s\
    ervice\x18\r\x20\x01(\x0b2!.envoy.config.core.v3.GrpcServiceR\x16stackdr\
    iverGrpcService\x126\n\x17zipkin_exporter_enabled\x18\x05\x20\x01(\x08R\
    \x15zipkinExporterEnabled\x12\x1d\n\nzipkin_url\x18\x06\x20\x01(\tR\tzip\
    kinUrl\x128\n\x18ocagent_exporter_enabled\x18\x0b\x20\x01(\x08R\x16ocage\
    ntExporterEnabled\x12'\n\x0focagent_address\x18\x0c\x20\x01(\tR\x0eocage\
    ntAddress\x12S\n\x14ocagent_grpc_service\x18\x0e\x20\x01(\x0b2!.envoy.co\
    nfig.core.v3.GrpcServiceR\x12ocagentGrpcService\x12j\n\x16incoming_trace\
    _context\x18\x08\x20\x03(\x0e24.envoy.config.trace.v3.OpenCensusConfig.T\
    raceContextR\x14incomingTraceContext\x12j\n\x16outgoing_trace_context\
    \x18\t\x20\x03(\x0e24.envoy.config.trace.v3.OpenCensusConfig.TraceContex\
    tR\x14outgoingTraceContext\"`\n\x0cTraceContext\x12\x08\n\x04NONE\x10\0\
    \x12\x11\n\rTRACE_CONTEXT\x10\x01\x12\x12\n\x0eGRPC_TRACE_BIN\x10\x02\
    \x12\x17\n\x13CLOUD_TRACE_CONTEXT\x10\x03\x12\x06\n\x02B3\x10\x04:-\x9a\
    \xc5\x88\x1e(\n&envoy.config.trace.v2.OpenCensusConfigJ\x04\x08\x07\x10\
    \x08Bs\n#io.envoyproxy.envoy.config.trace.v3B\x0fOpencensusProtoP\x01\
    \xf2\x98\xfe\x8f\x05-\x12+envoy.extensions.tracers.opencensus.v4alpha\
    \xba\x80\xc8\xd1\x06\x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
