// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/ratelimit/v3/rls.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct RateLimitServiceConfig {
    // message fields
    pub grpc_service: ::protobuf::SingularPtrField<super::grpc_service::GrpcService>,
    pub transport_api_version: super::config_source::ApiVersion,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RateLimitServiceConfig {
    fn default() -> &'a RateLimitServiceConfig {
        <RateLimitServiceConfig as ::protobuf::Message>::default_instance()
    }
}

impl RateLimitServiceConfig {
    pub fn new() -> RateLimitServiceConfig {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.GrpcService grpc_service = 2;


    pub fn get_grpc_service(&self) -> &super::grpc_service::GrpcService {
        self.grpc_service.as_ref().unwrap_or_else(|| <super::grpc_service::GrpcService as ::protobuf::Message>::default_instance())
    }
    pub fn clear_grpc_service(&mut self) {
        self.grpc_service.clear();
    }

    pub fn has_grpc_service(&self) -> bool {
        self.grpc_service.is_some()
    }

    // Param is passed by value, moved
    pub fn set_grpc_service(&mut self, v: super::grpc_service::GrpcService) {
        self.grpc_service = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_grpc_service(&mut self) -> &mut super::grpc_service::GrpcService {
        if self.grpc_service.is_none() {
            self.grpc_service.set_default();
        }
        self.grpc_service.as_mut().unwrap()
    }

    // Take field
    pub fn take_grpc_service(&mut self) -> super::grpc_service::GrpcService {
        self.grpc_service.take().unwrap_or_else(|| super::grpc_service::GrpcService::new())
    }

    // .envoy.config.core.v3.ApiVersion transport_api_version = 4;


    pub fn get_transport_api_version(&self) -> super::config_source::ApiVersion {
        self.transport_api_version
    }
    pub fn clear_transport_api_version(&mut self) {
        self.transport_api_version = super::config_source::ApiVersion::AUTO;
    }

    // Param is passed by value, moved
    pub fn set_transport_api_version(&mut self, v: super::config_source::ApiVersion) {
        self.transport_api_version = v;
    }
}

impl ::protobuf::Message for RateLimitServiceConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.grpc_service {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.grpc_service)?;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.transport_api_version, 4, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.grpc_service.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.transport_api_version != super::config_source::ApiVersion::AUTO {
            my_size += ::protobuf::rt::enum_size(4, self.transport_api_version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.grpc_service.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.transport_api_version != super::config_source::ApiVersion::AUTO {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.transport_api_version))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RateLimitServiceConfig {
        RateLimitServiceConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::grpc_service::GrpcService>>(
                "grpc_service",
                |m: &RateLimitServiceConfig| { &m.grpc_service },
                |m: &mut RateLimitServiceConfig| { &mut m.grpc_service },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::config_source::ApiVersion>>(
                "transport_api_version",
                |m: &RateLimitServiceConfig| { &m.transport_api_version },
                |m: &mut RateLimitServiceConfig| { &mut m.transport_api_version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RateLimitServiceConfig>(
                "RateLimitServiceConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RateLimitServiceConfig {
        static instance: ::protobuf::rt::LazyV2<RateLimitServiceConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RateLimitServiceConfig::new)
    }
}

impl ::protobuf::Clear for RateLimitServiceConfig {
    fn clear(&mut self) {
        self.grpc_service.clear();
        self.transport_api_version = super::config_source::ApiVersion::AUTO;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RateLimitServiceConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RateLimitServiceConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#envoy/config/ratelimit/v3/rls.proto\x12\x19envoy.config.ratelimit.v3\
    \x1a(envoy/config/core/v3/config_source.proto\x1a'envoy/config/core/v3/g\
    rpc_service.proto\x1a\x1dudpa/annotations/status.proto\x1a!udpa/annotati\
    ons/versioning.proto\x1a\x17validate/validate.proto\"\x8d\x02\n\x16RateL\
    imitServiceConfig\x12N\n\x0cgrpc_service\x18\x02\x20\x01(\x0b2!.envoy.co\
    nfig.core.v3.GrpcServiceR\x0bgrpcServiceB\x08\xfaB\x05\x8a\x01\x02\x10\
    \x01\x12^\n\x15transport_api_version\x18\x04\x20\x01(\x0e2\x20.envoy.con\
    fig.core.v3.ApiVersionR\x13transportApiVersionB\x08\xfaB\x05\x82\x01\x02\
    \x10\x01:7\x9a\xc5\x88\x1e2\n0envoy.config.ratelimit.v2.RateLimitService\
    ConfigJ\x04\x08\x01\x10\x02J\x04\x08\x03\x10\x04B=\n'io.envoyproxy.envoy\
    .config.ratelimit.v3B\x08RlsProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\x02b\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
