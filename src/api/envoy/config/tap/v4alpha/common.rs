// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/tap/v4alpha/common.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct TapConfig {
    // message fields
    pub field_match: ::protobuf::SingularPtrField<super::matcher::MatchPredicate>,
    pub output_config: ::protobuf::SingularPtrField<OutputConfig>,
    pub tap_enabled: ::protobuf::SingularPtrField<super::base::RuntimeFractionalPercent>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TapConfig {
    fn default() -> &'a TapConfig {
        <TapConfig as ::protobuf::Message>::default_instance()
    }
}

impl TapConfig {
    pub fn new() -> TapConfig {
        ::std::default::Default::default()
    }

    // .envoy.config.common.matcher.v4alpha.MatchPredicate match = 4;


    pub fn get_field_match(&self) -> &super::matcher::MatchPredicate {
        self.field_match.as_ref().unwrap_or_else(|| <super::matcher::MatchPredicate as ::protobuf::Message>::default_instance())
    }
    pub fn clear_field_match(&mut self) {
        self.field_match.clear();
    }

    pub fn has_field_match(&self) -> bool {
        self.field_match.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_match(&mut self, v: super::matcher::MatchPredicate) {
        self.field_match = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_match(&mut self) -> &mut super::matcher::MatchPredicate {
        if self.field_match.is_none() {
            self.field_match.set_default();
        }
        self.field_match.as_mut().unwrap()
    }

    // Take field
    pub fn take_field_match(&mut self) -> super::matcher::MatchPredicate {
        self.field_match.take().unwrap_or_else(|| super::matcher::MatchPredicate::new())
    }

    // .envoy.config.tap.v4alpha.OutputConfig output_config = 2;


    pub fn get_output_config(&self) -> &OutputConfig {
        self.output_config.as_ref().unwrap_or_else(|| <OutputConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_output_config(&mut self) {
        self.output_config.clear();
    }

    pub fn has_output_config(&self) -> bool {
        self.output_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_output_config(&mut self, v: OutputConfig) {
        self.output_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_output_config(&mut self) -> &mut OutputConfig {
        if self.output_config.is_none() {
            self.output_config.set_default();
        }
        self.output_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_output_config(&mut self) -> OutputConfig {
        self.output_config.take().unwrap_or_else(|| OutputConfig::new())
    }

    // .envoy.config.core.v4alpha.RuntimeFractionalPercent tap_enabled = 3;


    pub fn get_tap_enabled(&self) -> &super::base::RuntimeFractionalPercent {
        self.tap_enabled.as_ref().unwrap_or_else(|| <super::base::RuntimeFractionalPercent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tap_enabled(&mut self) {
        self.tap_enabled.clear();
    }

    pub fn has_tap_enabled(&self) -> bool {
        self.tap_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tap_enabled(&mut self, v: super::base::RuntimeFractionalPercent) {
        self.tap_enabled = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tap_enabled(&mut self) -> &mut super::base::RuntimeFractionalPercent {
        if self.tap_enabled.is_none() {
            self.tap_enabled.set_default();
        }
        self.tap_enabled.as_mut().unwrap()
    }

    // Take field
    pub fn take_tap_enabled(&mut self) -> super::base::RuntimeFractionalPercent {
        self.tap_enabled.take().unwrap_or_else(|| super::base::RuntimeFractionalPercent::new())
    }
}

impl ::protobuf::Message for TapConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.field_match {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.output_config {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tap_enabled {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.field_match)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.output_config)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tap_enabled)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.field_match.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.output_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.tap_enabled.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.field_match.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.output_config.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.tap_enabled.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TapConfig {
        TapConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::matcher::MatchPredicate>>(
                "match",
                |m: &TapConfig| { &m.field_match },
                |m: &mut TapConfig| { &mut m.field_match },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OutputConfig>>(
                "output_config",
                |m: &TapConfig| { &m.output_config },
                |m: &mut TapConfig| { &mut m.output_config },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::RuntimeFractionalPercent>>(
                "tap_enabled",
                |m: &TapConfig| { &m.tap_enabled },
                |m: &mut TapConfig| { &mut m.tap_enabled },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TapConfig>(
                "TapConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TapConfig {
        static instance: ::protobuf::rt::LazyV2<TapConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TapConfig::new)
    }
}

impl ::protobuf::Clear for TapConfig {
    fn clear(&mut self) {
        self.field_match.clear();
        self.output_config.clear();
        self.tap_enabled.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TapConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TapConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MatchPredicate {
    // message oneof groups
    pub rule: ::std::option::Option<MatchPredicate_oneof_rule>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MatchPredicate {
    fn default() -> &'a MatchPredicate {
        <MatchPredicate as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum MatchPredicate_oneof_rule {
    or_match(MatchPredicate_MatchSet),
    and_match(MatchPredicate_MatchSet),
    not_match(::std::boxed::Box<MatchPredicate>),
    any_match(bool),
    http_request_headers_match(HttpHeadersMatch),
    http_request_trailers_match(HttpHeadersMatch),
    http_response_headers_match(HttpHeadersMatch),
    http_response_trailers_match(HttpHeadersMatch),
    http_request_generic_body_match(HttpGenericBodyMatch),
    http_response_generic_body_match(HttpGenericBodyMatch),
}

impl MatchPredicate {
    pub fn new() -> MatchPredicate {
        ::std::default::Default::default()
    }

    // .envoy.config.tap.v4alpha.MatchPredicate.MatchSet or_match = 1;


    pub fn get_or_match(&self) -> &MatchPredicate_MatchSet {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::or_match(ref v)) => v,
            _ => <MatchPredicate_MatchSet as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_or_match(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_or_match(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::or_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_or_match(&mut self, v: MatchPredicate_MatchSet) {
        self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::or_match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_or_match(&mut self) -> &mut MatchPredicate_MatchSet {
        if let ::std::option::Option::Some(MatchPredicate_oneof_rule::or_match(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::or_match(MatchPredicate_MatchSet::new()));
        }
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::or_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_or_match(&mut self) -> MatchPredicate_MatchSet {
        if self.has_or_match() {
            match self.rule.take() {
                ::std::option::Option::Some(MatchPredicate_oneof_rule::or_match(v)) => v,
                _ => panic!(),
            }
        } else {
            MatchPredicate_MatchSet::new()
        }
    }

    // .envoy.config.tap.v4alpha.MatchPredicate.MatchSet and_match = 2;


    pub fn get_and_match(&self) -> &MatchPredicate_MatchSet {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::and_match(ref v)) => v,
            _ => <MatchPredicate_MatchSet as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_and_match(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_and_match(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::and_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_and_match(&mut self, v: MatchPredicate_MatchSet) {
        self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::and_match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_and_match(&mut self) -> &mut MatchPredicate_MatchSet {
        if let ::std::option::Option::Some(MatchPredicate_oneof_rule::and_match(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::and_match(MatchPredicate_MatchSet::new()));
        }
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::and_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_and_match(&mut self) -> MatchPredicate_MatchSet {
        if self.has_and_match() {
            match self.rule.take() {
                ::std::option::Option::Some(MatchPredicate_oneof_rule::and_match(v)) => v,
                _ => panic!(),
            }
        } else {
            MatchPredicate_MatchSet::new()
        }
    }

    // .envoy.config.tap.v4alpha.MatchPredicate not_match = 3;


    pub fn get_not_match(&self) -> &MatchPredicate {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::not_match(ref v)) => v,
            _ => <MatchPredicate as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_not_match(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_not_match(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::not_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_not_match(&mut self, v: MatchPredicate) {
        self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::not_match(::std::boxed::Box::new(v)))
    }

    // Mutable pointer to the field.
    pub fn mut_not_match(&mut self) -> &mut MatchPredicate {
        if let ::std::option::Option::Some(MatchPredicate_oneof_rule::not_match(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::not_match(::std::boxed::Box::new(MatchPredicate::new())));
        }
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::not_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_not_match(&mut self) -> MatchPredicate {
        if self.has_not_match() {
            match self.rule.take() {
                ::std::option::Option::Some(MatchPredicate_oneof_rule::not_match(v)) => *v,
                _ => panic!(),
            }
        } else {
            MatchPredicate::new()
        }
    }

    // bool any_match = 4;


    pub fn get_any_match(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::any_match(v)) => v,
            _ => false,
        }
    }
    pub fn clear_any_match(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_any_match(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::any_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_any_match(&mut self, v: bool) {
        self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::any_match(v))
    }

    // .envoy.config.tap.v4alpha.HttpHeadersMatch http_request_headers_match = 5;


    pub fn get_http_request_headers_match(&self) -> &HttpHeadersMatch {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_headers_match(ref v)) => v,
            _ => <HttpHeadersMatch as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_http_request_headers_match(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_http_request_headers_match(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_headers_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_http_request_headers_match(&mut self, v: HttpHeadersMatch) {
        self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_headers_match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_http_request_headers_match(&mut self) -> &mut HttpHeadersMatch {
        if let ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_headers_match(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_headers_match(HttpHeadersMatch::new()));
        }
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_headers_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_http_request_headers_match(&mut self) -> HttpHeadersMatch {
        if self.has_http_request_headers_match() {
            match self.rule.take() {
                ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_headers_match(v)) => v,
                _ => panic!(),
            }
        } else {
            HttpHeadersMatch::new()
        }
    }

    // .envoy.config.tap.v4alpha.HttpHeadersMatch http_request_trailers_match = 6;


    pub fn get_http_request_trailers_match(&self) -> &HttpHeadersMatch {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_trailers_match(ref v)) => v,
            _ => <HttpHeadersMatch as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_http_request_trailers_match(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_http_request_trailers_match(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_trailers_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_http_request_trailers_match(&mut self, v: HttpHeadersMatch) {
        self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_trailers_match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_http_request_trailers_match(&mut self) -> &mut HttpHeadersMatch {
        if let ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_trailers_match(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_trailers_match(HttpHeadersMatch::new()));
        }
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_trailers_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_http_request_trailers_match(&mut self) -> HttpHeadersMatch {
        if self.has_http_request_trailers_match() {
            match self.rule.take() {
                ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_trailers_match(v)) => v,
                _ => panic!(),
            }
        } else {
            HttpHeadersMatch::new()
        }
    }

    // .envoy.config.tap.v4alpha.HttpHeadersMatch http_response_headers_match = 7;


    pub fn get_http_response_headers_match(&self) -> &HttpHeadersMatch {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_headers_match(ref v)) => v,
            _ => <HttpHeadersMatch as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_http_response_headers_match(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_http_response_headers_match(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_headers_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_http_response_headers_match(&mut self, v: HttpHeadersMatch) {
        self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_headers_match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_http_response_headers_match(&mut self) -> &mut HttpHeadersMatch {
        if let ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_headers_match(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_headers_match(HttpHeadersMatch::new()));
        }
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_headers_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_http_response_headers_match(&mut self) -> HttpHeadersMatch {
        if self.has_http_response_headers_match() {
            match self.rule.take() {
                ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_headers_match(v)) => v,
                _ => panic!(),
            }
        } else {
            HttpHeadersMatch::new()
        }
    }

    // .envoy.config.tap.v4alpha.HttpHeadersMatch http_response_trailers_match = 8;


    pub fn get_http_response_trailers_match(&self) -> &HttpHeadersMatch {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_trailers_match(ref v)) => v,
            _ => <HttpHeadersMatch as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_http_response_trailers_match(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_http_response_trailers_match(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_trailers_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_http_response_trailers_match(&mut self, v: HttpHeadersMatch) {
        self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_trailers_match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_http_response_trailers_match(&mut self) -> &mut HttpHeadersMatch {
        if let ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_trailers_match(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_trailers_match(HttpHeadersMatch::new()));
        }
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_trailers_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_http_response_trailers_match(&mut self) -> HttpHeadersMatch {
        if self.has_http_response_trailers_match() {
            match self.rule.take() {
                ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_trailers_match(v)) => v,
                _ => panic!(),
            }
        } else {
            HttpHeadersMatch::new()
        }
    }

    // .envoy.config.tap.v4alpha.HttpGenericBodyMatch http_request_generic_body_match = 9;


    pub fn get_http_request_generic_body_match(&self) -> &HttpGenericBodyMatch {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_generic_body_match(ref v)) => v,
            _ => <HttpGenericBodyMatch as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_http_request_generic_body_match(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_http_request_generic_body_match(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_generic_body_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_http_request_generic_body_match(&mut self, v: HttpGenericBodyMatch) {
        self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_generic_body_match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_http_request_generic_body_match(&mut self) -> &mut HttpGenericBodyMatch {
        if let ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_generic_body_match(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_generic_body_match(HttpGenericBodyMatch::new()));
        }
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_generic_body_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_http_request_generic_body_match(&mut self) -> HttpGenericBodyMatch {
        if self.has_http_request_generic_body_match() {
            match self.rule.take() {
                ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_generic_body_match(v)) => v,
                _ => panic!(),
            }
        } else {
            HttpGenericBodyMatch::new()
        }
    }

    // .envoy.config.tap.v4alpha.HttpGenericBodyMatch http_response_generic_body_match = 10;


    pub fn get_http_response_generic_body_match(&self) -> &HttpGenericBodyMatch {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_generic_body_match(ref v)) => v,
            _ => <HttpGenericBodyMatch as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_http_response_generic_body_match(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_http_response_generic_body_match(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_generic_body_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_http_response_generic_body_match(&mut self, v: HttpGenericBodyMatch) {
        self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_generic_body_match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_http_response_generic_body_match(&mut self) -> &mut HttpGenericBodyMatch {
        if let ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_generic_body_match(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_generic_body_match(HttpGenericBodyMatch::new()));
        }
        match self.rule {
            ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_generic_body_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_http_response_generic_body_match(&mut self) -> HttpGenericBodyMatch {
        if self.has_http_response_generic_body_match() {
            match self.rule.take() {
                ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_generic_body_match(v)) => v,
                _ => panic!(),
            }
        } else {
            HttpGenericBodyMatch::new()
        }
    }
}

impl ::protobuf::Message for MatchPredicate {
    fn is_initialized(&self) -> bool {
        if let Some(MatchPredicate_oneof_rule::or_match(ref v)) = self.rule {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MatchPredicate_oneof_rule::and_match(ref v)) = self.rule {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MatchPredicate_oneof_rule::not_match(ref v)) = self.rule {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MatchPredicate_oneof_rule::http_request_headers_match(ref v)) = self.rule {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MatchPredicate_oneof_rule::http_request_trailers_match(ref v)) = self.rule {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MatchPredicate_oneof_rule::http_response_headers_match(ref v)) = self.rule {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MatchPredicate_oneof_rule::http_response_trailers_match(ref v)) = self.rule {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MatchPredicate_oneof_rule::http_request_generic_body_match(ref v)) = self.rule {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(MatchPredicate_oneof_rule::http_response_generic_body_match(ref v)) = self.rule {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::or_match(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::and_match(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::not_match(::std::boxed::Box::new(is.read_message()?)));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::any_match(is.read_bool()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_headers_match(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_trailers_match(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_headers_match(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_trailers_match(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_request_generic_body_match(is.read_message()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(MatchPredicate_oneof_rule::http_response_generic_body_match(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.rule {
            match v {
                &MatchPredicate_oneof_rule::or_match(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MatchPredicate_oneof_rule::and_match(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MatchPredicate_oneof_rule::not_match(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MatchPredicate_oneof_rule::any_match(v) => {
                    my_size += 2;
                },
                &MatchPredicate_oneof_rule::http_request_headers_match(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MatchPredicate_oneof_rule::http_request_trailers_match(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MatchPredicate_oneof_rule::http_response_headers_match(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MatchPredicate_oneof_rule::http_response_trailers_match(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MatchPredicate_oneof_rule::http_request_generic_body_match(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &MatchPredicate_oneof_rule::http_response_generic_body_match(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.rule {
            match v {
                &MatchPredicate_oneof_rule::or_match(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MatchPredicate_oneof_rule::and_match(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MatchPredicate_oneof_rule::not_match(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MatchPredicate_oneof_rule::any_match(v) => {
                    os.write_bool(4, v)?;
                },
                &MatchPredicate_oneof_rule::http_request_headers_match(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MatchPredicate_oneof_rule::http_request_trailers_match(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MatchPredicate_oneof_rule::http_response_headers_match(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MatchPredicate_oneof_rule::http_response_trailers_match(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MatchPredicate_oneof_rule::http_request_generic_body_match(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &MatchPredicate_oneof_rule::http_response_generic_body_match(ref v) => {
                    os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MatchPredicate {
        MatchPredicate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, MatchPredicate_MatchSet>(
                "or_match",
                MatchPredicate::has_or_match,
                MatchPredicate::get_or_match,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, MatchPredicate_MatchSet>(
                "and_match",
                MatchPredicate::has_and_match,
                MatchPredicate::get_and_match,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, MatchPredicate>(
                "not_match",
                MatchPredicate::has_not_match,
                MatchPredicate::get_not_match,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "any_match",
                MatchPredicate::has_any_match,
                MatchPredicate::get_any_match,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, HttpHeadersMatch>(
                "http_request_headers_match",
                MatchPredicate::has_http_request_headers_match,
                MatchPredicate::get_http_request_headers_match,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, HttpHeadersMatch>(
                "http_request_trailers_match",
                MatchPredicate::has_http_request_trailers_match,
                MatchPredicate::get_http_request_trailers_match,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, HttpHeadersMatch>(
                "http_response_headers_match",
                MatchPredicate::has_http_response_headers_match,
                MatchPredicate::get_http_response_headers_match,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, HttpHeadersMatch>(
                "http_response_trailers_match",
                MatchPredicate::has_http_response_trailers_match,
                MatchPredicate::get_http_response_trailers_match,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, HttpGenericBodyMatch>(
                "http_request_generic_body_match",
                MatchPredicate::has_http_request_generic_body_match,
                MatchPredicate::get_http_request_generic_body_match,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, HttpGenericBodyMatch>(
                "http_response_generic_body_match",
                MatchPredicate::has_http_response_generic_body_match,
                MatchPredicate::get_http_response_generic_body_match,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MatchPredicate>(
                "MatchPredicate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MatchPredicate {
        static instance: ::protobuf::rt::LazyV2<MatchPredicate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MatchPredicate::new)
    }
}

impl ::protobuf::Clear for MatchPredicate {
    fn clear(&mut self) {
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MatchPredicate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MatchPredicate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MatchPredicate_MatchSet {
    // message fields
    pub rules: ::protobuf::RepeatedField<MatchPredicate>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MatchPredicate_MatchSet {
    fn default() -> &'a MatchPredicate_MatchSet {
        <MatchPredicate_MatchSet as ::protobuf::Message>::default_instance()
    }
}

impl MatchPredicate_MatchSet {
    pub fn new() -> MatchPredicate_MatchSet {
        ::std::default::Default::default()
    }

    // repeated .envoy.config.tap.v4alpha.MatchPredicate rules = 1;


    pub fn get_rules(&self) -> &[MatchPredicate] {
        &self.rules
    }
    pub fn clear_rules(&mut self) {
        self.rules.clear();
    }

    // Param is passed by value, moved
    pub fn set_rules(&mut self, v: ::protobuf::RepeatedField<MatchPredicate>) {
        self.rules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rules(&mut self) -> &mut ::protobuf::RepeatedField<MatchPredicate> {
        &mut self.rules
    }

    // Take field
    pub fn take_rules(&mut self) -> ::protobuf::RepeatedField<MatchPredicate> {
        ::std::mem::replace(&mut self.rules, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MatchPredicate_MatchSet {
    fn is_initialized(&self) -> bool {
        for v in &self.rules {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rules)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.rules {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MatchPredicate_MatchSet {
        MatchPredicate_MatchSet::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MatchPredicate>>(
                "rules",
                |m: &MatchPredicate_MatchSet| { &m.rules },
                |m: &mut MatchPredicate_MatchSet| { &mut m.rules },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MatchPredicate_MatchSet>(
                "MatchPredicate.MatchSet",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MatchPredicate_MatchSet {
        static instance: ::protobuf::rt::LazyV2<MatchPredicate_MatchSet> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MatchPredicate_MatchSet::new)
    }
}

impl ::protobuf::Clear for MatchPredicate_MatchSet {
    fn clear(&mut self) {
        self.rules.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MatchPredicate_MatchSet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MatchPredicate_MatchSet {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HttpHeadersMatch {
    // message fields
    pub headers: ::protobuf::RepeatedField<super::route_components::HeaderMatcher>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HttpHeadersMatch {
    fn default() -> &'a HttpHeadersMatch {
        <HttpHeadersMatch as ::protobuf::Message>::default_instance()
    }
}

impl HttpHeadersMatch {
    pub fn new() -> HttpHeadersMatch {
        ::std::default::Default::default()
    }

    // repeated .envoy.config.route.v4alpha.HeaderMatcher headers = 1;


    pub fn get_headers(&self) -> &[super::route_components::HeaderMatcher] {
        &self.headers
    }
    pub fn clear_headers(&mut self) {
        self.headers.clear();
    }

    // Param is passed by value, moved
    pub fn set_headers(&mut self, v: ::protobuf::RepeatedField<super::route_components::HeaderMatcher>) {
        self.headers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_headers(&mut self) -> &mut ::protobuf::RepeatedField<super::route_components::HeaderMatcher> {
        &mut self.headers
    }

    // Take field
    pub fn take_headers(&mut self) -> ::protobuf::RepeatedField<super::route_components::HeaderMatcher> {
        ::std::mem::replace(&mut self.headers, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for HttpHeadersMatch {
    fn is_initialized(&self) -> bool {
        for v in &self.headers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.headers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.headers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.headers {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HttpHeadersMatch {
        HttpHeadersMatch::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::route_components::HeaderMatcher>>(
                "headers",
                |m: &HttpHeadersMatch| { &m.headers },
                |m: &mut HttpHeadersMatch| { &mut m.headers },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HttpHeadersMatch>(
                "HttpHeadersMatch",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HttpHeadersMatch {
        static instance: ::protobuf::rt::LazyV2<HttpHeadersMatch> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HttpHeadersMatch::new)
    }
}

impl ::protobuf::Clear for HttpHeadersMatch {
    fn clear(&mut self) {
        self.headers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HttpHeadersMatch {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpHeadersMatch {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HttpGenericBodyMatch {
    // message fields
    pub bytes_limit: u32,
    pub patterns: ::protobuf::RepeatedField<HttpGenericBodyMatch_GenericTextMatch>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HttpGenericBodyMatch {
    fn default() -> &'a HttpGenericBodyMatch {
        <HttpGenericBodyMatch as ::protobuf::Message>::default_instance()
    }
}

impl HttpGenericBodyMatch {
    pub fn new() -> HttpGenericBodyMatch {
        ::std::default::Default::default()
    }

    // uint32 bytes_limit = 1;


    pub fn get_bytes_limit(&self) -> u32 {
        self.bytes_limit
    }
    pub fn clear_bytes_limit(&mut self) {
        self.bytes_limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_bytes_limit(&mut self, v: u32) {
        self.bytes_limit = v;
    }

    // repeated .envoy.config.tap.v4alpha.HttpGenericBodyMatch.GenericTextMatch patterns = 2;


    pub fn get_patterns(&self) -> &[HttpGenericBodyMatch_GenericTextMatch] {
        &self.patterns
    }
    pub fn clear_patterns(&mut self) {
        self.patterns.clear();
    }

    // Param is passed by value, moved
    pub fn set_patterns(&mut self, v: ::protobuf::RepeatedField<HttpGenericBodyMatch_GenericTextMatch>) {
        self.patterns = v;
    }

    // Mutable pointer to the field.
    pub fn mut_patterns(&mut self) -> &mut ::protobuf::RepeatedField<HttpGenericBodyMatch_GenericTextMatch> {
        &mut self.patterns
    }

    // Take field
    pub fn take_patterns(&mut self) -> ::protobuf::RepeatedField<HttpGenericBodyMatch_GenericTextMatch> {
        ::std::mem::replace(&mut self.patterns, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for HttpGenericBodyMatch {
    fn is_initialized(&self) -> bool {
        for v in &self.patterns {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.bytes_limit = tmp;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.patterns)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.bytes_limit != 0 {
            my_size += ::protobuf::rt::value_size(1, self.bytes_limit, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.patterns {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.bytes_limit != 0 {
            os.write_uint32(1, self.bytes_limit)?;
        }
        for v in &self.patterns {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HttpGenericBodyMatch {
        HttpGenericBodyMatch::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "bytes_limit",
                |m: &HttpGenericBodyMatch| { &m.bytes_limit },
                |m: &mut HttpGenericBodyMatch| { &mut m.bytes_limit },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HttpGenericBodyMatch_GenericTextMatch>>(
                "patterns",
                |m: &HttpGenericBodyMatch| { &m.patterns },
                |m: &mut HttpGenericBodyMatch| { &mut m.patterns },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HttpGenericBodyMatch>(
                "HttpGenericBodyMatch",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HttpGenericBodyMatch {
        static instance: ::protobuf::rt::LazyV2<HttpGenericBodyMatch> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HttpGenericBodyMatch::new)
    }
}

impl ::protobuf::Clear for HttpGenericBodyMatch {
    fn clear(&mut self) {
        self.bytes_limit = 0;
        self.patterns.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HttpGenericBodyMatch {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpGenericBodyMatch {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HttpGenericBodyMatch_GenericTextMatch {
    // message oneof groups
    pub rule: ::std::option::Option<HttpGenericBodyMatch_GenericTextMatch_oneof_rule>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HttpGenericBodyMatch_GenericTextMatch {
    fn default() -> &'a HttpGenericBodyMatch_GenericTextMatch {
        <HttpGenericBodyMatch_GenericTextMatch as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum HttpGenericBodyMatch_GenericTextMatch_oneof_rule {
    string_match(::std::string::String),
    binary_match(::std::vec::Vec<u8>),
}

impl HttpGenericBodyMatch_GenericTextMatch {
    pub fn new() -> HttpGenericBodyMatch_GenericTextMatch {
        ::std::default::Default::default()
    }

    // string string_match = 1;


    pub fn get_string_match(&self) -> &str {
        match self.rule {
            ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::string_match(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_string_match(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_string_match(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::string_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_string_match(&mut self, v: ::std::string::String) {
        self.rule = ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::string_match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_string_match(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::string_match(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::string_match(::std::string::String::new()));
        }
        match self.rule {
            ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::string_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_string_match(&mut self) -> ::std::string::String {
        if self.has_string_match() {
            match self.rule.take() {
                ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::string_match(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // bytes binary_match = 2;


    pub fn get_binary_match(&self) -> &[u8] {
        match self.rule {
            ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::binary_match(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_binary_match(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_binary_match(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::binary_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_binary_match(&mut self, v: ::std::vec::Vec<u8>) {
        self.rule = ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::binary_match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_binary_match(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::binary_match(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::binary_match(::std::vec::Vec::new()));
        }
        match self.rule {
            ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::binary_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_binary_match(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_binary_match() {
            match self.rule.take() {
                ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::binary_match(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }
}

impl ::protobuf::Message for HttpGenericBodyMatch_GenericTextMatch {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::string_match(is.read_string()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(HttpGenericBodyMatch_GenericTextMatch_oneof_rule::binary_match(is.read_bytes()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.rule {
            match v {
                &HttpGenericBodyMatch_GenericTextMatch_oneof_rule::string_match(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
                &HttpGenericBodyMatch_GenericTextMatch_oneof_rule::binary_match(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.rule {
            match v {
                &HttpGenericBodyMatch_GenericTextMatch_oneof_rule::string_match(ref v) => {
                    os.write_string(1, v)?;
                },
                &HttpGenericBodyMatch_GenericTextMatch_oneof_rule::binary_match(ref v) => {
                    os.write_bytes(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HttpGenericBodyMatch_GenericTextMatch {
        HttpGenericBodyMatch_GenericTextMatch::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "string_match",
                HttpGenericBodyMatch_GenericTextMatch::has_string_match,
                HttpGenericBodyMatch_GenericTextMatch::get_string_match,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                "binary_match",
                HttpGenericBodyMatch_GenericTextMatch::has_binary_match,
                HttpGenericBodyMatch_GenericTextMatch::get_binary_match,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HttpGenericBodyMatch_GenericTextMatch>(
                "HttpGenericBodyMatch.GenericTextMatch",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HttpGenericBodyMatch_GenericTextMatch {
        static instance: ::protobuf::rt::LazyV2<HttpGenericBodyMatch_GenericTextMatch> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HttpGenericBodyMatch_GenericTextMatch::new)
    }
}

impl ::protobuf::Clear for HttpGenericBodyMatch_GenericTextMatch {
    fn clear(&mut self) {
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HttpGenericBodyMatch_GenericTextMatch {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpGenericBodyMatch_GenericTextMatch {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OutputConfig {
    // message fields
    pub sinks: ::protobuf::RepeatedField<OutputSink>,
    pub max_buffered_rx_bytes: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub max_buffered_tx_bytes: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub streaming: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OutputConfig {
    fn default() -> &'a OutputConfig {
        <OutputConfig as ::protobuf::Message>::default_instance()
    }
}

impl OutputConfig {
    pub fn new() -> OutputConfig {
        ::std::default::Default::default()
    }

    // repeated .envoy.config.tap.v4alpha.OutputSink sinks = 1;


    pub fn get_sinks(&self) -> &[OutputSink] {
        &self.sinks
    }
    pub fn clear_sinks(&mut self) {
        self.sinks.clear();
    }

    // Param is passed by value, moved
    pub fn set_sinks(&mut self, v: ::protobuf::RepeatedField<OutputSink>) {
        self.sinks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_sinks(&mut self) -> &mut ::protobuf::RepeatedField<OutputSink> {
        &mut self.sinks
    }

    // Take field
    pub fn take_sinks(&mut self) -> ::protobuf::RepeatedField<OutputSink> {
        ::std::mem::replace(&mut self.sinks, ::protobuf::RepeatedField::new())
    }

    // .google.protobuf.UInt32Value max_buffered_rx_bytes = 2;


    pub fn get_max_buffered_rx_bytes(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.max_buffered_rx_bytes.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_max_buffered_rx_bytes(&mut self) {
        self.max_buffered_rx_bytes.clear();
    }

    pub fn has_max_buffered_rx_bytes(&self) -> bool {
        self.max_buffered_rx_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_buffered_rx_bytes(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.max_buffered_rx_bytes = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_buffered_rx_bytes(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.max_buffered_rx_bytes.is_none() {
            self.max_buffered_rx_bytes.set_default();
        }
        self.max_buffered_rx_bytes.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_buffered_rx_bytes(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.max_buffered_rx_bytes.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.UInt32Value max_buffered_tx_bytes = 3;


    pub fn get_max_buffered_tx_bytes(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.max_buffered_tx_bytes.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_max_buffered_tx_bytes(&mut self) {
        self.max_buffered_tx_bytes.clear();
    }

    pub fn has_max_buffered_tx_bytes(&self) -> bool {
        self.max_buffered_tx_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_buffered_tx_bytes(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.max_buffered_tx_bytes = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_buffered_tx_bytes(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.max_buffered_tx_bytes.is_none() {
            self.max_buffered_tx_bytes.set_default();
        }
        self.max_buffered_tx_bytes.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_buffered_tx_bytes(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.max_buffered_tx_bytes.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // bool streaming = 4;


    pub fn get_streaming(&self) -> bool {
        self.streaming
    }
    pub fn clear_streaming(&mut self) {
        self.streaming = false;
    }

    // Param is passed by value, moved
    pub fn set_streaming(&mut self, v: bool) {
        self.streaming = v;
    }
}

impl ::protobuf::Message for OutputConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.sinks {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.max_buffered_rx_bytes {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.max_buffered_tx_bytes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.sinks)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_buffered_rx_bytes)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_buffered_tx_bytes)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.streaming = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.sinks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.max_buffered_rx_bytes.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.max_buffered_tx_bytes.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.streaming != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.sinks {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.max_buffered_rx_bytes.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.max_buffered_tx_bytes.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.streaming != false {
            os.write_bool(4, self.streaming)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OutputConfig {
        OutputConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OutputSink>>(
                "sinks",
                |m: &OutputConfig| { &m.sinks },
                |m: &mut OutputConfig| { &mut m.sinks },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "max_buffered_rx_bytes",
                |m: &OutputConfig| { &m.max_buffered_rx_bytes },
                |m: &mut OutputConfig| { &mut m.max_buffered_rx_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "max_buffered_tx_bytes",
                |m: &OutputConfig| { &m.max_buffered_tx_bytes },
                |m: &mut OutputConfig| { &mut m.max_buffered_tx_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "streaming",
                |m: &OutputConfig| { &m.streaming },
                |m: &mut OutputConfig| { &mut m.streaming },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OutputConfig>(
                "OutputConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OutputConfig {
        static instance: ::protobuf::rt::LazyV2<OutputConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OutputConfig::new)
    }
}

impl ::protobuf::Clear for OutputConfig {
    fn clear(&mut self) {
        self.sinks.clear();
        self.max_buffered_rx_bytes.clear();
        self.max_buffered_tx_bytes.clear();
        self.streaming = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OutputConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OutputConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OutputSink {
    // message fields
    pub format: OutputSink_Format,
    // message oneof groups
    pub output_sink_type: ::std::option::Option<OutputSink_oneof_output_sink_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OutputSink {
    fn default() -> &'a OutputSink {
        <OutputSink as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum OutputSink_oneof_output_sink_type {
    streaming_admin(StreamingAdminSink),
    file_per_tap(FilePerTapSink),
    streaming_grpc(StreamingGrpcSink),
}

impl OutputSink {
    pub fn new() -> OutputSink {
        ::std::default::Default::default()
    }

    // .envoy.config.tap.v4alpha.OutputSink.Format format = 1;


    pub fn get_format(&self) -> OutputSink_Format {
        self.format
    }
    pub fn clear_format(&mut self) {
        self.format = OutputSink_Format::JSON_BODY_AS_BYTES;
    }

    // Param is passed by value, moved
    pub fn set_format(&mut self, v: OutputSink_Format) {
        self.format = v;
    }

    // .envoy.config.tap.v4alpha.StreamingAdminSink streaming_admin = 2;


    pub fn get_streaming_admin(&self) -> &StreamingAdminSink {
        match self.output_sink_type {
            ::std::option::Option::Some(OutputSink_oneof_output_sink_type::streaming_admin(ref v)) => v,
            _ => <StreamingAdminSink as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_streaming_admin(&mut self) {
        self.output_sink_type = ::std::option::Option::None;
    }

    pub fn has_streaming_admin(&self) -> bool {
        match self.output_sink_type {
            ::std::option::Option::Some(OutputSink_oneof_output_sink_type::streaming_admin(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_streaming_admin(&mut self, v: StreamingAdminSink) {
        self.output_sink_type = ::std::option::Option::Some(OutputSink_oneof_output_sink_type::streaming_admin(v))
    }

    // Mutable pointer to the field.
    pub fn mut_streaming_admin(&mut self) -> &mut StreamingAdminSink {
        if let ::std::option::Option::Some(OutputSink_oneof_output_sink_type::streaming_admin(_)) = self.output_sink_type {
        } else {
            self.output_sink_type = ::std::option::Option::Some(OutputSink_oneof_output_sink_type::streaming_admin(StreamingAdminSink::new()));
        }
        match self.output_sink_type {
            ::std::option::Option::Some(OutputSink_oneof_output_sink_type::streaming_admin(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_streaming_admin(&mut self) -> StreamingAdminSink {
        if self.has_streaming_admin() {
            match self.output_sink_type.take() {
                ::std::option::Option::Some(OutputSink_oneof_output_sink_type::streaming_admin(v)) => v,
                _ => panic!(),
            }
        } else {
            StreamingAdminSink::new()
        }
    }

    // .envoy.config.tap.v4alpha.FilePerTapSink file_per_tap = 3;


    pub fn get_file_per_tap(&self) -> &FilePerTapSink {
        match self.output_sink_type {
            ::std::option::Option::Some(OutputSink_oneof_output_sink_type::file_per_tap(ref v)) => v,
            _ => <FilePerTapSink as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_file_per_tap(&mut self) {
        self.output_sink_type = ::std::option::Option::None;
    }

    pub fn has_file_per_tap(&self) -> bool {
        match self.output_sink_type {
            ::std::option::Option::Some(OutputSink_oneof_output_sink_type::file_per_tap(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_file_per_tap(&mut self, v: FilePerTapSink) {
        self.output_sink_type = ::std::option::Option::Some(OutputSink_oneof_output_sink_type::file_per_tap(v))
    }

    // Mutable pointer to the field.
    pub fn mut_file_per_tap(&mut self) -> &mut FilePerTapSink {
        if let ::std::option::Option::Some(OutputSink_oneof_output_sink_type::file_per_tap(_)) = self.output_sink_type {
        } else {
            self.output_sink_type = ::std::option::Option::Some(OutputSink_oneof_output_sink_type::file_per_tap(FilePerTapSink::new()));
        }
        match self.output_sink_type {
            ::std::option::Option::Some(OutputSink_oneof_output_sink_type::file_per_tap(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_file_per_tap(&mut self) -> FilePerTapSink {
        if self.has_file_per_tap() {
            match self.output_sink_type.take() {
                ::std::option::Option::Some(OutputSink_oneof_output_sink_type::file_per_tap(v)) => v,
                _ => panic!(),
            }
        } else {
            FilePerTapSink::new()
        }
    }

    // .envoy.config.tap.v4alpha.StreamingGrpcSink streaming_grpc = 4;


    pub fn get_streaming_grpc(&self) -> &StreamingGrpcSink {
        match self.output_sink_type {
            ::std::option::Option::Some(OutputSink_oneof_output_sink_type::streaming_grpc(ref v)) => v,
            _ => <StreamingGrpcSink as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_streaming_grpc(&mut self) {
        self.output_sink_type = ::std::option::Option::None;
    }

    pub fn has_streaming_grpc(&self) -> bool {
        match self.output_sink_type {
            ::std::option::Option::Some(OutputSink_oneof_output_sink_type::streaming_grpc(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_streaming_grpc(&mut self, v: StreamingGrpcSink) {
        self.output_sink_type = ::std::option::Option::Some(OutputSink_oneof_output_sink_type::streaming_grpc(v))
    }

    // Mutable pointer to the field.
    pub fn mut_streaming_grpc(&mut self) -> &mut StreamingGrpcSink {
        if let ::std::option::Option::Some(OutputSink_oneof_output_sink_type::streaming_grpc(_)) = self.output_sink_type {
        } else {
            self.output_sink_type = ::std::option::Option::Some(OutputSink_oneof_output_sink_type::streaming_grpc(StreamingGrpcSink::new()));
        }
        match self.output_sink_type {
            ::std::option::Option::Some(OutputSink_oneof_output_sink_type::streaming_grpc(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_streaming_grpc(&mut self) -> StreamingGrpcSink {
        if self.has_streaming_grpc() {
            match self.output_sink_type.take() {
                ::std::option::Option::Some(OutputSink_oneof_output_sink_type::streaming_grpc(v)) => v,
                _ => panic!(),
            }
        } else {
            StreamingGrpcSink::new()
        }
    }
}

impl ::protobuf::Message for OutputSink {
    fn is_initialized(&self) -> bool {
        if let Some(OutputSink_oneof_output_sink_type::streaming_admin(ref v)) = self.output_sink_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(OutputSink_oneof_output_sink_type::file_per_tap(ref v)) = self.output_sink_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(OutputSink_oneof_output_sink_type::streaming_grpc(ref v)) = self.output_sink_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.format, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.output_sink_type = ::std::option::Option::Some(OutputSink_oneof_output_sink_type::streaming_admin(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.output_sink_type = ::std::option::Option::Some(OutputSink_oneof_output_sink_type::file_per_tap(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.output_sink_type = ::std::option::Option::Some(OutputSink_oneof_output_sink_type::streaming_grpc(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.format != OutputSink_Format::JSON_BODY_AS_BYTES {
            my_size += ::protobuf::rt::enum_size(1, self.format);
        }
        if let ::std::option::Option::Some(ref v) = self.output_sink_type {
            match v {
                &OutputSink_oneof_output_sink_type::streaming_admin(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &OutputSink_oneof_output_sink_type::file_per_tap(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &OutputSink_oneof_output_sink_type::streaming_grpc(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.format != OutputSink_Format::JSON_BODY_AS_BYTES {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.format))?;
        }
        if let ::std::option::Option::Some(ref v) = self.output_sink_type {
            match v {
                &OutputSink_oneof_output_sink_type::streaming_admin(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &OutputSink_oneof_output_sink_type::file_per_tap(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &OutputSink_oneof_output_sink_type::streaming_grpc(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OutputSink {
        OutputSink::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<OutputSink_Format>>(
                "format",
                |m: &OutputSink| { &m.format },
                |m: &mut OutputSink| { &mut m.format },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, StreamingAdminSink>(
                "streaming_admin",
                OutputSink::has_streaming_admin,
                OutputSink::get_streaming_admin,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, FilePerTapSink>(
                "file_per_tap",
                OutputSink::has_file_per_tap,
                OutputSink::get_file_per_tap,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, StreamingGrpcSink>(
                "streaming_grpc",
                OutputSink::has_streaming_grpc,
                OutputSink::get_streaming_grpc,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OutputSink>(
                "OutputSink",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OutputSink {
        static instance: ::protobuf::rt::LazyV2<OutputSink> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OutputSink::new)
    }
}

impl ::protobuf::Clear for OutputSink {
    fn clear(&mut self) {
        self.format = OutputSink_Format::JSON_BODY_AS_BYTES;
        self.output_sink_type = ::std::option::Option::None;
        self.output_sink_type = ::std::option::Option::None;
        self.output_sink_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OutputSink {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OutputSink {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum OutputSink_Format {
    JSON_BODY_AS_BYTES = 0,
    JSON_BODY_AS_STRING = 1,
    PROTO_BINARY = 2,
    PROTO_BINARY_LENGTH_DELIMITED = 3,
    PROTO_TEXT = 4,
}

impl ::protobuf::ProtobufEnum for OutputSink_Format {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<OutputSink_Format> {
        match value {
            0 => ::std::option::Option::Some(OutputSink_Format::JSON_BODY_AS_BYTES),
            1 => ::std::option::Option::Some(OutputSink_Format::JSON_BODY_AS_STRING),
            2 => ::std::option::Option::Some(OutputSink_Format::PROTO_BINARY),
            3 => ::std::option::Option::Some(OutputSink_Format::PROTO_BINARY_LENGTH_DELIMITED),
            4 => ::std::option::Option::Some(OutputSink_Format::PROTO_TEXT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [OutputSink_Format] = &[
            OutputSink_Format::JSON_BODY_AS_BYTES,
            OutputSink_Format::JSON_BODY_AS_STRING,
            OutputSink_Format::PROTO_BINARY,
            OutputSink_Format::PROTO_BINARY_LENGTH_DELIMITED,
            OutputSink_Format::PROTO_TEXT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<OutputSink_Format>("OutputSink.Format", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for OutputSink_Format {
}

impl ::std::default::Default for OutputSink_Format {
    fn default() -> Self {
        OutputSink_Format::JSON_BODY_AS_BYTES
    }
}

impl ::protobuf::reflect::ProtobufValue for OutputSink_Format {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StreamingAdminSink {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StreamingAdminSink {
    fn default() -> &'a StreamingAdminSink {
        <StreamingAdminSink as ::protobuf::Message>::default_instance()
    }
}

impl StreamingAdminSink {
    pub fn new() -> StreamingAdminSink {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for StreamingAdminSink {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StreamingAdminSink {
        StreamingAdminSink::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StreamingAdminSink>(
                "StreamingAdminSink",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StreamingAdminSink {
        static instance: ::protobuf::rt::LazyV2<StreamingAdminSink> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StreamingAdminSink::new)
    }
}

impl ::protobuf::Clear for StreamingAdminSink {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StreamingAdminSink {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamingAdminSink {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FilePerTapSink {
    // message fields
    pub path_prefix: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FilePerTapSink {
    fn default() -> &'a FilePerTapSink {
        <FilePerTapSink as ::protobuf::Message>::default_instance()
    }
}

impl FilePerTapSink {
    pub fn new() -> FilePerTapSink {
        ::std::default::Default::default()
    }

    // string path_prefix = 1;


    pub fn get_path_prefix(&self) -> &str {
        &self.path_prefix
    }
    pub fn clear_path_prefix(&mut self) {
        self.path_prefix.clear();
    }

    // Param is passed by value, moved
    pub fn set_path_prefix(&mut self, v: ::std::string::String) {
        self.path_prefix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path_prefix(&mut self) -> &mut ::std::string::String {
        &mut self.path_prefix
    }

    // Take field
    pub fn take_path_prefix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path_prefix, ::std::string::String::new())
    }
}

impl ::protobuf::Message for FilePerTapSink {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path_prefix)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path_prefix.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path_prefix);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.path_prefix.is_empty() {
            os.write_string(1, &self.path_prefix)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FilePerTapSink {
        FilePerTapSink::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "path_prefix",
                |m: &FilePerTapSink| { &m.path_prefix },
                |m: &mut FilePerTapSink| { &mut m.path_prefix },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FilePerTapSink>(
                "FilePerTapSink",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FilePerTapSink {
        static instance: ::protobuf::rt::LazyV2<FilePerTapSink> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FilePerTapSink::new)
    }
}

impl ::protobuf::Clear for FilePerTapSink {
    fn clear(&mut self) {
        self.path_prefix.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FilePerTapSink {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FilePerTapSink {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StreamingGrpcSink {
    // message fields
    pub tap_id: ::std::string::String,
    pub grpc_service: ::protobuf::SingularPtrField<super::grpc_service::GrpcService>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StreamingGrpcSink {
    fn default() -> &'a StreamingGrpcSink {
        <StreamingGrpcSink as ::protobuf::Message>::default_instance()
    }
}

impl StreamingGrpcSink {
    pub fn new() -> StreamingGrpcSink {
        ::std::default::Default::default()
    }

    // string tap_id = 1;


    pub fn get_tap_id(&self) -> &str {
        &self.tap_id
    }
    pub fn clear_tap_id(&mut self) {
        self.tap_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_tap_id(&mut self, v: ::std::string::String) {
        self.tap_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tap_id(&mut self) -> &mut ::std::string::String {
        &mut self.tap_id
    }

    // Take field
    pub fn take_tap_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tap_id, ::std::string::String::new())
    }

    // .envoy.config.core.v4alpha.GrpcService grpc_service = 2;


    pub fn get_grpc_service(&self) -> &super::grpc_service::GrpcService {
        self.grpc_service.as_ref().unwrap_or_else(|| <super::grpc_service::GrpcService as ::protobuf::Message>::default_instance())
    }
    pub fn clear_grpc_service(&mut self) {
        self.grpc_service.clear();
    }

    pub fn has_grpc_service(&self) -> bool {
        self.grpc_service.is_some()
    }

    // Param is passed by value, moved
    pub fn set_grpc_service(&mut self, v: super::grpc_service::GrpcService) {
        self.grpc_service = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_grpc_service(&mut self) -> &mut super::grpc_service::GrpcService {
        if self.grpc_service.is_none() {
            self.grpc_service.set_default();
        }
        self.grpc_service.as_mut().unwrap()
    }

    // Take field
    pub fn take_grpc_service(&mut self) -> super::grpc_service::GrpcService {
        self.grpc_service.take().unwrap_or_else(|| super::grpc_service::GrpcService::new())
    }
}

impl ::protobuf::Message for StreamingGrpcSink {
    fn is_initialized(&self) -> bool {
        for v in &self.grpc_service {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tap_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.grpc_service)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.tap_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.tap_id);
        }
        if let Some(ref v) = self.grpc_service.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.tap_id.is_empty() {
            os.write_string(1, &self.tap_id)?;
        }
        if let Some(ref v) = self.grpc_service.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StreamingGrpcSink {
        StreamingGrpcSink::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tap_id",
                |m: &StreamingGrpcSink| { &m.tap_id },
                |m: &mut StreamingGrpcSink| { &mut m.tap_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::grpc_service::GrpcService>>(
                "grpc_service",
                |m: &StreamingGrpcSink| { &m.grpc_service },
                |m: &mut StreamingGrpcSink| { &mut m.grpc_service },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StreamingGrpcSink>(
                "StreamingGrpcSink",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StreamingGrpcSink {
        static instance: ::protobuf::rt::LazyV2<StreamingGrpcSink> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StreamingGrpcSink::new)
    }
}

impl ::protobuf::Clear for StreamingGrpcSink {
    fn clear(&mut self) {
        self.tap_id.clear();
        self.grpc_service.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StreamingGrpcSink {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamingGrpcSink {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%envoy/config/tap/v4alpha/common.proto\x12\x18envoy.config.tap.v4alpha\
    \x1a1envoy/config/common/matcher/v4alpha/matcher.proto\x1a$envoy/config/\
    core/v4alpha/base.proto\x1a,envoy/config/core/v4alpha/grpc_service.proto\
    \x1a1envoy/config/route/v4alpha/route_components.proto\x1a\x1egoogle/pro\
    tobuf/wrappers.proto\x1a\x1dudpa/annotations/status.proto\x1a!udpa/annot\
    ations/versioning.proto\x1a\x17validate/validate.proto\"\xbd\x02\n\tTapC\
    onfig\x12I\n\x05match\x18\x04\x20\x01(\x0b23.envoy.config.common.matcher\
    .v4alpha.MatchPredicateR\x05match\x12U\n\routput_config\x18\x02\x20\x01(\
    \x0b2&.envoy.config.tap.v4alpha.OutputConfigR\x0coutputConfigB\x08\xfaB\
    \x05\x8a\x01\x02\x10\x01\x12T\n\x0btap_enabled\x18\x03\x20\x01(\x0b23.en\
    voy.config.core.v4alpha.RuntimeFractionalPercentR\ntapEnabled:$\x9a\xc5\
    \x88\x1e\x1f\n\x1denvoy.config.tap.v3.TapConfigJ\x04\x08\x01\x10\x02R\
    \x0cmatch_config\"\x8c\t\n\x0eMatchPredicate\x12N\n\x08or_match\x18\x01\
    \x20\x01(\x0b21.envoy.config.tap.v4alpha.MatchPredicate.MatchSetH\0R\x07\
    orMatch\x12P\n\tand_match\x18\x02\x20\x01(\x0b21.envoy.config.tap.v4alph\
    a.MatchPredicate.MatchSetH\0R\x08andMatch\x12G\n\tnot_match\x18\x03\x20\
    \x01(\x0b2(.envoy.config.tap.v4alpha.MatchPredicateH\0R\x08notMatch\x12&\
    \n\tany_match\x18\x04\x20\x01(\x08H\0R\x08anyMatchB\x07\xfaB\x04j\x02\
    \x08\x01\x12i\n\x1ahttp_request_headers_match\x18\x05\x20\x01(\x0b2*.env\
    oy.config.tap.v4alpha.HttpHeadersMatchH\0R\x17httpRequestHeadersMatch\
    \x12k\n\x1bhttp_request_trailers_match\x18\x06\x20\x01(\x0b2*.envoy.conf\
    ig.tap.v4alpha.HttpHeadersMatchH\0R\x18httpRequestTrailersMatch\x12k\n\
    \x1bhttp_response_headers_match\x18\x07\x20\x01(\x0b2*.envoy.config.tap.\
    v4alpha.HttpHeadersMatchH\0R\x18httpResponseHeadersMatch\x12m\n\x1chttp_\
    response_trailers_match\x18\x08\x20\x01(\x0b2*.envoy.config.tap.v4alpha.\
    HttpHeadersMatchH\0R\x19httpResponseTrailersMatch\x12v\n\x1fhttp_request\
    _generic_body_match\x18\t\x20\x01(\x0b2..envoy.config.tap.v4alpha.HttpGe\
    nericBodyMatchH\0R\x1bhttpRequestGenericBodyMatch\x12x\n\x20http_respons\
    e_generic_body_match\x18\n\x20\x01(\x0b2..envoy.config.tap.v4alpha.HttpG\
    enericBodyMatchH\0R\x1chttpResponseGenericBodyMatch\x1a\x88\x01\n\x08Mat\
    chSet\x12H\n\x05rules\x18\x01\x20\x03(\x0b2(.envoy.config.tap.v4alpha.Ma\
    tchPredicateR\x05rulesB\x08\xfaB\x05\x92\x01\x02\x08\x02:2\x9a\xc5\x88\
    \x1e-\n+envoy.config.tap.v3.MatchPredicate.MatchSetB\x0b\n\x04rule\x12\
    \x03\xf8B\x01:)\x9a\xc5\x88\x1e$\n\"envoy.config.tap.v3.MatchPredicate\"\
    \x84\x01\n\x10HttpHeadersMatch\x12C\n\x07headers\x18\x01\x20\x03(\x0b2).\
    envoy.config.route.v4alpha.HeaderMatcherR\x07headers:+\x9a\xc5\x88\x1e&\
    \n$envoy.config.tap.v3.HttpHeadersMatch\"\x8f\x03\n\x14HttpGenericBodyMa\
    tch\x12\x1f\n\x0bbytes_limit\x18\x01\x20\x01(\rR\nbytesLimit\x12e\n\x08p\
    atterns\x18\x02\x20\x03(\x0b2?.envoy.config.tap.v4alpha.HttpGenericBodyM\
    atch.GenericTextMatchR\x08patternsB\x08\xfaB\x05\x92\x01\x02\x08\x01\x1a\
    \xbd\x01\n\x10GenericTextMatch\x12,\n\x0cstring_match\x18\x01\x20\x01(\t\
    H\0R\x0bstringMatchB\x07\xfaB\x04r\x02\x10\x01\x12,\n\x0cbinary_match\
    \x18\x02\x20\x01(\x0cH\0R\x0bbinaryMatchB\x07\xfaB\x04z\x02\x10\x01B\x0b\
    \n\x04rule\x12\x03\xf8B\x01:@\x9a\xc5\x88\x1e;\n9envoy.config.tap.v3.Htt\
    pGenericBodyMatch.GenericTextMatch:/\x9a\xc5\x88\x1e*\n(envoy.config.tap\
    .v3.HttpGenericBodyMatch\"\xbf\x02\n\x0cOutputConfig\x12F\n\x05sinks\x18\
    \x01\x20\x03(\x0b2$.envoy.config.tap.v4alpha.OutputSinkR\x05sinksB\n\xfa\
    B\x07\x92\x01\x04\x08\x01\x10\x01\x12O\n\x15max_buffered_rx_bytes\x18\
    \x02\x20\x01(\x0b2\x1c.google.protobuf.UInt32ValueR\x12maxBufferedRxByte\
    s\x12O\n\x15max_buffered_tx_bytes\x18\x03\x20\x01(\x0b2\x1c.google.proto\
    buf.UInt32ValueR\x12maxBufferedTxBytes\x12\x1c\n\tstreaming\x18\x04\x20\
    \x01(\x08R\tstreaming:'\x9a\xc5\x88\x1e\"\n\x20envoy.config.tap.v3.Outpu\
    tConfig\"\x98\x04\n\nOutputSink\x12M\n\x06format\x18\x01\x20\x01(\x0e2+.\
    envoy.config.tap.v4alpha.OutputSink.FormatR\x06formatB\x08\xfaB\x05\x82\
    \x01\x02\x10\x01\x12W\n\x0fstreaming_admin\x18\x02\x20\x01(\x0b2,.envoy.\
    config.tap.v4alpha.StreamingAdminSinkH\0R\x0estreamingAdmin\x12L\n\x0cfi\
    le_per_tap\x18\x03\x20\x01(\x0b2(.envoy.config.tap.v4alpha.FilePerTapSin\
    kH\0R\nfilePerTap\x12T\n\x0estreaming_grpc\x18\x04\x20\x01(\x0b2+.envoy.\
    config.tap.v4alpha.StreamingGrpcSinkH\0R\rstreamingGrpc\"~\n\x06Format\
    \x12\x16\n\x12JSON_BODY_AS_BYTES\x10\0\x12\x17\n\x13JSON_BODY_AS_STRING\
    \x10\x01\x12\x10\n\x0cPROTO_BINARY\x10\x02\x12!\n\x1dPROTO_BINARY_LENGTH\
    _DELIMITED\x10\x03\x12\x0e\n\nPROTO_TEXT\x10\x04B\x17\n\x10output_sink_t\
    ype\x12\x03\xf8B\x01:%\x9a\xc5\x88\x1e\x20\n\x1eenvoy.config.tap.v3.Outp\
    utSink\"C\n\x12StreamingAdminSink:-\x9a\xc5\x88\x1e(\n&envoy.config.tap.\
    v3.StreamingAdminSink\"e\n\x0eFilePerTapSink\x12(\n\x0bpath_prefix\x18\
    \x01\x20\x01(\tR\npathPrefixB\x07\xfaB\x04r\x02\x10\x01:)\x9a\xc5\x88\
    \x1e$\n\"envoy.config.tap.v3.FilePerTapSink\"\xad\x01\n\x11StreamingGrpc\
    Sink\x12\x15\n\x06tap_id\x18\x01\x20\x01(\tR\x05tapId\x12S\n\x0cgrpc_ser\
    vice\x18\x02\x20\x01(\x0b2&.envoy.config.core.v4alpha.GrpcServiceR\x0bgr\
    pcServiceB\x08\xfaB\x05\x8a\x01\x02\x10\x01:,\x9a\xc5\x88\x1e'\n%envoy.c\
    onfig.tap.v3.StreamingGrpcSinkB?\n&io.envoyproxy.envoy.config.tap.v4alph\
    aB\x0bCommonProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\x03b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
