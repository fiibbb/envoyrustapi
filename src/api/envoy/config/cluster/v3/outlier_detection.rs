// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/cluster/v3/outlier_detection.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct OutlierDetection {
    // message fields
    pub consecutive_5xx: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub interval: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub base_ejection_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub max_ejection_percent: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub enforcing_consecutive_5xx: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub enforcing_success_rate: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub success_rate_minimum_hosts: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub success_rate_request_volume: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub success_rate_stdev_factor: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub consecutive_gateway_failure: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub enforcing_consecutive_gateway_failure: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub split_external_local_origin_errors: bool,
    pub consecutive_local_origin_failure: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub enforcing_consecutive_local_origin_failure: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub enforcing_local_origin_success_rate: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub failure_percentage_threshold: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub enforcing_failure_percentage: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub enforcing_failure_percentage_local_origin: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub failure_percentage_minimum_hosts: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub failure_percentage_request_volume: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OutlierDetection {
    fn default() -> &'a OutlierDetection {
        <OutlierDetection as ::protobuf::Message>::default_instance()
    }
}

impl OutlierDetection {
    pub fn new() -> OutlierDetection {
        ::std::default::Default::default()
    }

    // .google.protobuf.UInt32Value consecutive_5xx = 1;


    pub fn get_consecutive_5xx(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.consecutive_5xx.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_consecutive_5xx(&mut self) {
        self.consecutive_5xx.clear();
    }

    pub fn has_consecutive_5xx(&self) -> bool {
        self.consecutive_5xx.is_some()
    }

    // Param is passed by value, moved
    pub fn set_consecutive_5xx(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.consecutive_5xx = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_consecutive_5xx(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.consecutive_5xx.is_none() {
            self.consecutive_5xx.set_default();
        }
        self.consecutive_5xx.as_mut().unwrap()
    }

    // Take field
    pub fn take_consecutive_5xx(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.consecutive_5xx.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.Duration interval = 2;


    pub fn get_interval(&self) -> &::protobuf::well_known_types::Duration {
        self.interval.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_interval(&mut self) {
        self.interval.clear();
    }

    pub fn has_interval(&self) -> bool {
        self.interval.is_some()
    }

    // Param is passed by value, moved
    pub fn set_interval(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.interval = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interval(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.interval.is_none() {
            self.interval.set_default();
        }
        self.interval.as_mut().unwrap()
    }

    // Take field
    pub fn take_interval(&mut self) -> ::protobuf::well_known_types::Duration {
        self.interval.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.Duration base_ejection_time = 3;


    pub fn get_base_ejection_time(&self) -> &::protobuf::well_known_types::Duration {
        self.base_ejection_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_base_ejection_time(&mut self) {
        self.base_ejection_time.clear();
    }

    pub fn has_base_ejection_time(&self) -> bool {
        self.base_ejection_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_base_ejection_time(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.base_ejection_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_ejection_time(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.base_ejection_time.is_none() {
            self.base_ejection_time.set_default();
        }
        self.base_ejection_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_base_ejection_time(&mut self) -> ::protobuf::well_known_types::Duration {
        self.base_ejection_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.UInt32Value max_ejection_percent = 4;


    pub fn get_max_ejection_percent(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.max_ejection_percent.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_max_ejection_percent(&mut self) {
        self.max_ejection_percent.clear();
    }

    pub fn has_max_ejection_percent(&self) -> bool {
        self.max_ejection_percent.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_ejection_percent(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.max_ejection_percent = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_ejection_percent(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.max_ejection_percent.is_none() {
            self.max_ejection_percent.set_default();
        }
        self.max_ejection_percent.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_ejection_percent(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.max_ejection_percent.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.UInt32Value enforcing_consecutive_5xx = 5;


    pub fn get_enforcing_consecutive_5xx(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.enforcing_consecutive_5xx.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_enforcing_consecutive_5xx(&mut self) {
        self.enforcing_consecutive_5xx.clear();
    }

    pub fn has_enforcing_consecutive_5xx(&self) -> bool {
        self.enforcing_consecutive_5xx.is_some()
    }

    // Param is passed by value, moved
    pub fn set_enforcing_consecutive_5xx(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.enforcing_consecutive_5xx = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_enforcing_consecutive_5xx(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.enforcing_consecutive_5xx.is_none() {
            self.enforcing_consecutive_5xx.set_default();
        }
        self.enforcing_consecutive_5xx.as_mut().unwrap()
    }

    // Take field
    pub fn take_enforcing_consecutive_5xx(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.enforcing_consecutive_5xx.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.UInt32Value enforcing_success_rate = 6;


    pub fn get_enforcing_success_rate(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.enforcing_success_rate.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_enforcing_success_rate(&mut self) {
        self.enforcing_success_rate.clear();
    }

    pub fn has_enforcing_success_rate(&self) -> bool {
        self.enforcing_success_rate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_enforcing_success_rate(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.enforcing_success_rate = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_enforcing_success_rate(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.enforcing_success_rate.is_none() {
            self.enforcing_success_rate.set_default();
        }
        self.enforcing_success_rate.as_mut().unwrap()
    }

    // Take field
    pub fn take_enforcing_success_rate(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.enforcing_success_rate.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.UInt32Value success_rate_minimum_hosts = 7;


    pub fn get_success_rate_minimum_hosts(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.success_rate_minimum_hosts.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_success_rate_minimum_hosts(&mut self) {
        self.success_rate_minimum_hosts.clear();
    }

    pub fn has_success_rate_minimum_hosts(&self) -> bool {
        self.success_rate_minimum_hosts.is_some()
    }

    // Param is passed by value, moved
    pub fn set_success_rate_minimum_hosts(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.success_rate_minimum_hosts = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_success_rate_minimum_hosts(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.success_rate_minimum_hosts.is_none() {
            self.success_rate_minimum_hosts.set_default();
        }
        self.success_rate_minimum_hosts.as_mut().unwrap()
    }

    // Take field
    pub fn take_success_rate_minimum_hosts(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.success_rate_minimum_hosts.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.UInt32Value success_rate_request_volume = 8;


    pub fn get_success_rate_request_volume(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.success_rate_request_volume.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_success_rate_request_volume(&mut self) {
        self.success_rate_request_volume.clear();
    }

    pub fn has_success_rate_request_volume(&self) -> bool {
        self.success_rate_request_volume.is_some()
    }

    // Param is passed by value, moved
    pub fn set_success_rate_request_volume(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.success_rate_request_volume = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_success_rate_request_volume(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.success_rate_request_volume.is_none() {
            self.success_rate_request_volume.set_default();
        }
        self.success_rate_request_volume.as_mut().unwrap()
    }

    // Take field
    pub fn take_success_rate_request_volume(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.success_rate_request_volume.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.UInt32Value success_rate_stdev_factor = 9;


    pub fn get_success_rate_stdev_factor(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.success_rate_stdev_factor.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_success_rate_stdev_factor(&mut self) {
        self.success_rate_stdev_factor.clear();
    }

    pub fn has_success_rate_stdev_factor(&self) -> bool {
        self.success_rate_stdev_factor.is_some()
    }

    // Param is passed by value, moved
    pub fn set_success_rate_stdev_factor(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.success_rate_stdev_factor = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_success_rate_stdev_factor(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.success_rate_stdev_factor.is_none() {
            self.success_rate_stdev_factor.set_default();
        }
        self.success_rate_stdev_factor.as_mut().unwrap()
    }

    // Take field
    pub fn take_success_rate_stdev_factor(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.success_rate_stdev_factor.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.UInt32Value consecutive_gateway_failure = 10;


    pub fn get_consecutive_gateway_failure(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.consecutive_gateway_failure.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_consecutive_gateway_failure(&mut self) {
        self.consecutive_gateway_failure.clear();
    }

    pub fn has_consecutive_gateway_failure(&self) -> bool {
        self.consecutive_gateway_failure.is_some()
    }

    // Param is passed by value, moved
    pub fn set_consecutive_gateway_failure(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.consecutive_gateway_failure = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_consecutive_gateway_failure(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.consecutive_gateway_failure.is_none() {
            self.consecutive_gateway_failure.set_default();
        }
        self.consecutive_gateway_failure.as_mut().unwrap()
    }

    // Take field
    pub fn take_consecutive_gateway_failure(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.consecutive_gateway_failure.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.UInt32Value enforcing_consecutive_gateway_failure = 11;


    pub fn get_enforcing_consecutive_gateway_failure(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.enforcing_consecutive_gateway_failure.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_enforcing_consecutive_gateway_failure(&mut self) {
        self.enforcing_consecutive_gateway_failure.clear();
    }

    pub fn has_enforcing_consecutive_gateway_failure(&self) -> bool {
        self.enforcing_consecutive_gateway_failure.is_some()
    }

    // Param is passed by value, moved
    pub fn set_enforcing_consecutive_gateway_failure(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.enforcing_consecutive_gateway_failure = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_enforcing_consecutive_gateway_failure(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.enforcing_consecutive_gateway_failure.is_none() {
            self.enforcing_consecutive_gateway_failure.set_default();
        }
        self.enforcing_consecutive_gateway_failure.as_mut().unwrap()
    }

    // Take field
    pub fn take_enforcing_consecutive_gateway_failure(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.enforcing_consecutive_gateway_failure.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // bool split_external_local_origin_errors = 12;


    pub fn get_split_external_local_origin_errors(&self) -> bool {
        self.split_external_local_origin_errors
    }
    pub fn clear_split_external_local_origin_errors(&mut self) {
        self.split_external_local_origin_errors = false;
    }

    // Param is passed by value, moved
    pub fn set_split_external_local_origin_errors(&mut self, v: bool) {
        self.split_external_local_origin_errors = v;
    }

    // .google.protobuf.UInt32Value consecutive_local_origin_failure = 13;


    pub fn get_consecutive_local_origin_failure(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.consecutive_local_origin_failure.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_consecutive_local_origin_failure(&mut self) {
        self.consecutive_local_origin_failure.clear();
    }

    pub fn has_consecutive_local_origin_failure(&self) -> bool {
        self.consecutive_local_origin_failure.is_some()
    }

    // Param is passed by value, moved
    pub fn set_consecutive_local_origin_failure(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.consecutive_local_origin_failure = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_consecutive_local_origin_failure(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.consecutive_local_origin_failure.is_none() {
            self.consecutive_local_origin_failure.set_default();
        }
        self.consecutive_local_origin_failure.as_mut().unwrap()
    }

    // Take field
    pub fn take_consecutive_local_origin_failure(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.consecutive_local_origin_failure.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.UInt32Value enforcing_consecutive_local_origin_failure = 14;


    pub fn get_enforcing_consecutive_local_origin_failure(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.enforcing_consecutive_local_origin_failure.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_enforcing_consecutive_local_origin_failure(&mut self) {
        self.enforcing_consecutive_local_origin_failure.clear();
    }

    pub fn has_enforcing_consecutive_local_origin_failure(&self) -> bool {
        self.enforcing_consecutive_local_origin_failure.is_some()
    }

    // Param is passed by value, moved
    pub fn set_enforcing_consecutive_local_origin_failure(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.enforcing_consecutive_local_origin_failure = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_enforcing_consecutive_local_origin_failure(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.enforcing_consecutive_local_origin_failure.is_none() {
            self.enforcing_consecutive_local_origin_failure.set_default();
        }
        self.enforcing_consecutive_local_origin_failure.as_mut().unwrap()
    }

    // Take field
    pub fn take_enforcing_consecutive_local_origin_failure(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.enforcing_consecutive_local_origin_failure.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.UInt32Value enforcing_local_origin_success_rate = 15;


    pub fn get_enforcing_local_origin_success_rate(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.enforcing_local_origin_success_rate.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_enforcing_local_origin_success_rate(&mut self) {
        self.enforcing_local_origin_success_rate.clear();
    }

    pub fn has_enforcing_local_origin_success_rate(&self) -> bool {
        self.enforcing_local_origin_success_rate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_enforcing_local_origin_success_rate(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.enforcing_local_origin_success_rate = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_enforcing_local_origin_success_rate(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.enforcing_local_origin_success_rate.is_none() {
            self.enforcing_local_origin_success_rate.set_default();
        }
        self.enforcing_local_origin_success_rate.as_mut().unwrap()
    }

    // Take field
    pub fn take_enforcing_local_origin_success_rate(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.enforcing_local_origin_success_rate.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.UInt32Value failure_percentage_threshold = 16;


    pub fn get_failure_percentage_threshold(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.failure_percentage_threshold.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_failure_percentage_threshold(&mut self) {
        self.failure_percentage_threshold.clear();
    }

    pub fn has_failure_percentage_threshold(&self) -> bool {
        self.failure_percentage_threshold.is_some()
    }

    // Param is passed by value, moved
    pub fn set_failure_percentage_threshold(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.failure_percentage_threshold = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_failure_percentage_threshold(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.failure_percentage_threshold.is_none() {
            self.failure_percentage_threshold.set_default();
        }
        self.failure_percentage_threshold.as_mut().unwrap()
    }

    // Take field
    pub fn take_failure_percentage_threshold(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.failure_percentage_threshold.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.UInt32Value enforcing_failure_percentage = 17;


    pub fn get_enforcing_failure_percentage(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.enforcing_failure_percentage.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_enforcing_failure_percentage(&mut self) {
        self.enforcing_failure_percentage.clear();
    }

    pub fn has_enforcing_failure_percentage(&self) -> bool {
        self.enforcing_failure_percentage.is_some()
    }

    // Param is passed by value, moved
    pub fn set_enforcing_failure_percentage(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.enforcing_failure_percentage = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_enforcing_failure_percentage(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.enforcing_failure_percentage.is_none() {
            self.enforcing_failure_percentage.set_default();
        }
        self.enforcing_failure_percentage.as_mut().unwrap()
    }

    // Take field
    pub fn take_enforcing_failure_percentage(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.enforcing_failure_percentage.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.UInt32Value enforcing_failure_percentage_local_origin = 18;


    pub fn get_enforcing_failure_percentage_local_origin(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.enforcing_failure_percentage_local_origin.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_enforcing_failure_percentage_local_origin(&mut self) {
        self.enforcing_failure_percentage_local_origin.clear();
    }

    pub fn has_enforcing_failure_percentage_local_origin(&self) -> bool {
        self.enforcing_failure_percentage_local_origin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_enforcing_failure_percentage_local_origin(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.enforcing_failure_percentage_local_origin = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_enforcing_failure_percentage_local_origin(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.enforcing_failure_percentage_local_origin.is_none() {
            self.enforcing_failure_percentage_local_origin.set_default();
        }
        self.enforcing_failure_percentage_local_origin.as_mut().unwrap()
    }

    // Take field
    pub fn take_enforcing_failure_percentage_local_origin(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.enforcing_failure_percentage_local_origin.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.UInt32Value failure_percentage_minimum_hosts = 19;


    pub fn get_failure_percentage_minimum_hosts(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.failure_percentage_minimum_hosts.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_failure_percentage_minimum_hosts(&mut self) {
        self.failure_percentage_minimum_hosts.clear();
    }

    pub fn has_failure_percentage_minimum_hosts(&self) -> bool {
        self.failure_percentage_minimum_hosts.is_some()
    }

    // Param is passed by value, moved
    pub fn set_failure_percentage_minimum_hosts(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.failure_percentage_minimum_hosts = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_failure_percentage_minimum_hosts(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.failure_percentage_minimum_hosts.is_none() {
            self.failure_percentage_minimum_hosts.set_default();
        }
        self.failure_percentage_minimum_hosts.as_mut().unwrap()
    }

    // Take field
    pub fn take_failure_percentage_minimum_hosts(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.failure_percentage_minimum_hosts.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.UInt32Value failure_percentage_request_volume = 20;


    pub fn get_failure_percentage_request_volume(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.failure_percentage_request_volume.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_failure_percentage_request_volume(&mut self) {
        self.failure_percentage_request_volume.clear();
    }

    pub fn has_failure_percentage_request_volume(&self) -> bool {
        self.failure_percentage_request_volume.is_some()
    }

    // Param is passed by value, moved
    pub fn set_failure_percentage_request_volume(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.failure_percentage_request_volume = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_failure_percentage_request_volume(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.failure_percentage_request_volume.is_none() {
            self.failure_percentage_request_volume.set_default();
        }
        self.failure_percentage_request_volume.as_mut().unwrap()
    }

    // Take field
    pub fn take_failure_percentage_request_volume(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.failure_percentage_request_volume.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }
}

impl ::protobuf::Message for OutlierDetection {
    fn is_initialized(&self) -> bool {
        for v in &self.consecutive_5xx {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.interval {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.base_ejection_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.max_ejection_percent {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.enforcing_consecutive_5xx {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.enforcing_success_rate {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.success_rate_minimum_hosts {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.success_rate_request_volume {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.success_rate_stdev_factor {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.consecutive_gateway_failure {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.enforcing_consecutive_gateway_failure {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.consecutive_local_origin_failure {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.enforcing_consecutive_local_origin_failure {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.enforcing_local_origin_success_rate {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.failure_percentage_threshold {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.enforcing_failure_percentage {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.enforcing_failure_percentage_local_origin {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.failure_percentage_minimum_hosts {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.failure_percentage_request_volume {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.consecutive_5xx)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.interval)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.base_ejection_time)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_ejection_percent)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.enforcing_consecutive_5xx)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.enforcing_success_rate)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.success_rate_minimum_hosts)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.success_rate_request_volume)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.success_rate_stdev_factor)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.consecutive_gateway_failure)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.enforcing_consecutive_gateway_failure)?;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.split_external_local_origin_errors = tmp;
                },
                13 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.consecutive_local_origin_failure)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.enforcing_consecutive_local_origin_failure)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.enforcing_local_origin_success_rate)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.failure_percentage_threshold)?;
                },
                17 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.enforcing_failure_percentage)?;
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.enforcing_failure_percentage_local_origin)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.failure_percentage_minimum_hosts)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.failure_percentage_request_volume)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.consecutive_5xx.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.interval.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.base_ejection_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.max_ejection_percent.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.enforcing_consecutive_5xx.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.enforcing_success_rate.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.success_rate_minimum_hosts.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.success_rate_request_volume.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.success_rate_stdev_factor.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.consecutive_gateway_failure.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.enforcing_consecutive_gateway_failure.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.split_external_local_origin_errors != false {
            my_size += 2;
        }
        if let Some(ref v) = self.consecutive_local_origin_failure.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.enforcing_consecutive_local_origin_failure.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.enforcing_local_origin_success_rate.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.failure_percentage_threshold.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.enforcing_failure_percentage.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.enforcing_failure_percentage_local_origin.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.failure_percentage_minimum_hosts.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.failure_percentage_request_volume.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.consecutive_5xx.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.interval.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.base_ejection_time.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.max_ejection_percent.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.enforcing_consecutive_5xx.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.enforcing_success_rate.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.success_rate_minimum_hosts.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.success_rate_request_volume.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.success_rate_stdev_factor.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.consecutive_gateway_failure.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.enforcing_consecutive_gateway_failure.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.split_external_local_origin_errors != false {
            os.write_bool(12, self.split_external_local_origin_errors)?;
        }
        if let Some(ref v) = self.consecutive_local_origin_failure.as_ref() {
            os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.enforcing_consecutive_local_origin_failure.as_ref() {
            os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.enforcing_local_origin_success_rate.as_ref() {
            os.write_tag(15, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.failure_percentage_threshold.as_ref() {
            os.write_tag(16, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.enforcing_failure_percentage.as_ref() {
            os.write_tag(17, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.enforcing_failure_percentage_local_origin.as_ref() {
            os.write_tag(18, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.failure_percentage_minimum_hosts.as_ref() {
            os.write_tag(19, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.failure_percentage_request_volume.as_ref() {
            os.write_tag(20, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OutlierDetection {
        OutlierDetection::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "consecutive_5xx",
                |m: &OutlierDetection| { &m.consecutive_5xx },
                |m: &mut OutlierDetection| { &mut m.consecutive_5xx },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "interval",
                |m: &OutlierDetection| { &m.interval },
                |m: &mut OutlierDetection| { &mut m.interval },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "base_ejection_time",
                |m: &OutlierDetection| { &m.base_ejection_time },
                |m: &mut OutlierDetection| { &mut m.base_ejection_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "max_ejection_percent",
                |m: &OutlierDetection| { &m.max_ejection_percent },
                |m: &mut OutlierDetection| { &mut m.max_ejection_percent },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "enforcing_consecutive_5xx",
                |m: &OutlierDetection| { &m.enforcing_consecutive_5xx },
                |m: &mut OutlierDetection| { &mut m.enforcing_consecutive_5xx },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "enforcing_success_rate",
                |m: &OutlierDetection| { &m.enforcing_success_rate },
                |m: &mut OutlierDetection| { &mut m.enforcing_success_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "success_rate_minimum_hosts",
                |m: &OutlierDetection| { &m.success_rate_minimum_hosts },
                |m: &mut OutlierDetection| { &mut m.success_rate_minimum_hosts },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "success_rate_request_volume",
                |m: &OutlierDetection| { &m.success_rate_request_volume },
                |m: &mut OutlierDetection| { &mut m.success_rate_request_volume },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "success_rate_stdev_factor",
                |m: &OutlierDetection| { &m.success_rate_stdev_factor },
                |m: &mut OutlierDetection| { &mut m.success_rate_stdev_factor },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "consecutive_gateway_failure",
                |m: &OutlierDetection| { &m.consecutive_gateway_failure },
                |m: &mut OutlierDetection| { &mut m.consecutive_gateway_failure },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "enforcing_consecutive_gateway_failure",
                |m: &OutlierDetection| { &m.enforcing_consecutive_gateway_failure },
                |m: &mut OutlierDetection| { &mut m.enforcing_consecutive_gateway_failure },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "split_external_local_origin_errors",
                |m: &OutlierDetection| { &m.split_external_local_origin_errors },
                |m: &mut OutlierDetection| { &mut m.split_external_local_origin_errors },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "consecutive_local_origin_failure",
                |m: &OutlierDetection| { &m.consecutive_local_origin_failure },
                |m: &mut OutlierDetection| { &mut m.consecutive_local_origin_failure },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "enforcing_consecutive_local_origin_failure",
                |m: &OutlierDetection| { &m.enforcing_consecutive_local_origin_failure },
                |m: &mut OutlierDetection| { &mut m.enforcing_consecutive_local_origin_failure },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "enforcing_local_origin_success_rate",
                |m: &OutlierDetection| { &m.enforcing_local_origin_success_rate },
                |m: &mut OutlierDetection| { &mut m.enforcing_local_origin_success_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "failure_percentage_threshold",
                |m: &OutlierDetection| { &m.failure_percentage_threshold },
                |m: &mut OutlierDetection| { &mut m.failure_percentage_threshold },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "enforcing_failure_percentage",
                |m: &OutlierDetection| { &m.enforcing_failure_percentage },
                |m: &mut OutlierDetection| { &mut m.enforcing_failure_percentage },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "enforcing_failure_percentage_local_origin",
                |m: &OutlierDetection| { &m.enforcing_failure_percentage_local_origin },
                |m: &mut OutlierDetection| { &mut m.enforcing_failure_percentage_local_origin },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "failure_percentage_minimum_hosts",
                |m: &OutlierDetection| { &m.failure_percentage_minimum_hosts },
                |m: &mut OutlierDetection| { &mut m.failure_percentage_minimum_hosts },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "failure_percentage_request_volume",
                |m: &OutlierDetection| { &m.failure_percentage_request_volume },
                |m: &mut OutlierDetection| { &mut m.failure_percentage_request_volume },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OutlierDetection>(
                "OutlierDetection",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OutlierDetection {
        static instance: ::protobuf::rt::LazyV2<OutlierDetection> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OutlierDetection::new)
    }
}

impl ::protobuf::Clear for OutlierDetection {
    fn clear(&mut self) {
        self.consecutive_5xx.clear();
        self.interval.clear();
        self.base_ejection_time.clear();
        self.max_ejection_percent.clear();
        self.enforcing_consecutive_5xx.clear();
        self.enforcing_success_rate.clear();
        self.success_rate_minimum_hosts.clear();
        self.success_rate_request_volume.clear();
        self.success_rate_stdev_factor.clear();
        self.consecutive_gateway_failure.clear();
        self.enforcing_consecutive_gateway_failure.clear();
        self.split_external_local_origin_errors = false;
        self.consecutive_local_origin_failure.clear();
        self.enforcing_consecutive_local_origin_failure.clear();
        self.enforcing_local_origin_success_rate.clear();
        self.failure_percentage_threshold.clear();
        self.enforcing_failure_percentage.clear();
        self.enforcing_failure_percentage_local_origin.clear();
        self.failure_percentage_minimum_hosts.clear();
        self.failure_percentage_request_volume.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OutlierDetection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OutlierDetection {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n/envoy/config/cluster/v3/outlier_detection.proto\x12\x17envoy.config.c\
    luster.v3\x1a\x1egoogle/protobuf/duration.proto\x1a\x1egoogle/protobuf/w\
    rappers.proto\x1a\x1dudpa/annotations/status.proto\x1a!udpa/annotations/\
    versioning.proto\x1a\x17validate/validate.proto\"\xec\x0f\n\x10OutlierDe\
    tection\x12E\n\x0fconsecutive_5xx\x18\x01\x20\x01(\x0b2\x1c.google.proto\
    buf.UInt32ValueR\x0econsecutive5xx\x12?\n\x08interval\x18\x02\x20\x01(\
    \x0b2\x19.google.protobuf.DurationR\x08intervalB\x08\xfaB\x05\xaa\x01\
    \x02*\0\x12Q\n\x12base_ejection_time\x18\x03\x20\x01(\x0b2\x19.google.pr\
    otobuf.DurationR\x10baseEjectionTimeB\x08\xfaB\x05\xaa\x01\x02*\0\x12W\n\
    \x14max_ejection_percent\x18\x04\x20\x01(\x0b2\x1c.google.protobuf.UInt3\
    2ValueR\x12maxEjectionPercentB\x07\xfaB\x04*\x02\x18d\x12a\n\x19enforcin\
    g_consecutive_5xx\x18\x05\x20\x01(\x0b2\x1c.google.protobuf.UInt32ValueR\
    \x17enforcingConsecutive5xxB\x07\xfaB\x04*\x02\x18d\x12[\n\x16enforcing_\
    success_rate\x18\x06\x20\x01(\x0b2\x1c.google.protobuf.UInt32ValueR\x14e\
    nforcingSuccessRateB\x07\xfaB\x04*\x02\x18d\x12Y\n\x1asuccess_rate_minim\
    um_hosts\x18\x07\x20\x01(\x0b2\x1c.google.protobuf.UInt32ValueR\x17succe\
    ssRateMinimumHosts\x12[\n\x1bsuccess_rate_request_volume\x18\x08\x20\x01\
    (\x0b2\x1c.google.protobuf.UInt32ValueR\x18successRateRequestVolume\x12W\
    \n\x19success_rate_stdev_factor\x18\t\x20\x01(\x0b2\x1c.google.protobuf.\
    UInt32ValueR\x16successRateStdevFactor\x12\\\n\x1bconsecutive_gateway_fa\
    ilure\x18\n\x20\x01(\x0b2\x1c.google.protobuf.UInt32ValueR\x19consecutiv\
    eGatewayFailure\x12x\n%enforcing_consecutive_gateway_failure\x18\x0b\x20\
    \x01(\x0b2\x1c.google.protobuf.UInt32ValueR\"enforcingConsecutiveGateway\
    FailureB\x07\xfaB\x04*\x02\x18d\x12J\n\"split_external_local_origin_erro\
    rs\x18\x0c\x20\x01(\x08R\x1esplitExternalLocalOriginErrors\x12e\n\x20con\
    secutive_local_origin_failure\x18\r\x20\x01(\x0b2\x1c.google.protobuf.UI\
    nt32ValueR\x1dconsecutiveLocalOriginFailure\x12\x81\x01\n*enforcing_cons\
    ecutive_local_origin_failure\x18\x0e\x20\x01(\x0b2\x1c.google.protobuf.U\
    Int32ValueR&enforcingConsecutiveLocalOriginFailureB\x07\xfaB\x04*\x02\
    \x18d\x12s\n#enforcing_local_origin_success_rate\x18\x0f\x20\x01(\x0b2\
    \x1c.google.protobuf.UInt32ValueR\x1fenforcingLocalOriginSuccessRateB\
    \x07\xfaB\x04*\x02\x18d\x12g\n\x1cfailure_percentage_threshold\x18\x10\
    \x20\x01(\x0b2\x1c.google.protobuf.UInt32ValueR\x1afailurePercentageThre\
    sholdB\x07\xfaB\x04*\x02\x18d\x12g\n\x1cenforcing_failure_percentage\x18\
    \x11\x20\x01(\x0b2\x1c.google.protobuf.UInt32ValueR\x1aenforcingFailureP\
    ercentageB\x07\xfaB\x04*\x02\x18d\x12\x7f\n)enforcing_failure_percentage\
    _local_origin\x18\x12\x20\x01(\x0b2\x1c.google.protobuf.UInt32ValueR%enf\
    orcingFailurePercentageLocalOriginB\x07\xfaB\x04*\x02\x18d\x12e\n\x20fai\
    lure_percentage_minimum_hosts\x18\x13\x20\x01(\x0b2\x1c.google.protobuf.\
    UInt32ValueR\x1dfailurePercentageMinimumHosts\x12g\n!failure_percentage_\
    request_volume\x18\x14\x20\x01(\x0b2\x1c.google.protobuf.UInt32ValueR\
    \x1efailurePercentageRequestVolume:,\x9a\xc5\x88\x1e'\n%envoy.api.v2.clu\
    ster.OutlierDetectionBH\n%io.envoyproxy.envoy.config.cluster.v3B\x15Outl\
    ierDetectionProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
