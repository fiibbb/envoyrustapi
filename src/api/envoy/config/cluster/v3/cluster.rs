// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/cluster/v3/cluster.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct ClusterCollection {
    // message fields
    pub entries: ::protobuf::SingularPtrField<super::collection_entry::CollectionEntry>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClusterCollection {
    fn default() -> &'a ClusterCollection {
        <ClusterCollection as ::protobuf::Message>::default_instance()
    }
}

impl ClusterCollection {
    pub fn new() -> ClusterCollection {
        ::std::default::Default::default()
    }

    // .xds.core.v3.CollectionEntry entries = 1;


    pub fn get_entries(&self) -> &super::collection_entry::CollectionEntry {
        self.entries.as_ref().unwrap_or_else(|| <super::collection_entry::CollectionEntry as ::protobuf::Message>::default_instance())
    }
    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    pub fn has_entries(&self) -> bool {
        self.entries.is_some()
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: super::collection_entry::CollectionEntry) {
        self.entries = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_entries(&mut self) -> &mut super::collection_entry::CollectionEntry {
        if self.entries.is_none() {
            self.entries.set_default();
        }
        self.entries.as_mut().unwrap()
    }

    // Take field
    pub fn take_entries(&mut self) -> super::collection_entry::CollectionEntry {
        self.entries.take().unwrap_or_else(|| super::collection_entry::CollectionEntry::new())
    }
}

impl ::protobuf::Message for ClusterCollection {
    fn is_initialized(&self) -> bool {
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.entries)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.entries.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.entries.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClusterCollection {
        ClusterCollection::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::collection_entry::CollectionEntry>>(
                "entries",
                |m: &ClusterCollection| { &m.entries },
                |m: &mut ClusterCollection| { &mut m.entries },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClusterCollection>(
                "ClusterCollection",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClusterCollection {
        static instance: ::protobuf::rt::LazyV2<ClusterCollection> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClusterCollection::new)
    }
}

impl ::protobuf::Clear for ClusterCollection {
    fn clear(&mut self) {
        self.entries.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClusterCollection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClusterCollection {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Cluster {
    // message fields
    pub transport_socket_matches: ::protobuf::RepeatedField<Cluster_TransportSocketMatch>,
    pub name: ::std::string::String,
    pub alt_stat_name: ::std::string::String,
    pub eds_cluster_config: ::protobuf::SingularPtrField<Cluster_EdsClusterConfig>,
    pub connect_timeout: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub per_connection_buffer_limit_bytes: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub lb_policy: Cluster_LbPolicy,
    pub load_assignment: ::protobuf::SingularPtrField<super::endpoint::ClusterLoadAssignment>,
    pub health_checks: ::protobuf::RepeatedField<super::health_check::HealthCheck>,
    pub max_requests_per_connection: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub circuit_breakers: ::protobuf::SingularPtrField<super::circuit_breaker::CircuitBreakers>,
    pub upstream_http_protocol_options: ::protobuf::SingularPtrField<super::protocol::UpstreamHttpProtocolOptions>,
    pub common_http_protocol_options: ::protobuf::SingularPtrField<super::protocol::HttpProtocolOptions>,
    pub http_protocol_options: ::protobuf::SingularPtrField<super::protocol::Http1ProtocolOptions>,
    pub http2_protocol_options: ::protobuf::SingularPtrField<super::protocol::Http2ProtocolOptions>,
    pub typed_extension_protocol_options: ::std::collections::HashMap<::std::string::String, ::protobuf::well_known_types::Any>,
    pub dns_refresh_rate: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub dns_failure_refresh_rate: ::protobuf::SingularPtrField<Cluster_RefreshRate>,
    pub respect_dns_ttl: bool,
    pub dns_lookup_family: Cluster_DnsLookupFamily,
    pub dns_resolvers: ::protobuf::RepeatedField<super::address::Address>,
    pub use_tcp_for_dns_lookups: bool,
    pub outlier_detection: ::protobuf::SingularPtrField<super::outlier_detection::OutlierDetection>,
    pub cleanup_interval: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub upstream_bind_config: ::protobuf::SingularPtrField<super::address::BindConfig>,
    pub lb_subset_config: ::protobuf::SingularPtrField<Cluster_LbSubsetConfig>,
    pub common_lb_config: ::protobuf::SingularPtrField<Cluster_CommonLbConfig>,
    pub transport_socket: ::protobuf::SingularPtrField<super::base::TransportSocket>,
    pub metadata: ::protobuf::SingularPtrField<super::base::Metadata>,
    pub protocol_selection: Cluster_ClusterProtocolSelection,
    pub upstream_connection_options: ::protobuf::SingularPtrField<UpstreamConnectionOptions>,
    pub close_connections_on_host_health_failure: bool,
    pub ignore_health_on_host_removal: bool,
    pub filters: ::protobuf::RepeatedField<super::filter::Filter>,
    pub load_balancing_policy: ::protobuf::SingularPtrField<LoadBalancingPolicy>,
    pub lrs_server: ::protobuf::SingularPtrField<super::config_source::ConfigSource>,
    pub track_timeout_budgets: bool,
    pub upstream_config: ::protobuf::SingularPtrField<super::extension::TypedExtensionConfig>,
    pub track_cluster_stats: ::protobuf::SingularPtrField<TrackClusterStats>,
    pub prefetch_policy: ::protobuf::SingularPtrField<Cluster_PrefetchPolicy>,
    pub connection_pool_per_downstream_connection: bool,
    // message oneof groups
    pub cluster_discovery_type: ::std::option::Option<Cluster_oneof_cluster_discovery_type>,
    pub lb_config: ::std::option::Option<Cluster_oneof_lb_config>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cluster {
    fn default() -> &'a Cluster {
        <Cluster as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Cluster_oneof_cluster_discovery_type {
    field_type(Cluster_DiscoveryType),
    cluster_type(Cluster_CustomClusterType),
}

#[derive(Clone,PartialEq,Debug)]
pub enum Cluster_oneof_lb_config {
    ring_hash_lb_config(Cluster_RingHashLbConfig),
    maglev_lb_config(Cluster_MaglevLbConfig),
    original_dst_lb_config(Cluster_OriginalDstLbConfig),
    least_request_lb_config(Cluster_LeastRequestLbConfig),
}

impl Cluster {
    pub fn new() -> Cluster {
        ::std::default::Default::default()
    }

    // repeated .envoy.config.cluster.v3.Cluster.TransportSocketMatch transport_socket_matches = 43;


    pub fn get_transport_socket_matches(&self) -> &[Cluster_TransportSocketMatch] {
        &self.transport_socket_matches
    }
    pub fn clear_transport_socket_matches(&mut self) {
        self.transport_socket_matches.clear();
    }

    // Param is passed by value, moved
    pub fn set_transport_socket_matches(&mut self, v: ::protobuf::RepeatedField<Cluster_TransportSocketMatch>) {
        self.transport_socket_matches = v;
    }

    // Mutable pointer to the field.
    pub fn mut_transport_socket_matches(&mut self) -> &mut ::protobuf::RepeatedField<Cluster_TransportSocketMatch> {
        &mut self.transport_socket_matches
    }

    // Take field
    pub fn take_transport_socket_matches(&mut self) -> ::protobuf::RepeatedField<Cluster_TransportSocketMatch> {
        ::std::mem::replace(&mut self.transport_socket_matches, ::protobuf::RepeatedField::new())
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string alt_stat_name = 28;


    pub fn get_alt_stat_name(&self) -> &str {
        &self.alt_stat_name
    }
    pub fn clear_alt_stat_name(&mut self) {
        self.alt_stat_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_alt_stat_name(&mut self, v: ::std::string::String) {
        self.alt_stat_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_alt_stat_name(&mut self) -> &mut ::std::string::String {
        &mut self.alt_stat_name
    }

    // Take field
    pub fn take_alt_stat_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.alt_stat_name, ::std::string::String::new())
    }

    // .envoy.config.cluster.v3.Cluster.DiscoveryType type = 2;


    pub fn get_field_type(&self) -> Cluster_DiscoveryType {
        match self.cluster_discovery_type {
            ::std::option::Option::Some(Cluster_oneof_cluster_discovery_type::field_type(v)) => v,
            _ => Cluster_DiscoveryType::STATIC,
        }
    }
    pub fn clear_field_type(&mut self) {
        self.cluster_discovery_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        match self.cluster_discovery_type {
            ::std::option::Option::Some(Cluster_oneof_cluster_discovery_type::field_type(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Cluster_DiscoveryType) {
        self.cluster_discovery_type = ::std::option::Option::Some(Cluster_oneof_cluster_discovery_type::field_type(v))
    }

    // .envoy.config.cluster.v3.Cluster.CustomClusterType cluster_type = 38;


    pub fn get_cluster_type(&self) -> &Cluster_CustomClusterType {
        match self.cluster_discovery_type {
            ::std::option::Option::Some(Cluster_oneof_cluster_discovery_type::cluster_type(ref v)) => v,
            _ => <Cluster_CustomClusterType as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_cluster_type(&mut self) {
        self.cluster_discovery_type = ::std::option::Option::None;
    }

    pub fn has_cluster_type(&self) -> bool {
        match self.cluster_discovery_type {
            ::std::option::Option::Some(Cluster_oneof_cluster_discovery_type::cluster_type(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cluster_type(&mut self, v: Cluster_CustomClusterType) {
        self.cluster_discovery_type = ::std::option::Option::Some(Cluster_oneof_cluster_discovery_type::cluster_type(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cluster_type(&mut self) -> &mut Cluster_CustomClusterType {
        if let ::std::option::Option::Some(Cluster_oneof_cluster_discovery_type::cluster_type(_)) = self.cluster_discovery_type {
        } else {
            self.cluster_discovery_type = ::std::option::Option::Some(Cluster_oneof_cluster_discovery_type::cluster_type(Cluster_CustomClusterType::new()));
        }
        match self.cluster_discovery_type {
            ::std::option::Option::Some(Cluster_oneof_cluster_discovery_type::cluster_type(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cluster_type(&mut self) -> Cluster_CustomClusterType {
        if self.has_cluster_type() {
            match self.cluster_discovery_type.take() {
                ::std::option::Option::Some(Cluster_oneof_cluster_discovery_type::cluster_type(v)) => v,
                _ => panic!(),
            }
        } else {
            Cluster_CustomClusterType::new()
        }
    }

    // .envoy.config.cluster.v3.Cluster.EdsClusterConfig eds_cluster_config = 3;


    pub fn get_eds_cluster_config(&self) -> &Cluster_EdsClusterConfig {
        self.eds_cluster_config.as_ref().unwrap_or_else(|| <Cluster_EdsClusterConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_eds_cluster_config(&mut self) {
        self.eds_cluster_config.clear();
    }

    pub fn has_eds_cluster_config(&self) -> bool {
        self.eds_cluster_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eds_cluster_config(&mut self, v: Cluster_EdsClusterConfig) {
        self.eds_cluster_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_eds_cluster_config(&mut self) -> &mut Cluster_EdsClusterConfig {
        if self.eds_cluster_config.is_none() {
            self.eds_cluster_config.set_default();
        }
        self.eds_cluster_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_eds_cluster_config(&mut self) -> Cluster_EdsClusterConfig {
        self.eds_cluster_config.take().unwrap_or_else(|| Cluster_EdsClusterConfig::new())
    }

    // .google.protobuf.Duration connect_timeout = 4;


    pub fn get_connect_timeout(&self) -> &::protobuf::well_known_types::Duration {
        self.connect_timeout.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_connect_timeout(&mut self) {
        self.connect_timeout.clear();
    }

    pub fn has_connect_timeout(&self) -> bool {
        self.connect_timeout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connect_timeout(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.connect_timeout = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connect_timeout(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.connect_timeout.is_none() {
            self.connect_timeout.set_default();
        }
        self.connect_timeout.as_mut().unwrap()
    }

    // Take field
    pub fn take_connect_timeout(&mut self) -> ::protobuf::well_known_types::Duration {
        self.connect_timeout.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.UInt32Value per_connection_buffer_limit_bytes = 5;


    pub fn get_per_connection_buffer_limit_bytes(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.per_connection_buffer_limit_bytes.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_per_connection_buffer_limit_bytes(&mut self) {
        self.per_connection_buffer_limit_bytes.clear();
    }

    pub fn has_per_connection_buffer_limit_bytes(&self) -> bool {
        self.per_connection_buffer_limit_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_per_connection_buffer_limit_bytes(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.per_connection_buffer_limit_bytes = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_per_connection_buffer_limit_bytes(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.per_connection_buffer_limit_bytes.is_none() {
            self.per_connection_buffer_limit_bytes.set_default();
        }
        self.per_connection_buffer_limit_bytes.as_mut().unwrap()
    }

    // Take field
    pub fn take_per_connection_buffer_limit_bytes(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.per_connection_buffer_limit_bytes.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .envoy.config.cluster.v3.Cluster.LbPolicy lb_policy = 6;


    pub fn get_lb_policy(&self) -> Cluster_LbPolicy {
        self.lb_policy
    }
    pub fn clear_lb_policy(&mut self) {
        self.lb_policy = Cluster_LbPolicy::ROUND_ROBIN;
    }

    // Param is passed by value, moved
    pub fn set_lb_policy(&mut self, v: Cluster_LbPolicy) {
        self.lb_policy = v;
    }

    // .envoy.config.endpoint.v3.ClusterLoadAssignment load_assignment = 33;


    pub fn get_load_assignment(&self) -> &super::endpoint::ClusterLoadAssignment {
        self.load_assignment.as_ref().unwrap_or_else(|| <super::endpoint::ClusterLoadAssignment as ::protobuf::Message>::default_instance())
    }
    pub fn clear_load_assignment(&mut self) {
        self.load_assignment.clear();
    }

    pub fn has_load_assignment(&self) -> bool {
        self.load_assignment.is_some()
    }

    // Param is passed by value, moved
    pub fn set_load_assignment(&mut self, v: super::endpoint::ClusterLoadAssignment) {
        self.load_assignment = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_load_assignment(&mut self) -> &mut super::endpoint::ClusterLoadAssignment {
        if self.load_assignment.is_none() {
            self.load_assignment.set_default();
        }
        self.load_assignment.as_mut().unwrap()
    }

    // Take field
    pub fn take_load_assignment(&mut self) -> super::endpoint::ClusterLoadAssignment {
        self.load_assignment.take().unwrap_or_else(|| super::endpoint::ClusterLoadAssignment::new())
    }

    // repeated .envoy.config.core.v3.HealthCheck health_checks = 8;


    pub fn get_health_checks(&self) -> &[super::health_check::HealthCheck] {
        &self.health_checks
    }
    pub fn clear_health_checks(&mut self) {
        self.health_checks.clear();
    }

    // Param is passed by value, moved
    pub fn set_health_checks(&mut self, v: ::protobuf::RepeatedField<super::health_check::HealthCheck>) {
        self.health_checks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_health_checks(&mut self) -> &mut ::protobuf::RepeatedField<super::health_check::HealthCheck> {
        &mut self.health_checks
    }

    // Take field
    pub fn take_health_checks(&mut self) -> ::protobuf::RepeatedField<super::health_check::HealthCheck> {
        ::std::mem::replace(&mut self.health_checks, ::protobuf::RepeatedField::new())
    }

    // .google.protobuf.UInt32Value max_requests_per_connection = 9;


    pub fn get_max_requests_per_connection(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.max_requests_per_connection.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_max_requests_per_connection(&mut self) {
        self.max_requests_per_connection.clear();
    }

    pub fn has_max_requests_per_connection(&self) -> bool {
        self.max_requests_per_connection.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_requests_per_connection(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.max_requests_per_connection = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_requests_per_connection(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.max_requests_per_connection.is_none() {
            self.max_requests_per_connection.set_default();
        }
        self.max_requests_per_connection.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_requests_per_connection(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.max_requests_per_connection.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .envoy.config.cluster.v3.CircuitBreakers circuit_breakers = 10;


    pub fn get_circuit_breakers(&self) -> &super::circuit_breaker::CircuitBreakers {
        self.circuit_breakers.as_ref().unwrap_or_else(|| <super::circuit_breaker::CircuitBreakers as ::protobuf::Message>::default_instance())
    }
    pub fn clear_circuit_breakers(&mut self) {
        self.circuit_breakers.clear();
    }

    pub fn has_circuit_breakers(&self) -> bool {
        self.circuit_breakers.is_some()
    }

    // Param is passed by value, moved
    pub fn set_circuit_breakers(&mut self, v: super::circuit_breaker::CircuitBreakers) {
        self.circuit_breakers = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_circuit_breakers(&mut self) -> &mut super::circuit_breaker::CircuitBreakers {
        if self.circuit_breakers.is_none() {
            self.circuit_breakers.set_default();
        }
        self.circuit_breakers.as_mut().unwrap()
    }

    // Take field
    pub fn take_circuit_breakers(&mut self) -> super::circuit_breaker::CircuitBreakers {
        self.circuit_breakers.take().unwrap_or_else(|| super::circuit_breaker::CircuitBreakers::new())
    }

    // .envoy.config.core.v3.UpstreamHttpProtocolOptions upstream_http_protocol_options = 46;


    pub fn get_upstream_http_protocol_options(&self) -> &super::protocol::UpstreamHttpProtocolOptions {
        self.upstream_http_protocol_options.as_ref().unwrap_or_else(|| <super::protocol::UpstreamHttpProtocolOptions as ::protobuf::Message>::default_instance())
    }
    pub fn clear_upstream_http_protocol_options(&mut self) {
        self.upstream_http_protocol_options.clear();
    }

    pub fn has_upstream_http_protocol_options(&self) -> bool {
        self.upstream_http_protocol_options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upstream_http_protocol_options(&mut self, v: super::protocol::UpstreamHttpProtocolOptions) {
        self.upstream_http_protocol_options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_upstream_http_protocol_options(&mut self) -> &mut super::protocol::UpstreamHttpProtocolOptions {
        if self.upstream_http_protocol_options.is_none() {
            self.upstream_http_protocol_options.set_default();
        }
        self.upstream_http_protocol_options.as_mut().unwrap()
    }

    // Take field
    pub fn take_upstream_http_protocol_options(&mut self) -> super::protocol::UpstreamHttpProtocolOptions {
        self.upstream_http_protocol_options.take().unwrap_or_else(|| super::protocol::UpstreamHttpProtocolOptions::new())
    }

    // .envoy.config.core.v3.HttpProtocolOptions common_http_protocol_options = 29;


    pub fn get_common_http_protocol_options(&self) -> &super::protocol::HttpProtocolOptions {
        self.common_http_protocol_options.as_ref().unwrap_or_else(|| <super::protocol::HttpProtocolOptions as ::protobuf::Message>::default_instance())
    }
    pub fn clear_common_http_protocol_options(&mut self) {
        self.common_http_protocol_options.clear();
    }

    pub fn has_common_http_protocol_options(&self) -> bool {
        self.common_http_protocol_options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_common_http_protocol_options(&mut self, v: super::protocol::HttpProtocolOptions) {
        self.common_http_protocol_options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_common_http_protocol_options(&mut self) -> &mut super::protocol::HttpProtocolOptions {
        if self.common_http_protocol_options.is_none() {
            self.common_http_protocol_options.set_default();
        }
        self.common_http_protocol_options.as_mut().unwrap()
    }

    // Take field
    pub fn take_common_http_protocol_options(&mut self) -> super::protocol::HttpProtocolOptions {
        self.common_http_protocol_options.take().unwrap_or_else(|| super::protocol::HttpProtocolOptions::new())
    }

    // .envoy.config.core.v3.Http1ProtocolOptions http_protocol_options = 13;


    pub fn get_http_protocol_options(&self) -> &super::protocol::Http1ProtocolOptions {
        self.http_protocol_options.as_ref().unwrap_or_else(|| <super::protocol::Http1ProtocolOptions as ::protobuf::Message>::default_instance())
    }
    pub fn clear_http_protocol_options(&mut self) {
        self.http_protocol_options.clear();
    }

    pub fn has_http_protocol_options(&self) -> bool {
        self.http_protocol_options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_http_protocol_options(&mut self, v: super::protocol::Http1ProtocolOptions) {
        self.http_protocol_options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_http_protocol_options(&mut self) -> &mut super::protocol::Http1ProtocolOptions {
        if self.http_protocol_options.is_none() {
            self.http_protocol_options.set_default();
        }
        self.http_protocol_options.as_mut().unwrap()
    }

    // Take field
    pub fn take_http_protocol_options(&mut self) -> super::protocol::Http1ProtocolOptions {
        self.http_protocol_options.take().unwrap_or_else(|| super::protocol::Http1ProtocolOptions::new())
    }

    // .envoy.config.core.v3.Http2ProtocolOptions http2_protocol_options = 14;


    pub fn get_http2_protocol_options(&self) -> &super::protocol::Http2ProtocolOptions {
        self.http2_protocol_options.as_ref().unwrap_or_else(|| <super::protocol::Http2ProtocolOptions as ::protobuf::Message>::default_instance())
    }
    pub fn clear_http2_protocol_options(&mut self) {
        self.http2_protocol_options.clear();
    }

    pub fn has_http2_protocol_options(&self) -> bool {
        self.http2_protocol_options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_http2_protocol_options(&mut self, v: super::protocol::Http2ProtocolOptions) {
        self.http2_protocol_options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_http2_protocol_options(&mut self) -> &mut super::protocol::Http2ProtocolOptions {
        if self.http2_protocol_options.is_none() {
            self.http2_protocol_options.set_default();
        }
        self.http2_protocol_options.as_mut().unwrap()
    }

    // Take field
    pub fn take_http2_protocol_options(&mut self) -> super::protocol::Http2ProtocolOptions {
        self.http2_protocol_options.take().unwrap_or_else(|| super::protocol::Http2ProtocolOptions::new())
    }

    // repeated .envoy.config.cluster.v3.Cluster.TypedExtensionProtocolOptionsEntry typed_extension_protocol_options = 36;


    pub fn get_typed_extension_protocol_options(&self) -> &::std::collections::HashMap<::std::string::String, ::protobuf::well_known_types::Any> {
        &self.typed_extension_protocol_options
    }
    pub fn clear_typed_extension_protocol_options(&mut self) {
        self.typed_extension_protocol_options.clear();
    }

    // Param is passed by value, moved
    pub fn set_typed_extension_protocol_options(&mut self, v: ::std::collections::HashMap<::std::string::String, ::protobuf::well_known_types::Any>) {
        self.typed_extension_protocol_options = v;
    }

    // Mutable pointer to the field.
    pub fn mut_typed_extension_protocol_options(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::protobuf::well_known_types::Any> {
        &mut self.typed_extension_protocol_options
    }

    // Take field
    pub fn take_typed_extension_protocol_options(&mut self) -> ::std::collections::HashMap<::std::string::String, ::protobuf::well_known_types::Any> {
        ::std::mem::replace(&mut self.typed_extension_protocol_options, ::std::collections::HashMap::new())
    }

    // .google.protobuf.Duration dns_refresh_rate = 16;


    pub fn get_dns_refresh_rate(&self) -> &::protobuf::well_known_types::Duration {
        self.dns_refresh_rate.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_dns_refresh_rate(&mut self) {
        self.dns_refresh_rate.clear();
    }

    pub fn has_dns_refresh_rate(&self) -> bool {
        self.dns_refresh_rate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dns_refresh_rate(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.dns_refresh_rate = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dns_refresh_rate(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.dns_refresh_rate.is_none() {
            self.dns_refresh_rate.set_default();
        }
        self.dns_refresh_rate.as_mut().unwrap()
    }

    // Take field
    pub fn take_dns_refresh_rate(&mut self) -> ::protobuf::well_known_types::Duration {
        self.dns_refresh_rate.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .envoy.config.cluster.v3.Cluster.RefreshRate dns_failure_refresh_rate = 44;


    pub fn get_dns_failure_refresh_rate(&self) -> &Cluster_RefreshRate {
        self.dns_failure_refresh_rate.as_ref().unwrap_or_else(|| <Cluster_RefreshRate as ::protobuf::Message>::default_instance())
    }
    pub fn clear_dns_failure_refresh_rate(&mut self) {
        self.dns_failure_refresh_rate.clear();
    }

    pub fn has_dns_failure_refresh_rate(&self) -> bool {
        self.dns_failure_refresh_rate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_dns_failure_refresh_rate(&mut self, v: Cluster_RefreshRate) {
        self.dns_failure_refresh_rate = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dns_failure_refresh_rate(&mut self) -> &mut Cluster_RefreshRate {
        if self.dns_failure_refresh_rate.is_none() {
            self.dns_failure_refresh_rate.set_default();
        }
        self.dns_failure_refresh_rate.as_mut().unwrap()
    }

    // Take field
    pub fn take_dns_failure_refresh_rate(&mut self) -> Cluster_RefreshRate {
        self.dns_failure_refresh_rate.take().unwrap_or_else(|| Cluster_RefreshRate::new())
    }

    // bool respect_dns_ttl = 39;


    pub fn get_respect_dns_ttl(&self) -> bool {
        self.respect_dns_ttl
    }
    pub fn clear_respect_dns_ttl(&mut self) {
        self.respect_dns_ttl = false;
    }

    // Param is passed by value, moved
    pub fn set_respect_dns_ttl(&mut self, v: bool) {
        self.respect_dns_ttl = v;
    }

    // .envoy.config.cluster.v3.Cluster.DnsLookupFamily dns_lookup_family = 17;


    pub fn get_dns_lookup_family(&self) -> Cluster_DnsLookupFamily {
        self.dns_lookup_family
    }
    pub fn clear_dns_lookup_family(&mut self) {
        self.dns_lookup_family = Cluster_DnsLookupFamily::AUTO;
    }

    // Param is passed by value, moved
    pub fn set_dns_lookup_family(&mut self, v: Cluster_DnsLookupFamily) {
        self.dns_lookup_family = v;
    }

    // repeated .envoy.config.core.v3.Address dns_resolvers = 18;


    pub fn get_dns_resolvers(&self) -> &[super::address::Address] {
        &self.dns_resolvers
    }
    pub fn clear_dns_resolvers(&mut self) {
        self.dns_resolvers.clear();
    }

    // Param is passed by value, moved
    pub fn set_dns_resolvers(&mut self, v: ::protobuf::RepeatedField<super::address::Address>) {
        self.dns_resolvers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_dns_resolvers(&mut self) -> &mut ::protobuf::RepeatedField<super::address::Address> {
        &mut self.dns_resolvers
    }

    // Take field
    pub fn take_dns_resolvers(&mut self) -> ::protobuf::RepeatedField<super::address::Address> {
        ::std::mem::replace(&mut self.dns_resolvers, ::protobuf::RepeatedField::new())
    }

    // bool use_tcp_for_dns_lookups = 45;


    pub fn get_use_tcp_for_dns_lookups(&self) -> bool {
        self.use_tcp_for_dns_lookups
    }
    pub fn clear_use_tcp_for_dns_lookups(&mut self) {
        self.use_tcp_for_dns_lookups = false;
    }

    // Param is passed by value, moved
    pub fn set_use_tcp_for_dns_lookups(&mut self, v: bool) {
        self.use_tcp_for_dns_lookups = v;
    }

    // .envoy.config.cluster.v3.OutlierDetection outlier_detection = 19;


    pub fn get_outlier_detection(&self) -> &super::outlier_detection::OutlierDetection {
        self.outlier_detection.as_ref().unwrap_or_else(|| <super::outlier_detection::OutlierDetection as ::protobuf::Message>::default_instance())
    }
    pub fn clear_outlier_detection(&mut self) {
        self.outlier_detection.clear();
    }

    pub fn has_outlier_detection(&self) -> bool {
        self.outlier_detection.is_some()
    }

    // Param is passed by value, moved
    pub fn set_outlier_detection(&mut self, v: super::outlier_detection::OutlierDetection) {
        self.outlier_detection = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_outlier_detection(&mut self) -> &mut super::outlier_detection::OutlierDetection {
        if self.outlier_detection.is_none() {
            self.outlier_detection.set_default();
        }
        self.outlier_detection.as_mut().unwrap()
    }

    // Take field
    pub fn take_outlier_detection(&mut self) -> super::outlier_detection::OutlierDetection {
        self.outlier_detection.take().unwrap_or_else(|| super::outlier_detection::OutlierDetection::new())
    }

    // .google.protobuf.Duration cleanup_interval = 20;


    pub fn get_cleanup_interval(&self) -> &::protobuf::well_known_types::Duration {
        self.cleanup_interval.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cleanup_interval(&mut self) {
        self.cleanup_interval.clear();
    }

    pub fn has_cleanup_interval(&self) -> bool {
        self.cleanup_interval.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cleanup_interval(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.cleanup_interval = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cleanup_interval(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.cleanup_interval.is_none() {
            self.cleanup_interval.set_default();
        }
        self.cleanup_interval.as_mut().unwrap()
    }

    // Take field
    pub fn take_cleanup_interval(&mut self) -> ::protobuf::well_known_types::Duration {
        self.cleanup_interval.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .envoy.config.core.v3.BindConfig upstream_bind_config = 21;


    pub fn get_upstream_bind_config(&self) -> &super::address::BindConfig {
        self.upstream_bind_config.as_ref().unwrap_or_else(|| <super::address::BindConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_upstream_bind_config(&mut self) {
        self.upstream_bind_config.clear();
    }

    pub fn has_upstream_bind_config(&self) -> bool {
        self.upstream_bind_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upstream_bind_config(&mut self, v: super::address::BindConfig) {
        self.upstream_bind_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_upstream_bind_config(&mut self) -> &mut super::address::BindConfig {
        if self.upstream_bind_config.is_none() {
            self.upstream_bind_config.set_default();
        }
        self.upstream_bind_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_upstream_bind_config(&mut self) -> super::address::BindConfig {
        self.upstream_bind_config.take().unwrap_or_else(|| super::address::BindConfig::new())
    }

    // .envoy.config.cluster.v3.Cluster.LbSubsetConfig lb_subset_config = 22;


    pub fn get_lb_subset_config(&self) -> &Cluster_LbSubsetConfig {
        self.lb_subset_config.as_ref().unwrap_or_else(|| <Cluster_LbSubsetConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_lb_subset_config(&mut self) {
        self.lb_subset_config.clear();
    }

    pub fn has_lb_subset_config(&self) -> bool {
        self.lb_subset_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lb_subset_config(&mut self, v: Cluster_LbSubsetConfig) {
        self.lb_subset_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lb_subset_config(&mut self) -> &mut Cluster_LbSubsetConfig {
        if self.lb_subset_config.is_none() {
            self.lb_subset_config.set_default();
        }
        self.lb_subset_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_lb_subset_config(&mut self) -> Cluster_LbSubsetConfig {
        self.lb_subset_config.take().unwrap_or_else(|| Cluster_LbSubsetConfig::new())
    }

    // .envoy.config.cluster.v3.Cluster.RingHashLbConfig ring_hash_lb_config = 23;


    pub fn get_ring_hash_lb_config(&self) -> &Cluster_RingHashLbConfig {
        match self.lb_config {
            ::std::option::Option::Some(Cluster_oneof_lb_config::ring_hash_lb_config(ref v)) => v,
            _ => <Cluster_RingHashLbConfig as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_ring_hash_lb_config(&mut self) {
        self.lb_config = ::std::option::Option::None;
    }

    pub fn has_ring_hash_lb_config(&self) -> bool {
        match self.lb_config {
            ::std::option::Option::Some(Cluster_oneof_lb_config::ring_hash_lb_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ring_hash_lb_config(&mut self, v: Cluster_RingHashLbConfig) {
        self.lb_config = ::std::option::Option::Some(Cluster_oneof_lb_config::ring_hash_lb_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ring_hash_lb_config(&mut self) -> &mut Cluster_RingHashLbConfig {
        if let ::std::option::Option::Some(Cluster_oneof_lb_config::ring_hash_lb_config(_)) = self.lb_config {
        } else {
            self.lb_config = ::std::option::Option::Some(Cluster_oneof_lb_config::ring_hash_lb_config(Cluster_RingHashLbConfig::new()));
        }
        match self.lb_config {
            ::std::option::Option::Some(Cluster_oneof_lb_config::ring_hash_lb_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ring_hash_lb_config(&mut self) -> Cluster_RingHashLbConfig {
        if self.has_ring_hash_lb_config() {
            match self.lb_config.take() {
                ::std::option::Option::Some(Cluster_oneof_lb_config::ring_hash_lb_config(v)) => v,
                _ => panic!(),
            }
        } else {
            Cluster_RingHashLbConfig::new()
        }
    }

    // .envoy.config.cluster.v3.Cluster.MaglevLbConfig maglev_lb_config = 52;


    pub fn get_maglev_lb_config(&self) -> &Cluster_MaglevLbConfig {
        match self.lb_config {
            ::std::option::Option::Some(Cluster_oneof_lb_config::maglev_lb_config(ref v)) => v,
            _ => <Cluster_MaglevLbConfig as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_maglev_lb_config(&mut self) {
        self.lb_config = ::std::option::Option::None;
    }

    pub fn has_maglev_lb_config(&self) -> bool {
        match self.lb_config {
            ::std::option::Option::Some(Cluster_oneof_lb_config::maglev_lb_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_maglev_lb_config(&mut self, v: Cluster_MaglevLbConfig) {
        self.lb_config = ::std::option::Option::Some(Cluster_oneof_lb_config::maglev_lb_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_maglev_lb_config(&mut self) -> &mut Cluster_MaglevLbConfig {
        if let ::std::option::Option::Some(Cluster_oneof_lb_config::maglev_lb_config(_)) = self.lb_config {
        } else {
            self.lb_config = ::std::option::Option::Some(Cluster_oneof_lb_config::maglev_lb_config(Cluster_MaglevLbConfig::new()));
        }
        match self.lb_config {
            ::std::option::Option::Some(Cluster_oneof_lb_config::maglev_lb_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_maglev_lb_config(&mut self) -> Cluster_MaglevLbConfig {
        if self.has_maglev_lb_config() {
            match self.lb_config.take() {
                ::std::option::Option::Some(Cluster_oneof_lb_config::maglev_lb_config(v)) => v,
                _ => panic!(),
            }
        } else {
            Cluster_MaglevLbConfig::new()
        }
    }

    // .envoy.config.cluster.v3.Cluster.OriginalDstLbConfig original_dst_lb_config = 34;


    pub fn get_original_dst_lb_config(&self) -> &Cluster_OriginalDstLbConfig {
        match self.lb_config {
            ::std::option::Option::Some(Cluster_oneof_lb_config::original_dst_lb_config(ref v)) => v,
            _ => <Cluster_OriginalDstLbConfig as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_original_dst_lb_config(&mut self) {
        self.lb_config = ::std::option::Option::None;
    }

    pub fn has_original_dst_lb_config(&self) -> bool {
        match self.lb_config {
            ::std::option::Option::Some(Cluster_oneof_lb_config::original_dst_lb_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_original_dst_lb_config(&mut self, v: Cluster_OriginalDstLbConfig) {
        self.lb_config = ::std::option::Option::Some(Cluster_oneof_lb_config::original_dst_lb_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_original_dst_lb_config(&mut self) -> &mut Cluster_OriginalDstLbConfig {
        if let ::std::option::Option::Some(Cluster_oneof_lb_config::original_dst_lb_config(_)) = self.lb_config {
        } else {
            self.lb_config = ::std::option::Option::Some(Cluster_oneof_lb_config::original_dst_lb_config(Cluster_OriginalDstLbConfig::new()));
        }
        match self.lb_config {
            ::std::option::Option::Some(Cluster_oneof_lb_config::original_dst_lb_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_original_dst_lb_config(&mut self) -> Cluster_OriginalDstLbConfig {
        if self.has_original_dst_lb_config() {
            match self.lb_config.take() {
                ::std::option::Option::Some(Cluster_oneof_lb_config::original_dst_lb_config(v)) => v,
                _ => panic!(),
            }
        } else {
            Cluster_OriginalDstLbConfig::new()
        }
    }

    // .envoy.config.cluster.v3.Cluster.LeastRequestLbConfig least_request_lb_config = 37;


    pub fn get_least_request_lb_config(&self) -> &Cluster_LeastRequestLbConfig {
        match self.lb_config {
            ::std::option::Option::Some(Cluster_oneof_lb_config::least_request_lb_config(ref v)) => v,
            _ => <Cluster_LeastRequestLbConfig as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_least_request_lb_config(&mut self) {
        self.lb_config = ::std::option::Option::None;
    }

    pub fn has_least_request_lb_config(&self) -> bool {
        match self.lb_config {
            ::std::option::Option::Some(Cluster_oneof_lb_config::least_request_lb_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_least_request_lb_config(&mut self, v: Cluster_LeastRequestLbConfig) {
        self.lb_config = ::std::option::Option::Some(Cluster_oneof_lb_config::least_request_lb_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_least_request_lb_config(&mut self) -> &mut Cluster_LeastRequestLbConfig {
        if let ::std::option::Option::Some(Cluster_oneof_lb_config::least_request_lb_config(_)) = self.lb_config {
        } else {
            self.lb_config = ::std::option::Option::Some(Cluster_oneof_lb_config::least_request_lb_config(Cluster_LeastRequestLbConfig::new()));
        }
        match self.lb_config {
            ::std::option::Option::Some(Cluster_oneof_lb_config::least_request_lb_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_least_request_lb_config(&mut self) -> Cluster_LeastRequestLbConfig {
        if self.has_least_request_lb_config() {
            match self.lb_config.take() {
                ::std::option::Option::Some(Cluster_oneof_lb_config::least_request_lb_config(v)) => v,
                _ => panic!(),
            }
        } else {
            Cluster_LeastRequestLbConfig::new()
        }
    }

    // .envoy.config.cluster.v3.Cluster.CommonLbConfig common_lb_config = 27;


    pub fn get_common_lb_config(&self) -> &Cluster_CommonLbConfig {
        self.common_lb_config.as_ref().unwrap_or_else(|| <Cluster_CommonLbConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_common_lb_config(&mut self) {
        self.common_lb_config.clear();
    }

    pub fn has_common_lb_config(&self) -> bool {
        self.common_lb_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_common_lb_config(&mut self, v: Cluster_CommonLbConfig) {
        self.common_lb_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_common_lb_config(&mut self) -> &mut Cluster_CommonLbConfig {
        if self.common_lb_config.is_none() {
            self.common_lb_config.set_default();
        }
        self.common_lb_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_common_lb_config(&mut self) -> Cluster_CommonLbConfig {
        self.common_lb_config.take().unwrap_or_else(|| Cluster_CommonLbConfig::new())
    }

    // .envoy.config.core.v3.TransportSocket transport_socket = 24;


    pub fn get_transport_socket(&self) -> &super::base::TransportSocket {
        self.transport_socket.as_ref().unwrap_or_else(|| <super::base::TransportSocket as ::protobuf::Message>::default_instance())
    }
    pub fn clear_transport_socket(&mut self) {
        self.transport_socket.clear();
    }

    pub fn has_transport_socket(&self) -> bool {
        self.transport_socket.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transport_socket(&mut self, v: super::base::TransportSocket) {
        self.transport_socket = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transport_socket(&mut self) -> &mut super::base::TransportSocket {
        if self.transport_socket.is_none() {
            self.transport_socket.set_default();
        }
        self.transport_socket.as_mut().unwrap()
    }

    // Take field
    pub fn take_transport_socket(&mut self) -> super::base::TransportSocket {
        self.transport_socket.take().unwrap_or_else(|| super::base::TransportSocket::new())
    }

    // .envoy.config.core.v3.Metadata metadata = 25;


    pub fn get_metadata(&self) -> &super::base::Metadata {
        self.metadata.as_ref().unwrap_or_else(|| <super::base::Metadata as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: super::base::Metadata) {
        self.metadata = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut super::base::Metadata {
        if self.metadata.is_none() {
            self.metadata.set_default();
        }
        self.metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata(&mut self) -> super::base::Metadata {
        self.metadata.take().unwrap_or_else(|| super::base::Metadata::new())
    }

    // .envoy.config.cluster.v3.Cluster.ClusterProtocolSelection protocol_selection = 26;


    pub fn get_protocol_selection(&self) -> Cluster_ClusterProtocolSelection {
        self.protocol_selection
    }
    pub fn clear_protocol_selection(&mut self) {
        self.protocol_selection = Cluster_ClusterProtocolSelection::USE_CONFIGURED_PROTOCOL;
    }

    // Param is passed by value, moved
    pub fn set_protocol_selection(&mut self, v: Cluster_ClusterProtocolSelection) {
        self.protocol_selection = v;
    }

    // .envoy.config.cluster.v3.UpstreamConnectionOptions upstream_connection_options = 30;


    pub fn get_upstream_connection_options(&self) -> &UpstreamConnectionOptions {
        self.upstream_connection_options.as_ref().unwrap_or_else(|| <UpstreamConnectionOptions as ::protobuf::Message>::default_instance())
    }
    pub fn clear_upstream_connection_options(&mut self) {
        self.upstream_connection_options.clear();
    }

    pub fn has_upstream_connection_options(&self) -> bool {
        self.upstream_connection_options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upstream_connection_options(&mut self, v: UpstreamConnectionOptions) {
        self.upstream_connection_options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_upstream_connection_options(&mut self) -> &mut UpstreamConnectionOptions {
        if self.upstream_connection_options.is_none() {
            self.upstream_connection_options.set_default();
        }
        self.upstream_connection_options.as_mut().unwrap()
    }

    // Take field
    pub fn take_upstream_connection_options(&mut self) -> UpstreamConnectionOptions {
        self.upstream_connection_options.take().unwrap_or_else(|| UpstreamConnectionOptions::new())
    }

    // bool close_connections_on_host_health_failure = 31;


    pub fn get_close_connections_on_host_health_failure(&self) -> bool {
        self.close_connections_on_host_health_failure
    }
    pub fn clear_close_connections_on_host_health_failure(&mut self) {
        self.close_connections_on_host_health_failure = false;
    }

    // Param is passed by value, moved
    pub fn set_close_connections_on_host_health_failure(&mut self, v: bool) {
        self.close_connections_on_host_health_failure = v;
    }

    // bool ignore_health_on_host_removal = 32;


    pub fn get_ignore_health_on_host_removal(&self) -> bool {
        self.ignore_health_on_host_removal
    }
    pub fn clear_ignore_health_on_host_removal(&mut self) {
        self.ignore_health_on_host_removal = false;
    }

    // Param is passed by value, moved
    pub fn set_ignore_health_on_host_removal(&mut self, v: bool) {
        self.ignore_health_on_host_removal = v;
    }

    // repeated .envoy.config.cluster.v3.Filter filters = 40;


    pub fn get_filters(&self) -> &[super::filter::Filter] {
        &self.filters
    }
    pub fn clear_filters(&mut self) {
        self.filters.clear();
    }

    // Param is passed by value, moved
    pub fn set_filters(&mut self, v: ::protobuf::RepeatedField<super::filter::Filter>) {
        self.filters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_filters(&mut self) -> &mut ::protobuf::RepeatedField<super::filter::Filter> {
        &mut self.filters
    }

    // Take field
    pub fn take_filters(&mut self) -> ::protobuf::RepeatedField<super::filter::Filter> {
        ::std::mem::replace(&mut self.filters, ::protobuf::RepeatedField::new())
    }

    // .envoy.config.cluster.v3.LoadBalancingPolicy load_balancing_policy = 41;


    pub fn get_load_balancing_policy(&self) -> &LoadBalancingPolicy {
        self.load_balancing_policy.as_ref().unwrap_or_else(|| <LoadBalancingPolicy as ::protobuf::Message>::default_instance())
    }
    pub fn clear_load_balancing_policy(&mut self) {
        self.load_balancing_policy.clear();
    }

    pub fn has_load_balancing_policy(&self) -> bool {
        self.load_balancing_policy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_load_balancing_policy(&mut self, v: LoadBalancingPolicy) {
        self.load_balancing_policy = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_load_balancing_policy(&mut self) -> &mut LoadBalancingPolicy {
        if self.load_balancing_policy.is_none() {
            self.load_balancing_policy.set_default();
        }
        self.load_balancing_policy.as_mut().unwrap()
    }

    // Take field
    pub fn take_load_balancing_policy(&mut self) -> LoadBalancingPolicy {
        self.load_balancing_policy.take().unwrap_or_else(|| LoadBalancingPolicy::new())
    }

    // .envoy.config.core.v3.ConfigSource lrs_server = 42;


    pub fn get_lrs_server(&self) -> &super::config_source::ConfigSource {
        self.lrs_server.as_ref().unwrap_or_else(|| <super::config_source::ConfigSource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_lrs_server(&mut self) {
        self.lrs_server.clear();
    }

    pub fn has_lrs_server(&self) -> bool {
        self.lrs_server.is_some()
    }

    // Param is passed by value, moved
    pub fn set_lrs_server(&mut self, v: super::config_source::ConfigSource) {
        self.lrs_server = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_lrs_server(&mut self) -> &mut super::config_source::ConfigSource {
        if self.lrs_server.is_none() {
            self.lrs_server.set_default();
        }
        self.lrs_server.as_mut().unwrap()
    }

    // Take field
    pub fn take_lrs_server(&mut self) -> super::config_source::ConfigSource {
        self.lrs_server.take().unwrap_or_else(|| super::config_source::ConfigSource::new())
    }

    // bool track_timeout_budgets = 47;


    pub fn get_track_timeout_budgets(&self) -> bool {
        self.track_timeout_budgets
    }
    pub fn clear_track_timeout_budgets(&mut self) {
        self.track_timeout_budgets = false;
    }

    // Param is passed by value, moved
    pub fn set_track_timeout_budgets(&mut self, v: bool) {
        self.track_timeout_budgets = v;
    }

    // .envoy.config.core.v3.TypedExtensionConfig upstream_config = 48;


    pub fn get_upstream_config(&self) -> &super::extension::TypedExtensionConfig {
        self.upstream_config.as_ref().unwrap_or_else(|| <super::extension::TypedExtensionConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_upstream_config(&mut self) {
        self.upstream_config.clear();
    }

    pub fn has_upstream_config(&self) -> bool {
        self.upstream_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_upstream_config(&mut self, v: super::extension::TypedExtensionConfig) {
        self.upstream_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_upstream_config(&mut self) -> &mut super::extension::TypedExtensionConfig {
        if self.upstream_config.is_none() {
            self.upstream_config.set_default();
        }
        self.upstream_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_upstream_config(&mut self) -> super::extension::TypedExtensionConfig {
        self.upstream_config.take().unwrap_or_else(|| super::extension::TypedExtensionConfig::new())
    }

    // .envoy.config.cluster.v3.TrackClusterStats track_cluster_stats = 49;


    pub fn get_track_cluster_stats(&self) -> &TrackClusterStats {
        self.track_cluster_stats.as_ref().unwrap_or_else(|| <TrackClusterStats as ::protobuf::Message>::default_instance())
    }
    pub fn clear_track_cluster_stats(&mut self) {
        self.track_cluster_stats.clear();
    }

    pub fn has_track_cluster_stats(&self) -> bool {
        self.track_cluster_stats.is_some()
    }

    // Param is passed by value, moved
    pub fn set_track_cluster_stats(&mut self, v: TrackClusterStats) {
        self.track_cluster_stats = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_track_cluster_stats(&mut self) -> &mut TrackClusterStats {
        if self.track_cluster_stats.is_none() {
            self.track_cluster_stats.set_default();
        }
        self.track_cluster_stats.as_mut().unwrap()
    }

    // Take field
    pub fn take_track_cluster_stats(&mut self) -> TrackClusterStats {
        self.track_cluster_stats.take().unwrap_or_else(|| TrackClusterStats::new())
    }

    // .envoy.config.cluster.v3.Cluster.PrefetchPolicy prefetch_policy = 50;


    pub fn get_prefetch_policy(&self) -> &Cluster_PrefetchPolicy {
        self.prefetch_policy.as_ref().unwrap_or_else(|| <Cluster_PrefetchPolicy as ::protobuf::Message>::default_instance())
    }
    pub fn clear_prefetch_policy(&mut self) {
        self.prefetch_policy.clear();
    }

    pub fn has_prefetch_policy(&self) -> bool {
        self.prefetch_policy.is_some()
    }

    // Param is passed by value, moved
    pub fn set_prefetch_policy(&mut self, v: Cluster_PrefetchPolicy) {
        self.prefetch_policy = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prefetch_policy(&mut self) -> &mut Cluster_PrefetchPolicy {
        if self.prefetch_policy.is_none() {
            self.prefetch_policy.set_default();
        }
        self.prefetch_policy.as_mut().unwrap()
    }

    // Take field
    pub fn take_prefetch_policy(&mut self) -> Cluster_PrefetchPolicy {
        self.prefetch_policy.take().unwrap_or_else(|| Cluster_PrefetchPolicy::new())
    }

    // bool connection_pool_per_downstream_connection = 51;


    pub fn get_connection_pool_per_downstream_connection(&self) -> bool {
        self.connection_pool_per_downstream_connection
    }
    pub fn clear_connection_pool_per_downstream_connection(&mut self) {
        self.connection_pool_per_downstream_connection = false;
    }

    // Param is passed by value, moved
    pub fn set_connection_pool_per_downstream_connection(&mut self, v: bool) {
        self.connection_pool_per_downstream_connection = v;
    }
}

impl ::protobuf::Message for Cluster {
    fn is_initialized(&self) -> bool {
        for v in &self.transport_socket_matches {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(Cluster_oneof_cluster_discovery_type::cluster_type(ref v)) = self.cluster_discovery_type {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.eds_cluster_config {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.connect_timeout {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.per_connection_buffer_limit_bytes {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.load_assignment {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.health_checks {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.max_requests_per_connection {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.circuit_breakers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.upstream_http_protocol_options {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.common_http_protocol_options {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.http_protocol_options {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.http2_protocol_options {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.dns_refresh_rate {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.dns_failure_refresh_rate {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.dns_resolvers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.outlier_detection {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.cleanup_interval {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.upstream_bind_config {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.lb_subset_config {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(Cluster_oneof_lb_config::ring_hash_lb_config(ref v)) = self.lb_config {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Cluster_oneof_lb_config::maglev_lb_config(ref v)) = self.lb_config {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Cluster_oneof_lb_config::original_dst_lb_config(ref v)) = self.lb_config {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Cluster_oneof_lb_config::least_request_lb_config(ref v)) = self.lb_config {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.common_lb_config {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.transport_socket {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.upstream_connection_options {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.filters {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.load_balancing_policy {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.lrs_server {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.upstream_config {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.track_cluster_stats {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.prefetch_policy {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                43 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.transport_socket_matches)?;
                },
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                28 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.alt_stat_name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cluster_discovery_type = ::std::option::Option::Some(Cluster_oneof_cluster_discovery_type::field_type(is.read_enum()?));
                },
                38 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cluster_discovery_type = ::std::option::Option::Some(Cluster_oneof_cluster_discovery_type::cluster_type(is.read_message()?));
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.eds_cluster_config)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.connect_timeout)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.per_connection_buffer_limit_bytes)?;
                },
                6 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.lb_policy, 6, &mut self.unknown_fields)?
                },
                33 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.load_assignment)?;
                },
                8 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.health_checks)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_requests_per_connection)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.circuit_breakers)?;
                },
                46 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.upstream_http_protocol_options)?;
                },
                29 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.common_http_protocol_options)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.http_protocol_options)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.http2_protocol_options)?;
                },
                36 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(wire_type, is, &mut self.typed_extension_protocol_options)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.dns_refresh_rate)?;
                },
                44 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.dns_failure_refresh_rate)?;
                },
                39 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.respect_dns_ttl = tmp;
                },
                17 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.dns_lookup_family, 17, &mut self.unknown_fields)?
                },
                18 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.dns_resolvers)?;
                },
                45 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.use_tcp_for_dns_lookups = tmp;
                },
                19 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.outlier_detection)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cleanup_interval)?;
                },
                21 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.upstream_bind_config)?;
                },
                22 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.lb_subset_config)?;
                },
                23 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.lb_config = ::std::option::Option::Some(Cluster_oneof_lb_config::ring_hash_lb_config(is.read_message()?));
                },
                52 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.lb_config = ::std::option::Option::Some(Cluster_oneof_lb_config::maglev_lb_config(is.read_message()?));
                },
                34 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.lb_config = ::std::option::Option::Some(Cluster_oneof_lb_config::original_dst_lb_config(is.read_message()?));
                },
                37 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.lb_config = ::std::option::Option::Some(Cluster_oneof_lb_config::least_request_lb_config(is.read_message()?));
                },
                27 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.common_lb_config)?;
                },
                24 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transport_socket)?;
                },
                25 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata)?;
                },
                26 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.protocol_selection, 26, &mut self.unknown_fields)?
                },
                30 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.upstream_connection_options)?;
                },
                31 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.close_connections_on_host_health_failure = tmp;
                },
                32 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.ignore_health_on_host_removal = tmp;
                },
                40 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.filters)?;
                },
                41 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.load_balancing_policy)?;
                },
                42 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.lrs_server)?;
                },
                47 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.track_timeout_budgets = tmp;
                },
                48 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.upstream_config)?;
                },
                49 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.track_cluster_stats)?;
                },
                50 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.prefetch_policy)?;
                },
                51 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.connection_pool_per_downstream_connection = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.transport_socket_matches {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.alt_stat_name.is_empty() {
            my_size += ::protobuf::rt::string_size(28, &self.alt_stat_name);
        }
        if let Some(ref v) = self.eds_cluster_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.connect_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.per_connection_buffer_limit_bytes.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.lb_policy != Cluster_LbPolicy::ROUND_ROBIN {
            my_size += ::protobuf::rt::enum_size(6, self.lb_policy);
        }
        if let Some(ref v) = self.load_assignment.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.health_checks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.max_requests_per_connection.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.circuit_breakers.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.upstream_http_protocol_options.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.common_http_protocol_options.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.http_protocol_options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.http2_protocol_options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(36, &self.typed_extension_protocol_options);
        if let Some(ref v) = self.dns_refresh_rate.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.dns_failure_refresh_rate.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.respect_dns_ttl != false {
            my_size += 3;
        }
        if self.dns_lookup_family != Cluster_DnsLookupFamily::AUTO {
            my_size += ::protobuf::rt::enum_size(17, self.dns_lookup_family);
        }
        for value in &self.dns_resolvers {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.use_tcp_for_dns_lookups != false {
            my_size += 3;
        }
        if let Some(ref v) = self.outlier_detection.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.cleanup_interval.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.upstream_bind_config.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.lb_subset_config.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.common_lb_config.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.transport_socket.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.protocol_selection != Cluster_ClusterProtocolSelection::USE_CONFIGURED_PROTOCOL {
            my_size += ::protobuf::rt::enum_size(26, self.protocol_selection);
        }
        if let Some(ref v) = self.upstream_connection_options.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.close_connections_on_host_health_failure != false {
            my_size += 3;
        }
        if self.ignore_health_on_host_removal != false {
            my_size += 3;
        }
        for value in &self.filters {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.load_balancing_policy.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.lrs_server.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.track_timeout_budgets != false {
            my_size += 3;
        }
        if let Some(ref v) = self.upstream_config.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.track_cluster_stats.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.prefetch_policy.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.connection_pool_per_downstream_connection != false {
            my_size += 3;
        }
        if let ::std::option::Option::Some(ref v) = self.cluster_discovery_type {
            match v {
                &Cluster_oneof_cluster_discovery_type::field_type(v) => {
                    my_size += ::protobuf::rt::enum_size(2, v);
                },
                &Cluster_oneof_cluster_discovery_type::cluster_type(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.lb_config {
            match v {
                &Cluster_oneof_lb_config::ring_hash_lb_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Cluster_oneof_lb_config::maglev_lb_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Cluster_oneof_lb_config::original_dst_lb_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Cluster_oneof_lb_config::least_request_lb_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.transport_socket_matches {
            os.write_tag(43, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.alt_stat_name.is_empty() {
            os.write_string(28, &self.alt_stat_name)?;
        }
        if let Some(ref v) = self.eds_cluster_config.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.connect_timeout.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.per_connection_buffer_limit_bytes.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.lb_policy != Cluster_LbPolicy::ROUND_ROBIN {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(&self.lb_policy))?;
        }
        if let Some(ref v) = self.load_assignment.as_ref() {
            os.write_tag(33, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.health_checks {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.max_requests_per_connection.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.circuit_breakers.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.upstream_http_protocol_options.as_ref() {
            os.write_tag(46, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.common_http_protocol_options.as_ref() {
            os.write_tag(29, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.http_protocol_options.as_ref() {
            os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.http2_protocol_options.as_ref() {
            os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(36, &self.typed_extension_protocol_options, os)?;
        if let Some(ref v) = self.dns_refresh_rate.as_ref() {
            os.write_tag(16, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.dns_failure_refresh_rate.as_ref() {
            os.write_tag(44, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.respect_dns_ttl != false {
            os.write_bool(39, self.respect_dns_ttl)?;
        }
        if self.dns_lookup_family != Cluster_DnsLookupFamily::AUTO {
            os.write_enum(17, ::protobuf::ProtobufEnum::value(&self.dns_lookup_family))?;
        }
        for v in &self.dns_resolvers {
            os.write_tag(18, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.use_tcp_for_dns_lookups != false {
            os.write_bool(45, self.use_tcp_for_dns_lookups)?;
        }
        if let Some(ref v) = self.outlier_detection.as_ref() {
            os.write_tag(19, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.cleanup_interval.as_ref() {
            os.write_tag(20, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.upstream_bind_config.as_ref() {
            os.write_tag(21, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.lb_subset_config.as_ref() {
            os.write_tag(22, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.common_lb_config.as_ref() {
            os.write_tag(27, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.transport_socket.as_ref() {
            os.write_tag(24, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.metadata.as_ref() {
            os.write_tag(25, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.protocol_selection != Cluster_ClusterProtocolSelection::USE_CONFIGURED_PROTOCOL {
            os.write_enum(26, ::protobuf::ProtobufEnum::value(&self.protocol_selection))?;
        }
        if let Some(ref v) = self.upstream_connection_options.as_ref() {
            os.write_tag(30, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.close_connections_on_host_health_failure != false {
            os.write_bool(31, self.close_connections_on_host_health_failure)?;
        }
        if self.ignore_health_on_host_removal != false {
            os.write_bool(32, self.ignore_health_on_host_removal)?;
        }
        for v in &self.filters {
            os.write_tag(40, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.load_balancing_policy.as_ref() {
            os.write_tag(41, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.lrs_server.as_ref() {
            os.write_tag(42, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.track_timeout_budgets != false {
            os.write_bool(47, self.track_timeout_budgets)?;
        }
        if let Some(ref v) = self.upstream_config.as_ref() {
            os.write_tag(48, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.track_cluster_stats.as_ref() {
            os.write_tag(49, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.prefetch_policy.as_ref() {
            os.write_tag(50, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.connection_pool_per_downstream_connection != false {
            os.write_bool(51, self.connection_pool_per_downstream_connection)?;
        }
        if let ::std::option::Option::Some(ref v) = self.cluster_discovery_type {
            match v {
                &Cluster_oneof_cluster_discovery_type::field_type(v) => {
                    os.write_enum(2, ::protobuf::ProtobufEnum::value(&v))?;
                },
                &Cluster_oneof_cluster_discovery_type::cluster_type(ref v) => {
                    os.write_tag(38, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        if let ::std::option::Option::Some(ref v) = self.lb_config {
            match v {
                &Cluster_oneof_lb_config::ring_hash_lb_config(ref v) => {
                    os.write_tag(23, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Cluster_oneof_lb_config::maglev_lb_config(ref v) => {
                    os.write_tag(52, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Cluster_oneof_lb_config::original_dst_lb_config(ref v) => {
                    os.write_tag(34, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Cluster_oneof_lb_config::least_request_lb_config(ref v) => {
                    os.write_tag(37, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cluster {
        Cluster::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cluster_TransportSocketMatch>>(
                "transport_socket_matches",
                |m: &Cluster| { &m.transport_socket_matches },
                |m: &mut Cluster| { &mut m.transport_socket_matches },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Cluster| { &m.name },
                |m: &mut Cluster| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "alt_stat_name",
                |m: &Cluster| { &m.alt_stat_name },
                |m: &mut Cluster| { &mut m.alt_stat_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_enum_accessor::<_, Cluster_DiscoveryType>(
                "type",
                Cluster::has_field_type,
                Cluster::get_field_type,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Cluster_CustomClusterType>(
                "cluster_type",
                Cluster::has_cluster_type,
                Cluster::get_cluster_type,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cluster_EdsClusterConfig>>(
                "eds_cluster_config",
                |m: &Cluster| { &m.eds_cluster_config },
                |m: &mut Cluster| { &mut m.eds_cluster_config },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "connect_timeout",
                |m: &Cluster| { &m.connect_timeout },
                |m: &mut Cluster| { &mut m.connect_timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "per_connection_buffer_limit_bytes",
                |m: &Cluster| { &m.per_connection_buffer_limit_bytes },
                |m: &mut Cluster| { &mut m.per_connection_buffer_limit_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Cluster_LbPolicy>>(
                "lb_policy",
                |m: &Cluster| { &m.lb_policy },
                |m: &mut Cluster| { &mut m.lb_policy },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::endpoint::ClusterLoadAssignment>>(
                "load_assignment",
                |m: &Cluster| { &m.load_assignment },
                |m: &mut Cluster| { &mut m.load_assignment },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::health_check::HealthCheck>>(
                "health_checks",
                |m: &Cluster| { &m.health_checks },
                |m: &mut Cluster| { &mut m.health_checks },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "max_requests_per_connection",
                |m: &Cluster| { &m.max_requests_per_connection },
                |m: &mut Cluster| { &mut m.max_requests_per_connection },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::circuit_breaker::CircuitBreakers>>(
                "circuit_breakers",
                |m: &Cluster| { &m.circuit_breakers },
                |m: &mut Cluster| { &mut m.circuit_breakers },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::protocol::UpstreamHttpProtocolOptions>>(
                "upstream_http_protocol_options",
                |m: &Cluster| { &m.upstream_http_protocol_options },
                |m: &mut Cluster| { &mut m.upstream_http_protocol_options },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::protocol::HttpProtocolOptions>>(
                "common_http_protocol_options",
                |m: &Cluster| { &m.common_http_protocol_options },
                |m: &mut Cluster| { &mut m.common_http_protocol_options },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::protocol::Http1ProtocolOptions>>(
                "http_protocol_options",
                |m: &Cluster| { &m.http_protocol_options },
                |m: &mut Cluster| { &mut m.http_protocol_options },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::protocol::Http2ProtocolOptions>>(
                "http2_protocol_options",
                |m: &Cluster| { &m.http2_protocol_options },
                |m: &mut Cluster| { &mut m.http2_protocol_options },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "typed_extension_protocol_options",
                |m: &Cluster| { &m.typed_extension_protocol_options },
                |m: &mut Cluster| { &mut m.typed_extension_protocol_options },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "dns_refresh_rate",
                |m: &Cluster| { &m.dns_refresh_rate },
                |m: &mut Cluster| { &mut m.dns_refresh_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cluster_RefreshRate>>(
                "dns_failure_refresh_rate",
                |m: &Cluster| { &m.dns_failure_refresh_rate },
                |m: &mut Cluster| { &mut m.dns_failure_refresh_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "respect_dns_ttl",
                |m: &Cluster| { &m.respect_dns_ttl },
                |m: &mut Cluster| { &mut m.respect_dns_ttl },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Cluster_DnsLookupFamily>>(
                "dns_lookup_family",
                |m: &Cluster| { &m.dns_lookup_family },
                |m: &mut Cluster| { &mut m.dns_lookup_family },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::address::Address>>(
                "dns_resolvers",
                |m: &Cluster| { &m.dns_resolvers },
                |m: &mut Cluster| { &mut m.dns_resolvers },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "use_tcp_for_dns_lookups",
                |m: &Cluster| { &m.use_tcp_for_dns_lookups },
                |m: &mut Cluster| { &mut m.use_tcp_for_dns_lookups },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::outlier_detection::OutlierDetection>>(
                "outlier_detection",
                |m: &Cluster| { &m.outlier_detection },
                |m: &mut Cluster| { &mut m.outlier_detection },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "cleanup_interval",
                |m: &Cluster| { &m.cleanup_interval },
                |m: &mut Cluster| { &mut m.cleanup_interval },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::address::BindConfig>>(
                "upstream_bind_config",
                |m: &Cluster| { &m.upstream_bind_config },
                |m: &mut Cluster| { &mut m.upstream_bind_config },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cluster_LbSubsetConfig>>(
                "lb_subset_config",
                |m: &Cluster| { &m.lb_subset_config },
                |m: &mut Cluster| { &mut m.lb_subset_config },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Cluster_RingHashLbConfig>(
                "ring_hash_lb_config",
                Cluster::has_ring_hash_lb_config,
                Cluster::get_ring_hash_lb_config,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Cluster_MaglevLbConfig>(
                "maglev_lb_config",
                Cluster::has_maglev_lb_config,
                Cluster::get_maglev_lb_config,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Cluster_OriginalDstLbConfig>(
                "original_dst_lb_config",
                Cluster::has_original_dst_lb_config,
                Cluster::get_original_dst_lb_config,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Cluster_LeastRequestLbConfig>(
                "least_request_lb_config",
                Cluster::has_least_request_lb_config,
                Cluster::get_least_request_lb_config,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cluster_CommonLbConfig>>(
                "common_lb_config",
                |m: &Cluster| { &m.common_lb_config },
                |m: &mut Cluster| { &mut m.common_lb_config },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::TransportSocket>>(
                "transport_socket",
                |m: &Cluster| { &m.transport_socket },
                |m: &mut Cluster| { &mut m.transport_socket },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Metadata>>(
                "metadata",
                |m: &Cluster| { &m.metadata },
                |m: &mut Cluster| { &mut m.metadata },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Cluster_ClusterProtocolSelection>>(
                "protocol_selection",
                |m: &Cluster| { &m.protocol_selection },
                |m: &mut Cluster| { &mut m.protocol_selection },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<UpstreamConnectionOptions>>(
                "upstream_connection_options",
                |m: &Cluster| { &m.upstream_connection_options },
                |m: &mut Cluster| { &mut m.upstream_connection_options },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "close_connections_on_host_health_failure",
                |m: &Cluster| { &m.close_connections_on_host_health_failure },
                |m: &mut Cluster| { &mut m.close_connections_on_host_health_failure },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "ignore_health_on_host_removal",
                |m: &Cluster| { &m.ignore_health_on_host_removal },
                |m: &mut Cluster| { &mut m.ignore_health_on_host_removal },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::filter::Filter>>(
                "filters",
                |m: &Cluster| { &m.filters },
                |m: &mut Cluster| { &mut m.filters },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LoadBalancingPolicy>>(
                "load_balancing_policy",
                |m: &Cluster| { &m.load_balancing_policy },
                |m: &mut Cluster| { &mut m.load_balancing_policy },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::config_source::ConfigSource>>(
                "lrs_server",
                |m: &Cluster| { &m.lrs_server },
                |m: &mut Cluster| { &mut m.lrs_server },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "track_timeout_budgets",
                |m: &Cluster| { &m.track_timeout_budgets },
                |m: &mut Cluster| { &mut m.track_timeout_budgets },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::extension::TypedExtensionConfig>>(
                "upstream_config",
                |m: &Cluster| { &m.upstream_config },
                |m: &mut Cluster| { &mut m.upstream_config },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TrackClusterStats>>(
                "track_cluster_stats",
                |m: &Cluster| { &m.track_cluster_stats },
                |m: &mut Cluster| { &mut m.track_cluster_stats },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cluster_PrefetchPolicy>>(
                "prefetch_policy",
                |m: &Cluster| { &m.prefetch_policy },
                |m: &mut Cluster| { &mut m.prefetch_policy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "connection_pool_per_downstream_connection",
                |m: &Cluster| { &m.connection_pool_per_downstream_connection },
                |m: &mut Cluster| { &mut m.connection_pool_per_downstream_connection },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cluster>(
                "Cluster",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cluster {
        static instance: ::protobuf::rt::LazyV2<Cluster> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cluster::new)
    }
}

impl ::protobuf::Clear for Cluster {
    fn clear(&mut self) {
        self.transport_socket_matches.clear();
        self.name.clear();
        self.alt_stat_name.clear();
        self.cluster_discovery_type = ::std::option::Option::None;
        self.cluster_discovery_type = ::std::option::Option::None;
        self.eds_cluster_config.clear();
        self.connect_timeout.clear();
        self.per_connection_buffer_limit_bytes.clear();
        self.lb_policy = Cluster_LbPolicy::ROUND_ROBIN;
        self.load_assignment.clear();
        self.health_checks.clear();
        self.max_requests_per_connection.clear();
        self.circuit_breakers.clear();
        self.upstream_http_protocol_options.clear();
        self.common_http_protocol_options.clear();
        self.http_protocol_options.clear();
        self.http2_protocol_options.clear();
        self.typed_extension_protocol_options.clear();
        self.dns_refresh_rate.clear();
        self.dns_failure_refresh_rate.clear();
        self.respect_dns_ttl = false;
        self.dns_lookup_family = Cluster_DnsLookupFamily::AUTO;
        self.dns_resolvers.clear();
        self.use_tcp_for_dns_lookups = false;
        self.outlier_detection.clear();
        self.cleanup_interval.clear();
        self.upstream_bind_config.clear();
        self.lb_subset_config.clear();
        self.lb_config = ::std::option::Option::None;
        self.lb_config = ::std::option::Option::None;
        self.lb_config = ::std::option::Option::None;
        self.lb_config = ::std::option::Option::None;
        self.common_lb_config.clear();
        self.transport_socket.clear();
        self.metadata.clear();
        self.protocol_selection = Cluster_ClusterProtocolSelection::USE_CONFIGURED_PROTOCOL;
        self.upstream_connection_options.clear();
        self.close_connections_on_host_health_failure = false;
        self.ignore_health_on_host_removal = false;
        self.filters.clear();
        self.load_balancing_policy.clear();
        self.lrs_server.clear();
        self.track_timeout_budgets = false;
        self.upstream_config.clear();
        self.track_cluster_stats.clear();
        self.prefetch_policy.clear();
        self.connection_pool_per_downstream_connection = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cluster {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Cluster_TransportSocketMatch {
    // message fields
    pub name: ::std::string::String,
    pub field_match: ::protobuf::SingularPtrField<::protobuf::well_known_types::Struct>,
    pub transport_socket: ::protobuf::SingularPtrField<super::base::TransportSocket>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cluster_TransportSocketMatch {
    fn default() -> &'a Cluster_TransportSocketMatch {
        <Cluster_TransportSocketMatch as ::protobuf::Message>::default_instance()
    }
}

impl Cluster_TransportSocketMatch {
    pub fn new() -> Cluster_TransportSocketMatch {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .google.protobuf.Struct match = 2;


    pub fn get_field_match(&self) -> &::protobuf::well_known_types::Struct {
        self.field_match.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Struct as ::protobuf::Message>::default_instance())
    }
    pub fn clear_field_match(&mut self) {
        self.field_match.clear();
    }

    pub fn has_field_match(&self) -> bool {
        self.field_match.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_match(&mut self, v: ::protobuf::well_known_types::Struct) {
        self.field_match = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_match(&mut self) -> &mut ::protobuf::well_known_types::Struct {
        if self.field_match.is_none() {
            self.field_match.set_default();
        }
        self.field_match.as_mut().unwrap()
    }

    // Take field
    pub fn take_field_match(&mut self) -> ::protobuf::well_known_types::Struct {
        self.field_match.take().unwrap_or_else(|| ::protobuf::well_known_types::Struct::new())
    }

    // .envoy.config.core.v3.TransportSocket transport_socket = 3;


    pub fn get_transport_socket(&self) -> &super::base::TransportSocket {
        self.transport_socket.as_ref().unwrap_or_else(|| <super::base::TransportSocket as ::protobuf::Message>::default_instance())
    }
    pub fn clear_transport_socket(&mut self) {
        self.transport_socket.clear();
    }

    pub fn has_transport_socket(&self) -> bool {
        self.transport_socket.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transport_socket(&mut self, v: super::base::TransportSocket) {
        self.transport_socket = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transport_socket(&mut self) -> &mut super::base::TransportSocket {
        if self.transport_socket.is_none() {
            self.transport_socket.set_default();
        }
        self.transport_socket.as_mut().unwrap()
    }

    // Take field
    pub fn take_transport_socket(&mut self) -> super::base::TransportSocket {
        self.transport_socket.take().unwrap_or_else(|| super::base::TransportSocket::new())
    }
}

impl ::protobuf::Message for Cluster_TransportSocketMatch {
    fn is_initialized(&self) -> bool {
        for v in &self.field_match {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.transport_socket {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.field_match)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transport_socket)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(ref v) = self.field_match.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.transport_socket.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(ref v) = self.field_match.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.transport_socket.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cluster_TransportSocketMatch {
        Cluster_TransportSocketMatch::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Cluster_TransportSocketMatch| { &m.name },
                |m: &mut Cluster_TransportSocketMatch| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Struct>>(
                "match",
                |m: &Cluster_TransportSocketMatch| { &m.field_match },
                |m: &mut Cluster_TransportSocketMatch| { &mut m.field_match },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::TransportSocket>>(
                "transport_socket",
                |m: &Cluster_TransportSocketMatch| { &m.transport_socket },
                |m: &mut Cluster_TransportSocketMatch| { &mut m.transport_socket },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cluster_TransportSocketMatch>(
                "Cluster.TransportSocketMatch",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cluster_TransportSocketMatch {
        static instance: ::protobuf::rt::LazyV2<Cluster_TransportSocketMatch> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cluster_TransportSocketMatch::new)
    }
}

impl ::protobuf::Clear for Cluster_TransportSocketMatch {
    fn clear(&mut self) {
        self.name.clear();
        self.field_match.clear();
        self.transport_socket.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cluster_TransportSocketMatch {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster_TransportSocketMatch {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Cluster_CustomClusterType {
    // message fields
    pub name: ::std::string::String,
    pub typed_config: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cluster_CustomClusterType {
    fn default() -> &'a Cluster_CustomClusterType {
        <Cluster_CustomClusterType as ::protobuf::Message>::default_instance()
    }
}

impl Cluster_CustomClusterType {
    pub fn new() -> Cluster_CustomClusterType {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .google.protobuf.Any typed_config = 2;


    pub fn get_typed_config(&self) -> &::protobuf::well_known_types::Any {
        self.typed_config.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_typed_config(&mut self) {
        self.typed_config.clear();
    }

    pub fn has_typed_config(&self) -> bool {
        self.typed_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_typed_config(&mut self, v: ::protobuf::well_known_types::Any) {
        self.typed_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_typed_config(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.typed_config.is_none() {
            self.typed_config.set_default();
        }
        self.typed_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_typed_config(&mut self) -> ::protobuf::well_known_types::Any {
        self.typed_config.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }
}

impl ::protobuf::Message for Cluster_CustomClusterType {
    fn is_initialized(&self) -> bool {
        for v in &self.typed_config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.typed_config)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(ref v) = self.typed_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(ref v) = self.typed_config.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cluster_CustomClusterType {
        Cluster_CustomClusterType::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Cluster_CustomClusterType| { &m.name },
                |m: &mut Cluster_CustomClusterType| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "typed_config",
                |m: &Cluster_CustomClusterType| { &m.typed_config },
                |m: &mut Cluster_CustomClusterType| { &mut m.typed_config },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cluster_CustomClusterType>(
                "Cluster.CustomClusterType",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cluster_CustomClusterType {
        static instance: ::protobuf::rt::LazyV2<Cluster_CustomClusterType> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cluster_CustomClusterType::new)
    }
}

impl ::protobuf::Clear for Cluster_CustomClusterType {
    fn clear(&mut self) {
        self.name.clear();
        self.typed_config.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cluster_CustomClusterType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster_CustomClusterType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Cluster_EdsClusterConfig {
    // message fields
    pub eds_config: ::protobuf::SingularPtrField<super::config_source::ConfigSource>,
    pub service_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cluster_EdsClusterConfig {
    fn default() -> &'a Cluster_EdsClusterConfig {
        <Cluster_EdsClusterConfig as ::protobuf::Message>::default_instance()
    }
}

impl Cluster_EdsClusterConfig {
    pub fn new() -> Cluster_EdsClusterConfig {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.ConfigSource eds_config = 1;


    pub fn get_eds_config(&self) -> &super::config_source::ConfigSource {
        self.eds_config.as_ref().unwrap_or_else(|| <super::config_source::ConfigSource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_eds_config(&mut self) {
        self.eds_config.clear();
    }

    pub fn has_eds_config(&self) -> bool {
        self.eds_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_eds_config(&mut self, v: super::config_source::ConfigSource) {
        self.eds_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_eds_config(&mut self) -> &mut super::config_source::ConfigSource {
        if self.eds_config.is_none() {
            self.eds_config.set_default();
        }
        self.eds_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_eds_config(&mut self) -> super::config_source::ConfigSource {
        self.eds_config.take().unwrap_or_else(|| super::config_source::ConfigSource::new())
    }

    // string service_name = 2;


    pub fn get_service_name(&self) -> &str {
        &self.service_name
    }
    pub fn clear_service_name(&mut self) {
        self.service_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_service_name(&mut self, v: ::std::string::String) {
        self.service_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service_name(&mut self) -> &mut ::std::string::String {
        &mut self.service_name
    }

    // Take field
    pub fn take_service_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.service_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Cluster_EdsClusterConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.eds_config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.eds_config)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.service_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.eds_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.service_name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.service_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.eds_config.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.service_name.is_empty() {
            os.write_string(2, &self.service_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cluster_EdsClusterConfig {
        Cluster_EdsClusterConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::config_source::ConfigSource>>(
                "eds_config",
                |m: &Cluster_EdsClusterConfig| { &m.eds_config },
                |m: &mut Cluster_EdsClusterConfig| { &mut m.eds_config },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "service_name",
                |m: &Cluster_EdsClusterConfig| { &m.service_name },
                |m: &mut Cluster_EdsClusterConfig| { &mut m.service_name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cluster_EdsClusterConfig>(
                "Cluster.EdsClusterConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cluster_EdsClusterConfig {
        static instance: ::protobuf::rt::LazyV2<Cluster_EdsClusterConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cluster_EdsClusterConfig::new)
    }
}

impl ::protobuf::Clear for Cluster_EdsClusterConfig {
    fn clear(&mut self) {
        self.eds_config.clear();
        self.service_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cluster_EdsClusterConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster_EdsClusterConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Cluster_LbSubsetConfig {
    // message fields
    pub fallback_policy: Cluster_LbSubsetConfig_LbSubsetFallbackPolicy,
    pub default_subset: ::protobuf::SingularPtrField<::protobuf::well_known_types::Struct>,
    pub subset_selectors: ::protobuf::RepeatedField<Cluster_LbSubsetConfig_LbSubsetSelector>,
    pub locality_weight_aware: bool,
    pub scale_locality_weight: bool,
    pub panic_mode_any: bool,
    pub list_as_any: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cluster_LbSubsetConfig {
    fn default() -> &'a Cluster_LbSubsetConfig {
        <Cluster_LbSubsetConfig as ::protobuf::Message>::default_instance()
    }
}

impl Cluster_LbSubsetConfig {
    pub fn new() -> Cluster_LbSubsetConfig {
        ::std::default::Default::default()
    }

    // .envoy.config.cluster.v3.Cluster.LbSubsetConfig.LbSubsetFallbackPolicy fallback_policy = 1;


    pub fn get_fallback_policy(&self) -> Cluster_LbSubsetConfig_LbSubsetFallbackPolicy {
        self.fallback_policy
    }
    pub fn clear_fallback_policy(&mut self) {
        self.fallback_policy = Cluster_LbSubsetConfig_LbSubsetFallbackPolicy::NO_FALLBACK;
    }

    // Param is passed by value, moved
    pub fn set_fallback_policy(&mut self, v: Cluster_LbSubsetConfig_LbSubsetFallbackPolicy) {
        self.fallback_policy = v;
    }

    // .google.protobuf.Struct default_subset = 2;


    pub fn get_default_subset(&self) -> &::protobuf::well_known_types::Struct {
        self.default_subset.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Struct as ::protobuf::Message>::default_instance())
    }
    pub fn clear_default_subset(&mut self) {
        self.default_subset.clear();
    }

    pub fn has_default_subset(&self) -> bool {
        self.default_subset.is_some()
    }

    // Param is passed by value, moved
    pub fn set_default_subset(&mut self, v: ::protobuf::well_known_types::Struct) {
        self.default_subset = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_default_subset(&mut self) -> &mut ::protobuf::well_known_types::Struct {
        if self.default_subset.is_none() {
            self.default_subset.set_default();
        }
        self.default_subset.as_mut().unwrap()
    }

    // Take field
    pub fn take_default_subset(&mut self) -> ::protobuf::well_known_types::Struct {
        self.default_subset.take().unwrap_or_else(|| ::protobuf::well_known_types::Struct::new())
    }

    // repeated .envoy.config.cluster.v3.Cluster.LbSubsetConfig.LbSubsetSelector subset_selectors = 3;


    pub fn get_subset_selectors(&self) -> &[Cluster_LbSubsetConfig_LbSubsetSelector] {
        &self.subset_selectors
    }
    pub fn clear_subset_selectors(&mut self) {
        self.subset_selectors.clear();
    }

    // Param is passed by value, moved
    pub fn set_subset_selectors(&mut self, v: ::protobuf::RepeatedField<Cluster_LbSubsetConfig_LbSubsetSelector>) {
        self.subset_selectors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_subset_selectors(&mut self) -> &mut ::protobuf::RepeatedField<Cluster_LbSubsetConfig_LbSubsetSelector> {
        &mut self.subset_selectors
    }

    // Take field
    pub fn take_subset_selectors(&mut self) -> ::protobuf::RepeatedField<Cluster_LbSubsetConfig_LbSubsetSelector> {
        ::std::mem::replace(&mut self.subset_selectors, ::protobuf::RepeatedField::new())
    }

    // bool locality_weight_aware = 4;


    pub fn get_locality_weight_aware(&self) -> bool {
        self.locality_weight_aware
    }
    pub fn clear_locality_weight_aware(&mut self) {
        self.locality_weight_aware = false;
    }

    // Param is passed by value, moved
    pub fn set_locality_weight_aware(&mut self, v: bool) {
        self.locality_weight_aware = v;
    }

    // bool scale_locality_weight = 5;


    pub fn get_scale_locality_weight(&self) -> bool {
        self.scale_locality_weight
    }
    pub fn clear_scale_locality_weight(&mut self) {
        self.scale_locality_weight = false;
    }

    // Param is passed by value, moved
    pub fn set_scale_locality_weight(&mut self, v: bool) {
        self.scale_locality_weight = v;
    }

    // bool panic_mode_any = 6;


    pub fn get_panic_mode_any(&self) -> bool {
        self.panic_mode_any
    }
    pub fn clear_panic_mode_any(&mut self) {
        self.panic_mode_any = false;
    }

    // Param is passed by value, moved
    pub fn set_panic_mode_any(&mut self, v: bool) {
        self.panic_mode_any = v;
    }

    // bool list_as_any = 7;


    pub fn get_list_as_any(&self) -> bool {
        self.list_as_any
    }
    pub fn clear_list_as_any(&mut self) {
        self.list_as_any = false;
    }

    // Param is passed by value, moved
    pub fn set_list_as_any(&mut self, v: bool) {
        self.list_as_any = v;
    }
}

impl ::protobuf::Message for Cluster_LbSubsetConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.default_subset {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.subset_selectors {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.fallback_policy, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.default_subset)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.subset_selectors)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.locality_weight_aware = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.scale_locality_weight = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.panic_mode_any = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.list_as_any = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.fallback_policy != Cluster_LbSubsetConfig_LbSubsetFallbackPolicy::NO_FALLBACK {
            my_size += ::protobuf::rt::enum_size(1, self.fallback_policy);
        }
        if let Some(ref v) = self.default_subset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.subset_selectors {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.locality_weight_aware != false {
            my_size += 2;
        }
        if self.scale_locality_weight != false {
            my_size += 2;
        }
        if self.panic_mode_any != false {
            my_size += 2;
        }
        if self.list_as_any != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.fallback_policy != Cluster_LbSubsetConfig_LbSubsetFallbackPolicy::NO_FALLBACK {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.fallback_policy))?;
        }
        if let Some(ref v) = self.default_subset.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.subset_selectors {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.locality_weight_aware != false {
            os.write_bool(4, self.locality_weight_aware)?;
        }
        if self.scale_locality_weight != false {
            os.write_bool(5, self.scale_locality_weight)?;
        }
        if self.panic_mode_any != false {
            os.write_bool(6, self.panic_mode_any)?;
        }
        if self.list_as_any != false {
            os.write_bool(7, self.list_as_any)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cluster_LbSubsetConfig {
        Cluster_LbSubsetConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Cluster_LbSubsetConfig_LbSubsetFallbackPolicy>>(
                "fallback_policy",
                |m: &Cluster_LbSubsetConfig| { &m.fallback_policy },
                |m: &mut Cluster_LbSubsetConfig| { &mut m.fallback_policy },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Struct>>(
                "default_subset",
                |m: &Cluster_LbSubsetConfig| { &m.default_subset },
                |m: &mut Cluster_LbSubsetConfig| { &mut m.default_subset },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cluster_LbSubsetConfig_LbSubsetSelector>>(
                "subset_selectors",
                |m: &Cluster_LbSubsetConfig| { &m.subset_selectors },
                |m: &mut Cluster_LbSubsetConfig| { &mut m.subset_selectors },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "locality_weight_aware",
                |m: &Cluster_LbSubsetConfig| { &m.locality_weight_aware },
                |m: &mut Cluster_LbSubsetConfig| { &mut m.locality_weight_aware },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "scale_locality_weight",
                |m: &Cluster_LbSubsetConfig| { &m.scale_locality_weight },
                |m: &mut Cluster_LbSubsetConfig| { &mut m.scale_locality_weight },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "panic_mode_any",
                |m: &Cluster_LbSubsetConfig| { &m.panic_mode_any },
                |m: &mut Cluster_LbSubsetConfig| { &mut m.panic_mode_any },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "list_as_any",
                |m: &Cluster_LbSubsetConfig| { &m.list_as_any },
                |m: &mut Cluster_LbSubsetConfig| { &mut m.list_as_any },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cluster_LbSubsetConfig>(
                "Cluster.LbSubsetConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cluster_LbSubsetConfig {
        static instance: ::protobuf::rt::LazyV2<Cluster_LbSubsetConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cluster_LbSubsetConfig::new)
    }
}

impl ::protobuf::Clear for Cluster_LbSubsetConfig {
    fn clear(&mut self) {
        self.fallback_policy = Cluster_LbSubsetConfig_LbSubsetFallbackPolicy::NO_FALLBACK;
        self.default_subset.clear();
        self.subset_selectors.clear();
        self.locality_weight_aware = false;
        self.scale_locality_weight = false;
        self.panic_mode_any = false;
        self.list_as_any = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cluster_LbSubsetConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster_LbSubsetConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Cluster_LbSubsetConfig_LbSubsetSelector {
    // message fields
    pub keys: ::protobuf::RepeatedField<::std::string::String>,
    pub single_host_per_subset: bool,
    pub fallback_policy: Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy,
    pub fallback_keys_subset: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cluster_LbSubsetConfig_LbSubsetSelector {
    fn default() -> &'a Cluster_LbSubsetConfig_LbSubsetSelector {
        <Cluster_LbSubsetConfig_LbSubsetSelector as ::protobuf::Message>::default_instance()
    }
}

impl Cluster_LbSubsetConfig_LbSubsetSelector {
    pub fn new() -> Cluster_LbSubsetConfig_LbSubsetSelector {
        ::std::default::Default::default()
    }

    // repeated string keys = 1;


    pub fn get_keys(&self) -> &[::std::string::String] {
        &self.keys
    }
    pub fn clear_keys(&mut self) {
        self.keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_keys(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_keys(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.keys
    }

    // Take field
    pub fn take_keys(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.keys, ::protobuf::RepeatedField::new())
    }

    // bool single_host_per_subset = 4;


    pub fn get_single_host_per_subset(&self) -> bool {
        self.single_host_per_subset
    }
    pub fn clear_single_host_per_subset(&mut self) {
        self.single_host_per_subset = false;
    }

    // Param is passed by value, moved
    pub fn set_single_host_per_subset(&mut self, v: bool) {
        self.single_host_per_subset = v;
    }

    // .envoy.config.cluster.v3.Cluster.LbSubsetConfig.LbSubsetSelector.LbSubsetSelectorFallbackPolicy fallback_policy = 2;


    pub fn get_fallback_policy(&self) -> Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy {
        self.fallback_policy
    }
    pub fn clear_fallback_policy(&mut self) {
        self.fallback_policy = Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy::NOT_DEFINED;
    }

    // Param is passed by value, moved
    pub fn set_fallback_policy(&mut self, v: Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy) {
        self.fallback_policy = v;
    }

    // repeated string fallback_keys_subset = 3;


    pub fn get_fallback_keys_subset(&self) -> &[::std::string::String] {
        &self.fallback_keys_subset
    }
    pub fn clear_fallback_keys_subset(&mut self) {
        self.fallback_keys_subset.clear();
    }

    // Param is passed by value, moved
    pub fn set_fallback_keys_subset(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.fallback_keys_subset = v;
    }

    // Mutable pointer to the field.
    pub fn mut_fallback_keys_subset(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.fallback_keys_subset
    }

    // Take field
    pub fn take_fallback_keys_subset(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.fallback_keys_subset, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Cluster_LbSubsetConfig_LbSubsetSelector {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.keys)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.single_host_per_subset = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.fallback_policy, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.fallback_keys_subset)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.keys {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        if self.single_host_per_subset != false {
            my_size += 2;
        }
        if self.fallback_policy != Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy::NOT_DEFINED {
            my_size += ::protobuf::rt::enum_size(2, self.fallback_policy);
        }
        for value in &self.fallback_keys_subset {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.keys {
            os.write_string(1, &v)?;
        };
        if self.single_host_per_subset != false {
            os.write_bool(4, self.single_host_per_subset)?;
        }
        if self.fallback_policy != Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy::NOT_DEFINED {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.fallback_policy))?;
        }
        for v in &self.fallback_keys_subset {
            os.write_string(3, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cluster_LbSubsetConfig_LbSubsetSelector {
        Cluster_LbSubsetConfig_LbSubsetSelector::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "keys",
                |m: &Cluster_LbSubsetConfig_LbSubsetSelector| { &m.keys },
                |m: &mut Cluster_LbSubsetConfig_LbSubsetSelector| { &mut m.keys },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "single_host_per_subset",
                |m: &Cluster_LbSubsetConfig_LbSubsetSelector| { &m.single_host_per_subset },
                |m: &mut Cluster_LbSubsetConfig_LbSubsetSelector| { &mut m.single_host_per_subset },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy>>(
                "fallback_policy",
                |m: &Cluster_LbSubsetConfig_LbSubsetSelector| { &m.fallback_policy },
                |m: &mut Cluster_LbSubsetConfig_LbSubsetSelector| { &mut m.fallback_policy },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "fallback_keys_subset",
                |m: &Cluster_LbSubsetConfig_LbSubsetSelector| { &m.fallback_keys_subset },
                |m: &mut Cluster_LbSubsetConfig_LbSubsetSelector| { &mut m.fallback_keys_subset },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cluster_LbSubsetConfig_LbSubsetSelector>(
                "Cluster.LbSubsetConfig.LbSubsetSelector",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cluster_LbSubsetConfig_LbSubsetSelector {
        static instance: ::protobuf::rt::LazyV2<Cluster_LbSubsetConfig_LbSubsetSelector> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cluster_LbSubsetConfig_LbSubsetSelector::new)
    }
}

impl ::protobuf::Clear for Cluster_LbSubsetConfig_LbSubsetSelector {
    fn clear(&mut self) {
        self.keys.clear();
        self.single_host_per_subset = false;
        self.fallback_policy = Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy::NOT_DEFINED;
        self.fallback_keys_subset.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cluster_LbSubsetConfig_LbSubsetSelector {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster_LbSubsetConfig_LbSubsetSelector {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy {
    NOT_DEFINED = 0,
    NO_FALLBACK = 1,
    ANY_ENDPOINT = 2,
    DEFAULT_SUBSET = 3,
    KEYS_SUBSET = 4,
}

impl ::protobuf::ProtobufEnum for Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy> {
        match value {
            0 => ::std::option::Option::Some(Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy::NOT_DEFINED),
            1 => ::std::option::Option::Some(Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy::NO_FALLBACK),
            2 => ::std::option::Option::Some(Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy::ANY_ENDPOINT),
            3 => ::std::option::Option::Some(Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy::DEFAULT_SUBSET),
            4 => ::std::option::Option::Some(Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy::KEYS_SUBSET),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy] = &[
            Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy::NOT_DEFINED,
            Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy::NO_FALLBACK,
            Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy::ANY_ENDPOINT,
            Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy::DEFAULT_SUBSET,
            Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy::KEYS_SUBSET,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy>("Cluster.LbSubsetConfig.LbSubsetSelector.LbSubsetSelectorFallbackPolicy", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy {
}

impl ::std::default::Default for Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy {
    fn default() -> Self {
        Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy::NOT_DEFINED
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster_LbSubsetConfig_LbSubsetSelector_LbSubsetSelectorFallbackPolicy {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Cluster_LbSubsetConfig_LbSubsetFallbackPolicy {
    NO_FALLBACK = 0,
    ANY_ENDPOINT = 1,
    DEFAULT_SUBSET = 2,
}

impl ::protobuf::ProtobufEnum for Cluster_LbSubsetConfig_LbSubsetFallbackPolicy {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Cluster_LbSubsetConfig_LbSubsetFallbackPolicy> {
        match value {
            0 => ::std::option::Option::Some(Cluster_LbSubsetConfig_LbSubsetFallbackPolicy::NO_FALLBACK),
            1 => ::std::option::Option::Some(Cluster_LbSubsetConfig_LbSubsetFallbackPolicy::ANY_ENDPOINT),
            2 => ::std::option::Option::Some(Cluster_LbSubsetConfig_LbSubsetFallbackPolicy::DEFAULT_SUBSET),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Cluster_LbSubsetConfig_LbSubsetFallbackPolicy] = &[
            Cluster_LbSubsetConfig_LbSubsetFallbackPolicy::NO_FALLBACK,
            Cluster_LbSubsetConfig_LbSubsetFallbackPolicy::ANY_ENDPOINT,
            Cluster_LbSubsetConfig_LbSubsetFallbackPolicy::DEFAULT_SUBSET,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Cluster_LbSubsetConfig_LbSubsetFallbackPolicy>("Cluster.LbSubsetConfig.LbSubsetFallbackPolicy", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Cluster_LbSubsetConfig_LbSubsetFallbackPolicy {
}

impl ::std::default::Default for Cluster_LbSubsetConfig_LbSubsetFallbackPolicy {
    fn default() -> Self {
        Cluster_LbSubsetConfig_LbSubsetFallbackPolicy::NO_FALLBACK
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster_LbSubsetConfig_LbSubsetFallbackPolicy {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Cluster_LeastRequestLbConfig {
    // message fields
    pub choice_count: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub active_request_bias: ::protobuf::SingularPtrField<super::base::RuntimeDouble>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cluster_LeastRequestLbConfig {
    fn default() -> &'a Cluster_LeastRequestLbConfig {
        <Cluster_LeastRequestLbConfig as ::protobuf::Message>::default_instance()
    }
}

impl Cluster_LeastRequestLbConfig {
    pub fn new() -> Cluster_LeastRequestLbConfig {
        ::std::default::Default::default()
    }

    // .google.protobuf.UInt32Value choice_count = 1;


    pub fn get_choice_count(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.choice_count.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_choice_count(&mut self) {
        self.choice_count.clear();
    }

    pub fn has_choice_count(&self) -> bool {
        self.choice_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_choice_count(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.choice_count = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_choice_count(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.choice_count.is_none() {
            self.choice_count.set_default();
        }
        self.choice_count.as_mut().unwrap()
    }

    // Take field
    pub fn take_choice_count(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.choice_count.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .envoy.config.core.v3.RuntimeDouble active_request_bias = 2;


    pub fn get_active_request_bias(&self) -> &super::base::RuntimeDouble {
        self.active_request_bias.as_ref().unwrap_or_else(|| <super::base::RuntimeDouble as ::protobuf::Message>::default_instance())
    }
    pub fn clear_active_request_bias(&mut self) {
        self.active_request_bias.clear();
    }

    pub fn has_active_request_bias(&self) -> bool {
        self.active_request_bias.is_some()
    }

    // Param is passed by value, moved
    pub fn set_active_request_bias(&mut self, v: super::base::RuntimeDouble) {
        self.active_request_bias = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_active_request_bias(&mut self) -> &mut super::base::RuntimeDouble {
        if self.active_request_bias.is_none() {
            self.active_request_bias.set_default();
        }
        self.active_request_bias.as_mut().unwrap()
    }

    // Take field
    pub fn take_active_request_bias(&mut self) -> super::base::RuntimeDouble {
        self.active_request_bias.take().unwrap_or_else(|| super::base::RuntimeDouble::new())
    }
}

impl ::protobuf::Message for Cluster_LeastRequestLbConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.choice_count {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.active_request_bias {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.choice_count)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.active_request_bias)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.choice_count.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.active_request_bias.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.choice_count.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.active_request_bias.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cluster_LeastRequestLbConfig {
        Cluster_LeastRequestLbConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "choice_count",
                |m: &Cluster_LeastRequestLbConfig| { &m.choice_count },
                |m: &mut Cluster_LeastRequestLbConfig| { &mut m.choice_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::RuntimeDouble>>(
                "active_request_bias",
                |m: &Cluster_LeastRequestLbConfig| { &m.active_request_bias },
                |m: &mut Cluster_LeastRequestLbConfig| { &mut m.active_request_bias },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cluster_LeastRequestLbConfig>(
                "Cluster.LeastRequestLbConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cluster_LeastRequestLbConfig {
        static instance: ::protobuf::rt::LazyV2<Cluster_LeastRequestLbConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cluster_LeastRequestLbConfig::new)
    }
}

impl ::protobuf::Clear for Cluster_LeastRequestLbConfig {
    fn clear(&mut self) {
        self.choice_count.clear();
        self.active_request_bias.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cluster_LeastRequestLbConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster_LeastRequestLbConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Cluster_RingHashLbConfig {
    // message fields
    pub minimum_ring_size: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt64Value>,
    pub hash_function: Cluster_RingHashLbConfig_HashFunction,
    pub maximum_ring_size: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt64Value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cluster_RingHashLbConfig {
    fn default() -> &'a Cluster_RingHashLbConfig {
        <Cluster_RingHashLbConfig as ::protobuf::Message>::default_instance()
    }
}

impl Cluster_RingHashLbConfig {
    pub fn new() -> Cluster_RingHashLbConfig {
        ::std::default::Default::default()
    }

    // .google.protobuf.UInt64Value minimum_ring_size = 1;


    pub fn get_minimum_ring_size(&self) -> &::protobuf::well_known_types::UInt64Value {
        self.minimum_ring_size.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt64Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_minimum_ring_size(&mut self) {
        self.minimum_ring_size.clear();
    }

    pub fn has_minimum_ring_size(&self) -> bool {
        self.minimum_ring_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_minimum_ring_size(&mut self, v: ::protobuf::well_known_types::UInt64Value) {
        self.minimum_ring_size = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_minimum_ring_size(&mut self) -> &mut ::protobuf::well_known_types::UInt64Value {
        if self.minimum_ring_size.is_none() {
            self.minimum_ring_size.set_default();
        }
        self.minimum_ring_size.as_mut().unwrap()
    }

    // Take field
    pub fn take_minimum_ring_size(&mut self) -> ::protobuf::well_known_types::UInt64Value {
        self.minimum_ring_size.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt64Value::new())
    }

    // .envoy.config.cluster.v3.Cluster.RingHashLbConfig.HashFunction hash_function = 3;


    pub fn get_hash_function(&self) -> Cluster_RingHashLbConfig_HashFunction {
        self.hash_function
    }
    pub fn clear_hash_function(&mut self) {
        self.hash_function = Cluster_RingHashLbConfig_HashFunction::XX_HASH;
    }

    // Param is passed by value, moved
    pub fn set_hash_function(&mut self, v: Cluster_RingHashLbConfig_HashFunction) {
        self.hash_function = v;
    }

    // .google.protobuf.UInt64Value maximum_ring_size = 4;


    pub fn get_maximum_ring_size(&self) -> &::protobuf::well_known_types::UInt64Value {
        self.maximum_ring_size.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt64Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_maximum_ring_size(&mut self) {
        self.maximum_ring_size.clear();
    }

    pub fn has_maximum_ring_size(&self) -> bool {
        self.maximum_ring_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_maximum_ring_size(&mut self, v: ::protobuf::well_known_types::UInt64Value) {
        self.maximum_ring_size = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_maximum_ring_size(&mut self) -> &mut ::protobuf::well_known_types::UInt64Value {
        if self.maximum_ring_size.is_none() {
            self.maximum_ring_size.set_default();
        }
        self.maximum_ring_size.as_mut().unwrap()
    }

    // Take field
    pub fn take_maximum_ring_size(&mut self) -> ::protobuf::well_known_types::UInt64Value {
        self.maximum_ring_size.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt64Value::new())
    }
}

impl ::protobuf::Message for Cluster_RingHashLbConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.minimum_ring_size {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.maximum_ring_size {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.minimum_ring_size)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.hash_function, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.maximum_ring_size)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.minimum_ring_size.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.hash_function != Cluster_RingHashLbConfig_HashFunction::XX_HASH {
            my_size += ::protobuf::rt::enum_size(3, self.hash_function);
        }
        if let Some(ref v) = self.maximum_ring_size.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.minimum_ring_size.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.hash_function != Cluster_RingHashLbConfig_HashFunction::XX_HASH {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.hash_function))?;
        }
        if let Some(ref v) = self.maximum_ring_size.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cluster_RingHashLbConfig {
        Cluster_RingHashLbConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt64Value>>(
                "minimum_ring_size",
                |m: &Cluster_RingHashLbConfig| { &m.minimum_ring_size },
                |m: &mut Cluster_RingHashLbConfig| { &mut m.minimum_ring_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Cluster_RingHashLbConfig_HashFunction>>(
                "hash_function",
                |m: &Cluster_RingHashLbConfig| { &m.hash_function },
                |m: &mut Cluster_RingHashLbConfig| { &mut m.hash_function },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt64Value>>(
                "maximum_ring_size",
                |m: &Cluster_RingHashLbConfig| { &m.maximum_ring_size },
                |m: &mut Cluster_RingHashLbConfig| { &mut m.maximum_ring_size },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cluster_RingHashLbConfig>(
                "Cluster.RingHashLbConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cluster_RingHashLbConfig {
        static instance: ::protobuf::rt::LazyV2<Cluster_RingHashLbConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cluster_RingHashLbConfig::new)
    }
}

impl ::protobuf::Clear for Cluster_RingHashLbConfig {
    fn clear(&mut self) {
        self.minimum_ring_size.clear();
        self.hash_function = Cluster_RingHashLbConfig_HashFunction::XX_HASH;
        self.maximum_ring_size.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cluster_RingHashLbConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster_RingHashLbConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Cluster_RingHashLbConfig_HashFunction {
    XX_HASH = 0,
    MURMUR_HASH_2 = 1,
}

impl ::protobuf::ProtobufEnum for Cluster_RingHashLbConfig_HashFunction {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Cluster_RingHashLbConfig_HashFunction> {
        match value {
            0 => ::std::option::Option::Some(Cluster_RingHashLbConfig_HashFunction::XX_HASH),
            1 => ::std::option::Option::Some(Cluster_RingHashLbConfig_HashFunction::MURMUR_HASH_2),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Cluster_RingHashLbConfig_HashFunction] = &[
            Cluster_RingHashLbConfig_HashFunction::XX_HASH,
            Cluster_RingHashLbConfig_HashFunction::MURMUR_HASH_2,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Cluster_RingHashLbConfig_HashFunction>("Cluster.RingHashLbConfig.HashFunction", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Cluster_RingHashLbConfig_HashFunction {
}

impl ::std::default::Default for Cluster_RingHashLbConfig_HashFunction {
    fn default() -> Self {
        Cluster_RingHashLbConfig_HashFunction::XX_HASH
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster_RingHashLbConfig_HashFunction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Cluster_MaglevLbConfig {
    // message fields
    pub table_size: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt64Value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cluster_MaglevLbConfig {
    fn default() -> &'a Cluster_MaglevLbConfig {
        <Cluster_MaglevLbConfig as ::protobuf::Message>::default_instance()
    }
}

impl Cluster_MaglevLbConfig {
    pub fn new() -> Cluster_MaglevLbConfig {
        ::std::default::Default::default()
    }

    // .google.protobuf.UInt64Value table_size = 1;


    pub fn get_table_size(&self) -> &::protobuf::well_known_types::UInt64Value {
        self.table_size.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt64Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_table_size(&mut self) {
        self.table_size.clear();
    }

    pub fn has_table_size(&self) -> bool {
        self.table_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_table_size(&mut self, v: ::protobuf::well_known_types::UInt64Value) {
        self.table_size = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_table_size(&mut self) -> &mut ::protobuf::well_known_types::UInt64Value {
        if self.table_size.is_none() {
            self.table_size.set_default();
        }
        self.table_size.as_mut().unwrap()
    }

    // Take field
    pub fn take_table_size(&mut self) -> ::protobuf::well_known_types::UInt64Value {
        self.table_size.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt64Value::new())
    }
}

impl ::protobuf::Message for Cluster_MaglevLbConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.table_size {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.table_size)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.table_size.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.table_size.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cluster_MaglevLbConfig {
        Cluster_MaglevLbConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt64Value>>(
                "table_size",
                |m: &Cluster_MaglevLbConfig| { &m.table_size },
                |m: &mut Cluster_MaglevLbConfig| { &mut m.table_size },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cluster_MaglevLbConfig>(
                "Cluster.MaglevLbConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cluster_MaglevLbConfig {
        static instance: ::protobuf::rt::LazyV2<Cluster_MaglevLbConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cluster_MaglevLbConfig::new)
    }
}

impl ::protobuf::Clear for Cluster_MaglevLbConfig {
    fn clear(&mut self) {
        self.table_size.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cluster_MaglevLbConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster_MaglevLbConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Cluster_OriginalDstLbConfig {
    // message fields
    pub use_http_header: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cluster_OriginalDstLbConfig {
    fn default() -> &'a Cluster_OriginalDstLbConfig {
        <Cluster_OriginalDstLbConfig as ::protobuf::Message>::default_instance()
    }
}

impl Cluster_OriginalDstLbConfig {
    pub fn new() -> Cluster_OriginalDstLbConfig {
        ::std::default::Default::default()
    }

    // bool use_http_header = 1;


    pub fn get_use_http_header(&self) -> bool {
        self.use_http_header
    }
    pub fn clear_use_http_header(&mut self) {
        self.use_http_header = false;
    }

    // Param is passed by value, moved
    pub fn set_use_http_header(&mut self, v: bool) {
        self.use_http_header = v;
    }
}

impl ::protobuf::Message for Cluster_OriginalDstLbConfig {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.use_http_header = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.use_http_header != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.use_http_header != false {
            os.write_bool(1, self.use_http_header)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cluster_OriginalDstLbConfig {
        Cluster_OriginalDstLbConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "use_http_header",
                |m: &Cluster_OriginalDstLbConfig| { &m.use_http_header },
                |m: &mut Cluster_OriginalDstLbConfig| { &mut m.use_http_header },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cluster_OriginalDstLbConfig>(
                "Cluster.OriginalDstLbConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cluster_OriginalDstLbConfig {
        static instance: ::protobuf::rt::LazyV2<Cluster_OriginalDstLbConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cluster_OriginalDstLbConfig::new)
    }
}

impl ::protobuf::Clear for Cluster_OriginalDstLbConfig {
    fn clear(&mut self) {
        self.use_http_header = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cluster_OriginalDstLbConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster_OriginalDstLbConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Cluster_CommonLbConfig {
    // message fields
    pub healthy_panic_threshold: ::protobuf::SingularPtrField<super::percent::Percent>,
    pub update_merge_window: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub ignore_new_hosts_until_first_hc: bool,
    pub close_connections_on_host_set_change: bool,
    pub consistent_hashing_lb_config: ::protobuf::SingularPtrField<Cluster_CommonLbConfig_ConsistentHashingLbConfig>,
    // message oneof groups
    pub locality_config_specifier: ::std::option::Option<Cluster_CommonLbConfig_oneof_locality_config_specifier>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cluster_CommonLbConfig {
    fn default() -> &'a Cluster_CommonLbConfig {
        <Cluster_CommonLbConfig as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Cluster_CommonLbConfig_oneof_locality_config_specifier {
    zone_aware_lb_config(Cluster_CommonLbConfig_ZoneAwareLbConfig),
    locality_weighted_lb_config(Cluster_CommonLbConfig_LocalityWeightedLbConfig),
}

impl Cluster_CommonLbConfig {
    pub fn new() -> Cluster_CommonLbConfig {
        ::std::default::Default::default()
    }

    // .envoy.type.v3.Percent healthy_panic_threshold = 1;


    pub fn get_healthy_panic_threshold(&self) -> &super::percent::Percent {
        self.healthy_panic_threshold.as_ref().unwrap_or_else(|| <super::percent::Percent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_healthy_panic_threshold(&mut self) {
        self.healthy_panic_threshold.clear();
    }

    pub fn has_healthy_panic_threshold(&self) -> bool {
        self.healthy_panic_threshold.is_some()
    }

    // Param is passed by value, moved
    pub fn set_healthy_panic_threshold(&mut self, v: super::percent::Percent) {
        self.healthy_panic_threshold = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_healthy_panic_threshold(&mut self) -> &mut super::percent::Percent {
        if self.healthy_panic_threshold.is_none() {
            self.healthy_panic_threshold.set_default();
        }
        self.healthy_panic_threshold.as_mut().unwrap()
    }

    // Take field
    pub fn take_healthy_panic_threshold(&mut self) -> super::percent::Percent {
        self.healthy_panic_threshold.take().unwrap_or_else(|| super::percent::Percent::new())
    }

    // .envoy.config.cluster.v3.Cluster.CommonLbConfig.ZoneAwareLbConfig zone_aware_lb_config = 2;


    pub fn get_zone_aware_lb_config(&self) -> &Cluster_CommonLbConfig_ZoneAwareLbConfig {
        match self.locality_config_specifier {
            ::std::option::Option::Some(Cluster_CommonLbConfig_oneof_locality_config_specifier::zone_aware_lb_config(ref v)) => v,
            _ => <Cluster_CommonLbConfig_ZoneAwareLbConfig as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_zone_aware_lb_config(&mut self) {
        self.locality_config_specifier = ::std::option::Option::None;
    }

    pub fn has_zone_aware_lb_config(&self) -> bool {
        match self.locality_config_specifier {
            ::std::option::Option::Some(Cluster_CommonLbConfig_oneof_locality_config_specifier::zone_aware_lb_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_zone_aware_lb_config(&mut self, v: Cluster_CommonLbConfig_ZoneAwareLbConfig) {
        self.locality_config_specifier = ::std::option::Option::Some(Cluster_CommonLbConfig_oneof_locality_config_specifier::zone_aware_lb_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_zone_aware_lb_config(&mut self) -> &mut Cluster_CommonLbConfig_ZoneAwareLbConfig {
        if let ::std::option::Option::Some(Cluster_CommonLbConfig_oneof_locality_config_specifier::zone_aware_lb_config(_)) = self.locality_config_specifier {
        } else {
            self.locality_config_specifier = ::std::option::Option::Some(Cluster_CommonLbConfig_oneof_locality_config_specifier::zone_aware_lb_config(Cluster_CommonLbConfig_ZoneAwareLbConfig::new()));
        }
        match self.locality_config_specifier {
            ::std::option::Option::Some(Cluster_CommonLbConfig_oneof_locality_config_specifier::zone_aware_lb_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_zone_aware_lb_config(&mut self) -> Cluster_CommonLbConfig_ZoneAwareLbConfig {
        if self.has_zone_aware_lb_config() {
            match self.locality_config_specifier.take() {
                ::std::option::Option::Some(Cluster_CommonLbConfig_oneof_locality_config_specifier::zone_aware_lb_config(v)) => v,
                _ => panic!(),
            }
        } else {
            Cluster_CommonLbConfig_ZoneAwareLbConfig::new()
        }
    }

    // .envoy.config.cluster.v3.Cluster.CommonLbConfig.LocalityWeightedLbConfig locality_weighted_lb_config = 3;


    pub fn get_locality_weighted_lb_config(&self) -> &Cluster_CommonLbConfig_LocalityWeightedLbConfig {
        match self.locality_config_specifier {
            ::std::option::Option::Some(Cluster_CommonLbConfig_oneof_locality_config_specifier::locality_weighted_lb_config(ref v)) => v,
            _ => <Cluster_CommonLbConfig_LocalityWeightedLbConfig as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_locality_weighted_lb_config(&mut self) {
        self.locality_config_specifier = ::std::option::Option::None;
    }

    pub fn has_locality_weighted_lb_config(&self) -> bool {
        match self.locality_config_specifier {
            ::std::option::Option::Some(Cluster_CommonLbConfig_oneof_locality_config_specifier::locality_weighted_lb_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_locality_weighted_lb_config(&mut self, v: Cluster_CommonLbConfig_LocalityWeightedLbConfig) {
        self.locality_config_specifier = ::std::option::Option::Some(Cluster_CommonLbConfig_oneof_locality_config_specifier::locality_weighted_lb_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_locality_weighted_lb_config(&mut self) -> &mut Cluster_CommonLbConfig_LocalityWeightedLbConfig {
        if let ::std::option::Option::Some(Cluster_CommonLbConfig_oneof_locality_config_specifier::locality_weighted_lb_config(_)) = self.locality_config_specifier {
        } else {
            self.locality_config_specifier = ::std::option::Option::Some(Cluster_CommonLbConfig_oneof_locality_config_specifier::locality_weighted_lb_config(Cluster_CommonLbConfig_LocalityWeightedLbConfig::new()));
        }
        match self.locality_config_specifier {
            ::std::option::Option::Some(Cluster_CommonLbConfig_oneof_locality_config_specifier::locality_weighted_lb_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_locality_weighted_lb_config(&mut self) -> Cluster_CommonLbConfig_LocalityWeightedLbConfig {
        if self.has_locality_weighted_lb_config() {
            match self.locality_config_specifier.take() {
                ::std::option::Option::Some(Cluster_CommonLbConfig_oneof_locality_config_specifier::locality_weighted_lb_config(v)) => v,
                _ => panic!(),
            }
        } else {
            Cluster_CommonLbConfig_LocalityWeightedLbConfig::new()
        }
    }

    // .google.protobuf.Duration update_merge_window = 4;


    pub fn get_update_merge_window(&self) -> &::protobuf::well_known_types::Duration {
        self.update_merge_window.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_update_merge_window(&mut self) {
        self.update_merge_window.clear();
    }

    pub fn has_update_merge_window(&self) -> bool {
        self.update_merge_window.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_merge_window(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.update_merge_window = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_merge_window(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.update_merge_window.is_none() {
            self.update_merge_window.set_default();
        }
        self.update_merge_window.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_merge_window(&mut self) -> ::protobuf::well_known_types::Duration {
        self.update_merge_window.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // bool ignore_new_hosts_until_first_hc = 5;


    pub fn get_ignore_new_hosts_until_first_hc(&self) -> bool {
        self.ignore_new_hosts_until_first_hc
    }
    pub fn clear_ignore_new_hosts_until_first_hc(&mut self) {
        self.ignore_new_hosts_until_first_hc = false;
    }

    // Param is passed by value, moved
    pub fn set_ignore_new_hosts_until_first_hc(&mut self, v: bool) {
        self.ignore_new_hosts_until_first_hc = v;
    }

    // bool close_connections_on_host_set_change = 6;


    pub fn get_close_connections_on_host_set_change(&self) -> bool {
        self.close_connections_on_host_set_change
    }
    pub fn clear_close_connections_on_host_set_change(&mut self) {
        self.close_connections_on_host_set_change = false;
    }

    // Param is passed by value, moved
    pub fn set_close_connections_on_host_set_change(&mut self, v: bool) {
        self.close_connections_on_host_set_change = v;
    }

    // .envoy.config.cluster.v3.Cluster.CommonLbConfig.ConsistentHashingLbConfig consistent_hashing_lb_config = 7;


    pub fn get_consistent_hashing_lb_config(&self) -> &Cluster_CommonLbConfig_ConsistentHashingLbConfig {
        self.consistent_hashing_lb_config.as_ref().unwrap_or_else(|| <Cluster_CommonLbConfig_ConsistentHashingLbConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_consistent_hashing_lb_config(&mut self) {
        self.consistent_hashing_lb_config.clear();
    }

    pub fn has_consistent_hashing_lb_config(&self) -> bool {
        self.consistent_hashing_lb_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_consistent_hashing_lb_config(&mut self, v: Cluster_CommonLbConfig_ConsistentHashingLbConfig) {
        self.consistent_hashing_lb_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_consistent_hashing_lb_config(&mut self) -> &mut Cluster_CommonLbConfig_ConsistentHashingLbConfig {
        if self.consistent_hashing_lb_config.is_none() {
            self.consistent_hashing_lb_config.set_default();
        }
        self.consistent_hashing_lb_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_consistent_hashing_lb_config(&mut self) -> Cluster_CommonLbConfig_ConsistentHashingLbConfig {
        self.consistent_hashing_lb_config.take().unwrap_or_else(|| Cluster_CommonLbConfig_ConsistentHashingLbConfig::new())
    }
}

impl ::protobuf::Message for Cluster_CommonLbConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.healthy_panic_threshold {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(Cluster_CommonLbConfig_oneof_locality_config_specifier::zone_aware_lb_config(ref v)) = self.locality_config_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Cluster_CommonLbConfig_oneof_locality_config_specifier::locality_weighted_lb_config(ref v)) = self.locality_config_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.update_merge_window {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.consistent_hashing_lb_config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.healthy_panic_threshold)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.locality_config_specifier = ::std::option::Option::Some(Cluster_CommonLbConfig_oneof_locality_config_specifier::zone_aware_lb_config(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.locality_config_specifier = ::std::option::Option::Some(Cluster_CommonLbConfig_oneof_locality_config_specifier::locality_weighted_lb_config(is.read_message()?));
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update_merge_window)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.ignore_new_hosts_until_first_hc = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.close_connections_on_host_set_change = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.consistent_hashing_lb_config)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.healthy_panic_threshold.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.update_merge_window.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.ignore_new_hosts_until_first_hc != false {
            my_size += 2;
        }
        if self.close_connections_on_host_set_change != false {
            my_size += 2;
        }
        if let Some(ref v) = self.consistent_hashing_lb_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.locality_config_specifier {
            match v {
                &Cluster_CommonLbConfig_oneof_locality_config_specifier::zone_aware_lb_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Cluster_CommonLbConfig_oneof_locality_config_specifier::locality_weighted_lb_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.healthy_panic_threshold.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.update_merge_window.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.ignore_new_hosts_until_first_hc != false {
            os.write_bool(5, self.ignore_new_hosts_until_first_hc)?;
        }
        if self.close_connections_on_host_set_change != false {
            os.write_bool(6, self.close_connections_on_host_set_change)?;
        }
        if let Some(ref v) = self.consistent_hashing_lb_config.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.locality_config_specifier {
            match v {
                &Cluster_CommonLbConfig_oneof_locality_config_specifier::zone_aware_lb_config(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Cluster_CommonLbConfig_oneof_locality_config_specifier::locality_weighted_lb_config(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cluster_CommonLbConfig {
        Cluster_CommonLbConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::percent::Percent>>(
                "healthy_panic_threshold",
                |m: &Cluster_CommonLbConfig| { &m.healthy_panic_threshold },
                |m: &mut Cluster_CommonLbConfig| { &mut m.healthy_panic_threshold },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Cluster_CommonLbConfig_ZoneAwareLbConfig>(
                "zone_aware_lb_config",
                Cluster_CommonLbConfig::has_zone_aware_lb_config,
                Cluster_CommonLbConfig::get_zone_aware_lb_config,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Cluster_CommonLbConfig_LocalityWeightedLbConfig>(
                "locality_weighted_lb_config",
                Cluster_CommonLbConfig::has_locality_weighted_lb_config,
                Cluster_CommonLbConfig::get_locality_weighted_lb_config,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "update_merge_window",
                |m: &Cluster_CommonLbConfig| { &m.update_merge_window },
                |m: &mut Cluster_CommonLbConfig| { &mut m.update_merge_window },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "ignore_new_hosts_until_first_hc",
                |m: &Cluster_CommonLbConfig| { &m.ignore_new_hosts_until_first_hc },
                |m: &mut Cluster_CommonLbConfig| { &mut m.ignore_new_hosts_until_first_hc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "close_connections_on_host_set_change",
                |m: &Cluster_CommonLbConfig| { &m.close_connections_on_host_set_change },
                |m: &mut Cluster_CommonLbConfig| { &mut m.close_connections_on_host_set_change },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Cluster_CommonLbConfig_ConsistentHashingLbConfig>>(
                "consistent_hashing_lb_config",
                |m: &Cluster_CommonLbConfig| { &m.consistent_hashing_lb_config },
                |m: &mut Cluster_CommonLbConfig| { &mut m.consistent_hashing_lb_config },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cluster_CommonLbConfig>(
                "Cluster.CommonLbConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cluster_CommonLbConfig {
        static instance: ::protobuf::rt::LazyV2<Cluster_CommonLbConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cluster_CommonLbConfig::new)
    }
}

impl ::protobuf::Clear for Cluster_CommonLbConfig {
    fn clear(&mut self) {
        self.healthy_panic_threshold.clear();
        self.locality_config_specifier = ::std::option::Option::None;
        self.locality_config_specifier = ::std::option::Option::None;
        self.update_merge_window.clear();
        self.ignore_new_hosts_until_first_hc = false;
        self.close_connections_on_host_set_change = false;
        self.consistent_hashing_lb_config.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cluster_CommonLbConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster_CommonLbConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Cluster_CommonLbConfig_ZoneAwareLbConfig {
    // message fields
    pub routing_enabled: ::protobuf::SingularPtrField<super::percent::Percent>,
    pub min_cluster_size: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt64Value>,
    pub fail_traffic_on_panic: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cluster_CommonLbConfig_ZoneAwareLbConfig {
    fn default() -> &'a Cluster_CommonLbConfig_ZoneAwareLbConfig {
        <Cluster_CommonLbConfig_ZoneAwareLbConfig as ::protobuf::Message>::default_instance()
    }
}

impl Cluster_CommonLbConfig_ZoneAwareLbConfig {
    pub fn new() -> Cluster_CommonLbConfig_ZoneAwareLbConfig {
        ::std::default::Default::default()
    }

    // .envoy.type.v3.Percent routing_enabled = 1;


    pub fn get_routing_enabled(&self) -> &super::percent::Percent {
        self.routing_enabled.as_ref().unwrap_or_else(|| <super::percent::Percent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_routing_enabled(&mut self) {
        self.routing_enabled.clear();
    }

    pub fn has_routing_enabled(&self) -> bool {
        self.routing_enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_routing_enabled(&mut self, v: super::percent::Percent) {
        self.routing_enabled = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_routing_enabled(&mut self) -> &mut super::percent::Percent {
        if self.routing_enabled.is_none() {
            self.routing_enabled.set_default();
        }
        self.routing_enabled.as_mut().unwrap()
    }

    // Take field
    pub fn take_routing_enabled(&mut self) -> super::percent::Percent {
        self.routing_enabled.take().unwrap_or_else(|| super::percent::Percent::new())
    }

    // .google.protobuf.UInt64Value min_cluster_size = 2;


    pub fn get_min_cluster_size(&self) -> &::protobuf::well_known_types::UInt64Value {
        self.min_cluster_size.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt64Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_min_cluster_size(&mut self) {
        self.min_cluster_size.clear();
    }

    pub fn has_min_cluster_size(&self) -> bool {
        self.min_cluster_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_min_cluster_size(&mut self, v: ::protobuf::well_known_types::UInt64Value) {
        self.min_cluster_size = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_min_cluster_size(&mut self) -> &mut ::protobuf::well_known_types::UInt64Value {
        if self.min_cluster_size.is_none() {
            self.min_cluster_size.set_default();
        }
        self.min_cluster_size.as_mut().unwrap()
    }

    // Take field
    pub fn take_min_cluster_size(&mut self) -> ::protobuf::well_known_types::UInt64Value {
        self.min_cluster_size.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt64Value::new())
    }

    // bool fail_traffic_on_panic = 3;


    pub fn get_fail_traffic_on_panic(&self) -> bool {
        self.fail_traffic_on_panic
    }
    pub fn clear_fail_traffic_on_panic(&mut self) {
        self.fail_traffic_on_panic = false;
    }

    // Param is passed by value, moved
    pub fn set_fail_traffic_on_panic(&mut self, v: bool) {
        self.fail_traffic_on_panic = v;
    }
}

impl ::protobuf::Message for Cluster_CommonLbConfig_ZoneAwareLbConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.routing_enabled {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.min_cluster_size {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.routing_enabled)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.min_cluster_size)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.fail_traffic_on_panic = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.routing_enabled.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.min_cluster_size.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.fail_traffic_on_panic != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.routing_enabled.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.min_cluster_size.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.fail_traffic_on_panic != false {
            os.write_bool(3, self.fail_traffic_on_panic)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cluster_CommonLbConfig_ZoneAwareLbConfig {
        Cluster_CommonLbConfig_ZoneAwareLbConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::percent::Percent>>(
                "routing_enabled",
                |m: &Cluster_CommonLbConfig_ZoneAwareLbConfig| { &m.routing_enabled },
                |m: &mut Cluster_CommonLbConfig_ZoneAwareLbConfig| { &mut m.routing_enabled },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt64Value>>(
                "min_cluster_size",
                |m: &Cluster_CommonLbConfig_ZoneAwareLbConfig| { &m.min_cluster_size },
                |m: &mut Cluster_CommonLbConfig_ZoneAwareLbConfig| { &mut m.min_cluster_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "fail_traffic_on_panic",
                |m: &Cluster_CommonLbConfig_ZoneAwareLbConfig| { &m.fail_traffic_on_panic },
                |m: &mut Cluster_CommonLbConfig_ZoneAwareLbConfig| { &mut m.fail_traffic_on_panic },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cluster_CommonLbConfig_ZoneAwareLbConfig>(
                "Cluster.CommonLbConfig.ZoneAwareLbConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cluster_CommonLbConfig_ZoneAwareLbConfig {
        static instance: ::protobuf::rt::LazyV2<Cluster_CommonLbConfig_ZoneAwareLbConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cluster_CommonLbConfig_ZoneAwareLbConfig::new)
    }
}

impl ::protobuf::Clear for Cluster_CommonLbConfig_ZoneAwareLbConfig {
    fn clear(&mut self) {
        self.routing_enabled.clear();
        self.min_cluster_size.clear();
        self.fail_traffic_on_panic = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cluster_CommonLbConfig_ZoneAwareLbConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster_CommonLbConfig_ZoneAwareLbConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Cluster_CommonLbConfig_LocalityWeightedLbConfig {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cluster_CommonLbConfig_LocalityWeightedLbConfig {
    fn default() -> &'a Cluster_CommonLbConfig_LocalityWeightedLbConfig {
        <Cluster_CommonLbConfig_LocalityWeightedLbConfig as ::protobuf::Message>::default_instance()
    }
}

impl Cluster_CommonLbConfig_LocalityWeightedLbConfig {
    pub fn new() -> Cluster_CommonLbConfig_LocalityWeightedLbConfig {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Cluster_CommonLbConfig_LocalityWeightedLbConfig {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cluster_CommonLbConfig_LocalityWeightedLbConfig {
        Cluster_CommonLbConfig_LocalityWeightedLbConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cluster_CommonLbConfig_LocalityWeightedLbConfig>(
                "Cluster.CommonLbConfig.LocalityWeightedLbConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cluster_CommonLbConfig_LocalityWeightedLbConfig {
        static instance: ::protobuf::rt::LazyV2<Cluster_CommonLbConfig_LocalityWeightedLbConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cluster_CommonLbConfig_LocalityWeightedLbConfig::new)
    }
}

impl ::protobuf::Clear for Cluster_CommonLbConfig_LocalityWeightedLbConfig {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cluster_CommonLbConfig_LocalityWeightedLbConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster_CommonLbConfig_LocalityWeightedLbConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Cluster_CommonLbConfig_ConsistentHashingLbConfig {
    // message fields
    pub use_hostname_for_hashing: bool,
    pub hash_balance_factor: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cluster_CommonLbConfig_ConsistentHashingLbConfig {
    fn default() -> &'a Cluster_CommonLbConfig_ConsistentHashingLbConfig {
        <Cluster_CommonLbConfig_ConsistentHashingLbConfig as ::protobuf::Message>::default_instance()
    }
}

impl Cluster_CommonLbConfig_ConsistentHashingLbConfig {
    pub fn new() -> Cluster_CommonLbConfig_ConsistentHashingLbConfig {
        ::std::default::Default::default()
    }

    // bool use_hostname_for_hashing = 1;


    pub fn get_use_hostname_for_hashing(&self) -> bool {
        self.use_hostname_for_hashing
    }
    pub fn clear_use_hostname_for_hashing(&mut self) {
        self.use_hostname_for_hashing = false;
    }

    // Param is passed by value, moved
    pub fn set_use_hostname_for_hashing(&mut self, v: bool) {
        self.use_hostname_for_hashing = v;
    }

    // .google.protobuf.UInt32Value hash_balance_factor = 2;


    pub fn get_hash_balance_factor(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.hash_balance_factor.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_hash_balance_factor(&mut self) {
        self.hash_balance_factor.clear();
    }

    pub fn has_hash_balance_factor(&self) -> bool {
        self.hash_balance_factor.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hash_balance_factor(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.hash_balance_factor = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash_balance_factor(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.hash_balance_factor.is_none() {
            self.hash_balance_factor.set_default();
        }
        self.hash_balance_factor.as_mut().unwrap()
    }

    // Take field
    pub fn take_hash_balance_factor(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.hash_balance_factor.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }
}

impl ::protobuf::Message for Cluster_CommonLbConfig_ConsistentHashingLbConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.hash_balance_factor {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.use_hostname_for_hashing = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.hash_balance_factor)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.use_hostname_for_hashing != false {
            my_size += 2;
        }
        if let Some(ref v) = self.hash_balance_factor.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.use_hostname_for_hashing != false {
            os.write_bool(1, self.use_hostname_for_hashing)?;
        }
        if let Some(ref v) = self.hash_balance_factor.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cluster_CommonLbConfig_ConsistentHashingLbConfig {
        Cluster_CommonLbConfig_ConsistentHashingLbConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "use_hostname_for_hashing",
                |m: &Cluster_CommonLbConfig_ConsistentHashingLbConfig| { &m.use_hostname_for_hashing },
                |m: &mut Cluster_CommonLbConfig_ConsistentHashingLbConfig| { &mut m.use_hostname_for_hashing },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "hash_balance_factor",
                |m: &Cluster_CommonLbConfig_ConsistentHashingLbConfig| { &m.hash_balance_factor },
                |m: &mut Cluster_CommonLbConfig_ConsistentHashingLbConfig| { &mut m.hash_balance_factor },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cluster_CommonLbConfig_ConsistentHashingLbConfig>(
                "Cluster.CommonLbConfig.ConsistentHashingLbConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cluster_CommonLbConfig_ConsistentHashingLbConfig {
        static instance: ::protobuf::rt::LazyV2<Cluster_CommonLbConfig_ConsistentHashingLbConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cluster_CommonLbConfig_ConsistentHashingLbConfig::new)
    }
}

impl ::protobuf::Clear for Cluster_CommonLbConfig_ConsistentHashingLbConfig {
    fn clear(&mut self) {
        self.use_hostname_for_hashing = false;
        self.hash_balance_factor.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cluster_CommonLbConfig_ConsistentHashingLbConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster_CommonLbConfig_ConsistentHashingLbConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Cluster_RefreshRate {
    // message fields
    pub base_interval: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub max_interval: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cluster_RefreshRate {
    fn default() -> &'a Cluster_RefreshRate {
        <Cluster_RefreshRate as ::protobuf::Message>::default_instance()
    }
}

impl Cluster_RefreshRate {
    pub fn new() -> Cluster_RefreshRate {
        ::std::default::Default::default()
    }

    // .google.protobuf.Duration base_interval = 1;


    pub fn get_base_interval(&self) -> &::protobuf::well_known_types::Duration {
        self.base_interval.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_base_interval(&mut self) {
        self.base_interval.clear();
    }

    pub fn has_base_interval(&self) -> bool {
        self.base_interval.is_some()
    }

    // Param is passed by value, moved
    pub fn set_base_interval(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.base_interval = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_base_interval(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.base_interval.is_none() {
            self.base_interval.set_default();
        }
        self.base_interval.as_mut().unwrap()
    }

    // Take field
    pub fn take_base_interval(&mut self) -> ::protobuf::well_known_types::Duration {
        self.base_interval.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.Duration max_interval = 2;


    pub fn get_max_interval(&self) -> &::protobuf::well_known_types::Duration {
        self.max_interval.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_max_interval(&mut self) {
        self.max_interval.clear();
    }

    pub fn has_max_interval(&self) -> bool {
        self.max_interval.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_interval(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.max_interval = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_interval(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.max_interval.is_none() {
            self.max_interval.set_default();
        }
        self.max_interval.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_interval(&mut self) -> ::protobuf::well_known_types::Duration {
        self.max_interval.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }
}

impl ::protobuf::Message for Cluster_RefreshRate {
    fn is_initialized(&self) -> bool {
        for v in &self.base_interval {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.max_interval {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.base_interval)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_interval)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.base_interval.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.max_interval.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.base_interval.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.max_interval.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cluster_RefreshRate {
        Cluster_RefreshRate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "base_interval",
                |m: &Cluster_RefreshRate| { &m.base_interval },
                |m: &mut Cluster_RefreshRate| { &mut m.base_interval },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "max_interval",
                |m: &Cluster_RefreshRate| { &m.max_interval },
                |m: &mut Cluster_RefreshRate| { &mut m.max_interval },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cluster_RefreshRate>(
                "Cluster.RefreshRate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cluster_RefreshRate {
        static instance: ::protobuf::rt::LazyV2<Cluster_RefreshRate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cluster_RefreshRate::new)
    }
}

impl ::protobuf::Clear for Cluster_RefreshRate {
    fn clear(&mut self) {
        self.base_interval.clear();
        self.max_interval.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cluster_RefreshRate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster_RefreshRate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Cluster_PrefetchPolicy {
    // message fields
    pub per_upstream_prefetch_ratio: ::protobuf::SingularPtrField<::protobuf::well_known_types::DoubleValue>,
    pub predictive_prefetch_ratio: ::protobuf::SingularPtrField<::protobuf::well_known_types::DoubleValue>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cluster_PrefetchPolicy {
    fn default() -> &'a Cluster_PrefetchPolicy {
        <Cluster_PrefetchPolicy as ::protobuf::Message>::default_instance()
    }
}

impl Cluster_PrefetchPolicy {
    pub fn new() -> Cluster_PrefetchPolicy {
        ::std::default::Default::default()
    }

    // .google.protobuf.DoubleValue per_upstream_prefetch_ratio = 1;


    pub fn get_per_upstream_prefetch_ratio(&self) -> &::protobuf::well_known_types::DoubleValue {
        self.per_upstream_prefetch_ratio.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::DoubleValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_per_upstream_prefetch_ratio(&mut self) {
        self.per_upstream_prefetch_ratio.clear();
    }

    pub fn has_per_upstream_prefetch_ratio(&self) -> bool {
        self.per_upstream_prefetch_ratio.is_some()
    }

    // Param is passed by value, moved
    pub fn set_per_upstream_prefetch_ratio(&mut self, v: ::protobuf::well_known_types::DoubleValue) {
        self.per_upstream_prefetch_ratio = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_per_upstream_prefetch_ratio(&mut self) -> &mut ::protobuf::well_known_types::DoubleValue {
        if self.per_upstream_prefetch_ratio.is_none() {
            self.per_upstream_prefetch_ratio.set_default();
        }
        self.per_upstream_prefetch_ratio.as_mut().unwrap()
    }

    // Take field
    pub fn take_per_upstream_prefetch_ratio(&mut self) -> ::protobuf::well_known_types::DoubleValue {
        self.per_upstream_prefetch_ratio.take().unwrap_or_else(|| ::protobuf::well_known_types::DoubleValue::new())
    }

    // .google.protobuf.DoubleValue predictive_prefetch_ratio = 2;


    pub fn get_predictive_prefetch_ratio(&self) -> &::protobuf::well_known_types::DoubleValue {
        self.predictive_prefetch_ratio.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::DoubleValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_predictive_prefetch_ratio(&mut self) {
        self.predictive_prefetch_ratio.clear();
    }

    pub fn has_predictive_prefetch_ratio(&self) -> bool {
        self.predictive_prefetch_ratio.is_some()
    }

    // Param is passed by value, moved
    pub fn set_predictive_prefetch_ratio(&mut self, v: ::protobuf::well_known_types::DoubleValue) {
        self.predictive_prefetch_ratio = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_predictive_prefetch_ratio(&mut self) -> &mut ::protobuf::well_known_types::DoubleValue {
        if self.predictive_prefetch_ratio.is_none() {
            self.predictive_prefetch_ratio.set_default();
        }
        self.predictive_prefetch_ratio.as_mut().unwrap()
    }

    // Take field
    pub fn take_predictive_prefetch_ratio(&mut self) -> ::protobuf::well_known_types::DoubleValue {
        self.predictive_prefetch_ratio.take().unwrap_or_else(|| ::protobuf::well_known_types::DoubleValue::new())
    }
}

impl ::protobuf::Message for Cluster_PrefetchPolicy {
    fn is_initialized(&self) -> bool {
        for v in &self.per_upstream_prefetch_ratio {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.predictive_prefetch_ratio {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.per_upstream_prefetch_ratio)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.predictive_prefetch_ratio)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.per_upstream_prefetch_ratio.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.predictive_prefetch_ratio.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.per_upstream_prefetch_ratio.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.predictive_prefetch_ratio.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cluster_PrefetchPolicy {
        Cluster_PrefetchPolicy::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::DoubleValue>>(
                "per_upstream_prefetch_ratio",
                |m: &Cluster_PrefetchPolicy| { &m.per_upstream_prefetch_ratio },
                |m: &mut Cluster_PrefetchPolicy| { &mut m.per_upstream_prefetch_ratio },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::DoubleValue>>(
                "predictive_prefetch_ratio",
                |m: &Cluster_PrefetchPolicy| { &m.predictive_prefetch_ratio },
                |m: &mut Cluster_PrefetchPolicy| { &mut m.predictive_prefetch_ratio },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cluster_PrefetchPolicy>(
                "Cluster.PrefetchPolicy",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cluster_PrefetchPolicy {
        static instance: ::protobuf::rt::LazyV2<Cluster_PrefetchPolicy> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cluster_PrefetchPolicy::new)
    }
}

impl ::protobuf::Clear for Cluster_PrefetchPolicy {
    fn clear(&mut self) {
        self.per_upstream_prefetch_ratio.clear();
        self.predictive_prefetch_ratio.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cluster_PrefetchPolicy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster_PrefetchPolicy {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Cluster_DiscoveryType {
    STATIC = 0,
    STRICT_DNS = 1,
    LOGICAL_DNS = 2,
    EDS = 3,
    ORIGINAL_DST = 4,
}

impl ::protobuf::ProtobufEnum for Cluster_DiscoveryType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Cluster_DiscoveryType> {
        match value {
            0 => ::std::option::Option::Some(Cluster_DiscoveryType::STATIC),
            1 => ::std::option::Option::Some(Cluster_DiscoveryType::STRICT_DNS),
            2 => ::std::option::Option::Some(Cluster_DiscoveryType::LOGICAL_DNS),
            3 => ::std::option::Option::Some(Cluster_DiscoveryType::EDS),
            4 => ::std::option::Option::Some(Cluster_DiscoveryType::ORIGINAL_DST),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Cluster_DiscoveryType] = &[
            Cluster_DiscoveryType::STATIC,
            Cluster_DiscoveryType::STRICT_DNS,
            Cluster_DiscoveryType::LOGICAL_DNS,
            Cluster_DiscoveryType::EDS,
            Cluster_DiscoveryType::ORIGINAL_DST,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Cluster_DiscoveryType>("Cluster.DiscoveryType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Cluster_DiscoveryType {
}

impl ::std::default::Default for Cluster_DiscoveryType {
    fn default() -> Self {
        Cluster_DiscoveryType::STATIC
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster_DiscoveryType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Cluster_LbPolicy {
    ROUND_ROBIN = 0,
    LEAST_REQUEST = 1,
    RING_HASH = 2,
    RANDOM = 3,
    MAGLEV = 5,
    CLUSTER_PROVIDED = 6,
    LOAD_BALANCING_POLICY_CONFIG = 7,
}

impl ::protobuf::ProtobufEnum for Cluster_LbPolicy {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Cluster_LbPolicy> {
        match value {
            0 => ::std::option::Option::Some(Cluster_LbPolicy::ROUND_ROBIN),
            1 => ::std::option::Option::Some(Cluster_LbPolicy::LEAST_REQUEST),
            2 => ::std::option::Option::Some(Cluster_LbPolicy::RING_HASH),
            3 => ::std::option::Option::Some(Cluster_LbPolicy::RANDOM),
            5 => ::std::option::Option::Some(Cluster_LbPolicy::MAGLEV),
            6 => ::std::option::Option::Some(Cluster_LbPolicy::CLUSTER_PROVIDED),
            7 => ::std::option::Option::Some(Cluster_LbPolicy::LOAD_BALANCING_POLICY_CONFIG),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Cluster_LbPolicy] = &[
            Cluster_LbPolicy::ROUND_ROBIN,
            Cluster_LbPolicy::LEAST_REQUEST,
            Cluster_LbPolicy::RING_HASH,
            Cluster_LbPolicy::RANDOM,
            Cluster_LbPolicy::MAGLEV,
            Cluster_LbPolicy::CLUSTER_PROVIDED,
            Cluster_LbPolicy::LOAD_BALANCING_POLICY_CONFIG,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Cluster_LbPolicy>("Cluster.LbPolicy", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Cluster_LbPolicy {
}

impl ::std::default::Default for Cluster_LbPolicy {
    fn default() -> Self {
        Cluster_LbPolicy::ROUND_ROBIN
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster_LbPolicy {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Cluster_DnsLookupFamily {
    AUTO = 0,
    V4_ONLY = 1,
    V6_ONLY = 2,
}

impl ::protobuf::ProtobufEnum for Cluster_DnsLookupFamily {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Cluster_DnsLookupFamily> {
        match value {
            0 => ::std::option::Option::Some(Cluster_DnsLookupFamily::AUTO),
            1 => ::std::option::Option::Some(Cluster_DnsLookupFamily::V4_ONLY),
            2 => ::std::option::Option::Some(Cluster_DnsLookupFamily::V6_ONLY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Cluster_DnsLookupFamily] = &[
            Cluster_DnsLookupFamily::AUTO,
            Cluster_DnsLookupFamily::V4_ONLY,
            Cluster_DnsLookupFamily::V6_ONLY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Cluster_DnsLookupFamily>("Cluster.DnsLookupFamily", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Cluster_DnsLookupFamily {
}

impl ::std::default::Default for Cluster_DnsLookupFamily {
    fn default() -> Self {
        Cluster_DnsLookupFamily::AUTO
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster_DnsLookupFamily {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Cluster_ClusterProtocolSelection {
    USE_CONFIGURED_PROTOCOL = 0,
    USE_DOWNSTREAM_PROTOCOL = 1,
}

impl ::protobuf::ProtobufEnum for Cluster_ClusterProtocolSelection {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Cluster_ClusterProtocolSelection> {
        match value {
            0 => ::std::option::Option::Some(Cluster_ClusterProtocolSelection::USE_CONFIGURED_PROTOCOL),
            1 => ::std::option::Option::Some(Cluster_ClusterProtocolSelection::USE_DOWNSTREAM_PROTOCOL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Cluster_ClusterProtocolSelection] = &[
            Cluster_ClusterProtocolSelection::USE_CONFIGURED_PROTOCOL,
            Cluster_ClusterProtocolSelection::USE_DOWNSTREAM_PROTOCOL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Cluster_ClusterProtocolSelection>("Cluster.ClusterProtocolSelection", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Cluster_ClusterProtocolSelection {
}

impl ::std::default::Default for Cluster_ClusterProtocolSelection {
    fn default() -> Self {
        Cluster_ClusterProtocolSelection::USE_CONFIGURED_PROTOCOL
    }
}

impl ::protobuf::reflect::ProtobufValue for Cluster_ClusterProtocolSelection {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LoadBalancingPolicy {
    // message fields
    pub policies: ::protobuf::RepeatedField<LoadBalancingPolicy_Policy>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LoadBalancingPolicy {
    fn default() -> &'a LoadBalancingPolicy {
        <LoadBalancingPolicy as ::protobuf::Message>::default_instance()
    }
}

impl LoadBalancingPolicy {
    pub fn new() -> LoadBalancingPolicy {
        ::std::default::Default::default()
    }

    // repeated .envoy.config.cluster.v3.LoadBalancingPolicy.Policy policies = 1;


    pub fn get_policies(&self) -> &[LoadBalancingPolicy_Policy] {
        &self.policies
    }
    pub fn clear_policies(&mut self) {
        self.policies.clear();
    }

    // Param is passed by value, moved
    pub fn set_policies(&mut self, v: ::protobuf::RepeatedField<LoadBalancingPolicy_Policy>) {
        self.policies = v;
    }

    // Mutable pointer to the field.
    pub fn mut_policies(&mut self) -> &mut ::protobuf::RepeatedField<LoadBalancingPolicy_Policy> {
        &mut self.policies
    }

    // Take field
    pub fn take_policies(&mut self) -> ::protobuf::RepeatedField<LoadBalancingPolicy_Policy> {
        ::std::mem::replace(&mut self.policies, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for LoadBalancingPolicy {
    fn is_initialized(&self) -> bool {
        for v in &self.policies {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.policies)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.policies {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.policies {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LoadBalancingPolicy {
        LoadBalancingPolicy::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LoadBalancingPolicy_Policy>>(
                "policies",
                |m: &LoadBalancingPolicy| { &m.policies },
                |m: &mut LoadBalancingPolicy| { &mut m.policies },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LoadBalancingPolicy>(
                "LoadBalancingPolicy",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LoadBalancingPolicy {
        static instance: ::protobuf::rt::LazyV2<LoadBalancingPolicy> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LoadBalancingPolicy::new)
    }
}

impl ::protobuf::Clear for LoadBalancingPolicy {
    fn clear(&mut self) {
        self.policies.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LoadBalancingPolicy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LoadBalancingPolicy {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LoadBalancingPolicy_Policy {
    // message fields
    pub name: ::std::string::String,
    pub typed_config: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LoadBalancingPolicy_Policy {
    fn default() -> &'a LoadBalancingPolicy_Policy {
        <LoadBalancingPolicy_Policy as ::protobuf::Message>::default_instance()
    }
}

impl LoadBalancingPolicy_Policy {
    pub fn new() -> LoadBalancingPolicy_Policy {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .google.protobuf.Any typed_config = 3;


    pub fn get_typed_config(&self) -> &::protobuf::well_known_types::Any {
        self.typed_config.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_typed_config(&mut self) {
        self.typed_config.clear();
    }

    pub fn has_typed_config(&self) -> bool {
        self.typed_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_typed_config(&mut self, v: ::protobuf::well_known_types::Any) {
        self.typed_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_typed_config(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.typed_config.is_none() {
            self.typed_config.set_default();
        }
        self.typed_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_typed_config(&mut self) -> ::protobuf::well_known_types::Any {
        self.typed_config.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }
}

impl ::protobuf::Message for LoadBalancingPolicy_Policy {
    fn is_initialized(&self) -> bool {
        for v in &self.typed_config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.typed_config)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(ref v) = self.typed_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(ref v) = self.typed_config.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LoadBalancingPolicy_Policy {
        LoadBalancingPolicy_Policy::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &LoadBalancingPolicy_Policy| { &m.name },
                |m: &mut LoadBalancingPolicy_Policy| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "typed_config",
                |m: &LoadBalancingPolicy_Policy| { &m.typed_config },
                |m: &mut LoadBalancingPolicy_Policy| { &mut m.typed_config },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LoadBalancingPolicy_Policy>(
                "LoadBalancingPolicy.Policy",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LoadBalancingPolicy_Policy {
        static instance: ::protobuf::rt::LazyV2<LoadBalancingPolicy_Policy> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LoadBalancingPolicy_Policy::new)
    }
}

impl ::protobuf::Clear for LoadBalancingPolicy_Policy {
    fn clear(&mut self) {
        self.name.clear();
        self.typed_config.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LoadBalancingPolicy_Policy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LoadBalancingPolicy_Policy {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpstreamBindConfig {
    // message fields
    pub source_address: ::protobuf::SingularPtrField<super::address::Address>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpstreamBindConfig {
    fn default() -> &'a UpstreamBindConfig {
        <UpstreamBindConfig as ::protobuf::Message>::default_instance()
    }
}

impl UpstreamBindConfig {
    pub fn new() -> UpstreamBindConfig {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.Address source_address = 1;


    pub fn get_source_address(&self) -> &super::address::Address {
        self.source_address.as_ref().unwrap_or_else(|| <super::address::Address as ::protobuf::Message>::default_instance())
    }
    pub fn clear_source_address(&mut self) {
        self.source_address.clear();
    }

    pub fn has_source_address(&self) -> bool {
        self.source_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_source_address(&mut self, v: super::address::Address) {
        self.source_address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source_address(&mut self) -> &mut super::address::Address {
        if self.source_address.is_none() {
            self.source_address.set_default();
        }
        self.source_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_source_address(&mut self) -> super::address::Address {
        self.source_address.take().unwrap_or_else(|| super::address::Address::new())
    }
}

impl ::protobuf::Message for UpstreamBindConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.source_address {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.source_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.source_address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.source_address.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpstreamBindConfig {
        UpstreamBindConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::address::Address>>(
                "source_address",
                |m: &UpstreamBindConfig| { &m.source_address },
                |m: &mut UpstreamBindConfig| { &mut m.source_address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpstreamBindConfig>(
                "UpstreamBindConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpstreamBindConfig {
        static instance: ::protobuf::rt::LazyV2<UpstreamBindConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpstreamBindConfig::new)
    }
}

impl ::protobuf::Clear for UpstreamBindConfig {
    fn clear(&mut self) {
        self.source_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpstreamBindConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpstreamBindConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpstreamConnectionOptions {
    // message fields
    pub tcp_keepalive: ::protobuf::SingularPtrField<super::address::TcpKeepalive>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpstreamConnectionOptions {
    fn default() -> &'a UpstreamConnectionOptions {
        <UpstreamConnectionOptions as ::protobuf::Message>::default_instance()
    }
}

impl UpstreamConnectionOptions {
    pub fn new() -> UpstreamConnectionOptions {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.TcpKeepalive tcp_keepalive = 1;


    pub fn get_tcp_keepalive(&self) -> &super::address::TcpKeepalive {
        self.tcp_keepalive.as_ref().unwrap_or_else(|| <super::address::TcpKeepalive as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tcp_keepalive(&mut self) {
        self.tcp_keepalive.clear();
    }

    pub fn has_tcp_keepalive(&self) -> bool {
        self.tcp_keepalive.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tcp_keepalive(&mut self, v: super::address::TcpKeepalive) {
        self.tcp_keepalive = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tcp_keepalive(&mut self) -> &mut super::address::TcpKeepalive {
        if self.tcp_keepalive.is_none() {
            self.tcp_keepalive.set_default();
        }
        self.tcp_keepalive.as_mut().unwrap()
    }

    // Take field
    pub fn take_tcp_keepalive(&mut self) -> super::address::TcpKeepalive {
        self.tcp_keepalive.take().unwrap_or_else(|| super::address::TcpKeepalive::new())
    }
}

impl ::protobuf::Message for UpstreamConnectionOptions {
    fn is_initialized(&self) -> bool {
        for v in &self.tcp_keepalive {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tcp_keepalive)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.tcp_keepalive.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.tcp_keepalive.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpstreamConnectionOptions {
        UpstreamConnectionOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::address::TcpKeepalive>>(
                "tcp_keepalive",
                |m: &UpstreamConnectionOptions| { &m.tcp_keepalive },
                |m: &mut UpstreamConnectionOptions| { &mut m.tcp_keepalive },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpstreamConnectionOptions>(
                "UpstreamConnectionOptions",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpstreamConnectionOptions {
        static instance: ::protobuf::rt::LazyV2<UpstreamConnectionOptions> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpstreamConnectionOptions::new)
    }
}

impl ::protobuf::Clear for UpstreamConnectionOptions {
    fn clear(&mut self) {
        self.tcp_keepalive.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpstreamConnectionOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpstreamConnectionOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TrackClusterStats {
    // message fields
    pub timeout_budgets: bool,
    pub request_response_sizes: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TrackClusterStats {
    fn default() -> &'a TrackClusterStats {
        <TrackClusterStats as ::protobuf::Message>::default_instance()
    }
}

impl TrackClusterStats {
    pub fn new() -> TrackClusterStats {
        ::std::default::Default::default()
    }

    // bool timeout_budgets = 1;


    pub fn get_timeout_budgets(&self) -> bool {
        self.timeout_budgets
    }
    pub fn clear_timeout_budgets(&mut self) {
        self.timeout_budgets = false;
    }

    // Param is passed by value, moved
    pub fn set_timeout_budgets(&mut self, v: bool) {
        self.timeout_budgets = v;
    }

    // bool request_response_sizes = 2;


    pub fn get_request_response_sizes(&self) -> bool {
        self.request_response_sizes
    }
    pub fn clear_request_response_sizes(&mut self) {
        self.request_response_sizes = false;
    }

    // Param is passed by value, moved
    pub fn set_request_response_sizes(&mut self, v: bool) {
        self.request_response_sizes = v;
    }
}

impl ::protobuf::Message for TrackClusterStats {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.timeout_budgets = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.request_response_sizes = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.timeout_budgets != false {
            my_size += 2;
        }
        if self.request_response_sizes != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.timeout_budgets != false {
            os.write_bool(1, self.timeout_budgets)?;
        }
        if self.request_response_sizes != false {
            os.write_bool(2, self.request_response_sizes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TrackClusterStats {
        TrackClusterStats::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "timeout_budgets",
                |m: &TrackClusterStats| { &m.timeout_budgets },
                |m: &mut TrackClusterStats| { &mut m.timeout_budgets },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "request_response_sizes",
                |m: &TrackClusterStats| { &m.request_response_sizes },
                |m: &mut TrackClusterStats| { &mut m.request_response_sizes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TrackClusterStats>(
                "TrackClusterStats",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TrackClusterStats {
        static instance: ::protobuf::rt::LazyV2<TrackClusterStats> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TrackClusterStats::new)
    }
}

impl ::protobuf::Clear for TrackClusterStats {
    fn clear(&mut self) {
        self.timeout_budgets = false;
        self.request_response_sizes = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TrackClusterStats {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TrackClusterStats {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%envoy/config/cluster/v3/cluster.proto\x12\x17envoy.config.cluster.v3\
    \x1a-envoy/config/cluster/v3/circuit_breaker.proto\x1a$envoy/config/clus\
    ter/v3/filter.proto\x1a/envoy/config/cluster/v3/outlier_detection.proto\
    \x1a\"envoy/config/core/v3/address.proto\x1a\x1fenvoy/config/core/v3/bas\
    e.proto\x1a(envoy/config/core/v3/config_source.proto\x1a$envoy/config/co\
    re/v3/extension.proto\x1a'envoy/config/core/v3/health_check.proto\x1a#en\
    voy/config/core/v3/protocol.proto\x1a'envoy/config/endpoint/v3/endpoint.\
    proto\x1a\x1benvoy/type/v3/percent.proto\x1a\x19google/protobuf/any.prot\
    o\x1a\x1egoogle/protobuf/duration.proto\x1a\x1cgoogle/protobuf/struct.pr\
    oto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\"xds/core/v3/collection_en\
    try.proto\x1a#envoy/annotations/deprecation.proto\x1a\x1eudpa/annotation\
    s/migrate.proto\x1a\x1fudpa/annotations/security.proto\x1a\x1dudpa/annot\
    ations/status.proto\x1a!udpa/annotations/versioning.proto\x1a\x17validat\
    e/validate.proto\"K\n\x11ClusterCollection\x126\n\x07entries\x18\x01\x20\
    \x01(\x0b2\x1c.xds.core.v3.CollectionEntryR\x07entries\"\x96G\n\x07Clust\
    er\x12o\n\x18transport_socket_matches\x18+\x20\x03(\x0b25.envoy.config.c\
    luster.v3.Cluster.TransportSocketMatchR\x16transportSocketMatches\x12\
    \x1b\n\x04name\x18\x01\x20\x01(\tR\x04nameB\x07\xfaB\x04r\x02\x10\x01\
    \x12\"\n\ralt_stat_name\x18\x1c\x20\x01(\tR\x0baltStatName\x12N\n\x04typ\
    e\x18\x02\x20\x01(\x0e2..envoy.config.cluster.v3.Cluster.DiscoveryTypeH\
    \0R\x04typeB\x08\xfaB\x05\x82\x01\x02\x10\x01\x12W\n\x0ccluster_type\x18\
    &\x20\x01(\x0b22.envoy.config.cluster.v3.Cluster.CustomClusterTypeH\0R\
    \x0bclusterType\x12_\n\x12eds_cluster_config\x18\x03\x20\x01(\x0b21.envo\
    y.config.cluster.v3.Cluster.EdsClusterConfigR\x10edsClusterConfig\x12L\n\
    \x0fconnect_timeout\x18\x04\x20\x01(\x0b2\x19.google.protobuf.DurationR\
    \x0econnectTimeoutB\x08\xfaB\x05\xaa\x01\x02*\0\x12o\n!per_connection_bu\
    ffer_limit_bytes\x18\x05\x20\x01(\x0b2\x1c.google.protobuf.UInt32ValueR\
    \x1dperConnectionBufferLimitBytesB\x07\x8a\x93\xb7*\x02\x10\x01\x12R\n\t\
    lb_policy\x18\x06\x20\x01(\x0e2).envoy.config.cluster.v3.Cluster.LbPolic\
    yR\x08lbPolicyB\n\xfaB\x07\x82\x01\x04\x10\x01\x20\x07\x12X\n\x0fload_as\
    signment\x18!\x20\x01(\x0b2/.envoy.config.endpoint.v3.ClusterLoadAssignm\
    entR\x0eloadAssignment\x12F\n\rhealth_checks\x18\x08\x20\x03(\x0b2!.envo\
    y.config.core.v3.HealthCheckR\x0chealthChecks\x12[\n\x1bmax_requests_per\
    _connection\x18\t\x20\x01(\x0b2\x1c.google.protobuf.UInt32ValueR\x18maxR\
    equestsPerConnection\x12S\n\x10circuit_breakers\x18\n\x20\x01(\x0b2(.env\
    oy.config.cluster.v3.CircuitBreakersR\x0fcircuitBreakers\x12z\n\x1eupstr\
    eam_http_protocol_options\x18.\x20\x01(\x0b21.envoy.config.core.v3.Upstr\
    eamHttpProtocolOptionsR\x1bupstreamHttpProtocolOptionsB\x02\x18\x01\x12n\
    \n\x1ccommon_http_protocol_options\x18\x1d\x20\x01(\x0b2).envoy.config.c\
    ore.v3.HttpProtocolOptionsR\x19commonHttpProtocolOptionsB\x02\x18\x01\
    \x12b\n\x15http_protocol_options\x18\r\x20\x01(\x0b2*.envoy.config.core.\
    v3.Http1ProtocolOptionsR\x13httpProtocolOptionsB\x02\x18\x01\x12k\n\x16h\
    ttp2_protocol_options\x18\x0e\x20\x01(\x0b2*.envoy.config.core.v3.Http2P\
    rotocolOptionsR\x14http2ProtocolOptionsB\t\x18\x01\x8a\x93\xb7*\x02\x10\
    \x01\x12\x8c\x01\n\x20typed_extension_protocol_options\x18$\x20\x03(\x0b\
    2C.envoy.config.cluster.v3.Cluster.TypedExtensionProtocolOptionsEntryR\
    \x1dtypedExtensionProtocolOptions\x12Q\n\x10dns_refresh_rate\x18\x10\x20\
    \x01(\x0b2\x19.google.protobuf.DurationR\x0ednsRefreshRateB\x0c\xfaB\t\
    \xaa\x01\x06*\x04\x10\xc0\x84=\x12e\n\x18dns_failure_refresh_rate\x18,\
    \x20\x01(\x0b2,.envoy.config.cluster.v3.Cluster.RefreshRateR\x15dnsFailu\
    reRefreshRate\x12&\n\x0frespect_dns_ttl\x18'\x20\x01(\x08R\rrespectDnsTt\
    l\x12f\n\x11dns_lookup_family\x18\x11\x20\x01(\x0e20.envoy.config.cluste\
    r.v3.Cluster.DnsLookupFamilyR\x0fdnsLookupFamilyB\x08\xfaB\x05\x82\x01\
    \x02\x10\x01\x12B\n\rdns_resolvers\x18\x12\x20\x03(\x0b2\x1d.envoy.confi\
    g.core.v3.AddressR\x0cdnsResolvers\x124\n\x17use_tcp_for_dns_lookups\x18\
    -\x20\x01(\x08R\x13useTcpForDnsLookups\x12V\n\x11outlier_detection\x18\
    \x13\x20\x01(\x0b2).envoy.config.cluster.v3.OutlierDetectionR\x10outlier\
    Detection\x12N\n\x10cleanup_interval\x18\x14\x20\x01(\x0b2\x19.google.pr\
    otobuf.DurationR\x0fcleanupIntervalB\x08\xfaB\x05\xaa\x01\x02*\0\x12R\n\
    \x14upstream_bind_config\x18\x15\x20\x01(\x0b2\x20.envoy.config.core.v3.\
    BindConfigR\x12upstreamBindConfig\x12Y\n\x10lb_subset_config\x18\x16\x20\
    \x01(\x0b2/.envoy.config.cluster.v3.Cluster.LbSubsetConfigR\x0elbSubsetC\
    onfig\x12b\n\x13ring_hash_lb_config\x18\x17\x20\x01(\x0b21.envoy.config.\
    cluster.v3.Cluster.RingHashLbConfigH\x01R\x10ringHashLbConfig\x12[\n\x10\
    maglev_lb_config\x184\x20\x01(\x0b2/.envoy.config.cluster.v3.Cluster.Mag\
    levLbConfigH\x01R\x0emaglevLbConfig\x12k\n\x16original_dst_lb_config\x18\
    \"\x20\x01(\x0b24.envoy.config.cluster.v3.Cluster.OriginalDstLbConfigH\
    \x01R\x13originalDstLbConfig\x12n\n\x17least_request_lb_config\x18%\x20\
    \x01(\x0b25.envoy.config.cluster.v3.Cluster.LeastRequestLbConfigH\x01R\
    \x14leastRequestLbConfig\x12Y\n\x10common_lb_config\x18\x1b\x20\x01(\x0b\
    2/.envoy.config.cluster.v3.Cluster.CommonLbConfigR\x0ecommonLbConfig\x12\
    P\n\x10transport_socket\x18\x18\x20\x01(\x0b2%.envoy.config.core.v3.Tran\
    sportSocketR\x0ftransportSocket\x12:\n\x08metadata\x18\x19\x20\x01(\x0b2\
    \x1e.envoy.config.core.v3.MetadataR\x08metadata\x12l\n\x12protocol_selec\
    tion\x18\x1a\x20\x01(\x0e29.envoy.config.cluster.v3.Cluster.ClusterProto\
    colSelectionR\x11protocolSelectionB\x02\x18\x01\x12r\n\x1bupstream_conne\
    ction_options\x18\x1e\x20\x01(\x0b22.envoy.config.cluster.v3.UpstreamCon\
    nectionOptionsR\x19upstreamConnectionOptions\x12U\n(close_connections_on\
    _host_health_failure\x18\x1f\x20\x01(\x08R#closeConnectionsOnHostHealthF\
    ailure\x12@\n\x1dignore_health_on_host_removal\x18\x20\x20\x01(\x08R\x19\
    ignoreHealthOnHostRemoval\x129\n\x07filters\x18(\x20\x03(\x0b2\x1f.envoy\
    .config.cluster.v3.FilterR\x07filters\x12`\n\x15load_balancing_policy\
    \x18)\x20\x01(\x0b2,.envoy.config.cluster.v3.LoadBalancingPolicyR\x13loa\
    dBalancingPolicy\x12A\n\nlrs_server\x18*\x20\x01(\x0b2\".envoy.config.co\
    re.v3.ConfigSourceR\tlrsServer\x126\n\x15track_timeout_budgets\x18/\x20\
    \x01(\x08R\x13trackTimeoutBudgetsB\x02\x18\x01\x12S\n\x0fupstream_config\
    \x180\x20\x01(\x0b2*.envoy.config.core.v3.TypedExtensionConfigR\x0eupstr\
    eamConfig\x12Z\n\x13track_cluster_stats\x181\x20\x01(\x0b2*.envoy.config\
    .cluster.v3.TrackClusterStatsR\x11trackClusterStats\x12X\n\x0fprefetch_p\
    olicy\x182\x20\x01(\x0b2/.envoy.config.cluster.v3.Cluster.PrefetchPolicy\
    R\x0eprefetchPolicy\x12X\n)connection_pool_per_downstream_connection\x18\
    3\x20\x01(\x08R%connectionPoolPerDownstreamConnection\x1a\xe6\x01\n\x14T\
    ransportSocketMatch\x12\x1b\n\x04name\x18\x01\x20\x01(\tR\x04nameB\x07\
    \xfaB\x04r\x02\x10\x01\x12-\n\x05match\x18\x02\x20\x01(\x0b2\x17.google.\
    protobuf.StructR\x05match\x12P\n\x10transport_socket\x18\x03\x20\x01(\
    \x0b2%.envoy.config.core.v3.TransportSocketR\x0ftransportSocket:0\x9a\
    \xc5\x88\x1e+\n)envoy.api.v2.Cluster.TransportSocketMatch\x1a\x98\x01\n\
    \x11CustomClusterType\x12\x1b\n\x04name\x18\x01\x20\x01(\tR\x04nameB\x07\
    \xfaB\x04r\x02\x10\x01\x127\n\x0ctyped_config\x18\x02\x20\x01(\x0b2\x14.\
    google.protobuf.AnyR\x0btypedConfig:-\x9a\xc5\x88\x1e(\n&envoy.api.v2.Cl\
    uster.CustomClusterType\x1a\xa6\x01\n\x10EdsClusterConfig\x12A\n\neds_co\
    nfig\x18\x01\x20\x01(\x0b2\".envoy.config.core.v3.ConfigSourceR\tedsConf\
    ig\x12!\n\x0cservice_name\x18\x02\x20\x01(\tR\x0bserviceName:,\x9a\xc5\
    \x88\x1e'\n%envoy.api.v2.Cluster.EdsClusterConfig\x1a\xc0\x08\n\x0eLbSub\
    setConfig\x12y\n\x0ffallback_policy\x18\x01\x20\x01(\x0e2F.envoy.config.\
    cluster.v3.Cluster.LbSubsetConfig.LbSubsetFallbackPolicyR\x0efallbackPol\
    icyB\x08\xfaB\x05\x82\x01\x02\x10\x01\x12>\n\x0edefault_subset\x18\x02\
    \x20\x01(\x0b2\x17.google.protobuf.StructR\rdefaultSubset\x12k\n\x10subs\
    et_selectors\x18\x03\x20\x03(\x0b2@.envoy.config.cluster.v3.Cluster.LbSu\
    bsetConfig.LbSubsetSelectorR\x0fsubsetSelectors\x122\n\x15locality_weigh\
    t_aware\x18\x04\x20\x01(\x08R\x13localityWeightAware\x122\n\x15scale_loc\
    ality_weight\x18\x05\x20\x01(\x08R\x13scaleLocalityWeight\x12$\n\x0epani\
    c_mode_any\x18\x06\x20\x01(\x08R\x0cpanicModeAny\x12\x1e\n\x0blist_as_an\
    y\x18\x07\x20\x01(\x08R\tlistAsAny\x1a\xda\x03\n\x10LbSubsetSelector\x12\
    \x12\n\x04keys\x18\x01\x20\x03(\tR\x04keys\x123\n\x16single_host_per_sub\
    set\x18\x04\x20\x01(\x08R\x13singleHostPerSubset\x12\x92\x01\n\x0ffallba\
    ck_policy\x18\x02\x20\x01(\x0e2_.envoy.config.cluster.v3.Cluster.LbSubse\
    tConfig.LbSubsetSelector.LbSubsetSelectorFallbackPolicyR\x0efallbackPoli\
    cyB\x08\xfaB\x05\x82\x01\x02\x10\x01\x120\n\x14fallback_keys_subset\x18\
    \x03\x20\x03(\tR\x12fallbackKeysSubset\"y\n\x1eLbSubsetSelectorFallbackP\
    olicy\x12\x0f\n\x0bNOT_DEFINED\x10\0\x12\x0f\n\x0bNO_FALLBACK\x10\x01\
    \x12\x10\n\x0cANY_ENDPOINT\x10\x02\x12\x12\n\x0eDEFAULT_SUBSET\x10\x03\
    \x12\x0f\n\x0bKEYS_SUBSET\x10\x04:;\x9a\xc5\x88\x1e6\n4envoy.api.v2.Clus\
    ter.LbSubsetConfig.LbSubsetSelector\"O\n\x16LbSubsetFallbackPolicy\x12\
    \x0f\n\x0bNO_FALLBACK\x10\0\x12\x10\n\x0cANY_ENDPOINT\x10\x01\x12\x12\n\
    \x0eDEFAULT_SUBSET\x10\x02:*\x9a\xc5\x88\x1e%\n#envoy.api.v2.Cluster.LbS\
    ubsetConfig\x1a\xe7\x01\n\x14LeastRequestLbConfig\x12H\n\x0cchoice_count\
    \x18\x01\x20\x01(\x0b2\x1c.google.protobuf.UInt32ValueR\x0bchoiceCountB\
    \x07\xfaB\x04*\x02(\x02\x12S\n\x13active_request_bias\x18\x02\x20\x01(\
    \x0b2#.envoy.config.core.v3.RuntimeDoubleR\x11activeRequestBias:0\x9a\
    \xc5\x88\x1e+\n)envoy.api.v2.Cluster.LeastRequestLbConfig\x1a\x91\x03\n\
    \x10RingHashLbConfig\x12T\n\x11minimum_ring_size\x18\x01\x20\x01(\x0b2\
    \x1c.google.protobuf.UInt64ValueR\x0fminimumRingSizeB\n\xfaB\x072\x05\
    \x18\x80\x80\x80\x04\x12m\n\rhash_function\x18\x03\x20\x01(\x0e2>.envoy.\
    config.cluster.v3.Cluster.RingHashLbConfig.HashFunctionR\x0chashFunction\
    B\x08\xfaB\x05\x82\x01\x02\x10\x01\x12T\n\x11maximum_ring_size\x18\x04\
    \x20\x01(\x0b2\x1c.google.protobuf.UInt64ValueR\x0fmaximumRingSizeB\n\
    \xfaB\x072\x05\x18\x80\x80\x80\x04\".\n\x0cHashFunction\x12\x0b\n\x07XX_\
    HASH\x10\0\x12\x11\n\rMURMUR_HASH_2\x10\x01:,\x9a\xc5\x88\x1e'\n%envoy.a\
    pi.v2.Cluster.RingHashLbConfigJ\x04\x08\x02\x10\x03\x1aM\n\x0eMaglevLbCo\
    nfig\x12;\n\ntable_size\x18\x01\x20\x01(\x0b2\x1c.google.protobuf.UInt64\
    ValueR\ttableSize\x1an\n\x13OriginalDstLbConfig\x12&\n\x0fuse_http_heade\
    r\x18\x01\x20\x01(\x08R\ruseHttpHeader:/\x9a\xc5\x88\x1e*\n(envoy.api.v2\
    .Cluster.OriginalDstLbConfig\x1a\xfc\n\n\x0eCommonLbConfig\x12N\n\x17hea\
    lthy_panic_threshold\x18\x01\x20\x01(\x0b2\x16.envoy.type.v3.PercentR\
    \x15healthyPanicThreshold\x12t\n\x14zone_aware_lb_config\x18\x02\x20\x01\
    (\x0b2A.envoy.config.cluster.v3.Cluster.CommonLbConfig.ZoneAwareLbConfig\
    H\0R\x11zoneAwareLbConfig\x12\x89\x01\n\x1blocality_weighted_lb_config\
    \x18\x03\x20\x01(\x0b2H.envoy.config.cluster.v3.Cluster.CommonLbConfig.L\
    ocalityWeightedLbConfigH\0R\x18localityWeightedLbConfig\x12I\n\x13update\
    _merge_window\x18\x04\x20\x01(\x0b2\x19.google.protobuf.DurationR\x11upd\
    ateMergeWindow\x12C\n\x1fignore_new_hosts_until_first_hc\x18\x05\x20\x01\
    (\x08R\x1aignoreNewHostsUntilFirstHc\x12M\n$close_connections_on_host_se\
    t_change\x18\x06\x20\x01(\x08R\x1fcloseConnectionsOnHostSetChange\x12\
    \x8a\x01\n\x1cconsistent_hashing_lb_config\x18\x07\x20\x01(\x0b2I.envoy.\
    config.cluster.v3.Cluster.CommonLbConfig.ConsistentHashingLbConfigR\x19c\
    onsistentHashingLbConfig\x1a\x8d\x02\n\x11ZoneAwareLbConfig\x12?\n\x0fro\
    uting_enabled\x18\x01\x20\x01(\x0b2\x16.envoy.type.v3.PercentR\x0eroutin\
    gEnabled\x12F\n\x10min_cluster_size\x18\x02\x20\x01(\x0b2\x1c.google.pro\
    tobuf.UInt64ValueR\x0eminClusterSize\x121\n\x15fail_traffic_on_panic\x18\
    \x03\x20\x01(\x08R\x12failTrafficOnPanic:<\x9a\xc5\x88\x1e7\n5envoy.api.\
    v2.Cluster.CommonLbConfig.ZoneAwareLbConfig\x1a_\n\x18LocalityWeightedLb\
    Config:C\x9a\xc5\x88\x1e>\n<envoy.api.v2.Cluster.CommonLbConfig.Locality\
    WeightedLbConfig\x1a\xf1\x01\n\x19ConsistentHashingLbConfig\x127\n\x18us\
    e_hostname_for_hashing\x18\x01\x20\x01(\x08R\x15useHostnameForHashing\
    \x12U\n\x13hash_balance_factor\x18\x02\x20\x01(\x0b2\x1c.google.protobuf\
    .UInt32ValueR\x11hashBalanceFactorB\x07\xfaB\x04*\x02(d:D\x9a\xc5\x88\
    \x1e?\n=envoy.api.v2.Cluster.CommonLbConfig.ConsistentHashingLbConfigB\
    \x1b\n\x19locality_config_specifier:*\x9a\xc5\x88\x1e%\n#envoy.api.v2.Cl\
    uster.CommonLbConfig\x1a\xd2\x01\n\x0bRefreshRate\x12N\n\rbase_interval\
    \x18\x01\x20\x01(\x0b2\x19.google.protobuf.DurationR\x0cbaseIntervalB\
    \x0e\xfaB\x0b\xaa\x01\x08\x08\x01*\x04\x10\xc0\x84=\x12J\n\x0cmax_interv\
    al\x18\x02\x20\x01(\x0b2\x19.google.protobuf.DurationR\x0bmaxIntervalB\
    \x0c\xfaB\t\xaa\x01\x06*\x04\x10\xc0\x84=:'\x9a\xc5\x88\x1e\"\n\x20envoy\
    .api.v2.Cluster.RefreshRate\x1a\xf9\x01\n\x0ePrefetchPolicy\x12t\n\x1bpe\
    r_upstream_prefetch_ratio\x18\x01\x20\x01(\x0b2\x1c.google.protobuf.Doub\
    leValueR\x18perUpstreamPrefetchRatioB\x17\xfaB\x14\x12\x12\x19\0\0\0\0\0\
    \0\x08@)\0\0\0\0\0\0\xf0?\x12q\n\x19predictive_prefetch_ratio\x18\x02\
    \x20\x01(\x0b2\x1c.google.protobuf.DoubleValueR\x17predictivePrefetchRat\
    ioB\x17\xfaB\x14\x12\x12\x19\0\0\0\0\0\0\x08@)\0\0\0\0\0\0\xf0?\x1af\n\"\
    TypedExtensionProtocolOptionsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\
    \x03key\x12*\n\x05value\x18\x02\x20\x01(\x0b2\x14.google.protobuf.AnyR\
    \x05value:\x028\x01\"W\n\rDiscoveryType\x12\n\n\x06STATIC\x10\0\x12\x0e\
    \n\nSTRICT_DNS\x10\x01\x12\x0f\n\x0bLOGICAL_DNS\x10\x02\x12\x07\n\x03EDS\
    \x10\x03\x12\x10\n\x0cORIGINAL_DST\x10\x04\"\xa4\x01\n\x08LbPolicy\x12\
    \x0f\n\x0bROUND_ROBIN\x10\0\x12\x11\n\rLEAST_REQUEST\x10\x01\x12\r\n\tRI\
    NG_HASH\x10\x02\x12\n\n\x06RANDOM\x10\x03\x12\n\n\x06MAGLEV\x10\x05\x12\
    \x14\n\x10CLUSTER_PROVIDED\x10\x06\x12\x20\n\x1cLOAD_BALANCING_POLICY_CO\
    NFIG\x10\x07*\x0fORIGINAL_DST_LB\"\x04\x08\x04\x10\x04\"5\n\x0fDnsLookup\
    Family\x12\x08\n\x04AUTO\x10\0\x12\x0b\n\x07V4_ONLY\x10\x01\x12\x0b\n\
    \x07V6_ONLY\x10\x02\"T\n\x18ClusterProtocolSelection\x12\x1b\n\x17USE_CO\
    NFIGURED_PROTOCOL\x10\0\x12\x1b\n\x17USE_DOWNSTREAM_PROTOCOL\x10\x01B\
    \x18\n\x16cluster_discovery_typeB\x0b\n\tlb_config:\x1b\x9a\xc5\x88\x1e\
    \x16\n\x14envoy.api.v2.ClusterJ\x04\x08\x0c\x10\rJ\x04\x08\x0f\x10\x10J\
    \x04\x08\x07\x10\x08J\x04\x08\x0b\x10\x0cJ\x04\x08#\x10$R\x05hostsR\x0bt\
    ls_contextR\x1aextension_protocol_options\"\xa5\x02\n\x13LoadBalancingPo\
    licy\x12O\n\x08policies\x18\x01\x20\x03(\x0b23.envoy.config.cluster.v3.L\
    oadBalancingPolicy.PolicyR\x08policies\x1a\x93\x01\n\x06Policy\x12\x12\n\
    \x04name\x18\x01\x20\x01(\tR\x04name\x127\n\x0ctyped_config\x18\x03\x20\
    \x01(\x0b2\x14.google.protobuf.AnyR\x0btypedConfig:.\x9a\xc5\x88\x1e)\n'\
    envoy.api.v2.LoadBalancingPolicy.PolicyJ\x04\x08\x02\x10\x03R\x06config:\
    '\x9a\xc5\x88\x1e\"\n\x20envoy.api.v2.LoadBalancingPolicy\"\x82\x01\n\
    \x12UpstreamBindConfig\x12D\n\x0esource_address\x18\x01\x20\x01(\x0b2\
    \x1d.envoy.config.core.v3.AddressR\rsourceAddress:&\x9a\xc5\x88\x1e!\n\
    \x1fenvoy.api.v2.UpstreamBindConfig\"\x93\x01\n\x19UpstreamConnectionOpt\
    ions\x12G\n\rtcp_keepalive\x18\x01\x20\x01(\x0b2\".envoy.config.core.v3.\
    TcpKeepaliveR\x0ctcpKeepalive:-\x9a\xc5\x88\x1e(\n&envoy.api.v2.Upstream\
    ConnectionOptions\"r\n\x11TrackClusterStats\x12'\n\x0ftimeout_budgets\
    \x18\x01\x20\x01(\x08R\x0etimeoutBudgets\x124\n\x16request_response_size\
    s\x18\x02\x20\x01(\x08R\x14requestResponseSizesB?\n%io.envoyproxy.envoy.\
    config.cluster.v3B\x0cClusterProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\x02b\
    \x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
