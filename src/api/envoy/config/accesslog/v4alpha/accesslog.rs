// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/accesslog/v4alpha/accesslog.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct AccessLog {
    // message fields
    pub name: ::std::string::String,
    pub filter: ::protobuf::SingularPtrField<AccessLogFilter>,
    // message oneof groups
    pub config_type: ::std::option::Option<AccessLog_oneof_config_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccessLog {
    fn default() -> &'a AccessLog {
        <AccessLog as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum AccessLog_oneof_config_type {
    typed_config(::protobuf::well_known_types::Any),
}

impl AccessLog {
    pub fn new() -> AccessLog {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .envoy.config.accesslog.v4alpha.AccessLogFilter filter = 2;


    pub fn get_filter(&self) -> &AccessLogFilter {
        self.filter.as_ref().unwrap_or_else(|| <AccessLogFilter as ::protobuf::Message>::default_instance())
    }
    pub fn clear_filter(&mut self) {
        self.filter.clear();
    }

    pub fn has_filter(&self) -> bool {
        self.filter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filter(&mut self, v: AccessLogFilter) {
        self.filter = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter(&mut self) -> &mut AccessLogFilter {
        if self.filter.is_none() {
            self.filter.set_default();
        }
        self.filter.as_mut().unwrap()
    }

    // Take field
    pub fn take_filter(&mut self) -> AccessLogFilter {
        self.filter.take().unwrap_or_else(|| AccessLogFilter::new())
    }

    // .google.protobuf.Any typed_config = 4;


    pub fn get_typed_config(&self) -> &::protobuf::well_known_types::Any {
        match self.config_type {
            ::std::option::Option::Some(AccessLog_oneof_config_type::typed_config(ref v)) => v,
            _ => <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_typed_config(&mut self) {
        self.config_type = ::std::option::Option::None;
    }

    pub fn has_typed_config(&self) -> bool {
        match self.config_type {
            ::std::option::Option::Some(AccessLog_oneof_config_type::typed_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_typed_config(&mut self, v: ::protobuf::well_known_types::Any) {
        self.config_type = ::std::option::Option::Some(AccessLog_oneof_config_type::typed_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_typed_config(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if let ::std::option::Option::Some(AccessLog_oneof_config_type::typed_config(_)) = self.config_type {
        } else {
            self.config_type = ::std::option::Option::Some(AccessLog_oneof_config_type::typed_config(::protobuf::well_known_types::Any::new()));
        }
        match self.config_type {
            ::std::option::Option::Some(AccessLog_oneof_config_type::typed_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_typed_config(&mut self) -> ::protobuf::well_known_types::Any {
        if self.has_typed_config() {
            match self.config_type.take() {
                ::std::option::Option::Some(AccessLog_oneof_config_type::typed_config(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Any::new()
        }
    }
}

impl ::protobuf::Message for AccessLog {
    fn is_initialized(&self) -> bool {
        for v in &self.filter {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(AccessLog_oneof_config_type::typed_config(ref v)) = self.config_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.filter)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config_type = ::std::option::Option::Some(AccessLog_oneof_config_type::typed_config(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(ref v) = self.filter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.config_type {
            match v {
                &AccessLog_oneof_config_type::typed_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(ref v) = self.filter.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.config_type {
            match v {
                &AccessLog_oneof_config_type::typed_config(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccessLog {
        AccessLog::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &AccessLog| { &m.name },
                |m: &mut AccessLog| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AccessLogFilter>>(
                "filter",
                |m: &AccessLog| { &m.filter },
                |m: &mut AccessLog| { &mut m.filter },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Any>(
                "typed_config",
                AccessLog::has_typed_config,
                AccessLog::get_typed_config,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccessLog>(
                "AccessLog",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccessLog {
        static instance: ::protobuf::rt::LazyV2<AccessLog> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccessLog::new)
    }
}

impl ::protobuf::Clear for AccessLog {
    fn clear(&mut self) {
        self.name.clear();
        self.filter.clear();
        self.config_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccessLog {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccessLog {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AccessLogFilter {
    // message oneof groups
    pub filter_specifier: ::std::option::Option<AccessLogFilter_oneof_filter_specifier>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AccessLogFilter {
    fn default() -> &'a AccessLogFilter {
        <AccessLogFilter as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum AccessLogFilter_oneof_filter_specifier {
    status_code_filter(StatusCodeFilter),
    duration_filter(DurationFilter),
    not_health_check_filter(NotHealthCheckFilter),
    traceable_filter(TraceableFilter),
    runtime_filter(RuntimeFilter),
    and_filter(AndFilter),
    or_filter(OrFilter),
    header_filter(HeaderFilter),
    response_flag_filter(ResponseFlagFilter),
    grpc_status_filter(GrpcStatusFilter),
    extension_filter(ExtensionFilter),
    metadata_filter(MetadataFilter),
}

impl AccessLogFilter {
    pub fn new() -> AccessLogFilter {
        ::std::default::Default::default()
    }

    // .envoy.config.accesslog.v4alpha.StatusCodeFilter status_code_filter = 1;


    pub fn get_status_code_filter(&self) -> &StatusCodeFilter {
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::status_code_filter(ref v)) => v,
            _ => <StatusCodeFilter as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_status_code_filter(&mut self) {
        self.filter_specifier = ::std::option::Option::None;
    }

    pub fn has_status_code_filter(&self) -> bool {
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::status_code_filter(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_status_code_filter(&mut self, v: StatusCodeFilter) {
        self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::status_code_filter(v))
    }

    // Mutable pointer to the field.
    pub fn mut_status_code_filter(&mut self) -> &mut StatusCodeFilter {
        if let ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::status_code_filter(_)) = self.filter_specifier {
        } else {
            self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::status_code_filter(StatusCodeFilter::new()));
        }
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::status_code_filter(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_status_code_filter(&mut self) -> StatusCodeFilter {
        if self.has_status_code_filter() {
            match self.filter_specifier.take() {
                ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::status_code_filter(v)) => v,
                _ => panic!(),
            }
        } else {
            StatusCodeFilter::new()
        }
    }

    // .envoy.config.accesslog.v4alpha.DurationFilter duration_filter = 2;


    pub fn get_duration_filter(&self) -> &DurationFilter {
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::duration_filter(ref v)) => v,
            _ => <DurationFilter as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_duration_filter(&mut self) {
        self.filter_specifier = ::std::option::Option::None;
    }

    pub fn has_duration_filter(&self) -> bool {
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::duration_filter(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_duration_filter(&mut self, v: DurationFilter) {
        self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::duration_filter(v))
    }

    // Mutable pointer to the field.
    pub fn mut_duration_filter(&mut self) -> &mut DurationFilter {
        if let ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::duration_filter(_)) = self.filter_specifier {
        } else {
            self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::duration_filter(DurationFilter::new()));
        }
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::duration_filter(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_duration_filter(&mut self) -> DurationFilter {
        if self.has_duration_filter() {
            match self.filter_specifier.take() {
                ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::duration_filter(v)) => v,
                _ => panic!(),
            }
        } else {
            DurationFilter::new()
        }
    }

    // .envoy.config.accesslog.v4alpha.NotHealthCheckFilter not_health_check_filter = 3;


    pub fn get_not_health_check_filter(&self) -> &NotHealthCheckFilter {
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::not_health_check_filter(ref v)) => v,
            _ => <NotHealthCheckFilter as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_not_health_check_filter(&mut self) {
        self.filter_specifier = ::std::option::Option::None;
    }

    pub fn has_not_health_check_filter(&self) -> bool {
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::not_health_check_filter(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_not_health_check_filter(&mut self, v: NotHealthCheckFilter) {
        self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::not_health_check_filter(v))
    }

    // Mutable pointer to the field.
    pub fn mut_not_health_check_filter(&mut self) -> &mut NotHealthCheckFilter {
        if let ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::not_health_check_filter(_)) = self.filter_specifier {
        } else {
            self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::not_health_check_filter(NotHealthCheckFilter::new()));
        }
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::not_health_check_filter(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_not_health_check_filter(&mut self) -> NotHealthCheckFilter {
        if self.has_not_health_check_filter() {
            match self.filter_specifier.take() {
                ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::not_health_check_filter(v)) => v,
                _ => panic!(),
            }
        } else {
            NotHealthCheckFilter::new()
        }
    }

    // .envoy.config.accesslog.v4alpha.TraceableFilter traceable_filter = 4;


    pub fn get_traceable_filter(&self) -> &TraceableFilter {
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::traceable_filter(ref v)) => v,
            _ => <TraceableFilter as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_traceable_filter(&mut self) {
        self.filter_specifier = ::std::option::Option::None;
    }

    pub fn has_traceable_filter(&self) -> bool {
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::traceable_filter(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_traceable_filter(&mut self, v: TraceableFilter) {
        self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::traceable_filter(v))
    }

    // Mutable pointer to the field.
    pub fn mut_traceable_filter(&mut self) -> &mut TraceableFilter {
        if let ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::traceable_filter(_)) = self.filter_specifier {
        } else {
            self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::traceable_filter(TraceableFilter::new()));
        }
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::traceable_filter(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_traceable_filter(&mut self) -> TraceableFilter {
        if self.has_traceable_filter() {
            match self.filter_specifier.take() {
                ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::traceable_filter(v)) => v,
                _ => panic!(),
            }
        } else {
            TraceableFilter::new()
        }
    }

    // .envoy.config.accesslog.v4alpha.RuntimeFilter runtime_filter = 5;


    pub fn get_runtime_filter(&self) -> &RuntimeFilter {
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::runtime_filter(ref v)) => v,
            _ => <RuntimeFilter as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_runtime_filter(&mut self) {
        self.filter_specifier = ::std::option::Option::None;
    }

    pub fn has_runtime_filter(&self) -> bool {
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::runtime_filter(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_runtime_filter(&mut self, v: RuntimeFilter) {
        self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::runtime_filter(v))
    }

    // Mutable pointer to the field.
    pub fn mut_runtime_filter(&mut self) -> &mut RuntimeFilter {
        if let ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::runtime_filter(_)) = self.filter_specifier {
        } else {
            self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::runtime_filter(RuntimeFilter::new()));
        }
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::runtime_filter(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_runtime_filter(&mut self) -> RuntimeFilter {
        if self.has_runtime_filter() {
            match self.filter_specifier.take() {
                ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::runtime_filter(v)) => v,
                _ => panic!(),
            }
        } else {
            RuntimeFilter::new()
        }
    }

    // .envoy.config.accesslog.v4alpha.AndFilter and_filter = 6;


    pub fn get_and_filter(&self) -> &AndFilter {
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::and_filter(ref v)) => v,
            _ => <AndFilter as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_and_filter(&mut self) {
        self.filter_specifier = ::std::option::Option::None;
    }

    pub fn has_and_filter(&self) -> bool {
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::and_filter(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_and_filter(&mut self, v: AndFilter) {
        self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::and_filter(v))
    }

    // Mutable pointer to the field.
    pub fn mut_and_filter(&mut self) -> &mut AndFilter {
        if let ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::and_filter(_)) = self.filter_specifier {
        } else {
            self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::and_filter(AndFilter::new()));
        }
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::and_filter(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_and_filter(&mut self) -> AndFilter {
        if self.has_and_filter() {
            match self.filter_specifier.take() {
                ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::and_filter(v)) => v,
                _ => panic!(),
            }
        } else {
            AndFilter::new()
        }
    }

    // .envoy.config.accesslog.v4alpha.OrFilter or_filter = 7;


    pub fn get_or_filter(&self) -> &OrFilter {
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::or_filter(ref v)) => v,
            _ => <OrFilter as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_or_filter(&mut self) {
        self.filter_specifier = ::std::option::Option::None;
    }

    pub fn has_or_filter(&self) -> bool {
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::or_filter(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_or_filter(&mut self, v: OrFilter) {
        self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::or_filter(v))
    }

    // Mutable pointer to the field.
    pub fn mut_or_filter(&mut self) -> &mut OrFilter {
        if let ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::or_filter(_)) = self.filter_specifier {
        } else {
            self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::or_filter(OrFilter::new()));
        }
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::or_filter(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_or_filter(&mut self) -> OrFilter {
        if self.has_or_filter() {
            match self.filter_specifier.take() {
                ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::or_filter(v)) => v,
                _ => panic!(),
            }
        } else {
            OrFilter::new()
        }
    }

    // .envoy.config.accesslog.v4alpha.HeaderFilter header_filter = 8;


    pub fn get_header_filter(&self) -> &HeaderFilter {
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::header_filter(ref v)) => v,
            _ => <HeaderFilter as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_header_filter(&mut self) {
        self.filter_specifier = ::std::option::Option::None;
    }

    pub fn has_header_filter(&self) -> bool {
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::header_filter(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_header_filter(&mut self, v: HeaderFilter) {
        self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::header_filter(v))
    }

    // Mutable pointer to the field.
    pub fn mut_header_filter(&mut self) -> &mut HeaderFilter {
        if let ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::header_filter(_)) = self.filter_specifier {
        } else {
            self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::header_filter(HeaderFilter::new()));
        }
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::header_filter(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_header_filter(&mut self) -> HeaderFilter {
        if self.has_header_filter() {
            match self.filter_specifier.take() {
                ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::header_filter(v)) => v,
                _ => panic!(),
            }
        } else {
            HeaderFilter::new()
        }
    }

    // .envoy.config.accesslog.v4alpha.ResponseFlagFilter response_flag_filter = 9;


    pub fn get_response_flag_filter(&self) -> &ResponseFlagFilter {
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::response_flag_filter(ref v)) => v,
            _ => <ResponseFlagFilter as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_response_flag_filter(&mut self) {
        self.filter_specifier = ::std::option::Option::None;
    }

    pub fn has_response_flag_filter(&self) -> bool {
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::response_flag_filter(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_response_flag_filter(&mut self, v: ResponseFlagFilter) {
        self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::response_flag_filter(v))
    }

    // Mutable pointer to the field.
    pub fn mut_response_flag_filter(&mut self) -> &mut ResponseFlagFilter {
        if let ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::response_flag_filter(_)) = self.filter_specifier {
        } else {
            self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::response_flag_filter(ResponseFlagFilter::new()));
        }
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::response_flag_filter(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_response_flag_filter(&mut self) -> ResponseFlagFilter {
        if self.has_response_flag_filter() {
            match self.filter_specifier.take() {
                ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::response_flag_filter(v)) => v,
                _ => panic!(),
            }
        } else {
            ResponseFlagFilter::new()
        }
    }

    // .envoy.config.accesslog.v4alpha.GrpcStatusFilter grpc_status_filter = 10;


    pub fn get_grpc_status_filter(&self) -> &GrpcStatusFilter {
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::grpc_status_filter(ref v)) => v,
            _ => <GrpcStatusFilter as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_grpc_status_filter(&mut self) {
        self.filter_specifier = ::std::option::Option::None;
    }

    pub fn has_grpc_status_filter(&self) -> bool {
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::grpc_status_filter(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_grpc_status_filter(&mut self, v: GrpcStatusFilter) {
        self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::grpc_status_filter(v))
    }

    // Mutable pointer to the field.
    pub fn mut_grpc_status_filter(&mut self) -> &mut GrpcStatusFilter {
        if let ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::grpc_status_filter(_)) = self.filter_specifier {
        } else {
            self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::grpc_status_filter(GrpcStatusFilter::new()));
        }
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::grpc_status_filter(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_grpc_status_filter(&mut self) -> GrpcStatusFilter {
        if self.has_grpc_status_filter() {
            match self.filter_specifier.take() {
                ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::grpc_status_filter(v)) => v,
                _ => panic!(),
            }
        } else {
            GrpcStatusFilter::new()
        }
    }

    // .envoy.config.accesslog.v4alpha.ExtensionFilter extension_filter = 11;


    pub fn get_extension_filter(&self) -> &ExtensionFilter {
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::extension_filter(ref v)) => v,
            _ => <ExtensionFilter as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_extension_filter(&mut self) {
        self.filter_specifier = ::std::option::Option::None;
    }

    pub fn has_extension_filter(&self) -> bool {
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::extension_filter(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_extension_filter(&mut self, v: ExtensionFilter) {
        self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::extension_filter(v))
    }

    // Mutable pointer to the field.
    pub fn mut_extension_filter(&mut self) -> &mut ExtensionFilter {
        if let ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::extension_filter(_)) = self.filter_specifier {
        } else {
            self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::extension_filter(ExtensionFilter::new()));
        }
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::extension_filter(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_extension_filter(&mut self) -> ExtensionFilter {
        if self.has_extension_filter() {
            match self.filter_specifier.take() {
                ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::extension_filter(v)) => v,
                _ => panic!(),
            }
        } else {
            ExtensionFilter::new()
        }
    }

    // .envoy.config.accesslog.v4alpha.MetadataFilter metadata_filter = 12;


    pub fn get_metadata_filter(&self) -> &MetadataFilter {
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::metadata_filter(ref v)) => v,
            _ => <MetadataFilter as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_metadata_filter(&mut self) {
        self.filter_specifier = ::std::option::Option::None;
    }

    pub fn has_metadata_filter(&self) -> bool {
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::metadata_filter(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_metadata_filter(&mut self, v: MetadataFilter) {
        self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::metadata_filter(v))
    }

    // Mutable pointer to the field.
    pub fn mut_metadata_filter(&mut self) -> &mut MetadataFilter {
        if let ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::metadata_filter(_)) = self.filter_specifier {
        } else {
            self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::metadata_filter(MetadataFilter::new()));
        }
        match self.filter_specifier {
            ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::metadata_filter(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_metadata_filter(&mut self) -> MetadataFilter {
        if self.has_metadata_filter() {
            match self.filter_specifier.take() {
                ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::metadata_filter(v)) => v,
                _ => panic!(),
            }
        } else {
            MetadataFilter::new()
        }
    }
}

impl ::protobuf::Message for AccessLogFilter {
    fn is_initialized(&self) -> bool {
        if let Some(AccessLogFilter_oneof_filter_specifier::status_code_filter(ref v)) = self.filter_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(AccessLogFilter_oneof_filter_specifier::duration_filter(ref v)) = self.filter_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(AccessLogFilter_oneof_filter_specifier::not_health_check_filter(ref v)) = self.filter_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(AccessLogFilter_oneof_filter_specifier::traceable_filter(ref v)) = self.filter_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(AccessLogFilter_oneof_filter_specifier::runtime_filter(ref v)) = self.filter_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(AccessLogFilter_oneof_filter_specifier::and_filter(ref v)) = self.filter_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(AccessLogFilter_oneof_filter_specifier::or_filter(ref v)) = self.filter_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(AccessLogFilter_oneof_filter_specifier::header_filter(ref v)) = self.filter_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(AccessLogFilter_oneof_filter_specifier::response_flag_filter(ref v)) = self.filter_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(AccessLogFilter_oneof_filter_specifier::grpc_status_filter(ref v)) = self.filter_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(AccessLogFilter_oneof_filter_specifier::extension_filter(ref v)) = self.filter_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(AccessLogFilter_oneof_filter_specifier::metadata_filter(ref v)) = self.filter_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::status_code_filter(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::duration_filter(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::not_health_check_filter(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::traceable_filter(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::runtime_filter(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::and_filter(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::or_filter(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::header_filter(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::response_flag_filter(is.read_message()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::grpc_status_filter(is.read_message()?));
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::extension_filter(is.read_message()?));
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.filter_specifier = ::std::option::Option::Some(AccessLogFilter_oneof_filter_specifier::metadata_filter(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.filter_specifier {
            match v {
                &AccessLogFilter_oneof_filter_specifier::status_code_filter(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AccessLogFilter_oneof_filter_specifier::duration_filter(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AccessLogFilter_oneof_filter_specifier::not_health_check_filter(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AccessLogFilter_oneof_filter_specifier::traceable_filter(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AccessLogFilter_oneof_filter_specifier::runtime_filter(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AccessLogFilter_oneof_filter_specifier::and_filter(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AccessLogFilter_oneof_filter_specifier::or_filter(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AccessLogFilter_oneof_filter_specifier::header_filter(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AccessLogFilter_oneof_filter_specifier::response_flag_filter(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AccessLogFilter_oneof_filter_specifier::grpc_status_filter(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AccessLogFilter_oneof_filter_specifier::extension_filter(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &AccessLogFilter_oneof_filter_specifier::metadata_filter(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.filter_specifier {
            match v {
                &AccessLogFilter_oneof_filter_specifier::status_code_filter(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AccessLogFilter_oneof_filter_specifier::duration_filter(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AccessLogFilter_oneof_filter_specifier::not_health_check_filter(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AccessLogFilter_oneof_filter_specifier::traceable_filter(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AccessLogFilter_oneof_filter_specifier::runtime_filter(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AccessLogFilter_oneof_filter_specifier::and_filter(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AccessLogFilter_oneof_filter_specifier::or_filter(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AccessLogFilter_oneof_filter_specifier::header_filter(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AccessLogFilter_oneof_filter_specifier::response_flag_filter(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AccessLogFilter_oneof_filter_specifier::grpc_status_filter(ref v) => {
                    os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AccessLogFilter_oneof_filter_specifier::extension_filter(ref v) => {
                    os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &AccessLogFilter_oneof_filter_specifier::metadata_filter(ref v) => {
                    os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AccessLogFilter {
        AccessLogFilter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, StatusCodeFilter>(
                "status_code_filter",
                AccessLogFilter::has_status_code_filter,
                AccessLogFilter::get_status_code_filter,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, DurationFilter>(
                "duration_filter",
                AccessLogFilter::has_duration_filter,
                AccessLogFilter::get_duration_filter,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, NotHealthCheckFilter>(
                "not_health_check_filter",
                AccessLogFilter::has_not_health_check_filter,
                AccessLogFilter::get_not_health_check_filter,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, TraceableFilter>(
                "traceable_filter",
                AccessLogFilter::has_traceable_filter,
                AccessLogFilter::get_traceable_filter,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, RuntimeFilter>(
                "runtime_filter",
                AccessLogFilter::has_runtime_filter,
                AccessLogFilter::get_runtime_filter,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, AndFilter>(
                "and_filter",
                AccessLogFilter::has_and_filter,
                AccessLogFilter::get_and_filter,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, OrFilter>(
                "or_filter",
                AccessLogFilter::has_or_filter,
                AccessLogFilter::get_or_filter,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, HeaderFilter>(
                "header_filter",
                AccessLogFilter::has_header_filter,
                AccessLogFilter::get_header_filter,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ResponseFlagFilter>(
                "response_flag_filter",
                AccessLogFilter::has_response_flag_filter,
                AccessLogFilter::get_response_flag_filter,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, GrpcStatusFilter>(
                "grpc_status_filter",
                AccessLogFilter::has_grpc_status_filter,
                AccessLogFilter::get_grpc_status_filter,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ExtensionFilter>(
                "extension_filter",
                AccessLogFilter::has_extension_filter,
                AccessLogFilter::get_extension_filter,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, MetadataFilter>(
                "metadata_filter",
                AccessLogFilter::has_metadata_filter,
                AccessLogFilter::get_metadata_filter,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AccessLogFilter>(
                "AccessLogFilter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AccessLogFilter {
        static instance: ::protobuf::rt::LazyV2<AccessLogFilter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AccessLogFilter::new)
    }
}

impl ::protobuf::Clear for AccessLogFilter {
    fn clear(&mut self) {
        self.filter_specifier = ::std::option::Option::None;
        self.filter_specifier = ::std::option::Option::None;
        self.filter_specifier = ::std::option::Option::None;
        self.filter_specifier = ::std::option::Option::None;
        self.filter_specifier = ::std::option::Option::None;
        self.filter_specifier = ::std::option::Option::None;
        self.filter_specifier = ::std::option::Option::None;
        self.filter_specifier = ::std::option::Option::None;
        self.filter_specifier = ::std::option::Option::None;
        self.filter_specifier = ::std::option::Option::None;
        self.filter_specifier = ::std::option::Option::None;
        self.filter_specifier = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AccessLogFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AccessLogFilter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ComparisonFilter {
    // message fields
    pub op: ComparisonFilter_Op,
    pub value: ::protobuf::SingularPtrField<super::base::RuntimeUInt32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ComparisonFilter {
    fn default() -> &'a ComparisonFilter {
        <ComparisonFilter as ::protobuf::Message>::default_instance()
    }
}

impl ComparisonFilter {
    pub fn new() -> ComparisonFilter {
        ::std::default::Default::default()
    }

    // .envoy.config.accesslog.v4alpha.ComparisonFilter.Op op = 1;


    pub fn get_op(&self) -> ComparisonFilter_Op {
        self.op
    }
    pub fn clear_op(&mut self) {
        self.op = ComparisonFilter_Op::EQ;
    }

    // Param is passed by value, moved
    pub fn set_op(&mut self, v: ComparisonFilter_Op) {
        self.op = v;
    }

    // .envoy.config.core.v4alpha.RuntimeUInt32 value = 2;


    pub fn get_value(&self) -> &super::base::RuntimeUInt32 {
        self.value.as_ref().unwrap_or_else(|| <super::base::RuntimeUInt32 as ::protobuf::Message>::default_instance())
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: super::base::RuntimeUInt32) {
        self.value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut super::base::RuntimeUInt32 {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> super::base::RuntimeUInt32 {
        self.value.take().unwrap_or_else(|| super::base::RuntimeUInt32::new())
    }
}

impl ::protobuf::Message for ComparisonFilter {
    fn is_initialized(&self) -> bool {
        for v in &self.value {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.op, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.op != ComparisonFilter_Op::EQ {
            my_size += ::protobuf::rt::enum_size(1, self.op);
        }
        if let Some(ref v) = self.value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.op != ComparisonFilter_Op::EQ {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.op))?;
        }
        if let Some(ref v) = self.value.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ComparisonFilter {
        ComparisonFilter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ComparisonFilter_Op>>(
                "op",
                |m: &ComparisonFilter| { &m.op },
                |m: &mut ComparisonFilter| { &mut m.op },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::RuntimeUInt32>>(
                "value",
                |m: &ComparisonFilter| { &m.value },
                |m: &mut ComparisonFilter| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ComparisonFilter>(
                "ComparisonFilter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ComparisonFilter {
        static instance: ::protobuf::rt::LazyV2<ComparisonFilter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ComparisonFilter::new)
    }
}

impl ::protobuf::Clear for ComparisonFilter {
    fn clear(&mut self) {
        self.op = ComparisonFilter_Op::EQ;
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ComparisonFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ComparisonFilter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ComparisonFilter_Op {
    EQ = 0,
    GE = 1,
    LE = 2,
}

impl ::protobuf::ProtobufEnum for ComparisonFilter_Op {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ComparisonFilter_Op> {
        match value {
            0 => ::std::option::Option::Some(ComparisonFilter_Op::EQ),
            1 => ::std::option::Option::Some(ComparisonFilter_Op::GE),
            2 => ::std::option::Option::Some(ComparisonFilter_Op::LE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ComparisonFilter_Op] = &[
            ComparisonFilter_Op::EQ,
            ComparisonFilter_Op::GE,
            ComparisonFilter_Op::LE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ComparisonFilter_Op>("ComparisonFilter.Op", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ComparisonFilter_Op {
}

impl ::std::default::Default for ComparisonFilter_Op {
    fn default() -> Self {
        ComparisonFilter_Op::EQ
    }
}

impl ::protobuf::reflect::ProtobufValue for ComparisonFilter_Op {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StatusCodeFilter {
    // message fields
    pub comparison: ::protobuf::SingularPtrField<ComparisonFilter>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StatusCodeFilter {
    fn default() -> &'a StatusCodeFilter {
        <StatusCodeFilter as ::protobuf::Message>::default_instance()
    }
}

impl StatusCodeFilter {
    pub fn new() -> StatusCodeFilter {
        ::std::default::Default::default()
    }

    // .envoy.config.accesslog.v4alpha.ComparisonFilter comparison = 1;


    pub fn get_comparison(&self) -> &ComparisonFilter {
        self.comparison.as_ref().unwrap_or_else(|| <ComparisonFilter as ::protobuf::Message>::default_instance())
    }
    pub fn clear_comparison(&mut self) {
        self.comparison.clear();
    }

    pub fn has_comparison(&self) -> bool {
        self.comparison.is_some()
    }

    // Param is passed by value, moved
    pub fn set_comparison(&mut self, v: ComparisonFilter) {
        self.comparison = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_comparison(&mut self) -> &mut ComparisonFilter {
        if self.comparison.is_none() {
            self.comparison.set_default();
        }
        self.comparison.as_mut().unwrap()
    }

    // Take field
    pub fn take_comparison(&mut self) -> ComparisonFilter {
        self.comparison.take().unwrap_or_else(|| ComparisonFilter::new())
    }
}

impl ::protobuf::Message for StatusCodeFilter {
    fn is_initialized(&self) -> bool {
        for v in &self.comparison {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.comparison)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.comparison.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.comparison.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StatusCodeFilter {
        StatusCodeFilter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ComparisonFilter>>(
                "comparison",
                |m: &StatusCodeFilter| { &m.comparison },
                |m: &mut StatusCodeFilter| { &mut m.comparison },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StatusCodeFilter>(
                "StatusCodeFilter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StatusCodeFilter {
        static instance: ::protobuf::rt::LazyV2<StatusCodeFilter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StatusCodeFilter::new)
    }
}

impl ::protobuf::Clear for StatusCodeFilter {
    fn clear(&mut self) {
        self.comparison.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StatusCodeFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StatusCodeFilter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DurationFilter {
    // message fields
    pub comparison: ::protobuf::SingularPtrField<ComparisonFilter>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DurationFilter {
    fn default() -> &'a DurationFilter {
        <DurationFilter as ::protobuf::Message>::default_instance()
    }
}

impl DurationFilter {
    pub fn new() -> DurationFilter {
        ::std::default::Default::default()
    }

    // .envoy.config.accesslog.v4alpha.ComparisonFilter comparison = 1;


    pub fn get_comparison(&self) -> &ComparisonFilter {
        self.comparison.as_ref().unwrap_or_else(|| <ComparisonFilter as ::protobuf::Message>::default_instance())
    }
    pub fn clear_comparison(&mut self) {
        self.comparison.clear();
    }

    pub fn has_comparison(&self) -> bool {
        self.comparison.is_some()
    }

    // Param is passed by value, moved
    pub fn set_comparison(&mut self, v: ComparisonFilter) {
        self.comparison = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_comparison(&mut self) -> &mut ComparisonFilter {
        if self.comparison.is_none() {
            self.comparison.set_default();
        }
        self.comparison.as_mut().unwrap()
    }

    // Take field
    pub fn take_comparison(&mut self) -> ComparisonFilter {
        self.comparison.take().unwrap_or_else(|| ComparisonFilter::new())
    }
}

impl ::protobuf::Message for DurationFilter {
    fn is_initialized(&self) -> bool {
        for v in &self.comparison {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.comparison)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.comparison.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.comparison.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DurationFilter {
        DurationFilter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ComparisonFilter>>(
                "comparison",
                |m: &DurationFilter| { &m.comparison },
                |m: &mut DurationFilter| { &mut m.comparison },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DurationFilter>(
                "DurationFilter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DurationFilter {
        static instance: ::protobuf::rt::LazyV2<DurationFilter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DurationFilter::new)
    }
}

impl ::protobuf::Clear for DurationFilter {
    fn clear(&mut self) {
        self.comparison.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DurationFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DurationFilter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NotHealthCheckFilter {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NotHealthCheckFilter {
    fn default() -> &'a NotHealthCheckFilter {
        <NotHealthCheckFilter as ::protobuf::Message>::default_instance()
    }
}

impl NotHealthCheckFilter {
    pub fn new() -> NotHealthCheckFilter {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for NotHealthCheckFilter {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NotHealthCheckFilter {
        NotHealthCheckFilter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<NotHealthCheckFilter>(
                "NotHealthCheckFilter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static NotHealthCheckFilter {
        static instance: ::protobuf::rt::LazyV2<NotHealthCheckFilter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(NotHealthCheckFilter::new)
    }
}

impl ::protobuf::Clear for NotHealthCheckFilter {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NotHealthCheckFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NotHealthCheckFilter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TraceableFilter {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TraceableFilter {
    fn default() -> &'a TraceableFilter {
        <TraceableFilter as ::protobuf::Message>::default_instance()
    }
}

impl TraceableFilter {
    pub fn new() -> TraceableFilter {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for TraceableFilter {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TraceableFilter {
        TraceableFilter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TraceableFilter>(
                "TraceableFilter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TraceableFilter {
        static instance: ::protobuf::rt::LazyV2<TraceableFilter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TraceableFilter::new)
    }
}

impl ::protobuf::Clear for TraceableFilter {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TraceableFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TraceableFilter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RuntimeFilter {
    // message fields
    pub runtime_key: ::std::string::String,
    pub percent_sampled: ::protobuf::SingularPtrField<super::percent::FractionalPercent>,
    pub use_independent_randomness: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RuntimeFilter {
    fn default() -> &'a RuntimeFilter {
        <RuntimeFilter as ::protobuf::Message>::default_instance()
    }
}

impl RuntimeFilter {
    pub fn new() -> RuntimeFilter {
        ::std::default::Default::default()
    }

    // string runtime_key = 1;


    pub fn get_runtime_key(&self) -> &str {
        &self.runtime_key
    }
    pub fn clear_runtime_key(&mut self) {
        self.runtime_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_runtime_key(&mut self, v: ::std::string::String) {
        self.runtime_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_runtime_key(&mut self) -> &mut ::std::string::String {
        &mut self.runtime_key
    }

    // Take field
    pub fn take_runtime_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.runtime_key, ::std::string::String::new())
    }

    // .envoy.type.v3.FractionalPercent percent_sampled = 2;


    pub fn get_percent_sampled(&self) -> &super::percent::FractionalPercent {
        self.percent_sampled.as_ref().unwrap_or_else(|| <super::percent::FractionalPercent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_percent_sampled(&mut self) {
        self.percent_sampled.clear();
    }

    pub fn has_percent_sampled(&self) -> bool {
        self.percent_sampled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_percent_sampled(&mut self, v: super::percent::FractionalPercent) {
        self.percent_sampled = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_percent_sampled(&mut self) -> &mut super::percent::FractionalPercent {
        if self.percent_sampled.is_none() {
            self.percent_sampled.set_default();
        }
        self.percent_sampled.as_mut().unwrap()
    }

    // Take field
    pub fn take_percent_sampled(&mut self) -> super::percent::FractionalPercent {
        self.percent_sampled.take().unwrap_or_else(|| super::percent::FractionalPercent::new())
    }

    // bool use_independent_randomness = 3;


    pub fn get_use_independent_randomness(&self) -> bool {
        self.use_independent_randomness
    }
    pub fn clear_use_independent_randomness(&mut self) {
        self.use_independent_randomness = false;
    }

    // Param is passed by value, moved
    pub fn set_use_independent_randomness(&mut self, v: bool) {
        self.use_independent_randomness = v;
    }
}

impl ::protobuf::Message for RuntimeFilter {
    fn is_initialized(&self) -> bool {
        for v in &self.percent_sampled {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.runtime_key)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.percent_sampled)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.use_independent_randomness = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.runtime_key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.runtime_key);
        }
        if let Some(ref v) = self.percent_sampled.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.use_independent_randomness != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.runtime_key.is_empty() {
            os.write_string(1, &self.runtime_key)?;
        }
        if let Some(ref v) = self.percent_sampled.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.use_independent_randomness != false {
            os.write_bool(3, self.use_independent_randomness)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RuntimeFilter {
        RuntimeFilter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "runtime_key",
                |m: &RuntimeFilter| { &m.runtime_key },
                |m: &mut RuntimeFilter| { &mut m.runtime_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::percent::FractionalPercent>>(
                "percent_sampled",
                |m: &RuntimeFilter| { &m.percent_sampled },
                |m: &mut RuntimeFilter| { &mut m.percent_sampled },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "use_independent_randomness",
                |m: &RuntimeFilter| { &m.use_independent_randomness },
                |m: &mut RuntimeFilter| { &mut m.use_independent_randomness },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RuntimeFilter>(
                "RuntimeFilter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RuntimeFilter {
        static instance: ::protobuf::rt::LazyV2<RuntimeFilter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RuntimeFilter::new)
    }
}

impl ::protobuf::Clear for RuntimeFilter {
    fn clear(&mut self) {
        self.runtime_key.clear();
        self.percent_sampled.clear();
        self.use_independent_randomness = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RuntimeFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RuntimeFilter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AndFilter {
    // message fields
    pub filters: ::protobuf::RepeatedField<AccessLogFilter>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AndFilter {
    fn default() -> &'a AndFilter {
        <AndFilter as ::protobuf::Message>::default_instance()
    }
}

impl AndFilter {
    pub fn new() -> AndFilter {
        ::std::default::Default::default()
    }

    // repeated .envoy.config.accesslog.v4alpha.AccessLogFilter filters = 1;


    pub fn get_filters(&self) -> &[AccessLogFilter] {
        &self.filters
    }
    pub fn clear_filters(&mut self) {
        self.filters.clear();
    }

    // Param is passed by value, moved
    pub fn set_filters(&mut self, v: ::protobuf::RepeatedField<AccessLogFilter>) {
        self.filters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_filters(&mut self) -> &mut ::protobuf::RepeatedField<AccessLogFilter> {
        &mut self.filters
    }

    // Take field
    pub fn take_filters(&mut self) -> ::protobuf::RepeatedField<AccessLogFilter> {
        ::std::mem::replace(&mut self.filters, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for AndFilter {
    fn is_initialized(&self) -> bool {
        for v in &self.filters {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.filters)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.filters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.filters {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AndFilter {
        AndFilter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AccessLogFilter>>(
                "filters",
                |m: &AndFilter| { &m.filters },
                |m: &mut AndFilter| { &mut m.filters },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AndFilter>(
                "AndFilter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AndFilter {
        static instance: ::protobuf::rt::LazyV2<AndFilter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AndFilter::new)
    }
}

impl ::protobuf::Clear for AndFilter {
    fn clear(&mut self) {
        self.filters.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AndFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AndFilter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OrFilter {
    // message fields
    pub filters: ::protobuf::RepeatedField<AccessLogFilter>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OrFilter {
    fn default() -> &'a OrFilter {
        <OrFilter as ::protobuf::Message>::default_instance()
    }
}

impl OrFilter {
    pub fn new() -> OrFilter {
        ::std::default::Default::default()
    }

    // repeated .envoy.config.accesslog.v4alpha.AccessLogFilter filters = 2;


    pub fn get_filters(&self) -> &[AccessLogFilter] {
        &self.filters
    }
    pub fn clear_filters(&mut self) {
        self.filters.clear();
    }

    // Param is passed by value, moved
    pub fn set_filters(&mut self, v: ::protobuf::RepeatedField<AccessLogFilter>) {
        self.filters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_filters(&mut self) -> &mut ::protobuf::RepeatedField<AccessLogFilter> {
        &mut self.filters
    }

    // Take field
    pub fn take_filters(&mut self) -> ::protobuf::RepeatedField<AccessLogFilter> {
        ::std::mem::replace(&mut self.filters, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for OrFilter {
    fn is_initialized(&self) -> bool {
        for v in &self.filters {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.filters)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.filters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.filters {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OrFilter {
        OrFilter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AccessLogFilter>>(
                "filters",
                |m: &OrFilter| { &m.filters },
                |m: &mut OrFilter| { &mut m.filters },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OrFilter>(
                "OrFilter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OrFilter {
        static instance: ::protobuf::rt::LazyV2<OrFilter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OrFilter::new)
    }
}

impl ::protobuf::Clear for OrFilter {
    fn clear(&mut self) {
        self.filters.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OrFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OrFilter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HeaderFilter {
    // message fields
    pub header: ::protobuf::SingularPtrField<super::route_components::HeaderMatcher>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HeaderFilter {
    fn default() -> &'a HeaderFilter {
        <HeaderFilter as ::protobuf::Message>::default_instance()
    }
}

impl HeaderFilter {
    pub fn new() -> HeaderFilter {
        ::std::default::Default::default()
    }

    // .envoy.config.route.v4alpha.HeaderMatcher header = 1;


    pub fn get_header(&self) -> &super::route_components::HeaderMatcher {
        self.header.as_ref().unwrap_or_else(|| <super::route_components::HeaderMatcher as ::protobuf::Message>::default_instance())
    }
    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: super::route_components::HeaderMatcher) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut super::route_components::HeaderMatcher {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> super::route_components::HeaderMatcher {
        self.header.take().unwrap_or_else(|| super::route_components::HeaderMatcher::new())
    }
}

impl ::protobuf::Message for HeaderFilter {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HeaderFilter {
        HeaderFilter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::route_components::HeaderMatcher>>(
                "header",
                |m: &HeaderFilter| { &m.header },
                |m: &mut HeaderFilter| { &mut m.header },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HeaderFilter>(
                "HeaderFilter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HeaderFilter {
        static instance: ::protobuf::rt::LazyV2<HeaderFilter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HeaderFilter::new)
    }
}

impl ::protobuf::Clear for HeaderFilter {
    fn clear(&mut self) {
        self.header.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HeaderFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HeaderFilter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ResponseFlagFilter {
    // message fields
    pub flags: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ResponseFlagFilter {
    fn default() -> &'a ResponseFlagFilter {
        <ResponseFlagFilter as ::protobuf::Message>::default_instance()
    }
}

impl ResponseFlagFilter {
    pub fn new() -> ResponseFlagFilter {
        ::std::default::Default::default()
    }

    // repeated string flags = 1;


    pub fn get_flags(&self) -> &[::std::string::String] {
        &self.flags
    }
    pub fn clear_flags(&mut self) {
        self.flags.clear();
    }

    // Param is passed by value, moved
    pub fn set_flags(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.flags = v;
    }

    // Mutable pointer to the field.
    pub fn mut_flags(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.flags
    }

    // Take field
    pub fn take_flags(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.flags, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ResponseFlagFilter {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.flags)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.flags {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.flags {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ResponseFlagFilter {
        ResponseFlagFilter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "flags",
                |m: &ResponseFlagFilter| { &m.flags },
                |m: &mut ResponseFlagFilter| { &mut m.flags },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ResponseFlagFilter>(
                "ResponseFlagFilter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ResponseFlagFilter {
        static instance: ::protobuf::rt::LazyV2<ResponseFlagFilter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ResponseFlagFilter::new)
    }
}

impl ::protobuf::Clear for ResponseFlagFilter {
    fn clear(&mut self) {
        self.flags.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ResponseFlagFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ResponseFlagFilter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GrpcStatusFilter {
    // message fields
    pub statuses: ::std::vec::Vec<GrpcStatusFilter_Status>,
    pub exclude: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GrpcStatusFilter {
    fn default() -> &'a GrpcStatusFilter {
        <GrpcStatusFilter as ::protobuf::Message>::default_instance()
    }
}

impl GrpcStatusFilter {
    pub fn new() -> GrpcStatusFilter {
        ::std::default::Default::default()
    }

    // repeated .envoy.config.accesslog.v4alpha.GrpcStatusFilter.Status statuses = 1;


    pub fn get_statuses(&self) -> &[GrpcStatusFilter_Status] {
        &self.statuses
    }
    pub fn clear_statuses(&mut self) {
        self.statuses.clear();
    }

    // Param is passed by value, moved
    pub fn set_statuses(&mut self, v: ::std::vec::Vec<GrpcStatusFilter_Status>) {
        self.statuses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_statuses(&mut self) -> &mut ::std::vec::Vec<GrpcStatusFilter_Status> {
        &mut self.statuses
    }

    // Take field
    pub fn take_statuses(&mut self) -> ::std::vec::Vec<GrpcStatusFilter_Status> {
        ::std::mem::replace(&mut self.statuses, ::std::vec::Vec::new())
    }

    // bool exclude = 2;


    pub fn get_exclude(&self) -> bool {
        self.exclude
    }
    pub fn clear_exclude(&mut self) {
        self.exclude = false;
    }

    // Param is passed by value, moved
    pub fn set_exclude(&mut self, v: bool) {
        self.exclude = v;
    }
}

impl ::protobuf::Message for GrpcStatusFilter {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(wire_type, is, &mut self.statuses, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.exclude = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.statuses {
            my_size += ::protobuf::rt::enum_size(1, *value);
        };
        if self.exclude != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.statuses {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(v))?;
        };
        if self.exclude != false {
            os.write_bool(2, self.exclude)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GrpcStatusFilter {
        GrpcStatusFilter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeEnum<GrpcStatusFilter_Status>>(
                "statuses",
                |m: &GrpcStatusFilter| { &m.statuses },
                |m: &mut GrpcStatusFilter| { &mut m.statuses },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "exclude",
                |m: &GrpcStatusFilter| { &m.exclude },
                |m: &mut GrpcStatusFilter| { &mut m.exclude },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GrpcStatusFilter>(
                "GrpcStatusFilter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GrpcStatusFilter {
        static instance: ::protobuf::rt::LazyV2<GrpcStatusFilter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GrpcStatusFilter::new)
    }
}

impl ::protobuf::Clear for GrpcStatusFilter {
    fn clear(&mut self) {
        self.statuses.clear();
        self.exclude = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GrpcStatusFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GrpcStatusFilter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum GrpcStatusFilter_Status {
    OK = 0,
    CANCELED = 1,
    UNKNOWN = 2,
    INVALID_ARGUMENT = 3,
    DEADLINE_EXCEEDED = 4,
    NOT_FOUND = 5,
    ALREADY_EXISTS = 6,
    PERMISSION_DENIED = 7,
    RESOURCE_EXHAUSTED = 8,
    FAILED_PRECONDITION = 9,
    ABORTED = 10,
    OUT_OF_RANGE = 11,
    UNIMPLEMENTED = 12,
    INTERNAL = 13,
    UNAVAILABLE = 14,
    DATA_LOSS = 15,
    UNAUTHENTICATED = 16,
}

impl ::protobuf::ProtobufEnum for GrpcStatusFilter_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<GrpcStatusFilter_Status> {
        match value {
            0 => ::std::option::Option::Some(GrpcStatusFilter_Status::OK),
            1 => ::std::option::Option::Some(GrpcStatusFilter_Status::CANCELED),
            2 => ::std::option::Option::Some(GrpcStatusFilter_Status::UNKNOWN),
            3 => ::std::option::Option::Some(GrpcStatusFilter_Status::INVALID_ARGUMENT),
            4 => ::std::option::Option::Some(GrpcStatusFilter_Status::DEADLINE_EXCEEDED),
            5 => ::std::option::Option::Some(GrpcStatusFilter_Status::NOT_FOUND),
            6 => ::std::option::Option::Some(GrpcStatusFilter_Status::ALREADY_EXISTS),
            7 => ::std::option::Option::Some(GrpcStatusFilter_Status::PERMISSION_DENIED),
            8 => ::std::option::Option::Some(GrpcStatusFilter_Status::RESOURCE_EXHAUSTED),
            9 => ::std::option::Option::Some(GrpcStatusFilter_Status::FAILED_PRECONDITION),
            10 => ::std::option::Option::Some(GrpcStatusFilter_Status::ABORTED),
            11 => ::std::option::Option::Some(GrpcStatusFilter_Status::OUT_OF_RANGE),
            12 => ::std::option::Option::Some(GrpcStatusFilter_Status::UNIMPLEMENTED),
            13 => ::std::option::Option::Some(GrpcStatusFilter_Status::INTERNAL),
            14 => ::std::option::Option::Some(GrpcStatusFilter_Status::UNAVAILABLE),
            15 => ::std::option::Option::Some(GrpcStatusFilter_Status::DATA_LOSS),
            16 => ::std::option::Option::Some(GrpcStatusFilter_Status::UNAUTHENTICATED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [GrpcStatusFilter_Status] = &[
            GrpcStatusFilter_Status::OK,
            GrpcStatusFilter_Status::CANCELED,
            GrpcStatusFilter_Status::UNKNOWN,
            GrpcStatusFilter_Status::INVALID_ARGUMENT,
            GrpcStatusFilter_Status::DEADLINE_EXCEEDED,
            GrpcStatusFilter_Status::NOT_FOUND,
            GrpcStatusFilter_Status::ALREADY_EXISTS,
            GrpcStatusFilter_Status::PERMISSION_DENIED,
            GrpcStatusFilter_Status::RESOURCE_EXHAUSTED,
            GrpcStatusFilter_Status::FAILED_PRECONDITION,
            GrpcStatusFilter_Status::ABORTED,
            GrpcStatusFilter_Status::OUT_OF_RANGE,
            GrpcStatusFilter_Status::UNIMPLEMENTED,
            GrpcStatusFilter_Status::INTERNAL,
            GrpcStatusFilter_Status::UNAVAILABLE,
            GrpcStatusFilter_Status::DATA_LOSS,
            GrpcStatusFilter_Status::UNAUTHENTICATED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<GrpcStatusFilter_Status>("GrpcStatusFilter.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for GrpcStatusFilter_Status {
}

impl ::std::default::Default for GrpcStatusFilter_Status {
    fn default() -> Self {
        GrpcStatusFilter_Status::OK
    }
}

impl ::protobuf::reflect::ProtobufValue for GrpcStatusFilter_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MetadataFilter {
    // message fields
    pub matcher: ::protobuf::SingularPtrField<super::metadata::MetadataMatcher>,
    pub match_if_key_not_found: ::protobuf::SingularPtrField<::protobuf::well_known_types::BoolValue>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MetadataFilter {
    fn default() -> &'a MetadataFilter {
        <MetadataFilter as ::protobuf::Message>::default_instance()
    }
}

impl MetadataFilter {
    pub fn new() -> MetadataFilter {
        ::std::default::Default::default()
    }

    // .envoy.type.matcher.v4alpha.MetadataMatcher matcher = 1;


    pub fn get_matcher(&self) -> &super::metadata::MetadataMatcher {
        self.matcher.as_ref().unwrap_or_else(|| <super::metadata::MetadataMatcher as ::protobuf::Message>::default_instance())
    }
    pub fn clear_matcher(&mut self) {
        self.matcher.clear();
    }

    pub fn has_matcher(&self) -> bool {
        self.matcher.is_some()
    }

    // Param is passed by value, moved
    pub fn set_matcher(&mut self, v: super::metadata::MetadataMatcher) {
        self.matcher = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_matcher(&mut self) -> &mut super::metadata::MetadataMatcher {
        if self.matcher.is_none() {
            self.matcher.set_default();
        }
        self.matcher.as_mut().unwrap()
    }

    // Take field
    pub fn take_matcher(&mut self) -> super::metadata::MetadataMatcher {
        self.matcher.take().unwrap_or_else(|| super::metadata::MetadataMatcher::new())
    }

    // .google.protobuf.BoolValue match_if_key_not_found = 2;


    pub fn get_match_if_key_not_found(&self) -> &::protobuf::well_known_types::BoolValue {
        self.match_if_key_not_found.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::BoolValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_match_if_key_not_found(&mut self) {
        self.match_if_key_not_found.clear();
    }

    pub fn has_match_if_key_not_found(&self) -> bool {
        self.match_if_key_not_found.is_some()
    }

    // Param is passed by value, moved
    pub fn set_match_if_key_not_found(&mut self, v: ::protobuf::well_known_types::BoolValue) {
        self.match_if_key_not_found = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_match_if_key_not_found(&mut self) -> &mut ::protobuf::well_known_types::BoolValue {
        if self.match_if_key_not_found.is_none() {
            self.match_if_key_not_found.set_default();
        }
        self.match_if_key_not_found.as_mut().unwrap()
    }

    // Take field
    pub fn take_match_if_key_not_found(&mut self) -> ::protobuf::well_known_types::BoolValue {
        self.match_if_key_not_found.take().unwrap_or_else(|| ::protobuf::well_known_types::BoolValue::new())
    }
}

impl ::protobuf::Message for MetadataFilter {
    fn is_initialized(&self) -> bool {
        for v in &self.matcher {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.match_if_key_not_found {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.matcher)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.match_if_key_not_found)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.matcher.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.match_if_key_not_found.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.matcher.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.match_if_key_not_found.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MetadataFilter {
        MetadataFilter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::metadata::MetadataMatcher>>(
                "matcher",
                |m: &MetadataFilter| { &m.matcher },
                |m: &mut MetadataFilter| { &mut m.matcher },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::BoolValue>>(
                "match_if_key_not_found",
                |m: &MetadataFilter| { &m.match_if_key_not_found },
                |m: &mut MetadataFilter| { &mut m.match_if_key_not_found },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MetadataFilter>(
                "MetadataFilter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MetadataFilter {
        static instance: ::protobuf::rt::LazyV2<MetadataFilter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MetadataFilter::new)
    }
}

impl ::protobuf::Clear for MetadataFilter {
    fn clear(&mut self) {
        self.matcher.clear();
        self.match_if_key_not_found.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MetadataFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetadataFilter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExtensionFilter {
    // message fields
    pub name: ::std::string::String,
    // message oneof groups
    pub config_type: ::std::option::Option<ExtensionFilter_oneof_config_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExtensionFilter {
    fn default() -> &'a ExtensionFilter {
        <ExtensionFilter as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ExtensionFilter_oneof_config_type {
    typed_config(::protobuf::well_known_types::Any),
}

impl ExtensionFilter {
    pub fn new() -> ExtensionFilter {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .google.protobuf.Any typed_config = 3;


    pub fn get_typed_config(&self) -> &::protobuf::well_known_types::Any {
        match self.config_type {
            ::std::option::Option::Some(ExtensionFilter_oneof_config_type::typed_config(ref v)) => v,
            _ => <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_typed_config(&mut self) {
        self.config_type = ::std::option::Option::None;
    }

    pub fn has_typed_config(&self) -> bool {
        match self.config_type {
            ::std::option::Option::Some(ExtensionFilter_oneof_config_type::typed_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_typed_config(&mut self, v: ::protobuf::well_known_types::Any) {
        self.config_type = ::std::option::Option::Some(ExtensionFilter_oneof_config_type::typed_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_typed_config(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if let ::std::option::Option::Some(ExtensionFilter_oneof_config_type::typed_config(_)) = self.config_type {
        } else {
            self.config_type = ::std::option::Option::Some(ExtensionFilter_oneof_config_type::typed_config(::protobuf::well_known_types::Any::new()));
        }
        match self.config_type {
            ::std::option::Option::Some(ExtensionFilter_oneof_config_type::typed_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_typed_config(&mut self) -> ::protobuf::well_known_types::Any {
        if self.has_typed_config() {
            match self.config_type.take() {
                ::std::option::Option::Some(ExtensionFilter_oneof_config_type::typed_config(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Any::new()
        }
    }
}

impl ::protobuf::Message for ExtensionFilter {
    fn is_initialized(&self) -> bool {
        if let Some(ExtensionFilter_oneof_config_type::typed_config(ref v)) = self.config_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config_type = ::std::option::Option::Some(ExtensionFilter_oneof_config_type::typed_config(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let ::std::option::Option::Some(ref v) = self.config_type {
            match v {
                &ExtensionFilter_oneof_config_type::typed_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let ::std::option::Option::Some(ref v) = self.config_type {
            match v {
                &ExtensionFilter_oneof_config_type::typed_config(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExtensionFilter {
        ExtensionFilter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &ExtensionFilter| { &m.name },
                |m: &mut ExtensionFilter| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Any>(
                "typed_config",
                ExtensionFilter::has_typed_config,
                ExtensionFilter::get_typed_config,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ExtensionFilter>(
                "ExtensionFilter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ExtensionFilter {
        static instance: ::protobuf::rt::LazyV2<ExtensionFilter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ExtensionFilter::new)
    }
}

impl ::protobuf::Clear for ExtensionFilter {
    fn clear(&mut self) {
        self.name.clear();
        self.config_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExtensionFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExtensionFilter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n.envoy/config/accesslog/v4alpha/accesslog.proto\x12\x1eenvoy.config.ac\
    cesslog.v4alpha\x1a$envoy/config/core/v4alpha/base.proto\x1a1envoy/confi\
    g/route/v4alpha/route_components.proto\x1a)envoy/type/matcher/v4alpha/me\
    tadata.proto\x1a\x1benvoy/type/v3/percent.proto\x1a\x19google/protobuf/a\
    ny.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1egoogle/protobuf/wrap\
    pers.proto\x1a\x1dudpa/annotations/status.proto\x1a!udpa/annotations/ver\
    sioning.proto\x1a\x17validate/validate.proto\"\xec\x01\n\tAccessLog\x12\
    \x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12G\n\x06filter\x18\x02\x20\
    \x01(\x0b2/.envoy.config.accesslog.v4alpha.AccessLogFilterR\x06filter\
    \x129\n\x0ctyped_config\x18\x04\x20\x01(\x0b2\x14.google.protobuf.AnyH\0\
    R\x0btypedConfigB\r\n\x0bconfig_type:*\x9a\xc5\x88\x1e%\n#envoy.config.a\
    ccesslog.v3.AccessLogJ\x04\x08\x03\x10\x04R\x06config\"\xab\t\n\x0fAcces\
    sLogFilter\x12`\n\x12status_code_filter\x18\x01\x20\x01(\x0b20.envoy.con\
    fig.accesslog.v4alpha.StatusCodeFilterH\0R\x10statusCodeFilter\x12Y\n\
    \x0fduration_filter\x18\x02\x20\x01(\x0b2..envoy.config.accesslog.v4alph\
    a.DurationFilterH\0R\x0edurationFilter\x12m\n\x17not_health_check_filter\
    \x18\x03\x20\x01(\x0b24.envoy.config.accesslog.v4alpha.NotHealthCheckFil\
    terH\0R\x14notHealthCheckFilter\x12\\\n\x10traceable_filter\x18\x04\x20\
    \x01(\x0b2/.envoy.config.accesslog.v4alpha.TraceableFilterH\0R\x0ftracea\
    bleFilter\x12V\n\x0eruntime_filter\x18\x05\x20\x01(\x0b2-.envoy.config.a\
    ccesslog.v4alpha.RuntimeFilterH\0R\rruntimeFilter\x12J\n\nand_filter\x18\
    \x06\x20\x01(\x0b2).envoy.config.accesslog.v4alpha.AndFilterH\0R\tandFil\
    ter\x12G\n\tor_filter\x18\x07\x20\x01(\x0b2(.envoy.config.accesslog.v4al\
    pha.OrFilterH\0R\x08orFilter\x12S\n\rheader_filter\x18\x08\x20\x01(\x0b2\
    ,.envoy.config.accesslog.v4alpha.HeaderFilterH\0R\x0cheaderFilter\x12f\n\
    \x14response_flag_filter\x18\t\x20\x01(\x0b22.envoy.config.accesslog.v4a\
    lpha.ResponseFlagFilterH\0R\x12responseFlagFilter\x12`\n\x12grpc_status_\
    filter\x18\n\x20\x01(\x0b20.envoy.config.accesslog.v4alpha.GrpcStatusFil\
    terH\0R\x10grpcStatusFilter\x12\\\n\x10extension_filter\x18\x0b\x20\x01(\
    \x0b2/.envoy.config.accesslog.v4alpha.ExtensionFilterH\0R\x0fextensionFi\
    lter\x12Y\n\x0fmetadata_filter\x18\x0c\x20\x01(\x0b2..envoy.config.acces\
    slog.v4alpha.MetadataFilterH\0R\x0emetadataFilterB\x17\n\x10filter_speci\
    fier\x12\x03\xf8B\x01:0\x9a\xc5\x88\x1e+\n)envoy.config.accesslog.v3.Acc\
    essLogFilter\"\xf2\x01\n\x10ComparisonFilter\x12M\n\x02op\x18\x01\x20\
    \x01(\x0e23.envoy.config.accesslog.v4alpha.ComparisonFilter.OpR\x02opB\
    \x08\xfaB\x05\x82\x01\x02\x10\x01\x12>\n\x05value\x18\x02\x20\x01(\x0b2(\
    .envoy.config.core.v4alpha.RuntimeUInt32R\x05value\"\x1c\n\x02Op\x12\x06\
    \n\x02EQ\x10\0\x12\x06\n\x02GE\x10\x01\x12\x06\n\x02LE\x10\x02:1\x9a\xc5\
    \x88\x1e,\n*envoy.config.accesslog.v3.ComparisonFilter\"\xa1\x01\n\x10St\
    atusCodeFilter\x12Z\n\ncomparison\x18\x01\x20\x01(\x0b20.envoy.config.ac\
    cesslog.v4alpha.ComparisonFilterR\ncomparisonB\x08\xfaB\x05\x8a\x01\x02\
    \x10\x01:1\x9a\xc5\x88\x1e,\n*envoy.config.accesslog.v3.StatusCodeFilter\
    \"\x9d\x01\n\x0eDurationFilter\x12Z\n\ncomparison\x18\x01\x20\x01(\x0b20\
    .envoy.config.accesslog.v4alpha.ComparisonFilterR\ncomparisonB\x08\xfaB\
    \x05\x8a\x01\x02\x10\x01:/\x9a\xc5\x88\x1e*\n(envoy.config.accesslog.v3.\
    DurationFilter\"M\n\x14NotHealthCheckFilter:5\x9a\xc5\x88\x1e0\n.envoy.c\
    onfig.accesslog.v3.NotHealthCheckFilter\"C\n\x0fTraceableFilter:0\x9a\
    \xc5\x88\x1e+\n)envoy.config.accesslog.v3.TraceableFilter\"\xf2\x01\n\rR\
    untimeFilter\x12(\n\x0bruntime_key\x18\x01\x20\x01(\tR\nruntimeKeyB\x07\
    \xfaB\x04r\x02\x10\x01\x12I\n\x0fpercent_sampled\x18\x02\x20\x01(\x0b2\
    \x20.envoy.type.v3.FractionalPercentR\x0epercentSampled\x12<\n\x1ause_in\
    dependent_randomness\x18\x03\x20\x01(\x08R\x18useIndependentRandomness:.\
    \x9a\xc5\x88\x1e)\n'envoy.config.accesslog.v3.RuntimeFilter\"\x8c\x01\n\
    \tAndFilter\x12S\n\x07filters\x18\x01\x20\x03(\x0b2/.envoy.config.access\
    log.v4alpha.AccessLogFilterR\x07filtersB\x08\xfaB\x05\x92\x01\x02\x08\
    \x02:*\x9a\xc5\x88\x1e%\n#envoy.config.accesslog.v3.AndFilter\"\x8a\x01\
    \n\x08OrFilter\x12S\n\x07filters\x18\x02\x20\x03(\x0b2/.envoy.config.acc\
    esslog.v4alpha.AccessLogFilterR\x07filtersB\x08\xfaB\x05\x92\x01\x02\x08\
    \x02:)\x9a\xc5\x88\x1e$\n\"envoy.config.accesslog.v3.OrFilter\"\x8a\x01\
    \n\x0cHeaderFilter\x12K\n\x06header\x18\x01\x20\x01(\x0b2).envoy.config.\
    route.v4alpha.HeaderMatcherR\x06headerB\x08\xfaB\x05\x8a\x01\x02\x10\x01\
    :-\x9a\xc5\x88\x1e(\n&envoy.config.accesslog.v3.HeaderFilter\"\xd5\x01\n\
    \x12ResponseFlagFilter\x12\x89\x01\n\x05flags\x18\x01\x20\x03(\tR\x05fla\
    gsBs\xfaBp\x92\x01m\"kriR\x02LHR\x02UHR\x02UTR\x02LRR\x02URR\x02UFR\x02U\
    CR\x02UOR\x02NRR\x02DIR\x02FIR\x02RLR\x04UAEXR\x04RLSER\x02DCR\x03URXR\
    \x02SIR\x02IHR\x03DPER\x05UMSDRR\x04RFCFR\x04NFCFR\x02DT:3\x9a\xc5\x88\
    \x1e.\n,envoy.config.accesslog.v3.ResponseFlagFilter\"\xfe\x03\n\x10Grpc\
    StatusFilter\x12b\n\x08statuses\x18\x01\x20\x03(\x0e27.envoy.config.acce\
    sslog.v4alpha.GrpcStatusFilter.StatusR\x08statusesB\r\xfaB\n\x92\x01\x07\
    \"\x05\x82\x01\x02\x10\x01\x12\x18\n\x07exclude\x18\x02\x20\x01(\x08R\
    \x07exclude\"\xb8\x02\n\x06Status\x12\x06\n\x02OK\x10\0\x12\x0c\n\x08CAN\
    CELED\x10\x01\x12\x0b\n\x07UNKNOWN\x10\x02\x12\x14\n\x10INVALID_ARGUMENT\
    \x10\x03\x12\x15\n\x11DEADLINE_EXCEEDED\x10\x04\x12\r\n\tNOT_FOUND\x10\
    \x05\x12\x12\n\x0eALREADY_EXISTS\x10\x06\x12\x15\n\x11PERMISSION_DENIED\
    \x10\x07\x12\x16\n\x12RESOURCE_EXHAUSTED\x10\x08\x12\x17\n\x13FAILED_PRE\
    CONDITION\x10\t\x12\x0b\n\x07ABORTED\x10\n\x12\x10\n\x0cOUT_OF_RANGE\x10\
    \x0b\x12\x11\n\rUNIMPLEMENTED\x10\x0c\x12\x0c\n\x08INTERNAL\x10\r\x12\
    \x0f\n\x0bUNAVAILABLE\x10\x0e\x12\r\n\tDATA_LOSS\x10\x0f\x12\x13\n\x0fUN\
    AUTHENTICATED\x10\x10:1\x9a\xc5\x88\x1e,\n*envoy.config.accesslog.v3.Grp\
    cStatusFilter\"\xd8\x01\n\x0eMetadataFilter\x12E\n\x07matcher\x18\x01\
    \x20\x01(\x0b2+.envoy.type.matcher.v4alpha.MetadataMatcherR\x07matcher\
    \x12N\n\x16match_if_key_not_found\x18\x02\x20\x01(\x0b2\x1a.google.proto\
    buf.BoolValueR\x12matchIfKeyNotFound:/\x9a\xc5\x88\x1e*\n(envoy.config.a\
    ccesslog.v3.MetadataFilter\"\xaf\x01\n\x0fExtensionFilter\x12\x12\n\x04n\
    ame\x18\x01\x20\x01(\tR\x04name\x129\n\x0ctyped_config\x18\x03\x20\x01(\
    \x0b2\x14.google.protobuf.AnyH\0R\x0btypedConfigB\r\n\x0bconfig_type:0\
    \x9a\xc5\x88\x1e+\n)envoy.config.accesslog.v3.ExtensionFilterJ\x04\x08\
    \x02\x10\x03R\x06configBH\n,io.envoyproxy.envoy.config.accesslog.v4alpha\
    B\x0eAccesslogProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\x03b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
