// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/core/v3/substitution_format_string.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct SubstitutionFormatString {
    // message fields
    pub omit_empty_values: bool,
    pub content_type: ::std::string::String,
    // message oneof groups
    pub format: ::std::option::Option<SubstitutionFormatString_oneof_format>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SubstitutionFormatString {
    fn default() -> &'a SubstitutionFormatString {
        <SubstitutionFormatString as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum SubstitutionFormatString_oneof_format {
    text_format(::std::string::String),
    json_format(::protobuf::well_known_types::Struct),
}

impl SubstitutionFormatString {
    pub fn new() -> SubstitutionFormatString {
        ::std::default::Default::default()
    }

    // string text_format = 1;


    pub fn get_text_format(&self) -> &str {
        match self.format {
            ::std::option::Option::Some(SubstitutionFormatString_oneof_format::text_format(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_text_format(&mut self) {
        self.format = ::std::option::Option::None;
    }

    pub fn has_text_format(&self) -> bool {
        match self.format {
            ::std::option::Option::Some(SubstitutionFormatString_oneof_format::text_format(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_text_format(&mut self, v: ::std::string::String) {
        self.format = ::std::option::Option::Some(SubstitutionFormatString_oneof_format::text_format(v))
    }

    // Mutable pointer to the field.
    pub fn mut_text_format(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(SubstitutionFormatString_oneof_format::text_format(_)) = self.format {
        } else {
            self.format = ::std::option::Option::Some(SubstitutionFormatString_oneof_format::text_format(::std::string::String::new()));
        }
        match self.format {
            ::std::option::Option::Some(SubstitutionFormatString_oneof_format::text_format(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_text_format(&mut self) -> ::std::string::String {
        if self.has_text_format() {
            match self.format.take() {
                ::std::option::Option::Some(SubstitutionFormatString_oneof_format::text_format(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .google.protobuf.Struct json_format = 2;


    pub fn get_json_format(&self) -> &::protobuf::well_known_types::Struct {
        match self.format {
            ::std::option::Option::Some(SubstitutionFormatString_oneof_format::json_format(ref v)) => v,
            _ => <::protobuf::well_known_types::Struct as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_json_format(&mut self) {
        self.format = ::std::option::Option::None;
    }

    pub fn has_json_format(&self) -> bool {
        match self.format {
            ::std::option::Option::Some(SubstitutionFormatString_oneof_format::json_format(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_json_format(&mut self, v: ::protobuf::well_known_types::Struct) {
        self.format = ::std::option::Option::Some(SubstitutionFormatString_oneof_format::json_format(v))
    }

    // Mutable pointer to the field.
    pub fn mut_json_format(&mut self) -> &mut ::protobuf::well_known_types::Struct {
        if let ::std::option::Option::Some(SubstitutionFormatString_oneof_format::json_format(_)) = self.format {
        } else {
            self.format = ::std::option::Option::Some(SubstitutionFormatString_oneof_format::json_format(::protobuf::well_known_types::Struct::new()));
        }
        match self.format {
            ::std::option::Option::Some(SubstitutionFormatString_oneof_format::json_format(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_json_format(&mut self) -> ::protobuf::well_known_types::Struct {
        if self.has_json_format() {
            match self.format.take() {
                ::std::option::Option::Some(SubstitutionFormatString_oneof_format::json_format(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Struct::new()
        }
    }

    // bool omit_empty_values = 3;


    pub fn get_omit_empty_values(&self) -> bool {
        self.omit_empty_values
    }
    pub fn clear_omit_empty_values(&mut self) {
        self.omit_empty_values = false;
    }

    // Param is passed by value, moved
    pub fn set_omit_empty_values(&mut self, v: bool) {
        self.omit_empty_values = v;
    }

    // string content_type = 4;


    pub fn get_content_type(&self) -> &str {
        &self.content_type
    }
    pub fn clear_content_type(&mut self) {
        self.content_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_content_type(&mut self, v: ::std::string::String) {
        self.content_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_content_type(&mut self) -> &mut ::std::string::String {
        &mut self.content_type
    }

    // Take field
    pub fn take_content_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.content_type, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SubstitutionFormatString {
    fn is_initialized(&self) -> bool {
        if let Some(SubstitutionFormatString_oneof_format::json_format(ref v)) = self.format {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.format = ::std::option::Option::Some(SubstitutionFormatString_oneof_format::text_format(is.read_string()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.format = ::std::option::Option::Some(SubstitutionFormatString_oneof_format::json_format(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.omit_empty_values = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.content_type)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.omit_empty_values != false {
            my_size += 2;
        }
        if !self.content_type.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.content_type);
        }
        if let ::std::option::Option::Some(ref v) = self.format {
            match v {
                &SubstitutionFormatString_oneof_format::text_format(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
                &SubstitutionFormatString_oneof_format::json_format(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.omit_empty_values != false {
            os.write_bool(3, self.omit_empty_values)?;
        }
        if !self.content_type.is_empty() {
            os.write_string(4, &self.content_type)?;
        }
        if let ::std::option::Option::Some(ref v) = self.format {
            match v {
                &SubstitutionFormatString_oneof_format::text_format(ref v) => {
                    os.write_string(1, v)?;
                },
                &SubstitutionFormatString_oneof_format::json_format(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubstitutionFormatString {
        SubstitutionFormatString::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "text_format",
                SubstitutionFormatString::has_text_format,
                SubstitutionFormatString::get_text_format,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Struct>(
                "json_format",
                SubstitutionFormatString::has_json_format,
                SubstitutionFormatString::get_json_format,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "omit_empty_values",
                |m: &SubstitutionFormatString| { &m.omit_empty_values },
                |m: &mut SubstitutionFormatString| { &mut m.omit_empty_values },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "content_type",
                |m: &SubstitutionFormatString| { &m.content_type },
                |m: &mut SubstitutionFormatString| { &mut m.content_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SubstitutionFormatString>(
                "SubstitutionFormatString",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SubstitutionFormatString {
        static instance: ::protobuf::rt::LazyV2<SubstitutionFormatString> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SubstitutionFormatString::new)
    }
}

impl ::protobuf::Clear for SubstitutionFormatString {
    fn clear(&mut self) {
        self.format = ::std::option::Option::None;
        self.format = ::std::option::Option::None;
        self.omit_empty_values = false;
        self.content_type.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SubstitutionFormatString {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubstitutionFormatString {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n5envoy/config/core/v3/substitution_format_string.proto\x12\x14envoy.co\
    nfig.core.v3\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1dudpa/annotations\
    /status.proto\x1a\x17validate/validate.proto\"\xea\x01\n\x18Substitution\
    FormatString\x12*\n\x0btext_format\x18\x01\x20\x01(\tH\0R\ntextFormatB\
    \x07\xfaB\x04r\x02\x10\x01\x12D\n\x0bjson_format\x18\x02\x20\x01(\x0b2\
    \x17.google.protobuf.StructH\0R\njsonFormatB\x08\xfaB\x05\x8a\x01\x02\
    \x10\x01\x12*\n\x11omit_empty_values\x18\x03\x20\x01(\x08R\x0fomitEmptyV\
    alues\x12!\n\x0ccontent_type\x18\x04\x20\x01(\tR\x0bcontentTypeB\r\n\x06\
    format\x12\x03\xf8B\x01BM\n\"io.envoyproxy.envoy.config.core.v3B\x1dSubs\
    titutionFormatStringProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\x02b\x06proto\
    3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
