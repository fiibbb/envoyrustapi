// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/core/v4alpha/protocol.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct TcpProtocolOptions {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TcpProtocolOptions {
    fn default() -> &'a TcpProtocolOptions {
        <TcpProtocolOptions as ::protobuf::Message>::default_instance()
    }
}

impl TcpProtocolOptions {
    pub fn new() -> TcpProtocolOptions {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for TcpProtocolOptions {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TcpProtocolOptions {
        TcpProtocolOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TcpProtocolOptions>(
                "TcpProtocolOptions",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TcpProtocolOptions {
        static instance: ::protobuf::rt::LazyV2<TcpProtocolOptions> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TcpProtocolOptions::new)
    }
}

impl ::protobuf::Clear for TcpProtocolOptions {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TcpProtocolOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TcpProtocolOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpstreamHttpProtocolOptions {
    // message fields
    pub auto_sni: bool,
    pub auto_san_validation: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpstreamHttpProtocolOptions {
    fn default() -> &'a UpstreamHttpProtocolOptions {
        <UpstreamHttpProtocolOptions as ::protobuf::Message>::default_instance()
    }
}

impl UpstreamHttpProtocolOptions {
    pub fn new() -> UpstreamHttpProtocolOptions {
        ::std::default::Default::default()
    }

    // bool auto_sni = 1;


    pub fn get_auto_sni(&self) -> bool {
        self.auto_sni
    }
    pub fn clear_auto_sni(&mut self) {
        self.auto_sni = false;
    }

    // Param is passed by value, moved
    pub fn set_auto_sni(&mut self, v: bool) {
        self.auto_sni = v;
    }

    // bool auto_san_validation = 2;


    pub fn get_auto_san_validation(&self) -> bool {
        self.auto_san_validation
    }
    pub fn clear_auto_san_validation(&mut self) {
        self.auto_san_validation = false;
    }

    // Param is passed by value, moved
    pub fn set_auto_san_validation(&mut self, v: bool) {
        self.auto_san_validation = v;
    }
}

impl ::protobuf::Message for UpstreamHttpProtocolOptions {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.auto_sni = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.auto_san_validation = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.auto_sni != false {
            my_size += 2;
        }
        if self.auto_san_validation != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.auto_sni != false {
            os.write_bool(1, self.auto_sni)?;
        }
        if self.auto_san_validation != false {
            os.write_bool(2, self.auto_san_validation)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpstreamHttpProtocolOptions {
        UpstreamHttpProtocolOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "auto_sni",
                |m: &UpstreamHttpProtocolOptions| { &m.auto_sni },
                |m: &mut UpstreamHttpProtocolOptions| { &mut m.auto_sni },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "auto_san_validation",
                |m: &UpstreamHttpProtocolOptions| { &m.auto_san_validation },
                |m: &mut UpstreamHttpProtocolOptions| { &mut m.auto_san_validation },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpstreamHttpProtocolOptions>(
                "UpstreamHttpProtocolOptions",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpstreamHttpProtocolOptions {
        static instance: ::protobuf::rt::LazyV2<UpstreamHttpProtocolOptions> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpstreamHttpProtocolOptions::new)
    }
}

impl ::protobuf::Clear for UpstreamHttpProtocolOptions {
    fn clear(&mut self) {
        self.auto_sni = false;
        self.auto_san_validation = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpstreamHttpProtocolOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpstreamHttpProtocolOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HttpProtocolOptions {
    // message fields
    pub idle_timeout: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub max_connection_duration: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub max_headers_count: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub max_stream_duration: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub headers_with_underscores_action: HttpProtocolOptions_HeadersWithUnderscoresAction,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HttpProtocolOptions {
    fn default() -> &'a HttpProtocolOptions {
        <HttpProtocolOptions as ::protobuf::Message>::default_instance()
    }
}

impl HttpProtocolOptions {
    pub fn new() -> HttpProtocolOptions {
        ::std::default::Default::default()
    }

    // .google.protobuf.Duration idle_timeout = 1;


    pub fn get_idle_timeout(&self) -> &::protobuf::well_known_types::Duration {
        self.idle_timeout.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_idle_timeout(&mut self) {
        self.idle_timeout.clear();
    }

    pub fn has_idle_timeout(&self) -> bool {
        self.idle_timeout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_idle_timeout(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.idle_timeout = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_idle_timeout(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.idle_timeout.is_none() {
            self.idle_timeout.set_default();
        }
        self.idle_timeout.as_mut().unwrap()
    }

    // Take field
    pub fn take_idle_timeout(&mut self) -> ::protobuf::well_known_types::Duration {
        self.idle_timeout.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.Duration max_connection_duration = 3;


    pub fn get_max_connection_duration(&self) -> &::protobuf::well_known_types::Duration {
        self.max_connection_duration.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_max_connection_duration(&mut self) {
        self.max_connection_duration.clear();
    }

    pub fn has_max_connection_duration(&self) -> bool {
        self.max_connection_duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_connection_duration(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.max_connection_duration = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_connection_duration(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.max_connection_duration.is_none() {
            self.max_connection_duration.set_default();
        }
        self.max_connection_duration.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_connection_duration(&mut self) -> ::protobuf::well_known_types::Duration {
        self.max_connection_duration.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.UInt32Value max_headers_count = 2;


    pub fn get_max_headers_count(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.max_headers_count.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_max_headers_count(&mut self) {
        self.max_headers_count.clear();
    }

    pub fn has_max_headers_count(&self) -> bool {
        self.max_headers_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_headers_count(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.max_headers_count = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_headers_count(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.max_headers_count.is_none() {
            self.max_headers_count.set_default();
        }
        self.max_headers_count.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_headers_count(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.max_headers_count.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.Duration max_stream_duration = 4;


    pub fn get_max_stream_duration(&self) -> &::protobuf::well_known_types::Duration {
        self.max_stream_duration.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_max_stream_duration(&mut self) {
        self.max_stream_duration.clear();
    }

    pub fn has_max_stream_duration(&self) -> bool {
        self.max_stream_duration.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_stream_duration(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.max_stream_duration = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_stream_duration(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.max_stream_duration.is_none() {
            self.max_stream_duration.set_default();
        }
        self.max_stream_duration.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_stream_duration(&mut self) -> ::protobuf::well_known_types::Duration {
        self.max_stream_duration.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .envoy.config.core.v4alpha.HttpProtocolOptions.HeadersWithUnderscoresAction headers_with_underscores_action = 5;


    pub fn get_headers_with_underscores_action(&self) -> HttpProtocolOptions_HeadersWithUnderscoresAction {
        self.headers_with_underscores_action
    }
    pub fn clear_headers_with_underscores_action(&mut self) {
        self.headers_with_underscores_action = HttpProtocolOptions_HeadersWithUnderscoresAction::ALLOW;
    }

    // Param is passed by value, moved
    pub fn set_headers_with_underscores_action(&mut self, v: HttpProtocolOptions_HeadersWithUnderscoresAction) {
        self.headers_with_underscores_action = v;
    }
}

impl ::protobuf::Message for HttpProtocolOptions {
    fn is_initialized(&self) -> bool {
        for v in &self.idle_timeout {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.max_connection_duration {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.max_headers_count {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.max_stream_duration {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.idle_timeout)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_connection_duration)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_headers_count)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_stream_duration)?;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.headers_with_underscores_action, 5, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.idle_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.max_connection_duration.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.max_headers_count.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.max_stream_duration.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.headers_with_underscores_action != HttpProtocolOptions_HeadersWithUnderscoresAction::ALLOW {
            my_size += ::protobuf::rt::enum_size(5, self.headers_with_underscores_action);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.idle_timeout.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.max_connection_duration.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.max_headers_count.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.max_stream_duration.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.headers_with_underscores_action != HttpProtocolOptions_HeadersWithUnderscoresAction::ALLOW {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(&self.headers_with_underscores_action))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HttpProtocolOptions {
        HttpProtocolOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "idle_timeout",
                |m: &HttpProtocolOptions| { &m.idle_timeout },
                |m: &mut HttpProtocolOptions| { &mut m.idle_timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "max_connection_duration",
                |m: &HttpProtocolOptions| { &m.max_connection_duration },
                |m: &mut HttpProtocolOptions| { &mut m.max_connection_duration },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "max_headers_count",
                |m: &HttpProtocolOptions| { &m.max_headers_count },
                |m: &mut HttpProtocolOptions| { &mut m.max_headers_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "max_stream_duration",
                |m: &HttpProtocolOptions| { &m.max_stream_duration },
                |m: &mut HttpProtocolOptions| { &mut m.max_stream_duration },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<HttpProtocolOptions_HeadersWithUnderscoresAction>>(
                "headers_with_underscores_action",
                |m: &HttpProtocolOptions| { &m.headers_with_underscores_action },
                |m: &mut HttpProtocolOptions| { &mut m.headers_with_underscores_action },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HttpProtocolOptions>(
                "HttpProtocolOptions",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HttpProtocolOptions {
        static instance: ::protobuf::rt::LazyV2<HttpProtocolOptions> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HttpProtocolOptions::new)
    }
}

impl ::protobuf::Clear for HttpProtocolOptions {
    fn clear(&mut self) {
        self.idle_timeout.clear();
        self.max_connection_duration.clear();
        self.max_headers_count.clear();
        self.max_stream_duration.clear();
        self.headers_with_underscores_action = HttpProtocolOptions_HeadersWithUnderscoresAction::ALLOW;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HttpProtocolOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpProtocolOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum HttpProtocolOptions_HeadersWithUnderscoresAction {
    ALLOW = 0,
    REJECT_REQUEST = 1,
    DROP_HEADER = 2,
}

impl ::protobuf::ProtobufEnum for HttpProtocolOptions_HeadersWithUnderscoresAction {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<HttpProtocolOptions_HeadersWithUnderscoresAction> {
        match value {
            0 => ::std::option::Option::Some(HttpProtocolOptions_HeadersWithUnderscoresAction::ALLOW),
            1 => ::std::option::Option::Some(HttpProtocolOptions_HeadersWithUnderscoresAction::REJECT_REQUEST),
            2 => ::std::option::Option::Some(HttpProtocolOptions_HeadersWithUnderscoresAction::DROP_HEADER),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [HttpProtocolOptions_HeadersWithUnderscoresAction] = &[
            HttpProtocolOptions_HeadersWithUnderscoresAction::ALLOW,
            HttpProtocolOptions_HeadersWithUnderscoresAction::REJECT_REQUEST,
            HttpProtocolOptions_HeadersWithUnderscoresAction::DROP_HEADER,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<HttpProtocolOptions_HeadersWithUnderscoresAction>("HttpProtocolOptions.HeadersWithUnderscoresAction", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for HttpProtocolOptions_HeadersWithUnderscoresAction {
}

impl ::std::default::Default for HttpProtocolOptions_HeadersWithUnderscoresAction {
    fn default() -> Self {
        HttpProtocolOptions_HeadersWithUnderscoresAction::ALLOW
    }
}

impl ::protobuf::reflect::ProtobufValue for HttpProtocolOptions_HeadersWithUnderscoresAction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Http1ProtocolOptions {
    // message fields
    pub allow_absolute_url: ::protobuf::SingularPtrField<::protobuf::well_known_types::BoolValue>,
    pub accept_http_10: bool,
    pub default_host_for_http_10: ::std::string::String,
    pub header_key_format: ::protobuf::SingularPtrField<Http1ProtocolOptions_HeaderKeyFormat>,
    pub enable_trailers: bool,
    pub allow_chunked_length: bool,
    pub override_stream_error_on_invalid_http_message: ::protobuf::SingularPtrField<::protobuf::well_known_types::BoolValue>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Http1ProtocolOptions {
    fn default() -> &'a Http1ProtocolOptions {
        <Http1ProtocolOptions as ::protobuf::Message>::default_instance()
    }
}

impl Http1ProtocolOptions {
    pub fn new() -> Http1ProtocolOptions {
        ::std::default::Default::default()
    }

    // .google.protobuf.BoolValue allow_absolute_url = 1;


    pub fn get_allow_absolute_url(&self) -> &::protobuf::well_known_types::BoolValue {
        self.allow_absolute_url.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::BoolValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_allow_absolute_url(&mut self) {
        self.allow_absolute_url.clear();
    }

    pub fn has_allow_absolute_url(&self) -> bool {
        self.allow_absolute_url.is_some()
    }

    // Param is passed by value, moved
    pub fn set_allow_absolute_url(&mut self, v: ::protobuf::well_known_types::BoolValue) {
        self.allow_absolute_url = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_allow_absolute_url(&mut self) -> &mut ::protobuf::well_known_types::BoolValue {
        if self.allow_absolute_url.is_none() {
            self.allow_absolute_url.set_default();
        }
        self.allow_absolute_url.as_mut().unwrap()
    }

    // Take field
    pub fn take_allow_absolute_url(&mut self) -> ::protobuf::well_known_types::BoolValue {
        self.allow_absolute_url.take().unwrap_or_else(|| ::protobuf::well_known_types::BoolValue::new())
    }

    // bool accept_http_10 = 2;


    pub fn get_accept_http_10(&self) -> bool {
        self.accept_http_10
    }
    pub fn clear_accept_http_10(&mut self) {
        self.accept_http_10 = false;
    }

    // Param is passed by value, moved
    pub fn set_accept_http_10(&mut self, v: bool) {
        self.accept_http_10 = v;
    }

    // string default_host_for_http_10 = 3;


    pub fn get_default_host_for_http_10(&self) -> &str {
        &self.default_host_for_http_10
    }
    pub fn clear_default_host_for_http_10(&mut self) {
        self.default_host_for_http_10.clear();
    }

    // Param is passed by value, moved
    pub fn set_default_host_for_http_10(&mut self, v: ::std::string::String) {
        self.default_host_for_http_10 = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_default_host_for_http_10(&mut self) -> &mut ::std::string::String {
        &mut self.default_host_for_http_10
    }

    // Take field
    pub fn take_default_host_for_http_10(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.default_host_for_http_10, ::std::string::String::new())
    }

    // .envoy.config.core.v4alpha.Http1ProtocolOptions.HeaderKeyFormat header_key_format = 4;


    pub fn get_header_key_format(&self) -> &Http1ProtocolOptions_HeaderKeyFormat {
        self.header_key_format.as_ref().unwrap_or_else(|| <Http1ProtocolOptions_HeaderKeyFormat as ::protobuf::Message>::default_instance())
    }
    pub fn clear_header_key_format(&mut self) {
        self.header_key_format.clear();
    }

    pub fn has_header_key_format(&self) -> bool {
        self.header_key_format.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header_key_format(&mut self, v: Http1ProtocolOptions_HeaderKeyFormat) {
        self.header_key_format = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header_key_format(&mut self) -> &mut Http1ProtocolOptions_HeaderKeyFormat {
        if self.header_key_format.is_none() {
            self.header_key_format.set_default();
        }
        self.header_key_format.as_mut().unwrap()
    }

    // Take field
    pub fn take_header_key_format(&mut self) -> Http1ProtocolOptions_HeaderKeyFormat {
        self.header_key_format.take().unwrap_or_else(|| Http1ProtocolOptions_HeaderKeyFormat::new())
    }

    // bool enable_trailers = 5;


    pub fn get_enable_trailers(&self) -> bool {
        self.enable_trailers
    }
    pub fn clear_enable_trailers(&mut self) {
        self.enable_trailers = false;
    }

    // Param is passed by value, moved
    pub fn set_enable_trailers(&mut self, v: bool) {
        self.enable_trailers = v;
    }

    // bool allow_chunked_length = 6;


    pub fn get_allow_chunked_length(&self) -> bool {
        self.allow_chunked_length
    }
    pub fn clear_allow_chunked_length(&mut self) {
        self.allow_chunked_length = false;
    }

    // Param is passed by value, moved
    pub fn set_allow_chunked_length(&mut self, v: bool) {
        self.allow_chunked_length = v;
    }

    // .google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 7;


    pub fn get_override_stream_error_on_invalid_http_message(&self) -> &::protobuf::well_known_types::BoolValue {
        self.override_stream_error_on_invalid_http_message.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::BoolValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_override_stream_error_on_invalid_http_message(&mut self) {
        self.override_stream_error_on_invalid_http_message.clear();
    }

    pub fn has_override_stream_error_on_invalid_http_message(&self) -> bool {
        self.override_stream_error_on_invalid_http_message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_override_stream_error_on_invalid_http_message(&mut self, v: ::protobuf::well_known_types::BoolValue) {
        self.override_stream_error_on_invalid_http_message = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_override_stream_error_on_invalid_http_message(&mut self) -> &mut ::protobuf::well_known_types::BoolValue {
        if self.override_stream_error_on_invalid_http_message.is_none() {
            self.override_stream_error_on_invalid_http_message.set_default();
        }
        self.override_stream_error_on_invalid_http_message.as_mut().unwrap()
    }

    // Take field
    pub fn take_override_stream_error_on_invalid_http_message(&mut self) -> ::protobuf::well_known_types::BoolValue {
        self.override_stream_error_on_invalid_http_message.take().unwrap_or_else(|| ::protobuf::well_known_types::BoolValue::new())
    }
}

impl ::protobuf::Message for Http1ProtocolOptions {
    fn is_initialized(&self) -> bool {
        for v in &self.allow_absolute_url {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.header_key_format {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.override_stream_error_on_invalid_http_message {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.allow_absolute_url)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.accept_http_10 = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.default_host_for_http_10)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header_key_format)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.enable_trailers = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.allow_chunked_length = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.override_stream_error_on_invalid_http_message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.allow_absolute_url.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.accept_http_10 != false {
            my_size += 2;
        }
        if !self.default_host_for_http_10.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.default_host_for_http_10);
        }
        if let Some(ref v) = self.header_key_format.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.enable_trailers != false {
            my_size += 2;
        }
        if self.allow_chunked_length != false {
            my_size += 2;
        }
        if let Some(ref v) = self.override_stream_error_on_invalid_http_message.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.allow_absolute_url.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.accept_http_10 != false {
            os.write_bool(2, self.accept_http_10)?;
        }
        if !self.default_host_for_http_10.is_empty() {
            os.write_string(3, &self.default_host_for_http_10)?;
        }
        if let Some(ref v) = self.header_key_format.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.enable_trailers != false {
            os.write_bool(5, self.enable_trailers)?;
        }
        if self.allow_chunked_length != false {
            os.write_bool(6, self.allow_chunked_length)?;
        }
        if let Some(ref v) = self.override_stream_error_on_invalid_http_message.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Http1ProtocolOptions {
        Http1ProtocolOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::BoolValue>>(
                "allow_absolute_url",
                |m: &Http1ProtocolOptions| { &m.allow_absolute_url },
                |m: &mut Http1ProtocolOptions| { &mut m.allow_absolute_url },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "accept_http_10",
                |m: &Http1ProtocolOptions| { &m.accept_http_10 },
                |m: &mut Http1ProtocolOptions| { &mut m.accept_http_10 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "default_host_for_http_10",
                |m: &Http1ProtocolOptions| { &m.default_host_for_http_10 },
                |m: &mut Http1ProtocolOptions| { &mut m.default_host_for_http_10 },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Http1ProtocolOptions_HeaderKeyFormat>>(
                "header_key_format",
                |m: &Http1ProtocolOptions| { &m.header_key_format },
                |m: &mut Http1ProtocolOptions| { &mut m.header_key_format },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "enable_trailers",
                |m: &Http1ProtocolOptions| { &m.enable_trailers },
                |m: &mut Http1ProtocolOptions| { &mut m.enable_trailers },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "allow_chunked_length",
                |m: &Http1ProtocolOptions| { &m.allow_chunked_length },
                |m: &mut Http1ProtocolOptions| { &mut m.allow_chunked_length },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::BoolValue>>(
                "override_stream_error_on_invalid_http_message",
                |m: &Http1ProtocolOptions| { &m.override_stream_error_on_invalid_http_message },
                |m: &mut Http1ProtocolOptions| { &mut m.override_stream_error_on_invalid_http_message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Http1ProtocolOptions>(
                "Http1ProtocolOptions",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Http1ProtocolOptions {
        static instance: ::protobuf::rt::LazyV2<Http1ProtocolOptions> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Http1ProtocolOptions::new)
    }
}

impl ::protobuf::Clear for Http1ProtocolOptions {
    fn clear(&mut self) {
        self.allow_absolute_url.clear();
        self.accept_http_10 = false;
        self.default_host_for_http_10.clear();
        self.header_key_format.clear();
        self.enable_trailers = false;
        self.allow_chunked_length = false;
        self.override_stream_error_on_invalid_http_message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Http1ProtocolOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Http1ProtocolOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Http1ProtocolOptions_HeaderKeyFormat {
    // message oneof groups
    pub header_format: ::std::option::Option<Http1ProtocolOptions_HeaderKeyFormat_oneof_header_format>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Http1ProtocolOptions_HeaderKeyFormat {
    fn default() -> &'a Http1ProtocolOptions_HeaderKeyFormat {
        <Http1ProtocolOptions_HeaderKeyFormat as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Http1ProtocolOptions_HeaderKeyFormat_oneof_header_format {
    proper_case_words(Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords),
}

impl Http1ProtocolOptions_HeaderKeyFormat {
    pub fn new() -> Http1ProtocolOptions_HeaderKeyFormat {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v4alpha.Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords proper_case_words = 1;


    pub fn get_proper_case_words(&self) -> &Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords {
        match self.header_format {
            ::std::option::Option::Some(Http1ProtocolOptions_HeaderKeyFormat_oneof_header_format::proper_case_words(ref v)) => v,
            _ => <Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_proper_case_words(&mut self) {
        self.header_format = ::std::option::Option::None;
    }

    pub fn has_proper_case_words(&self) -> bool {
        match self.header_format {
            ::std::option::Option::Some(Http1ProtocolOptions_HeaderKeyFormat_oneof_header_format::proper_case_words(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_proper_case_words(&mut self, v: Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords) {
        self.header_format = ::std::option::Option::Some(Http1ProtocolOptions_HeaderKeyFormat_oneof_header_format::proper_case_words(v))
    }

    // Mutable pointer to the field.
    pub fn mut_proper_case_words(&mut self) -> &mut Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords {
        if let ::std::option::Option::Some(Http1ProtocolOptions_HeaderKeyFormat_oneof_header_format::proper_case_words(_)) = self.header_format {
        } else {
            self.header_format = ::std::option::Option::Some(Http1ProtocolOptions_HeaderKeyFormat_oneof_header_format::proper_case_words(Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords::new()));
        }
        match self.header_format {
            ::std::option::Option::Some(Http1ProtocolOptions_HeaderKeyFormat_oneof_header_format::proper_case_words(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_proper_case_words(&mut self) -> Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords {
        if self.has_proper_case_words() {
            match self.header_format.take() {
                ::std::option::Option::Some(Http1ProtocolOptions_HeaderKeyFormat_oneof_header_format::proper_case_words(v)) => v,
                _ => panic!(),
            }
        } else {
            Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords::new()
        }
    }
}

impl ::protobuf::Message for Http1ProtocolOptions_HeaderKeyFormat {
    fn is_initialized(&self) -> bool {
        if let Some(Http1ProtocolOptions_HeaderKeyFormat_oneof_header_format::proper_case_words(ref v)) = self.header_format {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.header_format = ::std::option::Option::Some(Http1ProtocolOptions_HeaderKeyFormat_oneof_header_format::proper_case_words(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.header_format {
            match v {
                &Http1ProtocolOptions_HeaderKeyFormat_oneof_header_format::proper_case_words(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.header_format {
            match v {
                &Http1ProtocolOptions_HeaderKeyFormat_oneof_header_format::proper_case_words(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Http1ProtocolOptions_HeaderKeyFormat {
        Http1ProtocolOptions_HeaderKeyFormat::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords>(
                "proper_case_words",
                Http1ProtocolOptions_HeaderKeyFormat::has_proper_case_words,
                Http1ProtocolOptions_HeaderKeyFormat::get_proper_case_words,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Http1ProtocolOptions_HeaderKeyFormat>(
                "Http1ProtocolOptions.HeaderKeyFormat",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Http1ProtocolOptions_HeaderKeyFormat {
        static instance: ::protobuf::rt::LazyV2<Http1ProtocolOptions_HeaderKeyFormat> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Http1ProtocolOptions_HeaderKeyFormat::new)
    }
}

impl ::protobuf::Clear for Http1ProtocolOptions_HeaderKeyFormat {
    fn clear(&mut self) {
        self.header_format = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Http1ProtocolOptions_HeaderKeyFormat {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Http1ProtocolOptions_HeaderKeyFormat {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords {
    fn default() -> &'a Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords {
        <Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords as ::protobuf::Message>::default_instance()
    }
}

impl Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords {
    pub fn new() -> Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords {
        Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords>(
                "Http1ProtocolOptions.HeaderKeyFormat.ProperCaseWords",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords {
        static instance: ::protobuf::rt::LazyV2<Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords::new)
    }
}

impl ::protobuf::Clear for Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Http1ProtocolOptions_HeaderKeyFormat_ProperCaseWords {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct KeepaliveSettings {
    // message fields
    pub interval: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub timeout: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub interval_jitter: ::protobuf::SingularPtrField<super::percent::Percent>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KeepaliveSettings {
    fn default() -> &'a KeepaliveSettings {
        <KeepaliveSettings as ::protobuf::Message>::default_instance()
    }
}

impl KeepaliveSettings {
    pub fn new() -> KeepaliveSettings {
        ::std::default::Default::default()
    }

    // .google.protobuf.Duration interval = 1;


    pub fn get_interval(&self) -> &::protobuf::well_known_types::Duration {
        self.interval.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_interval(&mut self) {
        self.interval.clear();
    }

    pub fn has_interval(&self) -> bool {
        self.interval.is_some()
    }

    // Param is passed by value, moved
    pub fn set_interval(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.interval = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interval(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.interval.is_none() {
            self.interval.set_default();
        }
        self.interval.as_mut().unwrap()
    }

    // Take field
    pub fn take_interval(&mut self) -> ::protobuf::well_known_types::Duration {
        self.interval.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.Duration timeout = 2;


    pub fn get_timeout(&self) -> &::protobuf::well_known_types::Duration {
        self.timeout.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_timeout(&mut self) {
        self.timeout.clear();
    }

    pub fn has_timeout(&self) -> bool {
        self.timeout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timeout(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.timeout = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timeout(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.timeout.is_none() {
            self.timeout.set_default();
        }
        self.timeout.as_mut().unwrap()
    }

    // Take field
    pub fn take_timeout(&mut self) -> ::protobuf::well_known_types::Duration {
        self.timeout.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .envoy.type.v3.Percent interval_jitter = 3;


    pub fn get_interval_jitter(&self) -> &super::percent::Percent {
        self.interval_jitter.as_ref().unwrap_or_else(|| <super::percent::Percent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_interval_jitter(&mut self) {
        self.interval_jitter.clear();
    }

    pub fn has_interval_jitter(&self) -> bool {
        self.interval_jitter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_interval_jitter(&mut self, v: super::percent::Percent) {
        self.interval_jitter = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interval_jitter(&mut self) -> &mut super::percent::Percent {
        if self.interval_jitter.is_none() {
            self.interval_jitter.set_default();
        }
        self.interval_jitter.as_mut().unwrap()
    }

    // Take field
    pub fn take_interval_jitter(&mut self) -> super::percent::Percent {
        self.interval_jitter.take().unwrap_or_else(|| super::percent::Percent::new())
    }
}

impl ::protobuf::Message for KeepaliveSettings {
    fn is_initialized(&self) -> bool {
        for v in &self.interval {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.timeout {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.interval_jitter {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.interval)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.timeout)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.interval_jitter)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.interval.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.timeout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.interval_jitter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.interval.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.timeout.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.interval_jitter.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KeepaliveSettings {
        KeepaliveSettings::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "interval",
                |m: &KeepaliveSettings| { &m.interval },
                |m: &mut KeepaliveSettings| { &mut m.interval },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "timeout",
                |m: &KeepaliveSettings| { &m.timeout },
                |m: &mut KeepaliveSettings| { &mut m.timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::percent::Percent>>(
                "interval_jitter",
                |m: &KeepaliveSettings| { &m.interval_jitter },
                |m: &mut KeepaliveSettings| { &mut m.interval_jitter },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<KeepaliveSettings>(
                "KeepaliveSettings",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static KeepaliveSettings {
        static instance: ::protobuf::rt::LazyV2<KeepaliveSettings> = ::protobuf::rt::LazyV2::INIT;
        instance.get(KeepaliveSettings::new)
    }
}

impl ::protobuf::Clear for KeepaliveSettings {
    fn clear(&mut self) {
        self.interval.clear();
        self.timeout.clear();
        self.interval_jitter.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for KeepaliveSettings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KeepaliveSettings {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Http2ProtocolOptions {
    // message fields
    pub hpack_table_size: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub max_concurrent_streams: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub initial_stream_window_size: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub initial_connection_window_size: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub allow_connect: bool,
    pub allow_metadata: bool,
    pub max_outbound_frames: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub max_outbound_control_frames: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub max_consecutive_inbound_frames_with_empty_payload: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub max_inbound_priority_frames_per_stream: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub max_inbound_window_update_frames_per_data_frame_sent: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub override_stream_error_on_invalid_http_message: ::protobuf::SingularPtrField<::protobuf::well_known_types::BoolValue>,
    pub custom_settings_parameters: ::protobuf::RepeatedField<Http2ProtocolOptions_SettingsParameter>,
    pub connection_keepalive: ::protobuf::SingularPtrField<KeepaliveSettings>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Http2ProtocolOptions {
    fn default() -> &'a Http2ProtocolOptions {
        <Http2ProtocolOptions as ::protobuf::Message>::default_instance()
    }
}

impl Http2ProtocolOptions {
    pub fn new() -> Http2ProtocolOptions {
        ::std::default::Default::default()
    }

    // .google.protobuf.UInt32Value hpack_table_size = 1;


    pub fn get_hpack_table_size(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.hpack_table_size.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_hpack_table_size(&mut self) {
        self.hpack_table_size.clear();
    }

    pub fn has_hpack_table_size(&self) -> bool {
        self.hpack_table_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_hpack_table_size(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.hpack_table_size = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hpack_table_size(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.hpack_table_size.is_none() {
            self.hpack_table_size.set_default();
        }
        self.hpack_table_size.as_mut().unwrap()
    }

    // Take field
    pub fn take_hpack_table_size(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.hpack_table_size.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.UInt32Value max_concurrent_streams = 2;


    pub fn get_max_concurrent_streams(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.max_concurrent_streams.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_max_concurrent_streams(&mut self) {
        self.max_concurrent_streams.clear();
    }

    pub fn has_max_concurrent_streams(&self) -> bool {
        self.max_concurrent_streams.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_concurrent_streams(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.max_concurrent_streams = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_concurrent_streams(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.max_concurrent_streams.is_none() {
            self.max_concurrent_streams.set_default();
        }
        self.max_concurrent_streams.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_concurrent_streams(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.max_concurrent_streams.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.UInt32Value initial_stream_window_size = 3;


    pub fn get_initial_stream_window_size(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.initial_stream_window_size.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_initial_stream_window_size(&mut self) {
        self.initial_stream_window_size.clear();
    }

    pub fn has_initial_stream_window_size(&self) -> bool {
        self.initial_stream_window_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_initial_stream_window_size(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.initial_stream_window_size = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_initial_stream_window_size(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.initial_stream_window_size.is_none() {
            self.initial_stream_window_size.set_default();
        }
        self.initial_stream_window_size.as_mut().unwrap()
    }

    // Take field
    pub fn take_initial_stream_window_size(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.initial_stream_window_size.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.UInt32Value initial_connection_window_size = 4;


    pub fn get_initial_connection_window_size(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.initial_connection_window_size.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_initial_connection_window_size(&mut self) {
        self.initial_connection_window_size.clear();
    }

    pub fn has_initial_connection_window_size(&self) -> bool {
        self.initial_connection_window_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_initial_connection_window_size(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.initial_connection_window_size = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_initial_connection_window_size(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.initial_connection_window_size.is_none() {
            self.initial_connection_window_size.set_default();
        }
        self.initial_connection_window_size.as_mut().unwrap()
    }

    // Take field
    pub fn take_initial_connection_window_size(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.initial_connection_window_size.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // bool allow_connect = 5;


    pub fn get_allow_connect(&self) -> bool {
        self.allow_connect
    }
    pub fn clear_allow_connect(&mut self) {
        self.allow_connect = false;
    }

    // Param is passed by value, moved
    pub fn set_allow_connect(&mut self, v: bool) {
        self.allow_connect = v;
    }

    // bool allow_metadata = 6;


    pub fn get_allow_metadata(&self) -> bool {
        self.allow_metadata
    }
    pub fn clear_allow_metadata(&mut self) {
        self.allow_metadata = false;
    }

    // Param is passed by value, moved
    pub fn set_allow_metadata(&mut self, v: bool) {
        self.allow_metadata = v;
    }

    // .google.protobuf.UInt32Value max_outbound_frames = 7;


    pub fn get_max_outbound_frames(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.max_outbound_frames.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_max_outbound_frames(&mut self) {
        self.max_outbound_frames.clear();
    }

    pub fn has_max_outbound_frames(&self) -> bool {
        self.max_outbound_frames.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_outbound_frames(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.max_outbound_frames = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_outbound_frames(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.max_outbound_frames.is_none() {
            self.max_outbound_frames.set_default();
        }
        self.max_outbound_frames.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_outbound_frames(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.max_outbound_frames.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.UInt32Value max_outbound_control_frames = 8;


    pub fn get_max_outbound_control_frames(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.max_outbound_control_frames.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_max_outbound_control_frames(&mut self) {
        self.max_outbound_control_frames.clear();
    }

    pub fn has_max_outbound_control_frames(&self) -> bool {
        self.max_outbound_control_frames.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_outbound_control_frames(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.max_outbound_control_frames = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_outbound_control_frames(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.max_outbound_control_frames.is_none() {
            self.max_outbound_control_frames.set_default();
        }
        self.max_outbound_control_frames.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_outbound_control_frames(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.max_outbound_control_frames.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.UInt32Value max_consecutive_inbound_frames_with_empty_payload = 9;


    pub fn get_max_consecutive_inbound_frames_with_empty_payload(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.max_consecutive_inbound_frames_with_empty_payload.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_max_consecutive_inbound_frames_with_empty_payload(&mut self) {
        self.max_consecutive_inbound_frames_with_empty_payload.clear();
    }

    pub fn has_max_consecutive_inbound_frames_with_empty_payload(&self) -> bool {
        self.max_consecutive_inbound_frames_with_empty_payload.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_consecutive_inbound_frames_with_empty_payload(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.max_consecutive_inbound_frames_with_empty_payload = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_consecutive_inbound_frames_with_empty_payload(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.max_consecutive_inbound_frames_with_empty_payload.is_none() {
            self.max_consecutive_inbound_frames_with_empty_payload.set_default();
        }
        self.max_consecutive_inbound_frames_with_empty_payload.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_consecutive_inbound_frames_with_empty_payload(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.max_consecutive_inbound_frames_with_empty_payload.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.UInt32Value max_inbound_priority_frames_per_stream = 10;


    pub fn get_max_inbound_priority_frames_per_stream(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.max_inbound_priority_frames_per_stream.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_max_inbound_priority_frames_per_stream(&mut self) {
        self.max_inbound_priority_frames_per_stream.clear();
    }

    pub fn has_max_inbound_priority_frames_per_stream(&self) -> bool {
        self.max_inbound_priority_frames_per_stream.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_inbound_priority_frames_per_stream(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.max_inbound_priority_frames_per_stream = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_inbound_priority_frames_per_stream(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.max_inbound_priority_frames_per_stream.is_none() {
            self.max_inbound_priority_frames_per_stream.set_default();
        }
        self.max_inbound_priority_frames_per_stream.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_inbound_priority_frames_per_stream(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.max_inbound_priority_frames_per_stream.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.UInt32Value max_inbound_window_update_frames_per_data_frame_sent = 11;


    pub fn get_max_inbound_window_update_frames_per_data_frame_sent(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.max_inbound_window_update_frames_per_data_frame_sent.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_max_inbound_window_update_frames_per_data_frame_sent(&mut self) {
        self.max_inbound_window_update_frames_per_data_frame_sent.clear();
    }

    pub fn has_max_inbound_window_update_frames_per_data_frame_sent(&self) -> bool {
        self.max_inbound_window_update_frames_per_data_frame_sent.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_inbound_window_update_frames_per_data_frame_sent(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.max_inbound_window_update_frames_per_data_frame_sent = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_inbound_window_update_frames_per_data_frame_sent(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.max_inbound_window_update_frames_per_data_frame_sent.is_none() {
            self.max_inbound_window_update_frames_per_data_frame_sent.set_default();
        }
        self.max_inbound_window_update_frames_per_data_frame_sent.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_inbound_window_update_frames_per_data_frame_sent(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.max_inbound_window_update_frames_per_data_frame_sent.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.BoolValue override_stream_error_on_invalid_http_message = 14;


    pub fn get_override_stream_error_on_invalid_http_message(&self) -> &::protobuf::well_known_types::BoolValue {
        self.override_stream_error_on_invalid_http_message.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::BoolValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_override_stream_error_on_invalid_http_message(&mut self) {
        self.override_stream_error_on_invalid_http_message.clear();
    }

    pub fn has_override_stream_error_on_invalid_http_message(&self) -> bool {
        self.override_stream_error_on_invalid_http_message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_override_stream_error_on_invalid_http_message(&mut self, v: ::protobuf::well_known_types::BoolValue) {
        self.override_stream_error_on_invalid_http_message = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_override_stream_error_on_invalid_http_message(&mut self) -> &mut ::protobuf::well_known_types::BoolValue {
        if self.override_stream_error_on_invalid_http_message.is_none() {
            self.override_stream_error_on_invalid_http_message.set_default();
        }
        self.override_stream_error_on_invalid_http_message.as_mut().unwrap()
    }

    // Take field
    pub fn take_override_stream_error_on_invalid_http_message(&mut self) -> ::protobuf::well_known_types::BoolValue {
        self.override_stream_error_on_invalid_http_message.take().unwrap_or_else(|| ::protobuf::well_known_types::BoolValue::new())
    }

    // repeated .envoy.config.core.v4alpha.Http2ProtocolOptions.SettingsParameter custom_settings_parameters = 13;


    pub fn get_custom_settings_parameters(&self) -> &[Http2ProtocolOptions_SettingsParameter] {
        &self.custom_settings_parameters
    }
    pub fn clear_custom_settings_parameters(&mut self) {
        self.custom_settings_parameters.clear();
    }

    // Param is passed by value, moved
    pub fn set_custom_settings_parameters(&mut self, v: ::protobuf::RepeatedField<Http2ProtocolOptions_SettingsParameter>) {
        self.custom_settings_parameters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_custom_settings_parameters(&mut self) -> &mut ::protobuf::RepeatedField<Http2ProtocolOptions_SettingsParameter> {
        &mut self.custom_settings_parameters
    }

    // Take field
    pub fn take_custom_settings_parameters(&mut self) -> ::protobuf::RepeatedField<Http2ProtocolOptions_SettingsParameter> {
        ::std::mem::replace(&mut self.custom_settings_parameters, ::protobuf::RepeatedField::new())
    }

    // .envoy.config.core.v4alpha.KeepaliveSettings connection_keepalive = 15;


    pub fn get_connection_keepalive(&self) -> &KeepaliveSettings {
        self.connection_keepalive.as_ref().unwrap_or_else(|| <KeepaliveSettings as ::protobuf::Message>::default_instance())
    }
    pub fn clear_connection_keepalive(&mut self) {
        self.connection_keepalive.clear();
    }

    pub fn has_connection_keepalive(&self) -> bool {
        self.connection_keepalive.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connection_keepalive(&mut self, v: KeepaliveSettings) {
        self.connection_keepalive = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connection_keepalive(&mut self) -> &mut KeepaliveSettings {
        if self.connection_keepalive.is_none() {
            self.connection_keepalive.set_default();
        }
        self.connection_keepalive.as_mut().unwrap()
    }

    // Take field
    pub fn take_connection_keepalive(&mut self) -> KeepaliveSettings {
        self.connection_keepalive.take().unwrap_or_else(|| KeepaliveSettings::new())
    }
}

impl ::protobuf::Message for Http2ProtocolOptions {
    fn is_initialized(&self) -> bool {
        for v in &self.hpack_table_size {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.max_concurrent_streams {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.initial_stream_window_size {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.initial_connection_window_size {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.max_outbound_frames {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.max_outbound_control_frames {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.max_consecutive_inbound_frames_with_empty_payload {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.max_inbound_priority_frames_per_stream {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.max_inbound_window_update_frames_per_data_frame_sent {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.override_stream_error_on_invalid_http_message {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.custom_settings_parameters {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.connection_keepalive {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.hpack_table_size)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_concurrent_streams)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.initial_stream_window_size)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.initial_connection_window_size)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.allow_connect = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.allow_metadata = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_outbound_frames)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_outbound_control_frames)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_consecutive_inbound_frames_with_empty_payload)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_inbound_priority_frames_per_stream)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_inbound_window_update_frames_per_data_frame_sent)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.override_stream_error_on_invalid_http_message)?;
                },
                13 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.custom_settings_parameters)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.connection_keepalive)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.hpack_table_size.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.max_concurrent_streams.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.initial_stream_window_size.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.initial_connection_window_size.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.allow_connect != false {
            my_size += 2;
        }
        if self.allow_metadata != false {
            my_size += 2;
        }
        if let Some(ref v) = self.max_outbound_frames.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.max_outbound_control_frames.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.max_consecutive_inbound_frames_with_empty_payload.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.max_inbound_priority_frames_per_stream.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.max_inbound_window_update_frames_per_data_frame_sent.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.override_stream_error_on_invalid_http_message.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.custom_settings_parameters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.connection_keepalive.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.hpack_table_size.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.max_concurrent_streams.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.initial_stream_window_size.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.initial_connection_window_size.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.allow_connect != false {
            os.write_bool(5, self.allow_connect)?;
        }
        if self.allow_metadata != false {
            os.write_bool(6, self.allow_metadata)?;
        }
        if let Some(ref v) = self.max_outbound_frames.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.max_outbound_control_frames.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.max_consecutive_inbound_frames_with_empty_payload.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.max_inbound_priority_frames_per_stream.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.max_inbound_window_update_frames_per_data_frame_sent.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.override_stream_error_on_invalid_http_message.as_ref() {
            os.write_tag(14, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.custom_settings_parameters {
            os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.connection_keepalive.as_ref() {
            os.write_tag(15, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Http2ProtocolOptions {
        Http2ProtocolOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "hpack_table_size",
                |m: &Http2ProtocolOptions| { &m.hpack_table_size },
                |m: &mut Http2ProtocolOptions| { &mut m.hpack_table_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "max_concurrent_streams",
                |m: &Http2ProtocolOptions| { &m.max_concurrent_streams },
                |m: &mut Http2ProtocolOptions| { &mut m.max_concurrent_streams },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "initial_stream_window_size",
                |m: &Http2ProtocolOptions| { &m.initial_stream_window_size },
                |m: &mut Http2ProtocolOptions| { &mut m.initial_stream_window_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "initial_connection_window_size",
                |m: &Http2ProtocolOptions| { &m.initial_connection_window_size },
                |m: &mut Http2ProtocolOptions| { &mut m.initial_connection_window_size },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "allow_connect",
                |m: &Http2ProtocolOptions| { &m.allow_connect },
                |m: &mut Http2ProtocolOptions| { &mut m.allow_connect },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "allow_metadata",
                |m: &Http2ProtocolOptions| { &m.allow_metadata },
                |m: &mut Http2ProtocolOptions| { &mut m.allow_metadata },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "max_outbound_frames",
                |m: &Http2ProtocolOptions| { &m.max_outbound_frames },
                |m: &mut Http2ProtocolOptions| { &mut m.max_outbound_frames },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "max_outbound_control_frames",
                |m: &Http2ProtocolOptions| { &m.max_outbound_control_frames },
                |m: &mut Http2ProtocolOptions| { &mut m.max_outbound_control_frames },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "max_consecutive_inbound_frames_with_empty_payload",
                |m: &Http2ProtocolOptions| { &m.max_consecutive_inbound_frames_with_empty_payload },
                |m: &mut Http2ProtocolOptions| { &mut m.max_consecutive_inbound_frames_with_empty_payload },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "max_inbound_priority_frames_per_stream",
                |m: &Http2ProtocolOptions| { &m.max_inbound_priority_frames_per_stream },
                |m: &mut Http2ProtocolOptions| { &mut m.max_inbound_priority_frames_per_stream },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "max_inbound_window_update_frames_per_data_frame_sent",
                |m: &Http2ProtocolOptions| { &m.max_inbound_window_update_frames_per_data_frame_sent },
                |m: &mut Http2ProtocolOptions| { &mut m.max_inbound_window_update_frames_per_data_frame_sent },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::BoolValue>>(
                "override_stream_error_on_invalid_http_message",
                |m: &Http2ProtocolOptions| { &m.override_stream_error_on_invalid_http_message },
                |m: &mut Http2ProtocolOptions| { &mut m.override_stream_error_on_invalid_http_message },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Http2ProtocolOptions_SettingsParameter>>(
                "custom_settings_parameters",
                |m: &Http2ProtocolOptions| { &m.custom_settings_parameters },
                |m: &mut Http2ProtocolOptions| { &mut m.custom_settings_parameters },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<KeepaliveSettings>>(
                "connection_keepalive",
                |m: &Http2ProtocolOptions| { &m.connection_keepalive },
                |m: &mut Http2ProtocolOptions| { &mut m.connection_keepalive },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Http2ProtocolOptions>(
                "Http2ProtocolOptions",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Http2ProtocolOptions {
        static instance: ::protobuf::rt::LazyV2<Http2ProtocolOptions> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Http2ProtocolOptions::new)
    }
}

impl ::protobuf::Clear for Http2ProtocolOptions {
    fn clear(&mut self) {
        self.hpack_table_size.clear();
        self.max_concurrent_streams.clear();
        self.initial_stream_window_size.clear();
        self.initial_connection_window_size.clear();
        self.allow_connect = false;
        self.allow_metadata = false;
        self.max_outbound_frames.clear();
        self.max_outbound_control_frames.clear();
        self.max_consecutive_inbound_frames_with_empty_payload.clear();
        self.max_inbound_priority_frames_per_stream.clear();
        self.max_inbound_window_update_frames_per_data_frame_sent.clear();
        self.override_stream_error_on_invalid_http_message.clear();
        self.custom_settings_parameters.clear();
        self.connection_keepalive.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Http2ProtocolOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Http2ProtocolOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Http2ProtocolOptions_SettingsParameter {
    // message fields
    pub identifier: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub value: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Http2ProtocolOptions_SettingsParameter {
    fn default() -> &'a Http2ProtocolOptions_SettingsParameter {
        <Http2ProtocolOptions_SettingsParameter as ::protobuf::Message>::default_instance()
    }
}

impl Http2ProtocolOptions_SettingsParameter {
    pub fn new() -> Http2ProtocolOptions_SettingsParameter {
        ::std::default::Default::default()
    }

    // .google.protobuf.UInt32Value identifier = 1;


    pub fn get_identifier(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.identifier.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_identifier(&mut self) {
        self.identifier.clear();
    }

    pub fn has_identifier(&self) -> bool {
        self.identifier.is_some()
    }

    // Param is passed by value, moved
    pub fn set_identifier(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.identifier = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_identifier(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.identifier.is_none() {
            self.identifier.set_default();
        }
        self.identifier.as_mut().unwrap()
    }

    // Take field
    pub fn take_identifier(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.identifier.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.UInt32Value value = 2;


    pub fn get_value(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.value.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    pub fn has_value(&self) -> bool {
        self.value.is_some()
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.value = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.value.is_none() {
            self.value.set_default();
        }
        self.value.as_mut().unwrap()
    }

    // Take field
    pub fn take_value(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.value.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }
}

impl ::protobuf::Message for Http2ProtocolOptions_SettingsParameter {
    fn is_initialized(&self) -> bool {
        for v in &self.identifier {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.value {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.identifier)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.value)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.identifier.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.value.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.identifier.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.value.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Http2ProtocolOptions_SettingsParameter {
        Http2ProtocolOptions_SettingsParameter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "identifier",
                |m: &Http2ProtocolOptions_SettingsParameter| { &m.identifier },
                |m: &mut Http2ProtocolOptions_SettingsParameter| { &mut m.identifier },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "value",
                |m: &Http2ProtocolOptions_SettingsParameter| { &m.value },
                |m: &mut Http2ProtocolOptions_SettingsParameter| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Http2ProtocolOptions_SettingsParameter>(
                "Http2ProtocolOptions.SettingsParameter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Http2ProtocolOptions_SettingsParameter {
        static instance: ::protobuf::rt::LazyV2<Http2ProtocolOptions_SettingsParameter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Http2ProtocolOptions_SettingsParameter::new)
    }
}

impl ::protobuf::Clear for Http2ProtocolOptions_SettingsParameter {
    fn clear(&mut self) {
        self.identifier.clear();
        self.value.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Http2ProtocolOptions_SettingsParameter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Http2ProtocolOptions_SettingsParameter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GrpcProtocolOptions {
    // message fields
    pub http2_protocol_options: ::protobuf::SingularPtrField<Http2ProtocolOptions>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GrpcProtocolOptions {
    fn default() -> &'a GrpcProtocolOptions {
        <GrpcProtocolOptions as ::protobuf::Message>::default_instance()
    }
}

impl GrpcProtocolOptions {
    pub fn new() -> GrpcProtocolOptions {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v4alpha.Http2ProtocolOptions http2_protocol_options = 1;


    pub fn get_http2_protocol_options(&self) -> &Http2ProtocolOptions {
        self.http2_protocol_options.as_ref().unwrap_or_else(|| <Http2ProtocolOptions as ::protobuf::Message>::default_instance())
    }
    pub fn clear_http2_protocol_options(&mut self) {
        self.http2_protocol_options.clear();
    }

    pub fn has_http2_protocol_options(&self) -> bool {
        self.http2_protocol_options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_http2_protocol_options(&mut self, v: Http2ProtocolOptions) {
        self.http2_protocol_options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_http2_protocol_options(&mut self) -> &mut Http2ProtocolOptions {
        if self.http2_protocol_options.is_none() {
            self.http2_protocol_options.set_default();
        }
        self.http2_protocol_options.as_mut().unwrap()
    }

    // Take field
    pub fn take_http2_protocol_options(&mut self) -> Http2ProtocolOptions {
        self.http2_protocol_options.take().unwrap_or_else(|| Http2ProtocolOptions::new())
    }
}

impl ::protobuf::Message for GrpcProtocolOptions {
    fn is_initialized(&self) -> bool {
        for v in &self.http2_protocol_options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.http2_protocol_options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.http2_protocol_options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.http2_protocol_options.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GrpcProtocolOptions {
        GrpcProtocolOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Http2ProtocolOptions>>(
                "http2_protocol_options",
                |m: &GrpcProtocolOptions| { &m.http2_protocol_options },
                |m: &mut GrpcProtocolOptions| { &mut m.http2_protocol_options },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GrpcProtocolOptions>(
                "GrpcProtocolOptions",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GrpcProtocolOptions {
        static instance: ::protobuf::rt::LazyV2<GrpcProtocolOptions> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GrpcProtocolOptions::new)
    }
}

impl ::protobuf::Clear for GrpcProtocolOptions {
    fn clear(&mut self) {
        self.http2_protocol_options.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GrpcProtocolOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GrpcProtocolOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n(envoy/config/core/v4alpha/protocol.proto\x12\x19envoy.config.core.v4a\
    lpha\x1a\x1benvoy/type/v3/percent.proto\x1a\x1egoogle/protobuf/duration.\
    proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1dudpa/annotations/stat\
    us.proto\x1a!udpa/annotations/versioning.proto\x1a\x17validate/validate.\
    proto\"D\n\x12TcpProtocolOptions:.\x9a\xc5\x88\x1e)\n'envoy.config.core.\
    v3.TcpProtocolOptions\"\xa1\x01\n\x1bUpstreamHttpProtocolOptions\x12\x19\
    \n\x08auto_sni\x18\x01\x20\x01(\x08R\x07autoSni\x12.\n\x13auto_san_valid\
    ation\x18\x02\x20\x01(\x08R\x11autoSanValidation:7\x9a\xc5\x88\x1e2\n0en\
    voy.config.core.v3.UpstreamHttpProtocolOptions\"\xda\x04\n\x13HttpProtoc\
    olOptions\x12<\n\x0cidle_timeout\x18\x01\x20\x01(\x0b2\x19.google.protob\
    uf.DurationR\x0bidleTimeout\x12Q\n\x17max_connection_duration\x18\x03\
    \x20\x01(\x0b2\x19.google.protobuf.DurationR\x15maxConnectionDuration\
    \x12Q\n\x11max_headers_count\x18\x02\x20\x01(\x0b2\x1c.google.protobuf.U\
    Int32ValueR\x0fmaxHeadersCountB\x07\xfaB\x04*\x02(\x01\x12I\n\x13max_str\
    eam_duration\x18\x04\x20\x01(\x0b2\x19.google.protobuf.DurationR\x11maxS\
    treamDuration\x12\x92\x01\n\x1fheaders_with_underscores_action\x18\x05\
    \x20\x01(\x0e2K.envoy.config.core.v4alpha.HttpProtocolOptions.HeadersWit\
    hUnderscoresActionR\x1cheadersWithUnderscoresAction\"N\n\x1cHeadersWithU\
    nderscoresAction\x12\t\n\x05ALLOW\x10\0\x12\x12\n\x0eREJECT_REQUEST\x10\
    \x01\x12\x0f\n\x0bDROP_HEADER\x10\x02:/\x9a\xc5\x88\x1e*\n(envoy.config.\
    core.v3.HttpProtocolOptions\"\x84\x07\n\x14Http1ProtocolOptions\x12H\n\
    \x12allow_absolute_url\x18\x01\x20\x01(\x0b2\x1a.google.protobuf.BoolVal\
    ueR\x10allowAbsoluteUrl\x12$\n\x0eaccept_http_10\x18\x02\x20\x01(\x08R\
    \x0cacceptHttp10\x126\n\x18default_host_for_http_10\x18\x03\x20\x01(\tR\
    \x14defaultHostForHttp10\x12k\n\x11header_key_format\x18\x04\x20\x01(\
    \x0b2?.envoy.config.core.v4alpha.Http1ProtocolOptions.HeaderKeyFormatR\
    \x0fheaderKeyFormat\x12'\n\x0fenable_trailers\x18\x05\x20\x01(\x08R\x0ee\
    nableTrailers\x120\n\x14allow_chunked_length\x18\x06\x20\x01(\x08R\x12al\
    lowChunkedLength\x12z\n-override_stream_error_on_invalid_http_message\
    \x18\x07\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR'overrideStreamErro\
    rOnInvalidHttpMessage\x1a\xcd\x02\n\x0fHeaderKeyFormat\x12}\n\x11proper_\
    case_words\x18\x01\x20\x01(\x0b2O.envoy.config.core.v4alpha.Http1Protoco\
    lOptions.HeaderKeyFormat.ProperCaseWordsH\0R\x0fproperCaseWords\x1ac\n\
    \x0fProperCaseWords:P\x9a\xc5\x88\x1eK\nIenvoy.config.core.v3.Http1Proto\
    colOptions.HeaderKeyFormat.ProperCaseWordsB\x14\n\rheader_format\x12\x03\
    \xf8B\x01:@\x9a\xc5\x88\x1e;\n9envoy.config.core.v3.Http1ProtocolOptions\
    .HeaderKeyFormat:0\x9a\xc5\x88\x1e+\n)envoy.config.core.v3.Http1Protocol\
    Options\"\x8f\x02\n\x11KeepaliveSettings\x12E\n\x08interval\x18\x01\x20\
    \x01(\x0b2\x19.google.protobuf.DurationR\x08intervalB\x0e\xfaB\x0b\xaa\
    \x01\x08\x08\x012\x04\x10\xc0\x84=\x12C\n\x07timeout\x18\x02\x20\x01(\
    \x0b2\x19.google.protobuf.DurationR\x07timeoutB\x0e\xfaB\x0b\xaa\x01\x08\
    \x08\x012\x04\x10\xc0\x84=\x12?\n\x0finterval_jitter\x18\x03\x20\x01(\
    \x0b2\x16.envoy.type.v3.PercentR\x0eintervalJitter:-\x9a\xc5\x88\x1e(\n&\
    envoy.config.core.v3.KeepaliveSettings\"\xdf\r\n\x14Http2ProtocolOptions\
    \x12F\n\x10hpack_table_size\x18\x01\x20\x01(\x0b2\x1c.google.protobuf.UI\
    nt32ValueR\x0ehpackTableSize\x12a\n\x16max_concurrent_streams\x18\x02\
    \x20\x01(\x0b2\x1c.google.protobuf.UInt32ValueR\x14maxConcurrentStreamsB\
    \r\xfaB\n*\x08\x18\xff\xff\xff\xff\x07(\x01\x12j\n\x1ainitial_stream_win\
    dow_size\x18\x03\x20\x01(\x0b2\x1c.google.protobuf.UInt32ValueR\x17initi\
    alStreamWindowSizeB\x0f\xfaB\x0c*\n\x18\xff\xff\xff\xff\x07(\xff\xff\x03\
    \x12r\n\x1einitial_connection_window_size\x18\x04\x20\x01(\x0b2\x1c.goog\
    le.protobuf.UInt32ValueR\x1binitialConnectionWindowSizeB\x0f\xfaB\x0c*\n\
    \x18\xff\xff\xff\xff\x07(\xff\xff\x03\x12#\n\rallow_connect\x18\x05\x20\
    \x01(\x08R\x0callowConnect\x12%\n\x0eallow_metadata\x18\x06\x20\x01(\x08\
    R\rallowMetadata\x12U\n\x13max_outbound_frames\x18\x07\x20\x01(\x0b2\x1c\
    .google.protobuf.UInt32ValueR\x11maxOutboundFramesB\x07\xfaB\x04*\x02(\
    \x01\x12d\n\x1bmax_outbound_control_frames\x18\x08\x20\x01(\x0b2\x1c.goo\
    gle.protobuf.UInt32ValueR\x18maxOutboundControlFramesB\x07\xfaB\x04*\x02\
    (\x01\x12\x84\x01\n1max_consecutive_inbound_frames_with_empty_payload\
    \x18\t\x20\x01(\x0b2\x1c.google.protobuf.UInt32ValueR+maxConsecutiveInbo\
    undFramesWithEmptyPayload\x12o\n&max_inbound_priority_frames_per_stream\
    \x18\n\x20\x01(\x0b2\x1c.google.protobuf.UInt32ValueR!maxInboundPriority\
    FramesPerStream\x12\x91\x01\n4max_inbound_window_update_frames_per_data_\
    frame_sent\x18\x0b\x20\x01(\x0b2\x1c.google.protobuf.UInt32ValueR,maxInb\
    oundWindowUpdateFramesPerDataFrameSentB\x07\xfaB\x04*\x02(\x01\x12z\n-ov\
    erride_stream_error_on_invalid_http_message\x18\x0e\x20\x01(\x0b2\x1a.go\
    ogle.protobuf.BoolValueR'overrideStreamErrorOnInvalidHttpMessage\x12\x7f\
    \n\x1acustom_settings_parameters\x18\r\x20\x03(\x0b2A.envoy.config.core.\
    v4alpha.Http2ProtocolOptions.SettingsParameterR\x18customSettingsParamet\
    ers\x12_\n\x14connection_keepalive\x18\x0f\x20\x01(\x0b2,.envoy.config.c\
    ore.v4alpha.KeepaliveSettingsR\x13connectionKeepalive\x1a\xe8\x01\n\x11S\
    ettingsParameter\x12Q\n\nidentifier\x18\x01\x20\x01(\x0b2\x1c.google.pro\
    tobuf.UInt32ValueR\nidentifierB\x13\xfaB\x08*\x06\x18\xff\xff\x03(\0\xfa\
    B\x05\x8a\x01\x02\x10\x01\x12<\n\x05value\x18\x02\x20\x01(\x0b2\x1c.goog\
    le.protobuf.UInt32ValueR\x05valueB\x08\xfaB\x05\x8a\x01\x02\x10\x01:B\
    \x9a\xc5\x88\x1e=\n;envoy.config.core.v3.Http2ProtocolOptions.SettingsPa\
    rameter:0\x9a\xc5\x88\x1e+\n)envoy.config.core.v3.Http2ProtocolOptionsJ\
    \x04\x08\x0c\x10\rR&stream_error_on_invalid_http_messaging\"\xad\x01\n\
    \x13GrpcProtocolOptions\x12e\n\x16http2_protocol_options\x18\x01\x20\x01\
    (\x0b2/.envoy.config.core.v4alpha.Http2ProtocolOptionsR\x14http2Protocol\
    Options:/\x9a\xc5\x88\x1e*\n(envoy.config.core.v3.GrpcProtocolOptionsBB\
    \n'io.envoyproxy.envoy.config.core.v4alphaB\rProtocolProtoP\x01\xba\x80\
    \xc8\xd1\x06\x02\x10\x03b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
