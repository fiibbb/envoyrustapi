// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/listener/v3/listener.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct ListenerCollection {
    // message fields
    pub entries: ::protobuf::RepeatedField<super::collection_entry::CollectionEntry>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListenerCollection {
    fn default() -> &'a ListenerCollection {
        <ListenerCollection as ::protobuf::Message>::default_instance()
    }
}

impl ListenerCollection {
    pub fn new() -> ListenerCollection {
        ::std::default::Default::default()
    }

    // repeated .xds.core.v3.CollectionEntry entries = 1;


    pub fn get_entries(&self) -> &[super::collection_entry::CollectionEntry] {
        &self.entries
    }
    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<super::collection_entry::CollectionEntry>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<super::collection_entry::CollectionEntry> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<super::collection_entry::CollectionEntry> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ListenerCollection {
    fn is_initialized(&self) -> bool {
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.entries {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListenerCollection {
        ListenerCollection::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::collection_entry::CollectionEntry>>(
                "entries",
                |m: &ListenerCollection| { &m.entries },
                |m: &mut ListenerCollection| { &mut m.entries },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListenerCollection>(
                "ListenerCollection",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListenerCollection {
        static instance: ::protobuf::rt::LazyV2<ListenerCollection> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListenerCollection::new)
    }
}

impl ::protobuf::Clear for ListenerCollection {
    fn clear(&mut self) {
        self.entries.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListenerCollection {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListenerCollection {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Listener {
    // message fields
    pub name: ::std::string::String,
    pub address: ::protobuf::SingularPtrField<super::address::Address>,
    pub filter_chains: ::protobuf::RepeatedField<super::listener_components::FilterChain>,
    pub default_filter_chain: ::protobuf::SingularPtrField<super::listener_components::FilterChain>,
    pub per_connection_buffer_limit_bytes: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub metadata: ::protobuf::SingularPtrField<super::base::Metadata>,
    pub deprecated_v1: ::protobuf::SingularPtrField<Listener_DeprecatedV1>,
    pub drain_type: Listener_DrainType,
    pub listener_filters: ::protobuf::RepeatedField<super::listener_components::ListenerFilter>,
    pub listener_filters_timeout: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub continue_on_listener_filters_timeout: bool,
    pub transparent: ::protobuf::SingularPtrField<::protobuf::well_known_types::BoolValue>,
    pub freebind: ::protobuf::SingularPtrField<::protobuf::well_known_types::BoolValue>,
    pub socket_options: ::protobuf::RepeatedField<super::socket_option::SocketOption>,
    pub tcp_fast_open_queue_length: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub traffic_direction: super::base::TrafficDirection,
    pub udp_listener_config: ::protobuf::SingularPtrField<super::udp_listener_config::UdpListenerConfig>,
    pub api_listener: ::protobuf::SingularPtrField<super::api_listener::ApiListener>,
    pub connection_balance_config: ::protobuf::SingularPtrField<Listener_ConnectionBalanceConfig>,
    pub reuse_port: bool,
    pub access_log: ::protobuf::RepeatedField<super::accesslog::AccessLog>,
    pub udp_writer_config: ::protobuf::SingularPtrField<super::extension::TypedExtensionConfig>,
    pub tcp_backlog_size: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Listener {
    fn default() -> &'a Listener {
        <Listener as ::protobuf::Message>::default_instance()
    }
}

impl Listener {
    pub fn new() -> Listener {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .envoy.config.core.v3.Address address = 2;


    pub fn get_address(&self) -> &super::address::Address {
        self.address.as_ref().unwrap_or_else(|| <super::address::Address as ::protobuf::Message>::default_instance())
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: super::address::Address) {
        self.address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut super::address::Address {
        if self.address.is_none() {
            self.address.set_default();
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> super::address::Address {
        self.address.take().unwrap_or_else(|| super::address::Address::new())
    }

    // repeated .envoy.config.listener.v3.FilterChain filter_chains = 3;


    pub fn get_filter_chains(&self) -> &[super::listener_components::FilterChain] {
        &self.filter_chains
    }
    pub fn clear_filter_chains(&mut self) {
        self.filter_chains.clear();
    }

    // Param is passed by value, moved
    pub fn set_filter_chains(&mut self, v: ::protobuf::RepeatedField<super::listener_components::FilterChain>) {
        self.filter_chains = v;
    }

    // Mutable pointer to the field.
    pub fn mut_filter_chains(&mut self) -> &mut ::protobuf::RepeatedField<super::listener_components::FilterChain> {
        &mut self.filter_chains
    }

    // Take field
    pub fn take_filter_chains(&mut self) -> ::protobuf::RepeatedField<super::listener_components::FilterChain> {
        ::std::mem::replace(&mut self.filter_chains, ::protobuf::RepeatedField::new())
    }

    // .envoy.config.listener.v3.FilterChain default_filter_chain = 25;


    pub fn get_default_filter_chain(&self) -> &super::listener_components::FilterChain {
        self.default_filter_chain.as_ref().unwrap_or_else(|| <super::listener_components::FilterChain as ::protobuf::Message>::default_instance())
    }
    pub fn clear_default_filter_chain(&mut self) {
        self.default_filter_chain.clear();
    }

    pub fn has_default_filter_chain(&self) -> bool {
        self.default_filter_chain.is_some()
    }

    // Param is passed by value, moved
    pub fn set_default_filter_chain(&mut self, v: super::listener_components::FilterChain) {
        self.default_filter_chain = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_default_filter_chain(&mut self) -> &mut super::listener_components::FilterChain {
        if self.default_filter_chain.is_none() {
            self.default_filter_chain.set_default();
        }
        self.default_filter_chain.as_mut().unwrap()
    }

    // Take field
    pub fn take_default_filter_chain(&mut self) -> super::listener_components::FilterChain {
        self.default_filter_chain.take().unwrap_or_else(|| super::listener_components::FilterChain::new())
    }

    // .google.protobuf.UInt32Value per_connection_buffer_limit_bytes = 5;


    pub fn get_per_connection_buffer_limit_bytes(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.per_connection_buffer_limit_bytes.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_per_connection_buffer_limit_bytes(&mut self) {
        self.per_connection_buffer_limit_bytes.clear();
    }

    pub fn has_per_connection_buffer_limit_bytes(&self) -> bool {
        self.per_connection_buffer_limit_bytes.is_some()
    }

    // Param is passed by value, moved
    pub fn set_per_connection_buffer_limit_bytes(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.per_connection_buffer_limit_bytes = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_per_connection_buffer_limit_bytes(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.per_connection_buffer_limit_bytes.is_none() {
            self.per_connection_buffer_limit_bytes.set_default();
        }
        self.per_connection_buffer_limit_bytes.as_mut().unwrap()
    }

    // Take field
    pub fn take_per_connection_buffer_limit_bytes(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.per_connection_buffer_limit_bytes.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .envoy.config.core.v3.Metadata metadata = 6;


    pub fn get_metadata(&self) -> &super::base::Metadata {
        self.metadata.as_ref().unwrap_or_else(|| <super::base::Metadata as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: super::base::Metadata) {
        self.metadata = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut super::base::Metadata {
        if self.metadata.is_none() {
            self.metadata.set_default();
        }
        self.metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata(&mut self) -> super::base::Metadata {
        self.metadata.take().unwrap_or_else(|| super::base::Metadata::new())
    }

    // .envoy.config.listener.v3.Listener.DeprecatedV1 deprecated_v1 = 7;


    pub fn get_deprecated_v1(&self) -> &Listener_DeprecatedV1 {
        self.deprecated_v1.as_ref().unwrap_or_else(|| <Listener_DeprecatedV1 as ::protobuf::Message>::default_instance())
    }
    pub fn clear_deprecated_v1(&mut self) {
        self.deprecated_v1.clear();
    }

    pub fn has_deprecated_v1(&self) -> bool {
        self.deprecated_v1.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deprecated_v1(&mut self, v: Listener_DeprecatedV1) {
        self.deprecated_v1 = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deprecated_v1(&mut self) -> &mut Listener_DeprecatedV1 {
        if self.deprecated_v1.is_none() {
            self.deprecated_v1.set_default();
        }
        self.deprecated_v1.as_mut().unwrap()
    }

    // Take field
    pub fn take_deprecated_v1(&mut self) -> Listener_DeprecatedV1 {
        self.deprecated_v1.take().unwrap_or_else(|| Listener_DeprecatedV1::new())
    }

    // .envoy.config.listener.v3.Listener.DrainType drain_type = 8;


    pub fn get_drain_type(&self) -> Listener_DrainType {
        self.drain_type
    }
    pub fn clear_drain_type(&mut self) {
        self.drain_type = Listener_DrainType::DEFAULT;
    }

    // Param is passed by value, moved
    pub fn set_drain_type(&mut self, v: Listener_DrainType) {
        self.drain_type = v;
    }

    // repeated .envoy.config.listener.v3.ListenerFilter listener_filters = 9;


    pub fn get_listener_filters(&self) -> &[super::listener_components::ListenerFilter] {
        &self.listener_filters
    }
    pub fn clear_listener_filters(&mut self) {
        self.listener_filters.clear();
    }

    // Param is passed by value, moved
    pub fn set_listener_filters(&mut self, v: ::protobuf::RepeatedField<super::listener_components::ListenerFilter>) {
        self.listener_filters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_listener_filters(&mut self) -> &mut ::protobuf::RepeatedField<super::listener_components::ListenerFilter> {
        &mut self.listener_filters
    }

    // Take field
    pub fn take_listener_filters(&mut self) -> ::protobuf::RepeatedField<super::listener_components::ListenerFilter> {
        ::std::mem::replace(&mut self.listener_filters, ::protobuf::RepeatedField::new())
    }

    // .google.protobuf.Duration listener_filters_timeout = 15;


    pub fn get_listener_filters_timeout(&self) -> &::protobuf::well_known_types::Duration {
        self.listener_filters_timeout.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_listener_filters_timeout(&mut self) {
        self.listener_filters_timeout.clear();
    }

    pub fn has_listener_filters_timeout(&self) -> bool {
        self.listener_filters_timeout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_listener_filters_timeout(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.listener_filters_timeout = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_listener_filters_timeout(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.listener_filters_timeout.is_none() {
            self.listener_filters_timeout.set_default();
        }
        self.listener_filters_timeout.as_mut().unwrap()
    }

    // Take field
    pub fn take_listener_filters_timeout(&mut self) -> ::protobuf::well_known_types::Duration {
        self.listener_filters_timeout.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // bool continue_on_listener_filters_timeout = 17;


    pub fn get_continue_on_listener_filters_timeout(&self) -> bool {
        self.continue_on_listener_filters_timeout
    }
    pub fn clear_continue_on_listener_filters_timeout(&mut self) {
        self.continue_on_listener_filters_timeout = false;
    }

    // Param is passed by value, moved
    pub fn set_continue_on_listener_filters_timeout(&mut self, v: bool) {
        self.continue_on_listener_filters_timeout = v;
    }

    // .google.protobuf.BoolValue transparent = 10;


    pub fn get_transparent(&self) -> &::protobuf::well_known_types::BoolValue {
        self.transparent.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::BoolValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_transparent(&mut self) {
        self.transparent.clear();
    }

    pub fn has_transparent(&self) -> bool {
        self.transparent.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transparent(&mut self, v: ::protobuf::well_known_types::BoolValue) {
        self.transparent = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transparent(&mut self) -> &mut ::protobuf::well_known_types::BoolValue {
        if self.transparent.is_none() {
            self.transparent.set_default();
        }
        self.transparent.as_mut().unwrap()
    }

    // Take field
    pub fn take_transparent(&mut self) -> ::protobuf::well_known_types::BoolValue {
        self.transparent.take().unwrap_or_else(|| ::protobuf::well_known_types::BoolValue::new())
    }

    // .google.protobuf.BoolValue freebind = 11;


    pub fn get_freebind(&self) -> &::protobuf::well_known_types::BoolValue {
        self.freebind.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::BoolValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_freebind(&mut self) {
        self.freebind.clear();
    }

    pub fn has_freebind(&self) -> bool {
        self.freebind.is_some()
    }

    // Param is passed by value, moved
    pub fn set_freebind(&mut self, v: ::protobuf::well_known_types::BoolValue) {
        self.freebind = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_freebind(&mut self) -> &mut ::protobuf::well_known_types::BoolValue {
        if self.freebind.is_none() {
            self.freebind.set_default();
        }
        self.freebind.as_mut().unwrap()
    }

    // Take field
    pub fn take_freebind(&mut self) -> ::protobuf::well_known_types::BoolValue {
        self.freebind.take().unwrap_or_else(|| ::protobuf::well_known_types::BoolValue::new())
    }

    // repeated .envoy.config.core.v3.SocketOption socket_options = 13;


    pub fn get_socket_options(&self) -> &[super::socket_option::SocketOption] {
        &self.socket_options
    }
    pub fn clear_socket_options(&mut self) {
        self.socket_options.clear();
    }

    // Param is passed by value, moved
    pub fn set_socket_options(&mut self, v: ::protobuf::RepeatedField<super::socket_option::SocketOption>) {
        self.socket_options = v;
    }

    // Mutable pointer to the field.
    pub fn mut_socket_options(&mut self) -> &mut ::protobuf::RepeatedField<super::socket_option::SocketOption> {
        &mut self.socket_options
    }

    // Take field
    pub fn take_socket_options(&mut self) -> ::protobuf::RepeatedField<super::socket_option::SocketOption> {
        ::std::mem::replace(&mut self.socket_options, ::protobuf::RepeatedField::new())
    }

    // .google.protobuf.UInt32Value tcp_fast_open_queue_length = 12;


    pub fn get_tcp_fast_open_queue_length(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.tcp_fast_open_queue_length.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tcp_fast_open_queue_length(&mut self) {
        self.tcp_fast_open_queue_length.clear();
    }

    pub fn has_tcp_fast_open_queue_length(&self) -> bool {
        self.tcp_fast_open_queue_length.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tcp_fast_open_queue_length(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.tcp_fast_open_queue_length = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tcp_fast_open_queue_length(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.tcp_fast_open_queue_length.is_none() {
            self.tcp_fast_open_queue_length.set_default();
        }
        self.tcp_fast_open_queue_length.as_mut().unwrap()
    }

    // Take field
    pub fn take_tcp_fast_open_queue_length(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.tcp_fast_open_queue_length.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .envoy.config.core.v3.TrafficDirection traffic_direction = 16;


    pub fn get_traffic_direction(&self) -> super::base::TrafficDirection {
        self.traffic_direction
    }
    pub fn clear_traffic_direction(&mut self) {
        self.traffic_direction = super::base::TrafficDirection::UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_traffic_direction(&mut self, v: super::base::TrafficDirection) {
        self.traffic_direction = v;
    }

    // .envoy.config.listener.v3.UdpListenerConfig udp_listener_config = 18;


    pub fn get_udp_listener_config(&self) -> &super::udp_listener_config::UdpListenerConfig {
        self.udp_listener_config.as_ref().unwrap_or_else(|| <super::udp_listener_config::UdpListenerConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_udp_listener_config(&mut self) {
        self.udp_listener_config.clear();
    }

    pub fn has_udp_listener_config(&self) -> bool {
        self.udp_listener_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_udp_listener_config(&mut self, v: super::udp_listener_config::UdpListenerConfig) {
        self.udp_listener_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_udp_listener_config(&mut self) -> &mut super::udp_listener_config::UdpListenerConfig {
        if self.udp_listener_config.is_none() {
            self.udp_listener_config.set_default();
        }
        self.udp_listener_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_udp_listener_config(&mut self) -> super::udp_listener_config::UdpListenerConfig {
        self.udp_listener_config.take().unwrap_or_else(|| super::udp_listener_config::UdpListenerConfig::new())
    }

    // .envoy.config.listener.v3.ApiListener api_listener = 19;


    pub fn get_api_listener(&self) -> &super::api_listener::ApiListener {
        self.api_listener.as_ref().unwrap_or_else(|| <super::api_listener::ApiListener as ::protobuf::Message>::default_instance())
    }
    pub fn clear_api_listener(&mut self) {
        self.api_listener.clear();
    }

    pub fn has_api_listener(&self) -> bool {
        self.api_listener.is_some()
    }

    // Param is passed by value, moved
    pub fn set_api_listener(&mut self, v: super::api_listener::ApiListener) {
        self.api_listener = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_api_listener(&mut self) -> &mut super::api_listener::ApiListener {
        if self.api_listener.is_none() {
            self.api_listener.set_default();
        }
        self.api_listener.as_mut().unwrap()
    }

    // Take field
    pub fn take_api_listener(&mut self) -> super::api_listener::ApiListener {
        self.api_listener.take().unwrap_or_else(|| super::api_listener::ApiListener::new())
    }

    // .envoy.config.listener.v3.Listener.ConnectionBalanceConfig connection_balance_config = 20;


    pub fn get_connection_balance_config(&self) -> &Listener_ConnectionBalanceConfig {
        self.connection_balance_config.as_ref().unwrap_or_else(|| <Listener_ConnectionBalanceConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_connection_balance_config(&mut self) {
        self.connection_balance_config.clear();
    }

    pub fn has_connection_balance_config(&self) -> bool {
        self.connection_balance_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connection_balance_config(&mut self, v: Listener_ConnectionBalanceConfig) {
        self.connection_balance_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connection_balance_config(&mut self) -> &mut Listener_ConnectionBalanceConfig {
        if self.connection_balance_config.is_none() {
            self.connection_balance_config.set_default();
        }
        self.connection_balance_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_connection_balance_config(&mut self) -> Listener_ConnectionBalanceConfig {
        self.connection_balance_config.take().unwrap_or_else(|| Listener_ConnectionBalanceConfig::new())
    }

    // bool reuse_port = 21;


    pub fn get_reuse_port(&self) -> bool {
        self.reuse_port
    }
    pub fn clear_reuse_port(&mut self) {
        self.reuse_port = false;
    }

    // Param is passed by value, moved
    pub fn set_reuse_port(&mut self, v: bool) {
        self.reuse_port = v;
    }

    // repeated .envoy.config.accesslog.v3.AccessLog access_log = 22;


    pub fn get_access_log(&self) -> &[super::accesslog::AccessLog] {
        &self.access_log
    }
    pub fn clear_access_log(&mut self) {
        self.access_log.clear();
    }

    // Param is passed by value, moved
    pub fn set_access_log(&mut self, v: ::protobuf::RepeatedField<super::accesslog::AccessLog>) {
        self.access_log = v;
    }

    // Mutable pointer to the field.
    pub fn mut_access_log(&mut self) -> &mut ::protobuf::RepeatedField<super::accesslog::AccessLog> {
        &mut self.access_log
    }

    // Take field
    pub fn take_access_log(&mut self) -> ::protobuf::RepeatedField<super::accesslog::AccessLog> {
        ::std::mem::replace(&mut self.access_log, ::protobuf::RepeatedField::new())
    }

    // .envoy.config.core.v3.TypedExtensionConfig udp_writer_config = 23;


    pub fn get_udp_writer_config(&self) -> &super::extension::TypedExtensionConfig {
        self.udp_writer_config.as_ref().unwrap_or_else(|| <super::extension::TypedExtensionConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_udp_writer_config(&mut self) {
        self.udp_writer_config.clear();
    }

    pub fn has_udp_writer_config(&self) -> bool {
        self.udp_writer_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_udp_writer_config(&mut self, v: super::extension::TypedExtensionConfig) {
        self.udp_writer_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_udp_writer_config(&mut self) -> &mut super::extension::TypedExtensionConfig {
        if self.udp_writer_config.is_none() {
            self.udp_writer_config.set_default();
        }
        self.udp_writer_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_udp_writer_config(&mut self) -> super::extension::TypedExtensionConfig {
        self.udp_writer_config.take().unwrap_or_else(|| super::extension::TypedExtensionConfig::new())
    }

    // .google.protobuf.UInt32Value tcp_backlog_size = 24;


    pub fn get_tcp_backlog_size(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.tcp_backlog_size.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tcp_backlog_size(&mut self) {
        self.tcp_backlog_size.clear();
    }

    pub fn has_tcp_backlog_size(&self) -> bool {
        self.tcp_backlog_size.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tcp_backlog_size(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.tcp_backlog_size = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tcp_backlog_size(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.tcp_backlog_size.is_none() {
            self.tcp_backlog_size.set_default();
        }
        self.tcp_backlog_size.as_mut().unwrap()
    }

    // Take field
    pub fn take_tcp_backlog_size(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.tcp_backlog_size.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }
}

impl ::protobuf::Message for Listener {
    fn is_initialized(&self) -> bool {
        for v in &self.address {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.filter_chains {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.default_filter_chain {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.per_connection_buffer_limit_bytes {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.deprecated_v1 {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.listener_filters {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.listener_filters_timeout {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.transparent {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.freebind {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.socket_options {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tcp_fast_open_queue_length {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.udp_listener_config {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.api_listener {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.connection_balance_config {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.access_log {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.udp_writer_config {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tcp_backlog_size {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.address)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.filter_chains)?;
                },
                25 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.default_filter_chain)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.per_connection_buffer_limit_bytes)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.deprecated_v1)?;
                },
                8 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.drain_type, 8, &mut self.unknown_fields)?
                },
                9 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.listener_filters)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.listener_filters_timeout)?;
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.continue_on_listener_filters_timeout = tmp;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transparent)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.freebind)?;
                },
                13 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.socket_options)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tcp_fast_open_queue_length)?;
                },
                16 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.traffic_direction, 16, &mut self.unknown_fields)?
                },
                18 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.udp_listener_config)?;
                },
                19 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.api_listener)?;
                },
                20 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.connection_balance_config)?;
                },
                21 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.reuse_port = tmp;
                },
                22 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.access_log)?;
                },
                23 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.udp_writer_config)?;
                },
                24 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tcp_backlog_size)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(ref v) = self.address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.filter_chains {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.default_filter_chain.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.per_connection_buffer_limit_bytes.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.deprecated_v1.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.drain_type != Listener_DrainType::DEFAULT {
            my_size += ::protobuf::rt::enum_size(8, self.drain_type);
        }
        for value in &self.listener_filters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.listener_filters_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.continue_on_listener_filters_timeout != false {
            my_size += 3;
        }
        if let Some(ref v) = self.transparent.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.freebind.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.socket_options {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.tcp_fast_open_queue_length.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.traffic_direction != super::base::TrafficDirection::UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(16, self.traffic_direction);
        }
        if let Some(ref v) = self.udp_listener_config.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.api_listener.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.connection_balance_config.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.reuse_port != false {
            my_size += 3;
        }
        for value in &self.access_log {
            let len = value.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.udp_writer_config.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.tcp_backlog_size.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(ref v) = self.address.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.filter_chains {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.default_filter_chain.as_ref() {
            os.write_tag(25, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.per_connection_buffer_limit_bytes.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.metadata.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.deprecated_v1.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.drain_type != Listener_DrainType::DEFAULT {
            os.write_enum(8, ::protobuf::ProtobufEnum::value(&self.drain_type))?;
        }
        for v in &self.listener_filters {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.listener_filters_timeout.as_ref() {
            os.write_tag(15, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.continue_on_listener_filters_timeout != false {
            os.write_bool(17, self.continue_on_listener_filters_timeout)?;
        }
        if let Some(ref v) = self.transparent.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.freebind.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.socket_options {
            os.write_tag(13, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.tcp_fast_open_queue_length.as_ref() {
            os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.traffic_direction != super::base::TrafficDirection::UNSPECIFIED {
            os.write_enum(16, ::protobuf::ProtobufEnum::value(&self.traffic_direction))?;
        }
        if let Some(ref v) = self.udp_listener_config.as_ref() {
            os.write_tag(18, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.api_listener.as_ref() {
            os.write_tag(19, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.connection_balance_config.as_ref() {
            os.write_tag(20, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.reuse_port != false {
            os.write_bool(21, self.reuse_port)?;
        }
        for v in &self.access_log {
            os.write_tag(22, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.udp_writer_config.as_ref() {
            os.write_tag(23, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.tcp_backlog_size.as_ref() {
            os.write_tag(24, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Listener {
        Listener::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Listener| { &m.name },
                |m: &mut Listener| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::address::Address>>(
                "address",
                |m: &Listener| { &m.address },
                |m: &mut Listener| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::listener_components::FilterChain>>(
                "filter_chains",
                |m: &Listener| { &m.filter_chains },
                |m: &mut Listener| { &mut m.filter_chains },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::listener_components::FilterChain>>(
                "default_filter_chain",
                |m: &Listener| { &m.default_filter_chain },
                |m: &mut Listener| { &mut m.default_filter_chain },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "per_connection_buffer_limit_bytes",
                |m: &Listener| { &m.per_connection_buffer_limit_bytes },
                |m: &mut Listener| { &mut m.per_connection_buffer_limit_bytes },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Metadata>>(
                "metadata",
                |m: &Listener| { &m.metadata },
                |m: &mut Listener| { &mut m.metadata },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Listener_DeprecatedV1>>(
                "deprecated_v1",
                |m: &Listener| { &m.deprecated_v1 },
                |m: &mut Listener| { &mut m.deprecated_v1 },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Listener_DrainType>>(
                "drain_type",
                |m: &Listener| { &m.drain_type },
                |m: &mut Listener| { &mut m.drain_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::listener_components::ListenerFilter>>(
                "listener_filters",
                |m: &Listener| { &m.listener_filters },
                |m: &mut Listener| { &mut m.listener_filters },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "listener_filters_timeout",
                |m: &Listener| { &m.listener_filters_timeout },
                |m: &mut Listener| { &mut m.listener_filters_timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "continue_on_listener_filters_timeout",
                |m: &Listener| { &m.continue_on_listener_filters_timeout },
                |m: &mut Listener| { &mut m.continue_on_listener_filters_timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::BoolValue>>(
                "transparent",
                |m: &Listener| { &m.transparent },
                |m: &mut Listener| { &mut m.transparent },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::BoolValue>>(
                "freebind",
                |m: &Listener| { &m.freebind },
                |m: &mut Listener| { &mut m.freebind },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::socket_option::SocketOption>>(
                "socket_options",
                |m: &Listener| { &m.socket_options },
                |m: &mut Listener| { &mut m.socket_options },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "tcp_fast_open_queue_length",
                |m: &Listener| { &m.tcp_fast_open_queue_length },
                |m: &mut Listener| { &mut m.tcp_fast_open_queue_length },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::base::TrafficDirection>>(
                "traffic_direction",
                |m: &Listener| { &m.traffic_direction },
                |m: &mut Listener| { &mut m.traffic_direction },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::udp_listener_config::UdpListenerConfig>>(
                "udp_listener_config",
                |m: &Listener| { &m.udp_listener_config },
                |m: &mut Listener| { &mut m.udp_listener_config },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::api_listener::ApiListener>>(
                "api_listener",
                |m: &Listener| { &m.api_listener },
                |m: &mut Listener| { &mut m.api_listener },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Listener_ConnectionBalanceConfig>>(
                "connection_balance_config",
                |m: &Listener| { &m.connection_balance_config },
                |m: &mut Listener| { &mut m.connection_balance_config },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "reuse_port",
                |m: &Listener| { &m.reuse_port },
                |m: &mut Listener| { &mut m.reuse_port },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::accesslog::AccessLog>>(
                "access_log",
                |m: &Listener| { &m.access_log },
                |m: &mut Listener| { &mut m.access_log },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::extension::TypedExtensionConfig>>(
                "udp_writer_config",
                |m: &Listener| { &m.udp_writer_config },
                |m: &mut Listener| { &mut m.udp_writer_config },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "tcp_backlog_size",
                |m: &Listener| { &m.tcp_backlog_size },
                |m: &mut Listener| { &mut m.tcp_backlog_size },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Listener>(
                "Listener",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Listener {
        static instance: ::protobuf::rt::LazyV2<Listener> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Listener::new)
    }
}

impl ::protobuf::Clear for Listener {
    fn clear(&mut self) {
        self.name.clear();
        self.address.clear();
        self.filter_chains.clear();
        self.default_filter_chain.clear();
        self.per_connection_buffer_limit_bytes.clear();
        self.metadata.clear();
        self.deprecated_v1.clear();
        self.drain_type = Listener_DrainType::DEFAULT;
        self.listener_filters.clear();
        self.listener_filters_timeout.clear();
        self.continue_on_listener_filters_timeout = false;
        self.transparent.clear();
        self.freebind.clear();
        self.socket_options.clear();
        self.tcp_fast_open_queue_length.clear();
        self.traffic_direction = super::base::TrafficDirection::UNSPECIFIED;
        self.udp_listener_config.clear();
        self.api_listener.clear();
        self.connection_balance_config.clear();
        self.reuse_port = false;
        self.access_log.clear();
        self.udp_writer_config.clear();
        self.tcp_backlog_size.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Listener {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Listener {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Listener_DeprecatedV1 {
    // message fields
    pub bind_to_port: ::protobuf::SingularPtrField<::protobuf::well_known_types::BoolValue>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Listener_DeprecatedV1 {
    fn default() -> &'a Listener_DeprecatedV1 {
        <Listener_DeprecatedV1 as ::protobuf::Message>::default_instance()
    }
}

impl Listener_DeprecatedV1 {
    pub fn new() -> Listener_DeprecatedV1 {
        ::std::default::Default::default()
    }

    // .google.protobuf.BoolValue bind_to_port = 1;


    pub fn get_bind_to_port(&self) -> &::protobuf::well_known_types::BoolValue {
        self.bind_to_port.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::BoolValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_bind_to_port(&mut self) {
        self.bind_to_port.clear();
    }

    pub fn has_bind_to_port(&self) -> bool {
        self.bind_to_port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_bind_to_port(&mut self, v: ::protobuf::well_known_types::BoolValue) {
        self.bind_to_port = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_bind_to_port(&mut self) -> &mut ::protobuf::well_known_types::BoolValue {
        if self.bind_to_port.is_none() {
            self.bind_to_port.set_default();
        }
        self.bind_to_port.as_mut().unwrap()
    }

    // Take field
    pub fn take_bind_to_port(&mut self) -> ::protobuf::well_known_types::BoolValue {
        self.bind_to_port.take().unwrap_or_else(|| ::protobuf::well_known_types::BoolValue::new())
    }
}

impl ::protobuf::Message for Listener_DeprecatedV1 {
    fn is_initialized(&self) -> bool {
        for v in &self.bind_to_port {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.bind_to_port)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.bind_to_port.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.bind_to_port.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Listener_DeprecatedV1 {
        Listener_DeprecatedV1::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::BoolValue>>(
                "bind_to_port",
                |m: &Listener_DeprecatedV1| { &m.bind_to_port },
                |m: &mut Listener_DeprecatedV1| { &mut m.bind_to_port },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Listener_DeprecatedV1>(
                "Listener.DeprecatedV1",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Listener_DeprecatedV1 {
        static instance: ::protobuf::rt::LazyV2<Listener_DeprecatedV1> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Listener_DeprecatedV1::new)
    }
}

impl ::protobuf::Clear for Listener_DeprecatedV1 {
    fn clear(&mut self) {
        self.bind_to_port.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Listener_DeprecatedV1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Listener_DeprecatedV1 {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Listener_ConnectionBalanceConfig {
    // message oneof groups
    pub balance_type: ::std::option::Option<Listener_ConnectionBalanceConfig_oneof_balance_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Listener_ConnectionBalanceConfig {
    fn default() -> &'a Listener_ConnectionBalanceConfig {
        <Listener_ConnectionBalanceConfig as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Listener_ConnectionBalanceConfig_oneof_balance_type {
    exact_balance(Listener_ConnectionBalanceConfig_ExactBalance),
}

impl Listener_ConnectionBalanceConfig {
    pub fn new() -> Listener_ConnectionBalanceConfig {
        ::std::default::Default::default()
    }

    // .envoy.config.listener.v3.Listener.ConnectionBalanceConfig.ExactBalance exact_balance = 1;


    pub fn get_exact_balance(&self) -> &Listener_ConnectionBalanceConfig_ExactBalance {
        match self.balance_type {
            ::std::option::Option::Some(Listener_ConnectionBalanceConfig_oneof_balance_type::exact_balance(ref v)) => v,
            _ => <Listener_ConnectionBalanceConfig_ExactBalance as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_exact_balance(&mut self) {
        self.balance_type = ::std::option::Option::None;
    }

    pub fn has_exact_balance(&self) -> bool {
        match self.balance_type {
            ::std::option::Option::Some(Listener_ConnectionBalanceConfig_oneof_balance_type::exact_balance(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_exact_balance(&mut self, v: Listener_ConnectionBalanceConfig_ExactBalance) {
        self.balance_type = ::std::option::Option::Some(Listener_ConnectionBalanceConfig_oneof_balance_type::exact_balance(v))
    }

    // Mutable pointer to the field.
    pub fn mut_exact_balance(&mut self) -> &mut Listener_ConnectionBalanceConfig_ExactBalance {
        if let ::std::option::Option::Some(Listener_ConnectionBalanceConfig_oneof_balance_type::exact_balance(_)) = self.balance_type {
        } else {
            self.balance_type = ::std::option::Option::Some(Listener_ConnectionBalanceConfig_oneof_balance_type::exact_balance(Listener_ConnectionBalanceConfig_ExactBalance::new()));
        }
        match self.balance_type {
            ::std::option::Option::Some(Listener_ConnectionBalanceConfig_oneof_balance_type::exact_balance(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_exact_balance(&mut self) -> Listener_ConnectionBalanceConfig_ExactBalance {
        if self.has_exact_balance() {
            match self.balance_type.take() {
                ::std::option::Option::Some(Listener_ConnectionBalanceConfig_oneof_balance_type::exact_balance(v)) => v,
                _ => panic!(),
            }
        } else {
            Listener_ConnectionBalanceConfig_ExactBalance::new()
        }
    }
}

impl ::protobuf::Message for Listener_ConnectionBalanceConfig {
    fn is_initialized(&self) -> bool {
        if let Some(Listener_ConnectionBalanceConfig_oneof_balance_type::exact_balance(ref v)) = self.balance_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.balance_type = ::std::option::Option::Some(Listener_ConnectionBalanceConfig_oneof_balance_type::exact_balance(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.balance_type {
            match v {
                &Listener_ConnectionBalanceConfig_oneof_balance_type::exact_balance(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.balance_type {
            match v {
                &Listener_ConnectionBalanceConfig_oneof_balance_type::exact_balance(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Listener_ConnectionBalanceConfig {
        Listener_ConnectionBalanceConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Listener_ConnectionBalanceConfig_ExactBalance>(
                "exact_balance",
                Listener_ConnectionBalanceConfig::has_exact_balance,
                Listener_ConnectionBalanceConfig::get_exact_balance,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Listener_ConnectionBalanceConfig>(
                "Listener.ConnectionBalanceConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Listener_ConnectionBalanceConfig {
        static instance: ::protobuf::rt::LazyV2<Listener_ConnectionBalanceConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Listener_ConnectionBalanceConfig::new)
    }
}

impl ::protobuf::Clear for Listener_ConnectionBalanceConfig {
    fn clear(&mut self) {
        self.balance_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Listener_ConnectionBalanceConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Listener_ConnectionBalanceConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Listener_ConnectionBalanceConfig_ExactBalance {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Listener_ConnectionBalanceConfig_ExactBalance {
    fn default() -> &'a Listener_ConnectionBalanceConfig_ExactBalance {
        <Listener_ConnectionBalanceConfig_ExactBalance as ::protobuf::Message>::default_instance()
    }
}

impl Listener_ConnectionBalanceConfig_ExactBalance {
    pub fn new() -> Listener_ConnectionBalanceConfig_ExactBalance {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Listener_ConnectionBalanceConfig_ExactBalance {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Listener_ConnectionBalanceConfig_ExactBalance {
        Listener_ConnectionBalanceConfig_ExactBalance::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Listener_ConnectionBalanceConfig_ExactBalance>(
                "Listener.ConnectionBalanceConfig.ExactBalance",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Listener_ConnectionBalanceConfig_ExactBalance {
        static instance: ::protobuf::rt::LazyV2<Listener_ConnectionBalanceConfig_ExactBalance> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Listener_ConnectionBalanceConfig_ExactBalance::new)
    }
}

impl ::protobuf::Clear for Listener_ConnectionBalanceConfig_ExactBalance {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Listener_ConnectionBalanceConfig_ExactBalance {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Listener_ConnectionBalanceConfig_ExactBalance {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Listener_DrainType {
    DEFAULT = 0,
    MODIFY_ONLY = 1,
}

impl ::protobuf::ProtobufEnum for Listener_DrainType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Listener_DrainType> {
        match value {
            0 => ::std::option::Option::Some(Listener_DrainType::DEFAULT),
            1 => ::std::option::Option::Some(Listener_DrainType::MODIFY_ONLY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Listener_DrainType] = &[
            Listener_DrainType::DEFAULT,
            Listener_DrainType::MODIFY_ONLY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Listener_DrainType>("Listener.DrainType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Listener_DrainType {
}

impl ::std::default::Default for Listener_DrainType {
    fn default() -> Self {
        Listener_DrainType::DEFAULT
    }
}

impl ::protobuf::reflect::ProtobufValue for Listener_DrainType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'envoy/config/listener/v3/listener.proto\x12\x18envoy.config.listener.\
    v3\x1a)envoy/config/accesslog/v3/accesslog.proto\x1a\"envoy/config/core/\
    v3/address.proto\x1a\x1fenvoy/config/core/v3/base.proto\x1a$envoy/config\
    /core/v3/extension.proto\x1a(envoy/config/core/v3/socket_option.proto\
    \x1a+envoy/config/listener/v3/api_listener.proto\x1a2envoy/config/listen\
    er/v3/listener_components.proto\x1a2envoy/config/listener/v3/udp_listene\
    r_config.proto\x1a\x1cgoogle/api/annotations.proto\x1a\x1egoogle/protobu\
    f/duration.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\"xds/core/v3/\
    collection_entry.proto\x1a\x1fudpa/annotations/security.proto\x1a\x1dudp\
    a/annotations/status.proto\x1a!udpa/annotations/versioning.proto\x1a\x17\
    validate/validate.proto\"L\n\x12ListenerCollection\x126\n\x07entries\x18\
    \x01\x20\x03(\x0b2\x1c.xds.core.v3.CollectionEntryR\x07entries\"\xed\x11\
    \n\x08Listener\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12A\n\x07a\
    ddress\x18\x02\x20\x01(\x0b2\x1d.envoy.config.core.v3.AddressR\x07addres\
    sB\x08\xfaB\x05\x8a\x01\x02\x10\x01\x12J\n\rfilter_chains\x18\x03\x20\
    \x03(\x0b2%.envoy.config.listener.v3.FilterChainR\x0cfilterChains\x12W\n\
    \x14default_filter_chain\x18\x19\x20\x01(\x0b2%.envoy.config.listener.v3\
    .FilterChainR\x12defaultFilterChain\x12o\n!per_connection_buffer_limit_b\
    ytes\x18\x05\x20\x01(\x0b2\x1c.google.protobuf.UInt32ValueR\x1dperConnec\
    tionBufferLimitBytesB\x07\x8a\x93\xb7*\x02\x08\x01\x12:\n\x08metadata\
    \x18\x06\x20\x01(\x0b2\x1e.envoy.config.core.v3.MetadataR\x08metadata\
    \x12T\n\rdeprecated_v1\x18\x07\x20\x01(\x0b2/.envoy.config.listener.v3.L\
    istener.DeprecatedV1R\x0cdeprecatedV1\x12K\n\ndrain_type\x18\x08\x20\x01\
    (\x0e2,.envoy.config.listener.v3.Listener.DrainTypeR\tdrainType\x12S\n\
    \x10listener_filters\x18\t\x20\x03(\x0b2(.envoy.config.listener.v3.Liste\
    nerFilterR\x0flistenerFilters\x12S\n\x18listener_filters_timeout\x18\x0f\
    \x20\x01(\x0b2\x19.google.protobuf.DurationR\x16listenerFiltersTimeout\
    \x12N\n$continue_on_listener_filters_timeout\x18\x11\x20\x01(\x08R\x20co\
    ntinueOnListenerFiltersTimeout\x12<\n\x0btransparent\x18\n\x20\x01(\x0b2\
    \x1a.google.protobuf.BoolValueR\x0btransparent\x126\n\x08freebind\x18\
    \x0b\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\x08freebind\x12I\n\x0e\
    socket_options\x18\r\x20\x03(\x0b2\".envoy.config.core.v3.SocketOptionR\
    \rsocketOptions\x12X\n\x1atcp_fast_open_queue_length\x18\x0c\x20\x01(\
    \x0b2\x1c.google.protobuf.UInt32ValueR\x16tcpFastOpenQueueLength\x12S\n\
    \x11traffic_direction\x18\x10\x20\x01(\x0e2&.envoy.config.core.v3.Traffi\
    cDirectionR\x10trafficDirection\x12[\n\x13udp_listener_config\x18\x12\
    \x20\x01(\x0b2+.envoy.config.listener.v3.UdpListenerConfigR\x11udpListen\
    erConfig\x12H\n\x0capi_listener\x18\x13\x20\x01(\x0b2%.envoy.config.list\
    ener.v3.ApiListenerR\x0bapiListener\x12v\n\x19connection_balance_config\
    \x18\x14\x20\x01(\x0b2:.envoy.config.listener.v3.Listener.ConnectionBala\
    nceConfigR\x17connectionBalanceConfig\x12\x1d\n\nreuse_port\x18\x15\x20\
    \x01(\x08R\treusePort\x12C\n\naccess_log\x18\x16\x20\x03(\x0b2$.envoy.co\
    nfig.accesslog.v3.AccessLogR\taccessLog\x12V\n\x11udp_writer_config\x18\
    \x17\x20\x01(\x0b2*.envoy.config.core.v3.TypedExtensionConfigR\x0fudpWri\
    terConfig\x12F\n\x10tcp_backlog_size\x18\x18\x20\x01(\x0b2\x1c.google.pr\
    otobuf.UInt32ValueR\x0etcpBacklogSize\x1aw\n\x0cDeprecatedV1\x12<\n\x0cb\
    ind_to_port\x18\x01\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\nbindTo\
    Port:)\x9a\xc5\x88\x1e$\n\"envoy.api.v2.Listener.DeprecatedV1\x1a\xa7\
    \x02\n\x17ConnectionBalanceConfig\x12n\n\rexact_balance\x18\x01\x20\x01(\
    \x0b2G.envoy.config.listener.v3.Listener.ConnectionBalanceConfig.ExactBa\
    lanceH\0R\x0cexactBalance\x1aQ\n\x0cExactBalance:A\x9a\xc5\x88\x1e<\n:en\
    voy.api.v2.Listener.ConnectionBalanceConfig.ExactBalanceB\x13\n\x0cbalan\
    ce_type\x12\x03\xf8B\x01:4\x9a\xc5\x88\x1e/\n-envoy.api.v2.Listener.Conn\
    ectionBalanceConfig\")\n\tDrainType\x12\x0b\n\x07DEFAULT\x10\0\x12\x0f\n\
    \x0bMODIFY_ONLY\x10\x01:\x1c\x9a\xc5\x88\x1e\x17\n\x15envoy.api.v2.Liste\
    nerJ\x04\x08\x0e\x10\x0fJ\x04\x08\x04\x10\x05R\x10use_original_dstBA\n&i\
    o.envoyproxy.envoy.config.listener.v3B\rListenerProtoP\x01\xba\x80\xc8\
    \xd1\x06\x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
