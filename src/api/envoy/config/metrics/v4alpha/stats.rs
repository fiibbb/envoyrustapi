// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/metrics/v4alpha/stats.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct StatsSink {
    // message fields
    pub name: ::std::string::String,
    // message oneof groups
    pub config_type: ::std::option::Option<StatsSink_oneof_config_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StatsSink {
    fn default() -> &'a StatsSink {
        <StatsSink as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum StatsSink_oneof_config_type {
    typed_config(::protobuf::well_known_types::Any),
}

impl StatsSink {
    pub fn new() -> StatsSink {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .google.protobuf.Any typed_config = 3;


    pub fn get_typed_config(&self) -> &::protobuf::well_known_types::Any {
        match self.config_type {
            ::std::option::Option::Some(StatsSink_oneof_config_type::typed_config(ref v)) => v,
            _ => <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_typed_config(&mut self) {
        self.config_type = ::std::option::Option::None;
    }

    pub fn has_typed_config(&self) -> bool {
        match self.config_type {
            ::std::option::Option::Some(StatsSink_oneof_config_type::typed_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_typed_config(&mut self, v: ::protobuf::well_known_types::Any) {
        self.config_type = ::std::option::Option::Some(StatsSink_oneof_config_type::typed_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_typed_config(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if let ::std::option::Option::Some(StatsSink_oneof_config_type::typed_config(_)) = self.config_type {
        } else {
            self.config_type = ::std::option::Option::Some(StatsSink_oneof_config_type::typed_config(::protobuf::well_known_types::Any::new()));
        }
        match self.config_type {
            ::std::option::Option::Some(StatsSink_oneof_config_type::typed_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_typed_config(&mut self) -> ::protobuf::well_known_types::Any {
        if self.has_typed_config() {
            match self.config_type.take() {
                ::std::option::Option::Some(StatsSink_oneof_config_type::typed_config(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Any::new()
        }
    }
}

impl ::protobuf::Message for StatsSink {
    fn is_initialized(&self) -> bool {
        if let Some(StatsSink_oneof_config_type::typed_config(ref v)) = self.config_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config_type = ::std::option::Option::Some(StatsSink_oneof_config_type::typed_config(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let ::std::option::Option::Some(ref v) = self.config_type {
            match v {
                &StatsSink_oneof_config_type::typed_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let ::std::option::Option::Some(ref v) = self.config_type {
            match v {
                &StatsSink_oneof_config_type::typed_config(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StatsSink {
        StatsSink::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &StatsSink| { &m.name },
                |m: &mut StatsSink| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Any>(
                "typed_config",
                StatsSink::has_typed_config,
                StatsSink::get_typed_config,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StatsSink>(
                "StatsSink",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StatsSink {
        static instance: ::protobuf::rt::LazyV2<StatsSink> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StatsSink::new)
    }
}

impl ::protobuf::Clear for StatsSink {
    fn clear(&mut self) {
        self.name.clear();
        self.config_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StatsSink {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StatsSink {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StatsConfig {
    // message fields
    pub stats_tags: ::protobuf::RepeatedField<TagSpecifier>,
    pub use_all_default_tags: ::protobuf::SingularPtrField<::protobuf::well_known_types::BoolValue>,
    pub stats_matcher: ::protobuf::SingularPtrField<StatsMatcher>,
    pub histogram_bucket_settings: ::protobuf::RepeatedField<HistogramBucketSettings>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StatsConfig {
    fn default() -> &'a StatsConfig {
        <StatsConfig as ::protobuf::Message>::default_instance()
    }
}

impl StatsConfig {
    pub fn new() -> StatsConfig {
        ::std::default::Default::default()
    }

    // repeated .envoy.config.metrics.v4alpha.TagSpecifier stats_tags = 1;


    pub fn get_stats_tags(&self) -> &[TagSpecifier] {
        &self.stats_tags
    }
    pub fn clear_stats_tags(&mut self) {
        self.stats_tags.clear();
    }

    // Param is passed by value, moved
    pub fn set_stats_tags(&mut self, v: ::protobuf::RepeatedField<TagSpecifier>) {
        self.stats_tags = v;
    }

    // Mutable pointer to the field.
    pub fn mut_stats_tags(&mut self) -> &mut ::protobuf::RepeatedField<TagSpecifier> {
        &mut self.stats_tags
    }

    // Take field
    pub fn take_stats_tags(&mut self) -> ::protobuf::RepeatedField<TagSpecifier> {
        ::std::mem::replace(&mut self.stats_tags, ::protobuf::RepeatedField::new())
    }

    // .google.protobuf.BoolValue use_all_default_tags = 2;


    pub fn get_use_all_default_tags(&self) -> &::protobuf::well_known_types::BoolValue {
        self.use_all_default_tags.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::BoolValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_use_all_default_tags(&mut self) {
        self.use_all_default_tags.clear();
    }

    pub fn has_use_all_default_tags(&self) -> bool {
        self.use_all_default_tags.is_some()
    }

    // Param is passed by value, moved
    pub fn set_use_all_default_tags(&mut self, v: ::protobuf::well_known_types::BoolValue) {
        self.use_all_default_tags = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_use_all_default_tags(&mut self) -> &mut ::protobuf::well_known_types::BoolValue {
        if self.use_all_default_tags.is_none() {
            self.use_all_default_tags.set_default();
        }
        self.use_all_default_tags.as_mut().unwrap()
    }

    // Take field
    pub fn take_use_all_default_tags(&mut self) -> ::protobuf::well_known_types::BoolValue {
        self.use_all_default_tags.take().unwrap_or_else(|| ::protobuf::well_known_types::BoolValue::new())
    }

    // .envoy.config.metrics.v4alpha.StatsMatcher stats_matcher = 3;


    pub fn get_stats_matcher(&self) -> &StatsMatcher {
        self.stats_matcher.as_ref().unwrap_or_else(|| <StatsMatcher as ::protobuf::Message>::default_instance())
    }
    pub fn clear_stats_matcher(&mut self) {
        self.stats_matcher.clear();
    }

    pub fn has_stats_matcher(&self) -> bool {
        self.stats_matcher.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stats_matcher(&mut self, v: StatsMatcher) {
        self.stats_matcher = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stats_matcher(&mut self) -> &mut StatsMatcher {
        if self.stats_matcher.is_none() {
            self.stats_matcher.set_default();
        }
        self.stats_matcher.as_mut().unwrap()
    }

    // Take field
    pub fn take_stats_matcher(&mut self) -> StatsMatcher {
        self.stats_matcher.take().unwrap_or_else(|| StatsMatcher::new())
    }

    // repeated .envoy.config.metrics.v4alpha.HistogramBucketSettings histogram_bucket_settings = 4;


    pub fn get_histogram_bucket_settings(&self) -> &[HistogramBucketSettings] {
        &self.histogram_bucket_settings
    }
    pub fn clear_histogram_bucket_settings(&mut self) {
        self.histogram_bucket_settings.clear();
    }

    // Param is passed by value, moved
    pub fn set_histogram_bucket_settings(&mut self, v: ::protobuf::RepeatedField<HistogramBucketSettings>) {
        self.histogram_bucket_settings = v;
    }

    // Mutable pointer to the field.
    pub fn mut_histogram_bucket_settings(&mut self) -> &mut ::protobuf::RepeatedField<HistogramBucketSettings> {
        &mut self.histogram_bucket_settings
    }

    // Take field
    pub fn take_histogram_bucket_settings(&mut self) -> ::protobuf::RepeatedField<HistogramBucketSettings> {
        ::std::mem::replace(&mut self.histogram_bucket_settings, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for StatsConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.stats_tags {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.use_all_default_tags {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.stats_matcher {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.histogram_bucket_settings {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.stats_tags)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.use_all_default_tags)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.stats_matcher)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.histogram_bucket_settings)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.stats_tags {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.use_all_default_tags.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.stats_matcher.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.histogram_bucket_settings {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.stats_tags {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.use_all_default_tags.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.stats_matcher.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.histogram_bucket_settings {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StatsConfig {
        StatsConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TagSpecifier>>(
                "stats_tags",
                |m: &StatsConfig| { &m.stats_tags },
                |m: &mut StatsConfig| { &mut m.stats_tags },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::BoolValue>>(
                "use_all_default_tags",
                |m: &StatsConfig| { &m.use_all_default_tags },
                |m: &mut StatsConfig| { &mut m.use_all_default_tags },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<StatsMatcher>>(
                "stats_matcher",
                |m: &StatsConfig| { &m.stats_matcher },
                |m: &mut StatsConfig| { &mut m.stats_matcher },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HistogramBucketSettings>>(
                "histogram_bucket_settings",
                |m: &StatsConfig| { &m.histogram_bucket_settings },
                |m: &mut StatsConfig| { &mut m.histogram_bucket_settings },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StatsConfig>(
                "StatsConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StatsConfig {
        static instance: ::protobuf::rt::LazyV2<StatsConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StatsConfig::new)
    }
}

impl ::protobuf::Clear for StatsConfig {
    fn clear(&mut self) {
        self.stats_tags.clear();
        self.use_all_default_tags.clear();
        self.stats_matcher.clear();
        self.histogram_bucket_settings.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StatsConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StatsConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StatsMatcher {
    // message oneof groups
    pub stats_matcher: ::std::option::Option<StatsMatcher_oneof_stats_matcher>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StatsMatcher {
    fn default() -> &'a StatsMatcher {
        <StatsMatcher as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum StatsMatcher_oneof_stats_matcher {
    reject_all(bool),
    exclusion_list(super::string::ListStringMatcher),
    inclusion_list(super::string::ListStringMatcher),
}

impl StatsMatcher {
    pub fn new() -> StatsMatcher {
        ::std::default::Default::default()
    }

    // bool reject_all = 1;


    pub fn get_reject_all(&self) -> bool {
        match self.stats_matcher {
            ::std::option::Option::Some(StatsMatcher_oneof_stats_matcher::reject_all(v)) => v,
            _ => false,
        }
    }
    pub fn clear_reject_all(&mut self) {
        self.stats_matcher = ::std::option::Option::None;
    }

    pub fn has_reject_all(&self) -> bool {
        match self.stats_matcher {
            ::std::option::Option::Some(StatsMatcher_oneof_stats_matcher::reject_all(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_reject_all(&mut self, v: bool) {
        self.stats_matcher = ::std::option::Option::Some(StatsMatcher_oneof_stats_matcher::reject_all(v))
    }

    // .envoy.type.matcher.v4alpha.ListStringMatcher exclusion_list = 2;


    pub fn get_exclusion_list(&self) -> &super::string::ListStringMatcher {
        match self.stats_matcher {
            ::std::option::Option::Some(StatsMatcher_oneof_stats_matcher::exclusion_list(ref v)) => v,
            _ => <super::string::ListStringMatcher as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_exclusion_list(&mut self) {
        self.stats_matcher = ::std::option::Option::None;
    }

    pub fn has_exclusion_list(&self) -> bool {
        match self.stats_matcher {
            ::std::option::Option::Some(StatsMatcher_oneof_stats_matcher::exclusion_list(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_exclusion_list(&mut self, v: super::string::ListStringMatcher) {
        self.stats_matcher = ::std::option::Option::Some(StatsMatcher_oneof_stats_matcher::exclusion_list(v))
    }

    // Mutable pointer to the field.
    pub fn mut_exclusion_list(&mut self) -> &mut super::string::ListStringMatcher {
        if let ::std::option::Option::Some(StatsMatcher_oneof_stats_matcher::exclusion_list(_)) = self.stats_matcher {
        } else {
            self.stats_matcher = ::std::option::Option::Some(StatsMatcher_oneof_stats_matcher::exclusion_list(super::string::ListStringMatcher::new()));
        }
        match self.stats_matcher {
            ::std::option::Option::Some(StatsMatcher_oneof_stats_matcher::exclusion_list(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_exclusion_list(&mut self) -> super::string::ListStringMatcher {
        if self.has_exclusion_list() {
            match self.stats_matcher.take() {
                ::std::option::Option::Some(StatsMatcher_oneof_stats_matcher::exclusion_list(v)) => v,
                _ => panic!(),
            }
        } else {
            super::string::ListStringMatcher::new()
        }
    }

    // .envoy.type.matcher.v4alpha.ListStringMatcher inclusion_list = 3;


    pub fn get_inclusion_list(&self) -> &super::string::ListStringMatcher {
        match self.stats_matcher {
            ::std::option::Option::Some(StatsMatcher_oneof_stats_matcher::inclusion_list(ref v)) => v,
            _ => <super::string::ListStringMatcher as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_inclusion_list(&mut self) {
        self.stats_matcher = ::std::option::Option::None;
    }

    pub fn has_inclusion_list(&self) -> bool {
        match self.stats_matcher {
            ::std::option::Option::Some(StatsMatcher_oneof_stats_matcher::inclusion_list(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_inclusion_list(&mut self, v: super::string::ListStringMatcher) {
        self.stats_matcher = ::std::option::Option::Some(StatsMatcher_oneof_stats_matcher::inclusion_list(v))
    }

    // Mutable pointer to the field.
    pub fn mut_inclusion_list(&mut self) -> &mut super::string::ListStringMatcher {
        if let ::std::option::Option::Some(StatsMatcher_oneof_stats_matcher::inclusion_list(_)) = self.stats_matcher {
        } else {
            self.stats_matcher = ::std::option::Option::Some(StatsMatcher_oneof_stats_matcher::inclusion_list(super::string::ListStringMatcher::new()));
        }
        match self.stats_matcher {
            ::std::option::Option::Some(StatsMatcher_oneof_stats_matcher::inclusion_list(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_inclusion_list(&mut self) -> super::string::ListStringMatcher {
        if self.has_inclusion_list() {
            match self.stats_matcher.take() {
                ::std::option::Option::Some(StatsMatcher_oneof_stats_matcher::inclusion_list(v)) => v,
                _ => panic!(),
            }
        } else {
            super::string::ListStringMatcher::new()
        }
    }
}

impl ::protobuf::Message for StatsMatcher {
    fn is_initialized(&self) -> bool {
        if let Some(StatsMatcher_oneof_stats_matcher::exclusion_list(ref v)) = self.stats_matcher {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(StatsMatcher_oneof_stats_matcher::inclusion_list(ref v)) = self.stats_matcher {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.stats_matcher = ::std::option::Option::Some(StatsMatcher_oneof_stats_matcher::reject_all(is.read_bool()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.stats_matcher = ::std::option::Option::Some(StatsMatcher_oneof_stats_matcher::exclusion_list(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.stats_matcher = ::std::option::Option::Some(StatsMatcher_oneof_stats_matcher::inclusion_list(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.stats_matcher {
            match v {
                &StatsMatcher_oneof_stats_matcher::reject_all(v) => {
                    my_size += 2;
                },
                &StatsMatcher_oneof_stats_matcher::exclusion_list(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StatsMatcher_oneof_stats_matcher::inclusion_list(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.stats_matcher {
            match v {
                &StatsMatcher_oneof_stats_matcher::reject_all(v) => {
                    os.write_bool(1, v)?;
                },
                &StatsMatcher_oneof_stats_matcher::exclusion_list(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StatsMatcher_oneof_stats_matcher::inclusion_list(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StatsMatcher {
        StatsMatcher::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "reject_all",
                StatsMatcher::has_reject_all,
                StatsMatcher::get_reject_all,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::string::ListStringMatcher>(
                "exclusion_list",
                StatsMatcher::has_exclusion_list,
                StatsMatcher::get_exclusion_list,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::string::ListStringMatcher>(
                "inclusion_list",
                StatsMatcher::has_inclusion_list,
                StatsMatcher::get_inclusion_list,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StatsMatcher>(
                "StatsMatcher",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StatsMatcher {
        static instance: ::protobuf::rt::LazyV2<StatsMatcher> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StatsMatcher::new)
    }
}

impl ::protobuf::Clear for StatsMatcher {
    fn clear(&mut self) {
        self.stats_matcher = ::std::option::Option::None;
        self.stats_matcher = ::std::option::Option::None;
        self.stats_matcher = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StatsMatcher {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StatsMatcher {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TagSpecifier {
    // message fields
    pub tag_name: ::std::string::String,
    // message oneof groups
    pub tag_value: ::std::option::Option<TagSpecifier_oneof_tag_value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TagSpecifier {
    fn default() -> &'a TagSpecifier {
        <TagSpecifier as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum TagSpecifier_oneof_tag_value {
    regex(::std::string::String),
    fixed_value(::std::string::String),
}

impl TagSpecifier {
    pub fn new() -> TagSpecifier {
        ::std::default::Default::default()
    }

    // string tag_name = 1;


    pub fn get_tag_name(&self) -> &str {
        &self.tag_name
    }
    pub fn clear_tag_name(&mut self) {
        self.tag_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_tag_name(&mut self, v: ::std::string::String) {
        self.tag_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tag_name(&mut self) -> &mut ::std::string::String {
        &mut self.tag_name
    }

    // Take field
    pub fn take_tag_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.tag_name, ::std::string::String::new())
    }

    // string regex = 2;


    pub fn get_regex(&self) -> &str {
        match self.tag_value {
            ::std::option::Option::Some(TagSpecifier_oneof_tag_value::regex(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_regex(&mut self) {
        self.tag_value = ::std::option::Option::None;
    }

    pub fn has_regex(&self) -> bool {
        match self.tag_value {
            ::std::option::Option::Some(TagSpecifier_oneof_tag_value::regex(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_regex(&mut self, v: ::std::string::String) {
        self.tag_value = ::std::option::Option::Some(TagSpecifier_oneof_tag_value::regex(v))
    }

    // Mutable pointer to the field.
    pub fn mut_regex(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(TagSpecifier_oneof_tag_value::regex(_)) = self.tag_value {
        } else {
            self.tag_value = ::std::option::Option::Some(TagSpecifier_oneof_tag_value::regex(::std::string::String::new()));
        }
        match self.tag_value {
            ::std::option::Option::Some(TagSpecifier_oneof_tag_value::regex(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_regex(&mut self) -> ::std::string::String {
        if self.has_regex() {
            match self.tag_value.take() {
                ::std::option::Option::Some(TagSpecifier_oneof_tag_value::regex(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string fixed_value = 3;


    pub fn get_fixed_value(&self) -> &str {
        match self.tag_value {
            ::std::option::Option::Some(TagSpecifier_oneof_tag_value::fixed_value(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_fixed_value(&mut self) {
        self.tag_value = ::std::option::Option::None;
    }

    pub fn has_fixed_value(&self) -> bool {
        match self.tag_value {
            ::std::option::Option::Some(TagSpecifier_oneof_tag_value::fixed_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_fixed_value(&mut self, v: ::std::string::String) {
        self.tag_value = ::std::option::Option::Some(TagSpecifier_oneof_tag_value::fixed_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_fixed_value(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(TagSpecifier_oneof_tag_value::fixed_value(_)) = self.tag_value {
        } else {
            self.tag_value = ::std::option::Option::Some(TagSpecifier_oneof_tag_value::fixed_value(::std::string::String::new()));
        }
        match self.tag_value {
            ::std::option::Option::Some(TagSpecifier_oneof_tag_value::fixed_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_fixed_value(&mut self) -> ::std::string::String {
        if self.has_fixed_value() {
            match self.tag_value.take() {
                ::std::option::Option::Some(TagSpecifier_oneof_tag_value::fixed_value(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }
}

impl ::protobuf::Message for TagSpecifier {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.tag_name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.tag_value = ::std::option::Option::Some(TagSpecifier_oneof_tag_value::regex(is.read_string()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.tag_value = ::std::option::Option::Some(TagSpecifier_oneof_tag_value::fixed_value(is.read_string()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.tag_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.tag_name);
        }
        if let ::std::option::Option::Some(ref v) = self.tag_value {
            match v {
                &TagSpecifier_oneof_tag_value::regex(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
                &TagSpecifier_oneof_tag_value::fixed_value(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.tag_name.is_empty() {
            os.write_string(1, &self.tag_name)?;
        }
        if let ::std::option::Option::Some(ref v) = self.tag_value {
            match v {
                &TagSpecifier_oneof_tag_value::regex(ref v) => {
                    os.write_string(2, v)?;
                },
                &TagSpecifier_oneof_tag_value::fixed_value(ref v) => {
                    os.write_string(3, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TagSpecifier {
        TagSpecifier::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tag_name",
                |m: &TagSpecifier| { &m.tag_name },
                |m: &mut TagSpecifier| { &mut m.tag_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "regex",
                TagSpecifier::has_regex,
                TagSpecifier::get_regex,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "fixed_value",
                TagSpecifier::has_fixed_value,
                TagSpecifier::get_fixed_value,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TagSpecifier>(
                "TagSpecifier",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TagSpecifier {
        static instance: ::protobuf::rt::LazyV2<TagSpecifier> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TagSpecifier::new)
    }
}

impl ::protobuf::Clear for TagSpecifier {
    fn clear(&mut self) {
        self.tag_name.clear();
        self.tag_value = ::std::option::Option::None;
        self.tag_value = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TagSpecifier {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TagSpecifier {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HistogramBucketSettings {
    // message fields
    pub field_match: ::protobuf::SingularPtrField<super::string::StringMatcher>,
    pub buckets: ::std::vec::Vec<f64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HistogramBucketSettings {
    fn default() -> &'a HistogramBucketSettings {
        <HistogramBucketSettings as ::protobuf::Message>::default_instance()
    }
}

impl HistogramBucketSettings {
    pub fn new() -> HistogramBucketSettings {
        ::std::default::Default::default()
    }

    // .envoy.type.matcher.v4alpha.StringMatcher match = 1;


    pub fn get_field_match(&self) -> &super::string::StringMatcher {
        self.field_match.as_ref().unwrap_or_else(|| <super::string::StringMatcher as ::protobuf::Message>::default_instance())
    }
    pub fn clear_field_match(&mut self) {
        self.field_match.clear();
    }

    pub fn has_field_match(&self) -> bool {
        self.field_match.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_match(&mut self, v: super::string::StringMatcher) {
        self.field_match = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_match(&mut self) -> &mut super::string::StringMatcher {
        if self.field_match.is_none() {
            self.field_match.set_default();
        }
        self.field_match.as_mut().unwrap()
    }

    // Take field
    pub fn take_field_match(&mut self) -> super::string::StringMatcher {
        self.field_match.take().unwrap_or_else(|| super::string::StringMatcher::new())
    }

    // repeated double buckets = 2;


    pub fn get_buckets(&self) -> &[f64] {
        &self.buckets
    }
    pub fn clear_buckets(&mut self) {
        self.buckets.clear();
    }

    // Param is passed by value, moved
    pub fn set_buckets(&mut self, v: ::std::vec::Vec<f64>) {
        self.buckets = v;
    }

    // Mutable pointer to the field.
    pub fn mut_buckets(&mut self) -> &mut ::std::vec::Vec<f64> {
        &mut self.buckets
    }

    // Take field
    pub fn take_buckets(&mut self) -> ::std::vec::Vec<f64> {
        ::std::mem::replace(&mut self.buckets, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for HistogramBucketSettings {
    fn is_initialized(&self) -> bool {
        for v in &self.field_match {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.field_match)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_double_into(wire_type, is, &mut self.buckets)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.field_match.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += 9 * self.buckets.len() as u32;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.field_match.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.buckets {
            os.write_double(2, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HistogramBucketSettings {
        HistogramBucketSettings::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::string::StringMatcher>>(
                "match",
                |m: &HistogramBucketSettings| { &m.field_match },
                |m: &mut HistogramBucketSettings| { &mut m.field_match },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "buckets",
                |m: &HistogramBucketSettings| { &m.buckets },
                |m: &mut HistogramBucketSettings| { &mut m.buckets },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HistogramBucketSettings>(
                "HistogramBucketSettings",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HistogramBucketSettings {
        static instance: ::protobuf::rt::LazyV2<HistogramBucketSettings> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HistogramBucketSettings::new)
    }
}

impl ::protobuf::Clear for HistogramBucketSettings {
    fn clear(&mut self) {
        self.field_match.clear();
        self.buckets.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HistogramBucketSettings {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HistogramBucketSettings {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StatsdSink {
    // message fields
    pub prefix: ::std::string::String,
    // message oneof groups
    pub statsd_specifier: ::std::option::Option<StatsdSink_oneof_statsd_specifier>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StatsdSink {
    fn default() -> &'a StatsdSink {
        <StatsdSink as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum StatsdSink_oneof_statsd_specifier {
    address(super::address::Address),
    tcp_cluster_name(::std::string::String),
}

impl StatsdSink {
    pub fn new() -> StatsdSink {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v4alpha.Address address = 1;


    pub fn get_address(&self) -> &super::address::Address {
        match self.statsd_specifier {
            ::std::option::Option::Some(StatsdSink_oneof_statsd_specifier::address(ref v)) => v,
            _ => <super::address::Address as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_address(&mut self) {
        self.statsd_specifier = ::std::option::Option::None;
    }

    pub fn has_address(&self) -> bool {
        match self.statsd_specifier {
            ::std::option::Option::Some(StatsdSink_oneof_statsd_specifier::address(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: super::address::Address) {
        self.statsd_specifier = ::std::option::Option::Some(StatsdSink_oneof_statsd_specifier::address(v))
    }

    // Mutable pointer to the field.
    pub fn mut_address(&mut self) -> &mut super::address::Address {
        if let ::std::option::Option::Some(StatsdSink_oneof_statsd_specifier::address(_)) = self.statsd_specifier {
        } else {
            self.statsd_specifier = ::std::option::Option::Some(StatsdSink_oneof_statsd_specifier::address(super::address::Address::new()));
        }
        match self.statsd_specifier {
            ::std::option::Option::Some(StatsdSink_oneof_statsd_specifier::address(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_address(&mut self) -> super::address::Address {
        if self.has_address() {
            match self.statsd_specifier.take() {
                ::std::option::Option::Some(StatsdSink_oneof_statsd_specifier::address(v)) => v,
                _ => panic!(),
            }
        } else {
            super::address::Address::new()
        }
    }

    // string tcp_cluster_name = 2;


    pub fn get_tcp_cluster_name(&self) -> &str {
        match self.statsd_specifier {
            ::std::option::Option::Some(StatsdSink_oneof_statsd_specifier::tcp_cluster_name(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_tcp_cluster_name(&mut self) {
        self.statsd_specifier = ::std::option::Option::None;
    }

    pub fn has_tcp_cluster_name(&self) -> bool {
        match self.statsd_specifier {
            ::std::option::Option::Some(StatsdSink_oneof_statsd_specifier::tcp_cluster_name(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_tcp_cluster_name(&mut self, v: ::std::string::String) {
        self.statsd_specifier = ::std::option::Option::Some(StatsdSink_oneof_statsd_specifier::tcp_cluster_name(v))
    }

    // Mutable pointer to the field.
    pub fn mut_tcp_cluster_name(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(StatsdSink_oneof_statsd_specifier::tcp_cluster_name(_)) = self.statsd_specifier {
        } else {
            self.statsd_specifier = ::std::option::Option::Some(StatsdSink_oneof_statsd_specifier::tcp_cluster_name(::std::string::String::new()));
        }
        match self.statsd_specifier {
            ::std::option::Option::Some(StatsdSink_oneof_statsd_specifier::tcp_cluster_name(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_tcp_cluster_name(&mut self) -> ::std::string::String {
        if self.has_tcp_cluster_name() {
            match self.statsd_specifier.take() {
                ::std::option::Option::Some(StatsdSink_oneof_statsd_specifier::tcp_cluster_name(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // string prefix = 3;


    pub fn get_prefix(&self) -> &str {
        &self.prefix
    }
    pub fn clear_prefix(&mut self) {
        self.prefix.clear();
    }

    // Param is passed by value, moved
    pub fn set_prefix(&mut self, v: ::std::string::String) {
        self.prefix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prefix(&mut self) -> &mut ::std::string::String {
        &mut self.prefix
    }

    // Take field
    pub fn take_prefix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prefix, ::std::string::String::new())
    }
}

impl ::protobuf::Message for StatsdSink {
    fn is_initialized(&self) -> bool {
        if let Some(StatsdSink_oneof_statsd_specifier::address(ref v)) = self.statsd_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.statsd_specifier = ::std::option::Option::Some(StatsdSink_oneof_statsd_specifier::address(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.statsd_specifier = ::std::option::Option::Some(StatsdSink_oneof_statsd_specifier::tcp_cluster_name(is.read_string()?));
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prefix)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.prefix.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.prefix);
        }
        if let ::std::option::Option::Some(ref v) = self.statsd_specifier {
            match v {
                &StatsdSink_oneof_statsd_specifier::address(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &StatsdSink_oneof_statsd_specifier::tcp_cluster_name(ref v) => {
                    my_size += ::protobuf::rt::string_size(2, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.prefix.is_empty() {
            os.write_string(3, &self.prefix)?;
        }
        if let ::std::option::Option::Some(ref v) = self.statsd_specifier {
            match v {
                &StatsdSink_oneof_statsd_specifier::address(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &StatsdSink_oneof_statsd_specifier::tcp_cluster_name(ref v) => {
                    os.write_string(2, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StatsdSink {
        StatsdSink::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::address::Address>(
                "address",
                StatsdSink::has_address,
                StatsdSink::get_address,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "tcp_cluster_name",
                StatsdSink::has_tcp_cluster_name,
                StatsdSink::get_tcp_cluster_name,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "prefix",
                |m: &StatsdSink| { &m.prefix },
                |m: &mut StatsdSink| { &mut m.prefix },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StatsdSink>(
                "StatsdSink",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StatsdSink {
        static instance: ::protobuf::rt::LazyV2<StatsdSink> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StatsdSink::new)
    }
}

impl ::protobuf::Clear for StatsdSink {
    fn clear(&mut self) {
        self.statsd_specifier = ::std::option::Option::None;
        self.statsd_specifier = ::std::option::Option::None;
        self.prefix.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StatsdSink {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StatsdSink {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DogStatsdSink {
    // message fields
    pub prefix: ::std::string::String,
    pub max_bytes_per_datagram: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt64Value>,
    // message oneof groups
    pub dog_statsd_specifier: ::std::option::Option<DogStatsdSink_oneof_dog_statsd_specifier>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DogStatsdSink {
    fn default() -> &'a DogStatsdSink {
        <DogStatsdSink as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum DogStatsdSink_oneof_dog_statsd_specifier {
    address(super::address::Address),
}

impl DogStatsdSink {
    pub fn new() -> DogStatsdSink {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v4alpha.Address address = 1;


    pub fn get_address(&self) -> &super::address::Address {
        match self.dog_statsd_specifier {
            ::std::option::Option::Some(DogStatsdSink_oneof_dog_statsd_specifier::address(ref v)) => v,
            _ => <super::address::Address as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_address(&mut self) {
        self.dog_statsd_specifier = ::std::option::Option::None;
    }

    pub fn has_address(&self) -> bool {
        match self.dog_statsd_specifier {
            ::std::option::Option::Some(DogStatsdSink_oneof_dog_statsd_specifier::address(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: super::address::Address) {
        self.dog_statsd_specifier = ::std::option::Option::Some(DogStatsdSink_oneof_dog_statsd_specifier::address(v))
    }

    // Mutable pointer to the field.
    pub fn mut_address(&mut self) -> &mut super::address::Address {
        if let ::std::option::Option::Some(DogStatsdSink_oneof_dog_statsd_specifier::address(_)) = self.dog_statsd_specifier {
        } else {
            self.dog_statsd_specifier = ::std::option::Option::Some(DogStatsdSink_oneof_dog_statsd_specifier::address(super::address::Address::new()));
        }
        match self.dog_statsd_specifier {
            ::std::option::Option::Some(DogStatsdSink_oneof_dog_statsd_specifier::address(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_address(&mut self) -> super::address::Address {
        if self.has_address() {
            match self.dog_statsd_specifier.take() {
                ::std::option::Option::Some(DogStatsdSink_oneof_dog_statsd_specifier::address(v)) => v,
                _ => panic!(),
            }
        } else {
            super::address::Address::new()
        }
    }

    // string prefix = 3;


    pub fn get_prefix(&self) -> &str {
        &self.prefix
    }
    pub fn clear_prefix(&mut self) {
        self.prefix.clear();
    }

    // Param is passed by value, moved
    pub fn set_prefix(&mut self, v: ::std::string::String) {
        self.prefix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_prefix(&mut self) -> &mut ::std::string::String {
        &mut self.prefix
    }

    // Take field
    pub fn take_prefix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.prefix, ::std::string::String::new())
    }

    // .google.protobuf.UInt64Value max_bytes_per_datagram = 4;


    pub fn get_max_bytes_per_datagram(&self) -> &::protobuf::well_known_types::UInt64Value {
        self.max_bytes_per_datagram.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt64Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_max_bytes_per_datagram(&mut self) {
        self.max_bytes_per_datagram.clear();
    }

    pub fn has_max_bytes_per_datagram(&self) -> bool {
        self.max_bytes_per_datagram.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_bytes_per_datagram(&mut self, v: ::protobuf::well_known_types::UInt64Value) {
        self.max_bytes_per_datagram = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_bytes_per_datagram(&mut self) -> &mut ::protobuf::well_known_types::UInt64Value {
        if self.max_bytes_per_datagram.is_none() {
            self.max_bytes_per_datagram.set_default();
        }
        self.max_bytes_per_datagram.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_bytes_per_datagram(&mut self) -> ::protobuf::well_known_types::UInt64Value {
        self.max_bytes_per_datagram.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt64Value::new())
    }
}

impl ::protobuf::Message for DogStatsdSink {
    fn is_initialized(&self) -> bool {
        if let Some(DogStatsdSink_oneof_dog_statsd_specifier::address(ref v)) = self.dog_statsd_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.max_bytes_per_datagram {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.dog_statsd_specifier = ::std::option::Option::Some(DogStatsdSink_oneof_dog_statsd_specifier::address(is.read_message()?));
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.prefix)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_bytes_per_datagram)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.prefix.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.prefix);
        }
        if let Some(ref v) = self.max_bytes_per_datagram.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.dog_statsd_specifier {
            match v {
                &DogStatsdSink_oneof_dog_statsd_specifier::address(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.prefix.is_empty() {
            os.write_string(3, &self.prefix)?;
        }
        if let Some(ref v) = self.max_bytes_per_datagram.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.dog_statsd_specifier {
            match v {
                &DogStatsdSink_oneof_dog_statsd_specifier::address(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DogStatsdSink {
        DogStatsdSink::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::address::Address>(
                "address",
                DogStatsdSink::has_address,
                DogStatsdSink::get_address,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "prefix",
                |m: &DogStatsdSink| { &m.prefix },
                |m: &mut DogStatsdSink| { &mut m.prefix },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt64Value>>(
                "max_bytes_per_datagram",
                |m: &DogStatsdSink| { &m.max_bytes_per_datagram },
                |m: &mut DogStatsdSink| { &mut m.max_bytes_per_datagram },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DogStatsdSink>(
                "DogStatsdSink",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DogStatsdSink {
        static instance: ::protobuf::rt::LazyV2<DogStatsdSink> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DogStatsdSink::new)
    }
}

impl ::protobuf::Clear for DogStatsdSink {
    fn clear(&mut self) {
        self.dog_statsd_specifier = ::std::option::Option::None;
        self.prefix.clear();
        self.max_bytes_per_datagram.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DogStatsdSink {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DogStatsdSink {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HystrixSink {
    // message fields
    pub num_buckets: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HystrixSink {
    fn default() -> &'a HystrixSink {
        <HystrixSink as ::protobuf::Message>::default_instance()
    }
}

impl HystrixSink {
    pub fn new() -> HystrixSink {
        ::std::default::Default::default()
    }

    // int64 num_buckets = 1;


    pub fn get_num_buckets(&self) -> i64 {
        self.num_buckets
    }
    pub fn clear_num_buckets(&mut self) {
        self.num_buckets = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_buckets(&mut self, v: i64) {
        self.num_buckets = v;
    }
}

impl ::protobuf::Message for HystrixSink {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.num_buckets = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.num_buckets != 0 {
            my_size += ::protobuf::rt::value_size(1, self.num_buckets, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.num_buckets != 0 {
            os.write_int64(1, self.num_buckets)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HystrixSink {
        HystrixSink::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "num_buckets",
                |m: &HystrixSink| { &m.num_buckets },
                |m: &mut HystrixSink| { &mut m.num_buckets },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HystrixSink>(
                "HystrixSink",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HystrixSink {
        static instance: ::protobuf::rt::LazyV2<HystrixSink> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HystrixSink::new)
    }
}

impl ::protobuf::Clear for HystrixSink {
    fn clear(&mut self) {
        self.num_buckets = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HystrixSink {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HystrixSink {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n(envoy/config/metrics/v4alpha/stats.proto\x12\x1cenvoy.config.metrics.\
    v4alpha\x1a'envoy/config/core/v4alpha/address.proto\x1a'envoy/type/match\
    er/v4alpha/string.proto\x1a\x19google/protobuf/any.proto\x1a\x1cgoogle/p\
    rotobuf/struct.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1dudpa/a\
    nnotations/status.proto\x1a!udpa/annotations/versioning.proto\x1a\x17val\
    idate/validate.proto\"\xa1\x01\n\tStatsSink\x12\x12\n\x04name\x18\x01\
    \x20\x01(\tR\x04name\x129\n\x0ctyped_config\x18\x03\x20\x01(\x0b2\x14.go\
    ogle.protobuf.AnyH\0R\x0btypedConfigB\r\n\x0bconfig_type:(\x9a\xc5\x88\
    \x1e#\n!envoy.config.metrics.v3.StatsSinkJ\x04\x08\x02\x10\x03R\x06confi\
    g\"\x95\x03\n\x0bStatsConfig\x12I\n\nstats_tags\x18\x01\x20\x03(\x0b2*.e\
    nvoy.config.metrics.v4alpha.TagSpecifierR\tstatsTags\x12K\n\x14use_all_d\
    efault_tags\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\x11useA\
    llDefaultTags\x12O\n\rstats_matcher\x18\x03\x20\x01(\x0b2*.envoy.config.\
    metrics.v4alpha.StatsMatcherR\x0cstatsMatcher\x12q\n\x19histogram_bucket\
    _settings\x18\x04\x20\x03(\x0b25.envoy.config.metrics.v4alpha.HistogramB\
    ucketSettingsR\x17histogramBucketSettings:*\x9a\xc5\x88\x1e%\n#envoy.con\
    fig.metrics.v3.StatsConfig\"\xa2\x02\n\x0cStatsMatcher\x12\x1f\n\nreject\
    _all\x18\x01\x20\x01(\x08H\0R\trejectAll\x12V\n\x0eexclusion_list\x18\
    \x02\x20\x01(\x0b2-.envoy.type.matcher.v4alpha.ListStringMatcherH\0R\rex\
    clusionList\x12V\n\x0einclusion_list\x18\x03\x20\x01(\x0b2-.envoy.type.m\
    atcher.v4alpha.ListStringMatcherH\0R\rinclusionListB\x14\n\rstats_matche\
    r\x12\x03\xf8B\x01:+\x9a\xc5\x88\x1e&\n$envoy.config.metrics.v3.StatsMat\
    cher\"\xa8\x01\n\x0cTagSpecifier\x12\x19\n\x08tag_name\x18\x01\x20\x01(\
    \tR\x07tagName\x12\x20\n\x05regex\x18\x02\x20\x01(\tH\0R\x05regexB\x08\
    \xfaB\x05r\x03(\x80\x08\x12!\n\x0bfixed_value\x18\x03\x20\x01(\tH\0R\nfi\
    xedValueB\x0b\n\ttag_value:+\x9a\xc5\x88\x1e&\n$envoy.config.metrics.v3.\
    TagSpecifier\"\xcf\x01\n\x17HistogramBucketSettings\x12I\n\x05match\x18\
    \x01\x20\x01(\x0b2).envoy.type.matcher.v4alpha.StringMatcherR\x05matchB\
    \x08\xfaB\x05\x8a\x01\x02\x10\x01\x121\n\x07buckets\x18\x02\x20\x03(\x01\
    R\x07bucketsB\x17\xfaB\x14\x92\x01\x11\x08\x01\x18\x01\"\x0b\x12\t!\0\0\
    \0\0\0\0\0\0:6\x9a\xc5\x88\x1e1\n/envoy.config.metrics.v3.HistogramBucke\
    tSettings\"\xd4\x01\n\nStatsdSink\x12>\n\x07address\x18\x01\x20\x01(\x0b\
    2\".envoy.config.core.v4alpha.AddressH\0R\x07address\x12*\n\x10tcp_clust\
    er_name\x18\x02\x20\x01(\tH\0R\x0etcpClusterName\x12\x16\n\x06prefix\x18\
    \x03\x20\x01(\tR\x06prefixB\x17\n\x10statsd_specifier\x12\x03\xf8B\x01:)\
    \x9a\xc5\x88\x1e$\n\"envoy.config.metrics.v3.StatsdSink\"\x94\x02\n\rDog\
    StatsdSink\x12>\n\x07address\x18\x01\x20\x01(\x0b2\".envoy.config.core.v\
    4alpha.AddressH\0R\x07address\x12\x16\n\x06prefix\x18\x03\x20\x01(\tR\
    \x06prefix\x12Z\n\x16max_bytes_per_datagram\x18\x04\x20\x01(\x0b2\x1c.go\
    ogle.protobuf.UInt64ValueR\x13maxBytesPerDatagramB\x07\xfaB\x042\x02\x20\
    \0B\x1b\n\x14dog_statsd_specifier\x12\x03\xf8B\x01:,\x9a\xc5\x88\x1e'\n%\
    envoy.config.metrics.v3.DogStatsdSinkJ\x04\x08\x02\x10\x03\"Z\n\x0bHystr\
    ixSink\x12\x1f\n\x0bnum_buckets\x18\x01\x20\x01(\x03R\nnumBuckets:*\x9a\
    \xc5\x88\x1e%\n#envoy.config.metrics.v3.HystrixSinkBB\n*io.envoyproxy.en\
    voy.config.metrics.v4alphaB\nStatsProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\
    \x03b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
