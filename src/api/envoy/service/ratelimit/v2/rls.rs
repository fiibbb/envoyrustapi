// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/service/ratelimit/v2/rls.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct RateLimitRequest {
    // message fields
    pub domain: ::std::string::String,
    pub descriptors: ::protobuf::RepeatedField<super::ratelimit::RateLimitDescriptor>,
    pub hits_addend: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RateLimitRequest {
    fn default() -> &'a RateLimitRequest {
        <RateLimitRequest as ::protobuf::Message>::default_instance()
    }
}

impl RateLimitRequest {
    pub fn new() -> RateLimitRequest {
        ::std::default::Default::default()
    }

    // string domain = 1;


    pub fn get_domain(&self) -> &str {
        &self.domain
    }
    pub fn clear_domain(&mut self) {
        self.domain.clear();
    }

    // Param is passed by value, moved
    pub fn set_domain(&mut self, v: ::std::string::String) {
        self.domain = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_domain(&mut self) -> &mut ::std::string::String {
        &mut self.domain
    }

    // Take field
    pub fn take_domain(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.domain, ::std::string::String::new())
    }

    // repeated .envoy.api.v2.ratelimit.RateLimitDescriptor descriptors = 2;


    pub fn get_descriptors(&self) -> &[super::ratelimit::RateLimitDescriptor] {
        &self.descriptors
    }
    pub fn clear_descriptors(&mut self) {
        self.descriptors.clear();
    }

    // Param is passed by value, moved
    pub fn set_descriptors(&mut self, v: ::protobuf::RepeatedField<super::ratelimit::RateLimitDescriptor>) {
        self.descriptors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_descriptors(&mut self) -> &mut ::protobuf::RepeatedField<super::ratelimit::RateLimitDescriptor> {
        &mut self.descriptors
    }

    // Take field
    pub fn take_descriptors(&mut self) -> ::protobuf::RepeatedField<super::ratelimit::RateLimitDescriptor> {
        ::std::mem::replace(&mut self.descriptors, ::protobuf::RepeatedField::new())
    }

    // uint32 hits_addend = 3;


    pub fn get_hits_addend(&self) -> u32 {
        self.hits_addend
    }
    pub fn clear_hits_addend(&mut self) {
        self.hits_addend = 0;
    }

    // Param is passed by value, moved
    pub fn set_hits_addend(&mut self, v: u32) {
        self.hits_addend = v;
    }
}

impl ::protobuf::Message for RateLimitRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.descriptors {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.domain)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.descriptors)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.hits_addend = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.domain.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.domain);
        }
        for value in &self.descriptors {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.hits_addend != 0 {
            my_size += ::protobuf::rt::value_size(3, self.hits_addend, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.domain.is_empty() {
            os.write_string(1, &self.domain)?;
        }
        for v in &self.descriptors {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.hits_addend != 0 {
            os.write_uint32(3, self.hits_addend)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RateLimitRequest {
        RateLimitRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "domain",
                |m: &RateLimitRequest| { &m.domain },
                |m: &mut RateLimitRequest| { &mut m.domain },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::ratelimit::RateLimitDescriptor>>(
                "descriptors",
                |m: &RateLimitRequest| { &m.descriptors },
                |m: &mut RateLimitRequest| { &mut m.descriptors },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "hits_addend",
                |m: &RateLimitRequest| { &m.hits_addend },
                |m: &mut RateLimitRequest| { &mut m.hits_addend },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RateLimitRequest>(
                "RateLimitRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RateLimitRequest {
        static instance: ::protobuf::rt::LazyV2<RateLimitRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RateLimitRequest::new)
    }
}

impl ::protobuf::Clear for RateLimitRequest {
    fn clear(&mut self) {
        self.domain.clear();
        self.descriptors.clear();
        self.hits_addend = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RateLimitRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RateLimitRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RateLimitResponse {
    // message fields
    pub overall_code: RateLimitResponse_Code,
    pub statuses: ::protobuf::RepeatedField<RateLimitResponse_DescriptorStatus>,
    pub headers: ::protobuf::RepeatedField<super::base::HeaderValue>,
    pub request_headers_to_add: ::protobuf::RepeatedField<super::base::HeaderValue>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RateLimitResponse {
    fn default() -> &'a RateLimitResponse {
        <RateLimitResponse as ::protobuf::Message>::default_instance()
    }
}

impl RateLimitResponse {
    pub fn new() -> RateLimitResponse {
        ::std::default::Default::default()
    }

    // .envoy.service.ratelimit.v2.RateLimitResponse.Code overall_code = 1;


    pub fn get_overall_code(&self) -> RateLimitResponse_Code {
        self.overall_code
    }
    pub fn clear_overall_code(&mut self) {
        self.overall_code = RateLimitResponse_Code::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_overall_code(&mut self, v: RateLimitResponse_Code) {
        self.overall_code = v;
    }

    // repeated .envoy.service.ratelimit.v2.RateLimitResponse.DescriptorStatus statuses = 2;


    pub fn get_statuses(&self) -> &[RateLimitResponse_DescriptorStatus] {
        &self.statuses
    }
    pub fn clear_statuses(&mut self) {
        self.statuses.clear();
    }

    // Param is passed by value, moved
    pub fn set_statuses(&mut self, v: ::protobuf::RepeatedField<RateLimitResponse_DescriptorStatus>) {
        self.statuses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_statuses(&mut self) -> &mut ::protobuf::RepeatedField<RateLimitResponse_DescriptorStatus> {
        &mut self.statuses
    }

    // Take field
    pub fn take_statuses(&mut self) -> ::protobuf::RepeatedField<RateLimitResponse_DescriptorStatus> {
        ::std::mem::replace(&mut self.statuses, ::protobuf::RepeatedField::new())
    }

    // repeated .envoy.api.v2.core.HeaderValue headers = 3;


    pub fn get_headers(&self) -> &[super::base::HeaderValue] {
        &self.headers
    }
    pub fn clear_headers(&mut self) {
        self.headers.clear();
    }

    // Param is passed by value, moved
    pub fn set_headers(&mut self, v: ::protobuf::RepeatedField<super::base::HeaderValue>) {
        self.headers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_headers(&mut self) -> &mut ::protobuf::RepeatedField<super::base::HeaderValue> {
        &mut self.headers
    }

    // Take field
    pub fn take_headers(&mut self) -> ::protobuf::RepeatedField<super::base::HeaderValue> {
        ::std::mem::replace(&mut self.headers, ::protobuf::RepeatedField::new())
    }

    // repeated .envoy.api.v2.core.HeaderValue request_headers_to_add = 4;


    pub fn get_request_headers_to_add(&self) -> &[super::base::HeaderValue] {
        &self.request_headers_to_add
    }
    pub fn clear_request_headers_to_add(&mut self) {
        self.request_headers_to_add.clear();
    }

    // Param is passed by value, moved
    pub fn set_request_headers_to_add(&mut self, v: ::protobuf::RepeatedField<super::base::HeaderValue>) {
        self.request_headers_to_add = v;
    }

    // Mutable pointer to the field.
    pub fn mut_request_headers_to_add(&mut self) -> &mut ::protobuf::RepeatedField<super::base::HeaderValue> {
        &mut self.request_headers_to_add
    }

    // Take field
    pub fn take_request_headers_to_add(&mut self) -> ::protobuf::RepeatedField<super::base::HeaderValue> {
        ::std::mem::replace(&mut self.request_headers_to_add, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for RateLimitResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.statuses {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.headers {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.request_headers_to_add {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.overall_code, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.statuses)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.headers)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.request_headers_to_add)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.overall_code != RateLimitResponse_Code::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.overall_code);
        }
        for value in &self.statuses {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.headers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.request_headers_to_add {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.overall_code != RateLimitResponse_Code::UNKNOWN {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.overall_code))?;
        }
        for v in &self.statuses {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.headers {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.request_headers_to_add {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RateLimitResponse {
        RateLimitResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RateLimitResponse_Code>>(
                "overall_code",
                |m: &RateLimitResponse| { &m.overall_code },
                |m: &mut RateLimitResponse| { &mut m.overall_code },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RateLimitResponse_DescriptorStatus>>(
                "statuses",
                |m: &RateLimitResponse| { &m.statuses },
                |m: &mut RateLimitResponse| { &mut m.statuses },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::HeaderValue>>(
                "headers",
                |m: &RateLimitResponse| { &m.headers },
                |m: &mut RateLimitResponse| { &mut m.headers },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::HeaderValue>>(
                "request_headers_to_add",
                |m: &RateLimitResponse| { &m.request_headers_to_add },
                |m: &mut RateLimitResponse| { &mut m.request_headers_to_add },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RateLimitResponse>(
                "RateLimitResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RateLimitResponse {
        static instance: ::protobuf::rt::LazyV2<RateLimitResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RateLimitResponse::new)
    }
}

impl ::protobuf::Clear for RateLimitResponse {
    fn clear(&mut self) {
        self.overall_code = RateLimitResponse_Code::UNKNOWN;
        self.statuses.clear();
        self.headers.clear();
        self.request_headers_to_add.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RateLimitResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RateLimitResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RateLimitResponse_RateLimit {
    // message fields
    pub name: ::std::string::String,
    pub requests_per_unit: u32,
    pub unit: RateLimitResponse_RateLimit_Unit,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RateLimitResponse_RateLimit {
    fn default() -> &'a RateLimitResponse_RateLimit {
        <RateLimitResponse_RateLimit as ::protobuf::Message>::default_instance()
    }
}

impl RateLimitResponse_RateLimit {
    pub fn new() -> RateLimitResponse_RateLimit {
        ::std::default::Default::default()
    }

    // string name = 3;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // uint32 requests_per_unit = 1;


    pub fn get_requests_per_unit(&self) -> u32 {
        self.requests_per_unit
    }
    pub fn clear_requests_per_unit(&mut self) {
        self.requests_per_unit = 0;
    }

    // Param is passed by value, moved
    pub fn set_requests_per_unit(&mut self, v: u32) {
        self.requests_per_unit = v;
    }

    // .envoy.service.ratelimit.v2.RateLimitResponse.RateLimit.Unit unit = 2;


    pub fn get_unit(&self) -> RateLimitResponse_RateLimit_Unit {
        self.unit
    }
    pub fn clear_unit(&mut self) {
        self.unit = RateLimitResponse_RateLimit_Unit::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_unit(&mut self, v: RateLimitResponse_RateLimit_Unit) {
        self.unit = v;
    }
}

impl ::protobuf::Message for RateLimitResponse_RateLimit {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.requests_per_unit = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.unit, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name);
        }
        if self.requests_per_unit != 0 {
            my_size += ::protobuf::rt::value_size(1, self.requests_per_unit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.unit != RateLimitResponse_RateLimit_Unit::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(2, self.unit);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(3, &self.name)?;
        }
        if self.requests_per_unit != 0 {
            os.write_uint32(1, self.requests_per_unit)?;
        }
        if self.unit != RateLimitResponse_RateLimit_Unit::UNKNOWN {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.unit))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RateLimitResponse_RateLimit {
        RateLimitResponse_RateLimit::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &RateLimitResponse_RateLimit| { &m.name },
                |m: &mut RateLimitResponse_RateLimit| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "requests_per_unit",
                |m: &RateLimitResponse_RateLimit| { &m.requests_per_unit },
                |m: &mut RateLimitResponse_RateLimit| { &mut m.requests_per_unit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RateLimitResponse_RateLimit_Unit>>(
                "unit",
                |m: &RateLimitResponse_RateLimit| { &m.unit },
                |m: &mut RateLimitResponse_RateLimit| { &mut m.unit },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RateLimitResponse_RateLimit>(
                "RateLimitResponse.RateLimit",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RateLimitResponse_RateLimit {
        static instance: ::protobuf::rt::LazyV2<RateLimitResponse_RateLimit> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RateLimitResponse_RateLimit::new)
    }
}

impl ::protobuf::Clear for RateLimitResponse_RateLimit {
    fn clear(&mut self) {
        self.name.clear();
        self.requests_per_unit = 0;
        self.unit = RateLimitResponse_RateLimit_Unit::UNKNOWN;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RateLimitResponse_RateLimit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RateLimitResponse_RateLimit {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RateLimitResponse_RateLimit_Unit {
    UNKNOWN = 0,
    SECOND = 1,
    MINUTE = 2,
    HOUR = 3,
    DAY = 4,
}

impl ::protobuf::ProtobufEnum for RateLimitResponse_RateLimit_Unit {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RateLimitResponse_RateLimit_Unit> {
        match value {
            0 => ::std::option::Option::Some(RateLimitResponse_RateLimit_Unit::UNKNOWN),
            1 => ::std::option::Option::Some(RateLimitResponse_RateLimit_Unit::SECOND),
            2 => ::std::option::Option::Some(RateLimitResponse_RateLimit_Unit::MINUTE),
            3 => ::std::option::Option::Some(RateLimitResponse_RateLimit_Unit::HOUR),
            4 => ::std::option::Option::Some(RateLimitResponse_RateLimit_Unit::DAY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RateLimitResponse_RateLimit_Unit] = &[
            RateLimitResponse_RateLimit_Unit::UNKNOWN,
            RateLimitResponse_RateLimit_Unit::SECOND,
            RateLimitResponse_RateLimit_Unit::MINUTE,
            RateLimitResponse_RateLimit_Unit::HOUR,
            RateLimitResponse_RateLimit_Unit::DAY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<RateLimitResponse_RateLimit_Unit>("RateLimitResponse.RateLimit.Unit", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for RateLimitResponse_RateLimit_Unit {
}

impl ::std::default::Default for RateLimitResponse_RateLimit_Unit {
    fn default() -> Self {
        RateLimitResponse_RateLimit_Unit::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for RateLimitResponse_RateLimit_Unit {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RateLimitResponse_DescriptorStatus {
    // message fields
    pub code: RateLimitResponse_Code,
    pub current_limit: ::protobuf::SingularPtrField<RateLimitResponse_RateLimit>,
    pub limit_remaining: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RateLimitResponse_DescriptorStatus {
    fn default() -> &'a RateLimitResponse_DescriptorStatus {
        <RateLimitResponse_DescriptorStatus as ::protobuf::Message>::default_instance()
    }
}

impl RateLimitResponse_DescriptorStatus {
    pub fn new() -> RateLimitResponse_DescriptorStatus {
        ::std::default::Default::default()
    }

    // .envoy.service.ratelimit.v2.RateLimitResponse.Code code = 1;


    pub fn get_code(&self) -> RateLimitResponse_Code {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = RateLimitResponse_Code::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: RateLimitResponse_Code) {
        self.code = v;
    }

    // .envoy.service.ratelimit.v2.RateLimitResponse.RateLimit current_limit = 2;


    pub fn get_current_limit(&self) -> &RateLimitResponse_RateLimit {
        self.current_limit.as_ref().unwrap_or_else(|| <RateLimitResponse_RateLimit as ::protobuf::Message>::default_instance())
    }
    pub fn clear_current_limit(&mut self) {
        self.current_limit.clear();
    }

    pub fn has_current_limit(&self) -> bool {
        self.current_limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_current_limit(&mut self, v: RateLimitResponse_RateLimit) {
        self.current_limit = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_current_limit(&mut self) -> &mut RateLimitResponse_RateLimit {
        if self.current_limit.is_none() {
            self.current_limit.set_default();
        }
        self.current_limit.as_mut().unwrap()
    }

    // Take field
    pub fn take_current_limit(&mut self) -> RateLimitResponse_RateLimit {
        self.current_limit.take().unwrap_or_else(|| RateLimitResponse_RateLimit::new())
    }

    // uint32 limit_remaining = 3;


    pub fn get_limit_remaining(&self) -> u32 {
        self.limit_remaining
    }
    pub fn clear_limit_remaining(&mut self) {
        self.limit_remaining = 0;
    }

    // Param is passed by value, moved
    pub fn set_limit_remaining(&mut self, v: u32) {
        self.limit_remaining = v;
    }
}

impl ::protobuf::Message for RateLimitResponse_DescriptorStatus {
    fn is_initialized(&self) -> bool {
        for v in &self.current_limit {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.code, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.current_limit)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.limit_remaining = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != RateLimitResponse_Code::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.code);
        }
        if let Some(ref v) = self.current_limit.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.limit_remaining != 0 {
            my_size += ::protobuf::rt::value_size(3, self.limit_remaining, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != RateLimitResponse_Code::UNKNOWN {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.code))?;
        }
        if let Some(ref v) = self.current_limit.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.limit_remaining != 0 {
            os.write_uint32(3, self.limit_remaining)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RateLimitResponse_DescriptorStatus {
        RateLimitResponse_DescriptorStatus::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<RateLimitResponse_Code>>(
                "code",
                |m: &RateLimitResponse_DescriptorStatus| { &m.code },
                |m: &mut RateLimitResponse_DescriptorStatus| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<RateLimitResponse_RateLimit>>(
                "current_limit",
                |m: &RateLimitResponse_DescriptorStatus| { &m.current_limit },
                |m: &mut RateLimitResponse_DescriptorStatus| { &mut m.current_limit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "limit_remaining",
                |m: &RateLimitResponse_DescriptorStatus| { &m.limit_remaining },
                |m: &mut RateLimitResponse_DescriptorStatus| { &mut m.limit_remaining },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RateLimitResponse_DescriptorStatus>(
                "RateLimitResponse.DescriptorStatus",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RateLimitResponse_DescriptorStatus {
        static instance: ::protobuf::rt::LazyV2<RateLimitResponse_DescriptorStatus> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RateLimitResponse_DescriptorStatus::new)
    }
}

impl ::protobuf::Clear for RateLimitResponse_DescriptorStatus {
    fn clear(&mut self) {
        self.code = RateLimitResponse_Code::UNKNOWN;
        self.current_limit.clear();
        self.limit_remaining = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RateLimitResponse_DescriptorStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RateLimitResponse_DescriptorStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum RateLimitResponse_Code {
    UNKNOWN = 0,
    OK = 1,
    OVER_LIMIT = 2,
}

impl ::protobuf::ProtobufEnum for RateLimitResponse_Code {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<RateLimitResponse_Code> {
        match value {
            0 => ::std::option::Option::Some(RateLimitResponse_Code::UNKNOWN),
            1 => ::std::option::Option::Some(RateLimitResponse_Code::OK),
            2 => ::std::option::Option::Some(RateLimitResponse_Code::OVER_LIMIT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [RateLimitResponse_Code] = &[
            RateLimitResponse_Code::UNKNOWN,
            RateLimitResponse_Code::OK,
            RateLimitResponse_Code::OVER_LIMIT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<RateLimitResponse_Code>("RateLimitResponse.Code", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for RateLimitResponse_Code {
}

impl ::std::default::Default for RateLimitResponse_Code {
    fn default() -> Self {
        RateLimitResponse_Code::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for RateLimitResponse_Code {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$envoy/service/ratelimit/v2/rls.proto\x12\x1aenvoy.service.ratelimit.v\
    2\x1a\x1cenvoy/api/v2/core/base.proto\x1a&envoy/api/v2/ratelimit/ratelim\
    it.proto\x1a\x1eudpa/annotations/migrate.proto\x1a\x1dudpa/annotations/s\
    tatus.proto\x1a\x17validate/validate.proto\"\x9a\x01\n\x10RateLimitReque\
    st\x12\x16\n\x06domain\x18\x01\x20\x01(\tR\x06domain\x12M\n\x0bdescripto\
    rs\x18\x02\x20\x03(\x0b2+.envoy.api.v2.ratelimit.RateLimitDescriptorR\
    \x0bdescriptors\x12\x1f\n\x0bhits_addend\x18\x03\x20\x01(\rR\nhitsAddend\
    \"\xe7\x06\n\x11RateLimitResponse\x12U\n\x0coverall_code\x18\x01\x20\x01\
    (\x0e22.envoy.service.ratelimit.v2.RateLimitResponse.CodeR\x0boverallCod\
    e\x12Z\n\x08statuses\x18\x02\x20\x03(\x0b2>.envoy.service.ratelimit.v2.R\
    ateLimitResponse.DescriptorStatusR\x08statuses\x12Y\n\x07headers\x18\x03\
    \x20\x03(\x0b2\x1e.envoy.api.v2.core.HeaderValueR\x07headersB\x1f\xf2\
    \x98\xfe\x8f\x05\x19\n\x17response_headers_to_add\x12S\n\x16request_head\
    ers_to_add\x18\x04\x20\x03(\x0b2\x1e.envoy.api.v2.core.HeaderValueR\x13r\
    equestHeadersToAdd\x1a\xdd\x01\n\tRateLimit\x12\x12\n\x04name\x18\x03\
    \x20\x01(\tR\x04name\x12*\n\x11requests_per_unit\x18\x01\x20\x01(\rR\x0f\
    requestsPerUnit\x12P\n\x04unit\x18\x02\x20\x01(\x0e2<.envoy.service.rate\
    limit.v2.RateLimitResponse.RateLimit.UnitR\x04unit\">\n\x04Unit\x12\x0b\
    \n\x07UNKNOWN\x10\0\x12\n\n\x06SECOND\x10\x01\x12\n\n\x06MINUTE\x10\x02\
    \x12\x08\n\x04HOUR\x10\x03\x12\x07\n\x03DAY\x10\x04\x1a\xe1\x01\n\x10Des\
    criptorStatus\x12F\n\x04code\x18\x01\x20\x01(\x0e22.envoy.service.rateli\
    mit.v2.RateLimitResponse.CodeR\x04code\x12\\\n\rcurrent_limit\x18\x02\
    \x20\x01(\x0b27.envoy.service.ratelimit.v2.RateLimitResponse.RateLimitR\
    \x0ccurrentLimit\x12'\n\x0flimit_remaining\x18\x03\x20\x01(\rR\x0elimitR\
    emaining\"+\n\x04Code\x12\x0b\n\x07UNKNOWN\x10\0\x12\x06\n\x02OK\x10\x01\
    \x12\x0e\n\nOVER_LIMIT\x10\x022\x84\x01\n\x10RateLimitService\x12p\n\x0f\
    ShouldRateLimit\x12,.envoy.service.ratelimit.v2.RateLimitRequest\x1a-.en\
    voy.service.ratelimit.v2.RateLimitResponse\"\0BA\n(io.envoyproxy.envoy.s\
    ervice.ratelimit.v2B\x08RlsProtoP\x01\x88\x01\x01\xba\x80\xc8\xd1\x06\
    \x02\x10\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
