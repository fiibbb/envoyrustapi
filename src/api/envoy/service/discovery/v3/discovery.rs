// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/service/discovery/v3/discovery.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct DiscoveryRequest {
    // message fields
    pub version_info: ::std::string::String,
    pub node: ::protobuf::SingularPtrField<super::base::Node>,
    pub resource_names: ::protobuf::RepeatedField<::std::string::String>,
    pub type_url: ::std::string::String,
    pub response_nonce: ::std::string::String,
    pub error_detail: ::protobuf::SingularPtrField<super::status::Status>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DiscoveryRequest {
    fn default() -> &'a DiscoveryRequest {
        <DiscoveryRequest as ::protobuf::Message>::default_instance()
    }
}

impl DiscoveryRequest {
    pub fn new() -> DiscoveryRequest {
        ::std::default::Default::default()
    }

    // string version_info = 1;


    pub fn get_version_info(&self) -> &str {
        &self.version_info
    }
    pub fn clear_version_info(&mut self) {
        self.version_info.clear();
    }

    // Param is passed by value, moved
    pub fn set_version_info(&mut self, v: ::std::string::String) {
        self.version_info = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version_info(&mut self) -> &mut ::std::string::String {
        &mut self.version_info
    }

    // Take field
    pub fn take_version_info(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version_info, ::std::string::String::new())
    }

    // .envoy.config.core.v3.Node node = 2;


    pub fn get_node(&self) -> &super::base::Node {
        self.node.as_ref().unwrap_or_else(|| <super::base::Node as ::protobuf::Message>::default_instance())
    }
    pub fn clear_node(&mut self) {
        self.node.clear();
    }

    pub fn has_node(&self) -> bool {
        self.node.is_some()
    }

    // Param is passed by value, moved
    pub fn set_node(&mut self, v: super::base::Node) {
        self.node = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node(&mut self) -> &mut super::base::Node {
        if self.node.is_none() {
            self.node.set_default();
        }
        self.node.as_mut().unwrap()
    }

    // Take field
    pub fn take_node(&mut self) -> super::base::Node {
        self.node.take().unwrap_or_else(|| super::base::Node::new())
    }

    // repeated string resource_names = 3;


    pub fn get_resource_names(&self) -> &[::std::string::String] {
        &self.resource_names
    }
    pub fn clear_resource_names(&mut self) {
        self.resource_names.clear();
    }

    // Param is passed by value, moved
    pub fn set_resource_names(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.resource_names = v;
    }

    // Mutable pointer to the field.
    pub fn mut_resource_names(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.resource_names
    }

    // Take field
    pub fn take_resource_names(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.resource_names, ::protobuf::RepeatedField::new())
    }

    // string type_url = 4;


    pub fn get_type_url(&self) -> &str {
        &self.type_url
    }
    pub fn clear_type_url(&mut self) {
        self.type_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_type_url(&mut self, v: ::std::string::String) {
        self.type_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type_url(&mut self) -> &mut ::std::string::String {
        &mut self.type_url
    }

    // Take field
    pub fn take_type_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.type_url, ::std::string::String::new())
    }

    // string response_nonce = 5;


    pub fn get_response_nonce(&self) -> &str {
        &self.response_nonce
    }
    pub fn clear_response_nonce(&mut self) {
        self.response_nonce.clear();
    }

    // Param is passed by value, moved
    pub fn set_response_nonce(&mut self, v: ::std::string::String) {
        self.response_nonce = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response_nonce(&mut self) -> &mut ::std::string::String {
        &mut self.response_nonce
    }

    // Take field
    pub fn take_response_nonce(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.response_nonce, ::std::string::String::new())
    }

    // .google.rpc.Status error_detail = 6;


    pub fn get_error_detail(&self) -> &super::status::Status {
        self.error_detail.as_ref().unwrap_or_else(|| <super::status::Status as ::protobuf::Message>::default_instance())
    }
    pub fn clear_error_detail(&mut self) {
        self.error_detail.clear();
    }

    pub fn has_error_detail(&self) -> bool {
        self.error_detail.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error_detail(&mut self, v: super::status::Status) {
        self.error_detail = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error_detail(&mut self) -> &mut super::status::Status {
        if self.error_detail.is_none() {
            self.error_detail.set_default();
        }
        self.error_detail.as_mut().unwrap()
    }

    // Take field
    pub fn take_error_detail(&mut self) -> super::status::Status {
        self.error_detail.take().unwrap_or_else(|| super::status::Status::new())
    }
}

impl ::protobuf::Message for DiscoveryRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.node {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.error_detail {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version_info)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.node)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.resource_names)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.type_url)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.response_nonce)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.error_detail)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.version_info.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.version_info);
        }
        if let Some(ref v) = self.node.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.resource_names {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        if !self.type_url.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.type_url);
        }
        if !self.response_nonce.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.response_nonce);
        }
        if let Some(ref v) = self.error_detail.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.version_info.is_empty() {
            os.write_string(1, &self.version_info)?;
        }
        if let Some(ref v) = self.node.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.resource_names {
            os.write_string(3, &v)?;
        };
        if !self.type_url.is_empty() {
            os.write_string(4, &self.type_url)?;
        }
        if !self.response_nonce.is_empty() {
            os.write_string(5, &self.response_nonce)?;
        }
        if let Some(ref v) = self.error_detail.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DiscoveryRequest {
        DiscoveryRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version_info",
                |m: &DiscoveryRequest| { &m.version_info },
                |m: &mut DiscoveryRequest| { &mut m.version_info },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Node>>(
                "node",
                |m: &DiscoveryRequest| { &m.node },
                |m: &mut DiscoveryRequest| { &mut m.node },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "resource_names",
                |m: &DiscoveryRequest| { &m.resource_names },
                |m: &mut DiscoveryRequest| { &mut m.resource_names },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type_url",
                |m: &DiscoveryRequest| { &m.type_url },
                |m: &mut DiscoveryRequest| { &mut m.type_url },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "response_nonce",
                |m: &DiscoveryRequest| { &m.response_nonce },
                |m: &mut DiscoveryRequest| { &mut m.response_nonce },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::status::Status>>(
                "error_detail",
                |m: &DiscoveryRequest| { &m.error_detail },
                |m: &mut DiscoveryRequest| { &mut m.error_detail },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DiscoveryRequest>(
                "DiscoveryRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DiscoveryRequest {
        static instance: ::protobuf::rt::LazyV2<DiscoveryRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DiscoveryRequest::new)
    }
}

impl ::protobuf::Clear for DiscoveryRequest {
    fn clear(&mut self) {
        self.version_info.clear();
        self.node.clear();
        self.resource_names.clear();
        self.type_url.clear();
        self.response_nonce.clear();
        self.error_detail.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DiscoveryRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DiscoveryRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DiscoveryResponse {
    // message fields
    pub version_info: ::std::string::String,
    pub resources: ::protobuf::RepeatedField<::protobuf::well_known_types::Any>,
    pub canary: bool,
    pub type_url: ::std::string::String,
    pub nonce: ::std::string::String,
    pub control_plane: ::protobuf::SingularPtrField<super::base::ControlPlane>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DiscoveryResponse {
    fn default() -> &'a DiscoveryResponse {
        <DiscoveryResponse as ::protobuf::Message>::default_instance()
    }
}

impl DiscoveryResponse {
    pub fn new() -> DiscoveryResponse {
        ::std::default::Default::default()
    }

    // string version_info = 1;


    pub fn get_version_info(&self) -> &str {
        &self.version_info
    }
    pub fn clear_version_info(&mut self) {
        self.version_info.clear();
    }

    // Param is passed by value, moved
    pub fn set_version_info(&mut self, v: ::std::string::String) {
        self.version_info = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version_info(&mut self) -> &mut ::std::string::String {
        &mut self.version_info
    }

    // Take field
    pub fn take_version_info(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version_info, ::std::string::String::new())
    }

    // repeated .google.protobuf.Any resources = 2;


    pub fn get_resources(&self) -> &[::protobuf::well_known_types::Any] {
        &self.resources
    }
    pub fn clear_resources(&mut self) {
        self.resources.clear();
    }

    // Param is passed by value, moved
    pub fn set_resources(&mut self, v: ::protobuf::RepeatedField<::protobuf::well_known_types::Any>) {
        self.resources = v;
    }

    // Mutable pointer to the field.
    pub fn mut_resources(&mut self) -> &mut ::protobuf::RepeatedField<::protobuf::well_known_types::Any> {
        &mut self.resources
    }

    // Take field
    pub fn take_resources(&mut self) -> ::protobuf::RepeatedField<::protobuf::well_known_types::Any> {
        ::std::mem::replace(&mut self.resources, ::protobuf::RepeatedField::new())
    }

    // bool canary = 3;


    pub fn get_canary(&self) -> bool {
        self.canary
    }
    pub fn clear_canary(&mut self) {
        self.canary = false;
    }

    // Param is passed by value, moved
    pub fn set_canary(&mut self, v: bool) {
        self.canary = v;
    }

    // string type_url = 4;


    pub fn get_type_url(&self) -> &str {
        &self.type_url
    }
    pub fn clear_type_url(&mut self) {
        self.type_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_type_url(&mut self, v: ::std::string::String) {
        self.type_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type_url(&mut self) -> &mut ::std::string::String {
        &mut self.type_url
    }

    // Take field
    pub fn take_type_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.type_url, ::std::string::String::new())
    }

    // string nonce = 5;


    pub fn get_nonce(&self) -> &str {
        &self.nonce
    }
    pub fn clear_nonce(&mut self) {
        self.nonce.clear();
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: ::std::string::String) {
        self.nonce = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nonce(&mut self) -> &mut ::std::string::String {
        &mut self.nonce
    }

    // Take field
    pub fn take_nonce(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nonce, ::std::string::String::new())
    }

    // .envoy.config.core.v3.ControlPlane control_plane = 6;


    pub fn get_control_plane(&self) -> &super::base::ControlPlane {
        self.control_plane.as_ref().unwrap_or_else(|| <super::base::ControlPlane as ::protobuf::Message>::default_instance())
    }
    pub fn clear_control_plane(&mut self) {
        self.control_plane.clear();
    }

    pub fn has_control_plane(&self) -> bool {
        self.control_plane.is_some()
    }

    // Param is passed by value, moved
    pub fn set_control_plane(&mut self, v: super::base::ControlPlane) {
        self.control_plane = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_control_plane(&mut self) -> &mut super::base::ControlPlane {
        if self.control_plane.is_none() {
            self.control_plane.set_default();
        }
        self.control_plane.as_mut().unwrap()
    }

    // Take field
    pub fn take_control_plane(&mut self) -> super::base::ControlPlane {
        self.control_plane.take().unwrap_or_else(|| super::base::ControlPlane::new())
    }
}

impl ::protobuf::Message for DiscoveryResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.resources {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.control_plane {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version_info)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.resources)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.canary = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.type_url)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.nonce)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.control_plane)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.version_info.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.version_info);
        }
        for value in &self.resources {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.canary != false {
            my_size += 2;
        }
        if !self.type_url.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.type_url);
        }
        if !self.nonce.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.nonce);
        }
        if let Some(ref v) = self.control_plane.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.version_info.is_empty() {
            os.write_string(1, &self.version_info)?;
        }
        for v in &self.resources {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.canary != false {
            os.write_bool(3, self.canary)?;
        }
        if !self.type_url.is_empty() {
            os.write_string(4, &self.type_url)?;
        }
        if !self.nonce.is_empty() {
            os.write_string(5, &self.nonce)?;
        }
        if let Some(ref v) = self.control_plane.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DiscoveryResponse {
        DiscoveryResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version_info",
                |m: &DiscoveryResponse| { &m.version_info },
                |m: &mut DiscoveryResponse| { &mut m.version_info },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "resources",
                |m: &DiscoveryResponse| { &m.resources },
                |m: &mut DiscoveryResponse| { &mut m.resources },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "canary",
                |m: &DiscoveryResponse| { &m.canary },
                |m: &mut DiscoveryResponse| { &mut m.canary },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type_url",
                |m: &DiscoveryResponse| { &m.type_url },
                |m: &mut DiscoveryResponse| { &mut m.type_url },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "nonce",
                |m: &DiscoveryResponse| { &m.nonce },
                |m: &mut DiscoveryResponse| { &mut m.nonce },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::ControlPlane>>(
                "control_plane",
                |m: &DiscoveryResponse| { &m.control_plane },
                |m: &mut DiscoveryResponse| { &mut m.control_plane },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DiscoveryResponse>(
                "DiscoveryResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DiscoveryResponse {
        static instance: ::protobuf::rt::LazyV2<DiscoveryResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DiscoveryResponse::new)
    }
}

impl ::protobuf::Clear for DiscoveryResponse {
    fn clear(&mut self) {
        self.version_info.clear();
        self.resources.clear();
        self.canary = false;
        self.type_url.clear();
        self.nonce.clear();
        self.control_plane.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DiscoveryResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DiscoveryResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeltaDiscoveryRequest {
    // message fields
    pub node: ::protobuf::SingularPtrField<super::base::Node>,
    pub type_url: ::std::string::String,
    pub resource_names_subscribe: ::protobuf::RepeatedField<::std::string::String>,
    pub resource_names_unsubscribe: ::protobuf::RepeatedField<::std::string::String>,
    pub initial_resource_versions: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub response_nonce: ::std::string::String,
    pub error_detail: ::protobuf::SingularPtrField<super::status::Status>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeltaDiscoveryRequest {
    fn default() -> &'a DeltaDiscoveryRequest {
        <DeltaDiscoveryRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeltaDiscoveryRequest {
    pub fn new() -> DeltaDiscoveryRequest {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.Node node = 1;


    pub fn get_node(&self) -> &super::base::Node {
        self.node.as_ref().unwrap_or_else(|| <super::base::Node as ::protobuf::Message>::default_instance())
    }
    pub fn clear_node(&mut self) {
        self.node.clear();
    }

    pub fn has_node(&self) -> bool {
        self.node.is_some()
    }

    // Param is passed by value, moved
    pub fn set_node(&mut self, v: super::base::Node) {
        self.node = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node(&mut self) -> &mut super::base::Node {
        if self.node.is_none() {
            self.node.set_default();
        }
        self.node.as_mut().unwrap()
    }

    // Take field
    pub fn take_node(&mut self) -> super::base::Node {
        self.node.take().unwrap_or_else(|| super::base::Node::new())
    }

    // string type_url = 2;


    pub fn get_type_url(&self) -> &str {
        &self.type_url
    }
    pub fn clear_type_url(&mut self) {
        self.type_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_type_url(&mut self, v: ::std::string::String) {
        self.type_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type_url(&mut self) -> &mut ::std::string::String {
        &mut self.type_url
    }

    // Take field
    pub fn take_type_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.type_url, ::std::string::String::new())
    }

    // repeated string resource_names_subscribe = 3;


    pub fn get_resource_names_subscribe(&self) -> &[::std::string::String] {
        &self.resource_names_subscribe
    }
    pub fn clear_resource_names_subscribe(&mut self) {
        self.resource_names_subscribe.clear();
    }

    // Param is passed by value, moved
    pub fn set_resource_names_subscribe(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.resource_names_subscribe = v;
    }

    // Mutable pointer to the field.
    pub fn mut_resource_names_subscribe(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.resource_names_subscribe
    }

    // Take field
    pub fn take_resource_names_subscribe(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.resource_names_subscribe, ::protobuf::RepeatedField::new())
    }

    // repeated string resource_names_unsubscribe = 4;


    pub fn get_resource_names_unsubscribe(&self) -> &[::std::string::String] {
        &self.resource_names_unsubscribe
    }
    pub fn clear_resource_names_unsubscribe(&mut self) {
        self.resource_names_unsubscribe.clear();
    }

    // Param is passed by value, moved
    pub fn set_resource_names_unsubscribe(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.resource_names_unsubscribe = v;
    }

    // Mutable pointer to the field.
    pub fn mut_resource_names_unsubscribe(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.resource_names_unsubscribe
    }

    // Take field
    pub fn take_resource_names_unsubscribe(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.resource_names_unsubscribe, ::protobuf::RepeatedField::new())
    }

    // repeated .envoy.service.discovery.v3.DeltaDiscoveryRequest.InitialResourceVersionsEntry initial_resource_versions = 5;


    pub fn get_initial_resource_versions(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.initial_resource_versions
    }
    pub fn clear_initial_resource_versions(&mut self) {
        self.initial_resource_versions.clear();
    }

    // Param is passed by value, moved
    pub fn set_initial_resource_versions(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.initial_resource_versions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_initial_resource_versions(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.initial_resource_versions
    }

    // Take field
    pub fn take_initial_resource_versions(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.initial_resource_versions, ::std::collections::HashMap::new())
    }

    // string response_nonce = 6;


    pub fn get_response_nonce(&self) -> &str {
        &self.response_nonce
    }
    pub fn clear_response_nonce(&mut self) {
        self.response_nonce.clear();
    }

    // Param is passed by value, moved
    pub fn set_response_nonce(&mut self, v: ::std::string::String) {
        self.response_nonce = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_response_nonce(&mut self) -> &mut ::std::string::String {
        &mut self.response_nonce
    }

    // Take field
    pub fn take_response_nonce(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.response_nonce, ::std::string::String::new())
    }

    // .google.rpc.Status error_detail = 7;


    pub fn get_error_detail(&self) -> &super::status::Status {
        self.error_detail.as_ref().unwrap_or_else(|| <super::status::Status as ::protobuf::Message>::default_instance())
    }
    pub fn clear_error_detail(&mut self) {
        self.error_detail.clear();
    }

    pub fn has_error_detail(&self) -> bool {
        self.error_detail.is_some()
    }

    // Param is passed by value, moved
    pub fn set_error_detail(&mut self, v: super::status::Status) {
        self.error_detail = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error_detail(&mut self) -> &mut super::status::Status {
        if self.error_detail.is_none() {
            self.error_detail.set_default();
        }
        self.error_detail.as_mut().unwrap()
    }

    // Take field
    pub fn take_error_detail(&mut self) -> super::status::Status {
        self.error_detail.take().unwrap_or_else(|| super::status::Status::new())
    }
}

impl ::protobuf::Message for DeltaDiscoveryRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.node {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.error_detail {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.node)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.type_url)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.resource_names_subscribe)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.resource_names_unsubscribe)?;
                },
                5 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.initial_resource_versions)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.response_nonce)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.error_detail)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.node.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.type_url.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.type_url);
        }
        for value in &self.resource_names_subscribe {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        for value in &self.resource_names_unsubscribe {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(5, &self.initial_resource_versions);
        if !self.response_nonce.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.response_nonce);
        }
        if let Some(ref v) = self.error_detail.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.node.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.type_url.is_empty() {
            os.write_string(2, &self.type_url)?;
        }
        for v in &self.resource_names_subscribe {
            os.write_string(3, &v)?;
        };
        for v in &self.resource_names_unsubscribe {
            os.write_string(4, &v)?;
        };
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(5, &self.initial_resource_versions, os)?;
        if !self.response_nonce.is_empty() {
            os.write_string(6, &self.response_nonce)?;
        }
        if let Some(ref v) = self.error_detail.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeltaDiscoveryRequest {
        DeltaDiscoveryRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Node>>(
                "node",
                |m: &DeltaDiscoveryRequest| { &m.node },
                |m: &mut DeltaDiscoveryRequest| { &mut m.node },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type_url",
                |m: &DeltaDiscoveryRequest| { &m.type_url },
                |m: &mut DeltaDiscoveryRequest| { &mut m.type_url },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "resource_names_subscribe",
                |m: &DeltaDiscoveryRequest| { &m.resource_names_subscribe },
                |m: &mut DeltaDiscoveryRequest| { &mut m.resource_names_subscribe },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "resource_names_unsubscribe",
                |m: &DeltaDiscoveryRequest| { &m.resource_names_unsubscribe },
                |m: &mut DeltaDiscoveryRequest| { &mut m.resource_names_unsubscribe },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "initial_resource_versions",
                |m: &DeltaDiscoveryRequest| { &m.initial_resource_versions },
                |m: &mut DeltaDiscoveryRequest| { &mut m.initial_resource_versions },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "response_nonce",
                |m: &DeltaDiscoveryRequest| { &m.response_nonce },
                |m: &mut DeltaDiscoveryRequest| { &mut m.response_nonce },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::status::Status>>(
                "error_detail",
                |m: &DeltaDiscoveryRequest| { &m.error_detail },
                |m: &mut DeltaDiscoveryRequest| { &mut m.error_detail },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeltaDiscoveryRequest>(
                "DeltaDiscoveryRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeltaDiscoveryRequest {
        static instance: ::protobuf::rt::LazyV2<DeltaDiscoveryRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeltaDiscoveryRequest::new)
    }
}

impl ::protobuf::Clear for DeltaDiscoveryRequest {
    fn clear(&mut self) {
        self.node.clear();
        self.type_url.clear();
        self.resource_names_subscribe.clear();
        self.resource_names_unsubscribe.clear();
        self.initial_resource_versions.clear();
        self.response_nonce.clear();
        self.error_detail.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeltaDiscoveryRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeltaDiscoveryRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeltaDiscoveryResponse {
    // message fields
    pub system_version_info: ::std::string::String,
    pub resources: ::protobuf::RepeatedField<Resource>,
    pub type_url: ::std::string::String,
    pub removed_resources: ::protobuf::RepeatedField<::std::string::String>,
    pub nonce: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeltaDiscoveryResponse {
    fn default() -> &'a DeltaDiscoveryResponse {
        <DeltaDiscoveryResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeltaDiscoveryResponse {
    pub fn new() -> DeltaDiscoveryResponse {
        ::std::default::Default::default()
    }

    // string system_version_info = 1;


    pub fn get_system_version_info(&self) -> &str {
        &self.system_version_info
    }
    pub fn clear_system_version_info(&mut self) {
        self.system_version_info.clear();
    }

    // Param is passed by value, moved
    pub fn set_system_version_info(&mut self, v: ::std::string::String) {
        self.system_version_info = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_system_version_info(&mut self) -> &mut ::std::string::String {
        &mut self.system_version_info
    }

    // Take field
    pub fn take_system_version_info(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.system_version_info, ::std::string::String::new())
    }

    // repeated .envoy.service.discovery.v3.Resource resources = 2;


    pub fn get_resources(&self) -> &[Resource] {
        &self.resources
    }
    pub fn clear_resources(&mut self) {
        self.resources.clear();
    }

    // Param is passed by value, moved
    pub fn set_resources(&mut self, v: ::protobuf::RepeatedField<Resource>) {
        self.resources = v;
    }

    // Mutable pointer to the field.
    pub fn mut_resources(&mut self) -> &mut ::protobuf::RepeatedField<Resource> {
        &mut self.resources
    }

    // Take field
    pub fn take_resources(&mut self) -> ::protobuf::RepeatedField<Resource> {
        ::std::mem::replace(&mut self.resources, ::protobuf::RepeatedField::new())
    }

    // string type_url = 4;


    pub fn get_type_url(&self) -> &str {
        &self.type_url
    }
    pub fn clear_type_url(&mut self) {
        self.type_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_type_url(&mut self, v: ::std::string::String) {
        self.type_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_type_url(&mut self) -> &mut ::std::string::String {
        &mut self.type_url
    }

    // Take field
    pub fn take_type_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.type_url, ::std::string::String::new())
    }

    // repeated string removed_resources = 6;


    pub fn get_removed_resources(&self) -> &[::std::string::String] {
        &self.removed_resources
    }
    pub fn clear_removed_resources(&mut self) {
        self.removed_resources.clear();
    }

    // Param is passed by value, moved
    pub fn set_removed_resources(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.removed_resources = v;
    }

    // Mutable pointer to the field.
    pub fn mut_removed_resources(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.removed_resources
    }

    // Take field
    pub fn take_removed_resources(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.removed_resources, ::protobuf::RepeatedField::new())
    }

    // string nonce = 5;


    pub fn get_nonce(&self) -> &str {
        &self.nonce
    }
    pub fn clear_nonce(&mut self) {
        self.nonce.clear();
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: ::std::string::String) {
        self.nonce = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_nonce(&mut self) -> &mut ::std::string::String {
        &mut self.nonce
    }

    // Take field
    pub fn take_nonce(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.nonce, ::std::string::String::new())
    }
}

impl ::protobuf::Message for DeltaDiscoveryResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.resources {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.system_version_info)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.resources)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.type_url)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.removed_resources)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.nonce)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.system_version_info.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.system_version_info);
        }
        for value in &self.resources {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.type_url.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.type_url);
        }
        for value in &self.removed_resources {
            my_size += ::protobuf::rt::string_size(6, &value);
        };
        if !self.nonce.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.nonce);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.system_version_info.is_empty() {
            os.write_string(1, &self.system_version_info)?;
        }
        for v in &self.resources {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.type_url.is_empty() {
            os.write_string(4, &self.type_url)?;
        }
        for v in &self.removed_resources {
            os.write_string(6, &v)?;
        };
        if !self.nonce.is_empty() {
            os.write_string(5, &self.nonce)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeltaDiscoveryResponse {
        DeltaDiscoveryResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "system_version_info",
                |m: &DeltaDiscoveryResponse| { &m.system_version_info },
                |m: &mut DeltaDiscoveryResponse| { &mut m.system_version_info },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Resource>>(
                "resources",
                |m: &DeltaDiscoveryResponse| { &m.resources },
                |m: &mut DeltaDiscoveryResponse| { &mut m.resources },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type_url",
                |m: &DeltaDiscoveryResponse| { &m.type_url },
                |m: &mut DeltaDiscoveryResponse| { &mut m.type_url },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "removed_resources",
                |m: &DeltaDiscoveryResponse| { &m.removed_resources },
                |m: &mut DeltaDiscoveryResponse| { &mut m.removed_resources },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "nonce",
                |m: &DeltaDiscoveryResponse| { &m.nonce },
                |m: &mut DeltaDiscoveryResponse| { &mut m.nonce },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeltaDiscoveryResponse>(
                "DeltaDiscoveryResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeltaDiscoveryResponse {
        static instance: ::protobuf::rt::LazyV2<DeltaDiscoveryResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeltaDiscoveryResponse::new)
    }
}

impl ::protobuf::Clear for DeltaDiscoveryResponse {
    fn clear(&mut self) {
        self.system_version_info.clear();
        self.resources.clear();
        self.type_url.clear();
        self.removed_resources.clear();
        self.nonce.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeltaDiscoveryResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeltaDiscoveryResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Resource {
    // message fields
    pub name: ::std::string::String,
    pub aliases: ::protobuf::RepeatedField<::std::string::String>,
    pub version: ::std::string::String,
    pub resource: ::protobuf::SingularPtrField<::protobuf::well_known_types::Any>,
    pub ttl: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub cache_control: ::protobuf::SingularPtrField<Resource_CacheControl>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Resource {
    fn default() -> &'a Resource {
        <Resource as ::protobuf::Message>::default_instance()
    }
}

impl Resource {
    pub fn new() -> Resource {
        ::std::default::Default::default()
    }

    // string name = 3;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // repeated string aliases = 4;


    pub fn get_aliases(&self) -> &[::std::string::String] {
        &self.aliases
    }
    pub fn clear_aliases(&mut self) {
        self.aliases.clear();
    }

    // Param is passed by value, moved
    pub fn set_aliases(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.aliases = v;
    }

    // Mutable pointer to the field.
    pub fn mut_aliases(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.aliases
    }

    // Take field
    pub fn take_aliases(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.aliases, ::protobuf::RepeatedField::new())
    }

    // string version = 1;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    // .google.protobuf.Any resource = 2;


    pub fn get_resource(&self) -> &::protobuf::well_known_types::Any {
        self.resource.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    pub fn has_resource(&self) -> bool {
        self.resource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: ::protobuf::well_known_types::Any) {
        self.resource = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if self.resource.is_none() {
            self.resource.set_default();
        }
        self.resource.as_mut().unwrap()
    }

    // Take field
    pub fn take_resource(&mut self) -> ::protobuf::well_known_types::Any {
        self.resource.take().unwrap_or_else(|| ::protobuf::well_known_types::Any::new())
    }

    // .google.protobuf.Duration ttl = 6;


    pub fn get_ttl(&self) -> &::protobuf::well_known_types::Duration {
        self.ttl.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ttl(&mut self) {
        self.ttl.clear();
    }

    pub fn has_ttl(&self) -> bool {
        self.ttl.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ttl(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.ttl = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ttl(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.ttl.is_none() {
            self.ttl.set_default();
        }
        self.ttl.as_mut().unwrap()
    }

    // Take field
    pub fn take_ttl(&mut self) -> ::protobuf::well_known_types::Duration {
        self.ttl.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .envoy.service.discovery.v3.Resource.CacheControl cache_control = 7;


    pub fn get_cache_control(&self) -> &Resource_CacheControl {
        self.cache_control.as_ref().unwrap_or_else(|| <Resource_CacheControl as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cache_control(&mut self) {
        self.cache_control.clear();
    }

    pub fn has_cache_control(&self) -> bool {
        self.cache_control.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cache_control(&mut self, v: Resource_CacheControl) {
        self.cache_control = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cache_control(&mut self) -> &mut Resource_CacheControl {
        if self.cache_control.is_none() {
            self.cache_control.set_default();
        }
        self.cache_control.as_mut().unwrap()
    }

    // Take field
    pub fn take_cache_control(&mut self) -> Resource_CacheControl {
        self.cache_control.take().unwrap_or_else(|| Resource_CacheControl::new())
    }
}

impl ::protobuf::Message for Resource {
    fn is_initialized(&self) -> bool {
        for v in &self.resource {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ttl {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.cache_control {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.aliases)?;
                },
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resource)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ttl)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cache_control)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.name);
        }
        for value in &self.aliases {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.version);
        }
        if let Some(ref v) = self.resource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.ttl.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.cache_control.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(3, &self.name)?;
        }
        for v in &self.aliases {
            os.write_string(4, &v)?;
        };
        if !self.version.is_empty() {
            os.write_string(1, &self.version)?;
        }
        if let Some(ref v) = self.resource.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.ttl.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.cache_control.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Resource {
        Resource::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Resource| { &m.name },
                |m: &mut Resource| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "aliases",
                |m: &Resource| { &m.aliases },
                |m: &mut Resource| { &mut m.aliases },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &Resource| { &m.version },
                |m: &mut Resource| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Any>>(
                "resource",
                |m: &Resource| { &m.resource },
                |m: &mut Resource| { &mut m.resource },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "ttl",
                |m: &Resource| { &m.ttl },
                |m: &mut Resource| { &mut m.ttl },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Resource_CacheControl>>(
                "cache_control",
                |m: &Resource| { &m.cache_control },
                |m: &mut Resource| { &mut m.cache_control },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Resource>(
                "Resource",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Resource {
        static instance: ::protobuf::rt::LazyV2<Resource> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Resource::new)
    }
}

impl ::protobuf::Clear for Resource {
    fn clear(&mut self) {
        self.name.clear();
        self.aliases.clear();
        self.version.clear();
        self.resource.clear();
        self.ttl.clear();
        self.cache_control.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Resource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Resource {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Resource_CacheControl {
    // message fields
    pub do_not_cache: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Resource_CacheControl {
    fn default() -> &'a Resource_CacheControl {
        <Resource_CacheControl as ::protobuf::Message>::default_instance()
    }
}

impl Resource_CacheControl {
    pub fn new() -> Resource_CacheControl {
        ::std::default::Default::default()
    }

    // bool do_not_cache = 1;


    pub fn get_do_not_cache(&self) -> bool {
        self.do_not_cache
    }
    pub fn clear_do_not_cache(&mut self) {
        self.do_not_cache = false;
    }

    // Param is passed by value, moved
    pub fn set_do_not_cache(&mut self, v: bool) {
        self.do_not_cache = v;
    }
}

impl ::protobuf::Message for Resource_CacheControl {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.do_not_cache = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.do_not_cache != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.do_not_cache != false {
            os.write_bool(1, self.do_not_cache)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Resource_CacheControl {
        Resource_CacheControl::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "do_not_cache",
                |m: &Resource_CacheControl| { &m.do_not_cache },
                |m: &mut Resource_CacheControl| { &mut m.do_not_cache },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Resource_CacheControl>(
                "Resource.CacheControl",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Resource_CacheControl {
        static instance: ::protobuf::rt::LazyV2<Resource_CacheControl> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Resource_CacheControl::new)
    }
}

impl ::protobuf::Clear for Resource_CacheControl {
    fn clear(&mut self) {
        self.do_not_cache = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Resource_CacheControl {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Resource_CacheControl {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n*envoy/service/discovery/v3/discovery.proto\x12\x1aenvoy.service.disco\
    very.v3\x1a\x1fenvoy/config/core/v3/base.proto\x1a\x19google/protobuf/an\
    y.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x17google/rpc/status.p\
    roto\x1a\x1eudpa/annotations/migrate.proto\x1a\x1dudpa/annotations/statu\
    s.proto\x1a!udpa/annotations/versioning.proto\"\xab\x02\n\x10DiscoveryRe\
    quest\x12!\n\x0cversion_info\x18\x01\x20\x01(\tR\x0bversionInfo\x12.\n\
    \x04node\x18\x02\x20\x01(\x0b2\x1a.envoy.config.core.v3.NodeR\x04node\
    \x12%\n\x0eresource_names\x18\x03\x20\x03(\tR\rresourceNames\x12\x19\n\
    \x08type_url\x18\x04\x20\x01(\tR\x07typeUrl\x12%\n\x0eresponse_nonce\x18\
    \x05\x20\x01(\tR\rresponseNonce\x125\n\x0cerror_detail\x18\x06\x20\x01(\
    \x0b2\x12.google.rpc.StatusR\x0berrorDetail:$\x9a\xc5\x88\x1e\x1f\n\x1de\
    nvoy.api.v2.DiscoveryRequest\"\xa3\x02\n\x11DiscoveryResponse\x12!\n\x0c\
    version_info\x18\x01\x20\x01(\tR\x0bversionInfo\x122\n\tresources\x18\
    \x02\x20\x03(\x0b2\x14.google.protobuf.AnyR\tresources\x12\x16\n\x06cana\
    ry\x18\x03\x20\x01(\x08R\x06canary\x12\x19\n\x08type_url\x18\x04\x20\x01\
    (\tR\x07typeUrl\x12\x14\n\x05nonce\x18\x05\x20\x01(\tR\x05nonce\x12G\n\r\
    control_plane\x18\x06\x20\x01(\x0b2\".envoy.config.core.v3.ControlPlaneR\
    \x0ccontrolPlane:%\x9a\xc5\x88\x1e\x20\n\x1eenvoy.api.v2.DiscoveryRespon\
    se\"\xbc\x04\n\x15DeltaDiscoveryRequest\x12.\n\x04node\x18\x01\x20\x01(\
    \x0b2\x1a.envoy.config.core.v3.NodeR\x04node\x12\x19\n\x08type_url\x18\
    \x02\x20\x01(\tR\x07typeUrl\x128\n\x18resource_names_subscribe\x18\x03\
    \x20\x03(\tR\x16resourceNamesSubscribe\x12<\n\x1aresource_names_unsubscr\
    ibe\x18\x04\x20\x03(\tR\x18resourceNamesUnsubscribe\x12\x8a\x01\n\x19ini\
    tial_resource_versions\x18\x05\x20\x03(\x0b2N.envoy.service.discovery.v3\
    .DeltaDiscoveryRequest.InitialResourceVersionsEntryR\x17initialResourceV\
    ersions\x12%\n\x0eresponse_nonce\x18\x06\x20\x01(\tR\rresponseNonce\x125\
    \n\x0cerror_detail\x18\x07\x20\x01(\x0b2\x12.google.rpc.StatusR\x0berror\
    Detail\x1aJ\n\x1cInitialResourceVersionsEntry\x12\x10\n\x03key\x18\x01\
    \x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x02\
    8\x01:)\x9a\xc5\x88\x1e$\n\"envoy.api.v2.DeltaDiscoveryRequest\"\x96\x02\
    \n\x16DeltaDiscoveryResponse\x12.\n\x13system_version_info\x18\x01\x20\
    \x01(\tR\x11systemVersionInfo\x12B\n\tresources\x18\x02\x20\x03(\x0b2$.e\
    nvoy.service.discovery.v3.ResourceR\tresources\x12\x19\n\x08type_url\x18\
    \x04\x20\x01(\tR\x07typeUrl\x12+\n\x11removed_resources\x18\x06\x20\x03(\
    \tR\x10removedResources\x12\x14\n\x05nonce\x18\x05\x20\x01(\tR\x05nonce:\
    *\x9a\xc5\x88\x1e%\n#envoy.api.v2.DeltaDiscoveryResponse\"\xd9\x02\n\x08\
    Resource\x12\x12\n\x04name\x18\x03\x20\x01(\tR\x04name\x12\x18\n\x07alia\
    ses\x18\x04\x20\x03(\tR\x07aliases\x12\x18\n\x07version\x18\x01\x20\x01(\
    \tR\x07version\x120\n\x08resource\x18\x02\x20\x01(\x0b2\x14.google.proto\
    buf.AnyR\x08resource\x12+\n\x03ttl\x18\x06\x20\x01(\x0b2\x19.google.prot\
    obuf.DurationR\x03ttl\x12V\n\rcache_control\x18\x07\x20\x01(\x0b21.envoy\
    .service.discovery.v3.Resource.CacheControlR\x0ccacheControl\x1a0\n\x0cC\
    acheControl\x12\x20\n\x0cdo_not_cache\x18\x01\x20\x01(\x08R\ndoNotCache:\
    \x1c\x9a\xc5\x88\x1e\x17\n\x15envoy.api.v2.ResourceBD\n(io.envoyproxy.en\
    voy.service.discovery.v3B\x0eDiscoveryProtoP\x01\xba\x80\xc8\xd1\x06\x02\
    \x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
