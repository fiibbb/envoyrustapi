// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/service/discovery/v2/hds.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct Capability {
    // message fields
    pub health_check_protocols: ::std::vec::Vec<Capability_Protocol>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Capability {
    fn default() -> &'a Capability {
        <Capability as ::protobuf::Message>::default_instance()
    }
}

impl Capability {
    pub fn new() -> Capability {
        ::std::default::Default::default()
    }

    // repeated .envoy.service.discovery.v2.Capability.Protocol health_check_protocols = 1;


    pub fn get_health_check_protocols(&self) -> &[Capability_Protocol] {
        &self.health_check_protocols
    }
    pub fn clear_health_check_protocols(&mut self) {
        self.health_check_protocols.clear();
    }

    // Param is passed by value, moved
    pub fn set_health_check_protocols(&mut self, v: ::std::vec::Vec<Capability_Protocol>) {
        self.health_check_protocols = v;
    }

    // Mutable pointer to the field.
    pub fn mut_health_check_protocols(&mut self) -> &mut ::std::vec::Vec<Capability_Protocol> {
        &mut self.health_check_protocols
    }

    // Take field
    pub fn take_health_check_protocols(&mut self) -> ::std::vec::Vec<Capability_Protocol> {
        ::std::mem::replace(&mut self.health_check_protocols, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Capability {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(wire_type, is, &mut self.health_check_protocols, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.health_check_protocols {
            my_size += ::protobuf::rt::enum_size(1, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.health_check_protocols {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(v))?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Capability {
        Capability::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Capability_Protocol>>(
                "health_check_protocols",
                |m: &Capability| { &m.health_check_protocols },
                |m: &mut Capability| { &mut m.health_check_protocols },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Capability>(
                "Capability",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Capability {
        static instance: ::protobuf::rt::LazyV2<Capability> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Capability::new)
    }
}

impl ::protobuf::Clear for Capability {
    fn clear(&mut self) {
        self.health_check_protocols.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Capability {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Capability {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Capability_Protocol {
    HTTP = 0,
    TCP = 1,
    REDIS = 2,
}

impl ::protobuf::ProtobufEnum for Capability_Protocol {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Capability_Protocol> {
        match value {
            0 => ::std::option::Option::Some(Capability_Protocol::HTTP),
            1 => ::std::option::Option::Some(Capability_Protocol::TCP),
            2 => ::std::option::Option::Some(Capability_Protocol::REDIS),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Capability_Protocol] = &[
            Capability_Protocol::HTTP,
            Capability_Protocol::TCP,
            Capability_Protocol::REDIS,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Capability_Protocol>("Capability.Protocol", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Capability_Protocol {
}

impl ::std::default::Default for Capability_Protocol {
    fn default() -> Self {
        Capability_Protocol::HTTP
    }
}

impl ::protobuf::reflect::ProtobufValue for Capability_Protocol {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HealthCheckRequest {
    // message fields
    pub node: ::protobuf::SingularPtrField<super::base::Node>,
    pub capability: ::protobuf::SingularPtrField<Capability>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HealthCheckRequest {
    fn default() -> &'a HealthCheckRequest {
        <HealthCheckRequest as ::protobuf::Message>::default_instance()
    }
}

impl HealthCheckRequest {
    pub fn new() -> HealthCheckRequest {
        ::std::default::Default::default()
    }

    // .envoy.api.v2.core.Node node = 1;


    pub fn get_node(&self) -> &super::base::Node {
        self.node.as_ref().unwrap_or_else(|| <super::base::Node as ::protobuf::Message>::default_instance())
    }
    pub fn clear_node(&mut self) {
        self.node.clear();
    }

    pub fn has_node(&self) -> bool {
        self.node.is_some()
    }

    // Param is passed by value, moved
    pub fn set_node(&mut self, v: super::base::Node) {
        self.node = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node(&mut self) -> &mut super::base::Node {
        if self.node.is_none() {
            self.node.set_default();
        }
        self.node.as_mut().unwrap()
    }

    // Take field
    pub fn take_node(&mut self) -> super::base::Node {
        self.node.take().unwrap_or_else(|| super::base::Node::new())
    }

    // .envoy.service.discovery.v2.Capability capability = 2;


    pub fn get_capability(&self) -> &Capability {
        self.capability.as_ref().unwrap_or_else(|| <Capability as ::protobuf::Message>::default_instance())
    }
    pub fn clear_capability(&mut self) {
        self.capability.clear();
    }

    pub fn has_capability(&self) -> bool {
        self.capability.is_some()
    }

    // Param is passed by value, moved
    pub fn set_capability(&mut self, v: Capability) {
        self.capability = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_capability(&mut self) -> &mut Capability {
        if self.capability.is_none() {
            self.capability.set_default();
        }
        self.capability.as_mut().unwrap()
    }

    // Take field
    pub fn take_capability(&mut self) -> Capability {
        self.capability.take().unwrap_or_else(|| Capability::new())
    }
}

impl ::protobuf::Message for HealthCheckRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.node {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.capability {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.node)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.capability)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.node.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.capability.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.node.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.capability.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HealthCheckRequest {
        HealthCheckRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Node>>(
                "node",
                |m: &HealthCheckRequest| { &m.node },
                |m: &mut HealthCheckRequest| { &mut m.node },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Capability>>(
                "capability",
                |m: &HealthCheckRequest| { &m.capability },
                |m: &mut HealthCheckRequest| { &mut m.capability },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HealthCheckRequest>(
                "HealthCheckRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HealthCheckRequest {
        static instance: ::protobuf::rt::LazyV2<HealthCheckRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HealthCheckRequest::new)
    }
}

impl ::protobuf::Clear for HealthCheckRequest {
    fn clear(&mut self) {
        self.node.clear();
        self.capability.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HealthCheckRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HealthCheckRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EndpointHealth {
    // message fields
    pub endpoint: ::protobuf::SingularPtrField<super::endpoint_components::Endpoint>,
    pub health_status: super::health_check::HealthStatus,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EndpointHealth {
    fn default() -> &'a EndpointHealth {
        <EndpointHealth as ::protobuf::Message>::default_instance()
    }
}

impl EndpointHealth {
    pub fn new() -> EndpointHealth {
        ::std::default::Default::default()
    }

    // .envoy.api.v2.endpoint.Endpoint endpoint = 1;


    pub fn get_endpoint(&self) -> &super::endpoint_components::Endpoint {
        self.endpoint.as_ref().unwrap_or_else(|| <super::endpoint_components::Endpoint as ::protobuf::Message>::default_instance())
    }
    pub fn clear_endpoint(&mut self) {
        self.endpoint.clear();
    }

    pub fn has_endpoint(&self) -> bool {
        self.endpoint.is_some()
    }

    // Param is passed by value, moved
    pub fn set_endpoint(&mut self, v: super::endpoint_components::Endpoint) {
        self.endpoint = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_endpoint(&mut self) -> &mut super::endpoint_components::Endpoint {
        if self.endpoint.is_none() {
            self.endpoint.set_default();
        }
        self.endpoint.as_mut().unwrap()
    }

    // Take field
    pub fn take_endpoint(&mut self) -> super::endpoint_components::Endpoint {
        self.endpoint.take().unwrap_or_else(|| super::endpoint_components::Endpoint::new())
    }

    // .envoy.api.v2.core.HealthStatus health_status = 2;


    pub fn get_health_status(&self) -> super::health_check::HealthStatus {
        self.health_status
    }
    pub fn clear_health_status(&mut self) {
        self.health_status = super::health_check::HealthStatus::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_health_status(&mut self, v: super::health_check::HealthStatus) {
        self.health_status = v;
    }
}

impl ::protobuf::Message for EndpointHealth {
    fn is_initialized(&self) -> bool {
        for v in &self.endpoint {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.endpoint)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.health_status, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.endpoint.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.health_status != super::health_check::HealthStatus::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(2, self.health_status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.endpoint.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.health_status != super::health_check::HealthStatus::UNKNOWN {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.health_status))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EndpointHealth {
        EndpointHealth::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::endpoint_components::Endpoint>>(
                "endpoint",
                |m: &EndpointHealth| { &m.endpoint },
                |m: &mut EndpointHealth| { &mut m.endpoint },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::health_check::HealthStatus>>(
                "health_status",
                |m: &EndpointHealth| { &m.health_status },
                |m: &mut EndpointHealth| { &mut m.health_status },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EndpointHealth>(
                "EndpointHealth",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EndpointHealth {
        static instance: ::protobuf::rt::LazyV2<EndpointHealth> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EndpointHealth::new)
    }
}

impl ::protobuf::Clear for EndpointHealth {
    fn clear(&mut self) {
        self.endpoint.clear();
        self.health_status = super::health_check::HealthStatus::UNKNOWN;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EndpointHealth {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EndpointHealth {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EndpointHealthResponse {
    // message fields
    pub endpoints_health: ::protobuf::RepeatedField<EndpointHealth>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EndpointHealthResponse {
    fn default() -> &'a EndpointHealthResponse {
        <EndpointHealthResponse as ::protobuf::Message>::default_instance()
    }
}

impl EndpointHealthResponse {
    pub fn new() -> EndpointHealthResponse {
        ::std::default::Default::default()
    }

    // repeated .envoy.service.discovery.v2.EndpointHealth endpoints_health = 1;


    pub fn get_endpoints_health(&self) -> &[EndpointHealth] {
        &self.endpoints_health
    }
    pub fn clear_endpoints_health(&mut self) {
        self.endpoints_health.clear();
    }

    // Param is passed by value, moved
    pub fn set_endpoints_health(&mut self, v: ::protobuf::RepeatedField<EndpointHealth>) {
        self.endpoints_health = v;
    }

    // Mutable pointer to the field.
    pub fn mut_endpoints_health(&mut self) -> &mut ::protobuf::RepeatedField<EndpointHealth> {
        &mut self.endpoints_health
    }

    // Take field
    pub fn take_endpoints_health(&mut self) -> ::protobuf::RepeatedField<EndpointHealth> {
        ::std::mem::replace(&mut self.endpoints_health, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for EndpointHealthResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.endpoints_health {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.endpoints_health)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.endpoints_health {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.endpoints_health {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EndpointHealthResponse {
        EndpointHealthResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EndpointHealth>>(
                "endpoints_health",
                |m: &EndpointHealthResponse| { &m.endpoints_health },
                |m: &mut EndpointHealthResponse| { &mut m.endpoints_health },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EndpointHealthResponse>(
                "EndpointHealthResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EndpointHealthResponse {
        static instance: ::protobuf::rt::LazyV2<EndpointHealthResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EndpointHealthResponse::new)
    }
}

impl ::protobuf::Clear for EndpointHealthResponse {
    fn clear(&mut self) {
        self.endpoints_health.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EndpointHealthResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EndpointHealthResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HealthCheckRequestOrEndpointHealthResponse {
    // message oneof groups
    pub request_type: ::std::option::Option<HealthCheckRequestOrEndpointHealthResponse_oneof_request_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HealthCheckRequestOrEndpointHealthResponse {
    fn default() -> &'a HealthCheckRequestOrEndpointHealthResponse {
        <HealthCheckRequestOrEndpointHealthResponse as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum HealthCheckRequestOrEndpointHealthResponse_oneof_request_type {
    health_check_request(HealthCheckRequest),
    endpoint_health_response(EndpointHealthResponse),
}

impl HealthCheckRequestOrEndpointHealthResponse {
    pub fn new() -> HealthCheckRequestOrEndpointHealthResponse {
        ::std::default::Default::default()
    }

    // .envoy.service.discovery.v2.HealthCheckRequest health_check_request = 1;


    pub fn get_health_check_request(&self) -> &HealthCheckRequest {
        match self.request_type {
            ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::health_check_request(ref v)) => v,
            _ => <HealthCheckRequest as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_health_check_request(&mut self) {
        self.request_type = ::std::option::Option::None;
    }

    pub fn has_health_check_request(&self) -> bool {
        match self.request_type {
            ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::health_check_request(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_health_check_request(&mut self, v: HealthCheckRequest) {
        self.request_type = ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::health_check_request(v))
    }

    // Mutable pointer to the field.
    pub fn mut_health_check_request(&mut self) -> &mut HealthCheckRequest {
        if let ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::health_check_request(_)) = self.request_type {
        } else {
            self.request_type = ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::health_check_request(HealthCheckRequest::new()));
        }
        match self.request_type {
            ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::health_check_request(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_health_check_request(&mut self) -> HealthCheckRequest {
        if self.has_health_check_request() {
            match self.request_type.take() {
                ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::health_check_request(v)) => v,
                _ => panic!(),
            }
        } else {
            HealthCheckRequest::new()
        }
    }

    // .envoy.service.discovery.v2.EndpointHealthResponse endpoint_health_response = 2;


    pub fn get_endpoint_health_response(&self) -> &EndpointHealthResponse {
        match self.request_type {
            ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::endpoint_health_response(ref v)) => v,
            _ => <EndpointHealthResponse as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_endpoint_health_response(&mut self) {
        self.request_type = ::std::option::Option::None;
    }

    pub fn has_endpoint_health_response(&self) -> bool {
        match self.request_type {
            ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::endpoint_health_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_endpoint_health_response(&mut self, v: EndpointHealthResponse) {
        self.request_type = ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::endpoint_health_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_endpoint_health_response(&mut self) -> &mut EndpointHealthResponse {
        if let ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::endpoint_health_response(_)) = self.request_type {
        } else {
            self.request_type = ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::endpoint_health_response(EndpointHealthResponse::new()));
        }
        match self.request_type {
            ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::endpoint_health_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_endpoint_health_response(&mut self) -> EndpointHealthResponse {
        if self.has_endpoint_health_response() {
            match self.request_type.take() {
                ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::endpoint_health_response(v)) => v,
                _ => panic!(),
            }
        } else {
            EndpointHealthResponse::new()
        }
    }
}

impl ::protobuf::Message for HealthCheckRequestOrEndpointHealthResponse {
    fn is_initialized(&self) -> bool {
        if let Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::health_check_request(ref v)) = self.request_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::endpoint_health_response(ref v)) = self.request_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.request_type = ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::health_check_request(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.request_type = ::std::option::Option::Some(HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::endpoint_health_response(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.request_type {
            match v {
                &HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::health_check_request(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::endpoint_health_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.request_type {
            match v {
                &HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::health_check_request(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &HealthCheckRequestOrEndpointHealthResponse_oneof_request_type::endpoint_health_response(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HealthCheckRequestOrEndpointHealthResponse {
        HealthCheckRequestOrEndpointHealthResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, HealthCheckRequest>(
                "health_check_request",
                HealthCheckRequestOrEndpointHealthResponse::has_health_check_request,
                HealthCheckRequestOrEndpointHealthResponse::get_health_check_request,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, EndpointHealthResponse>(
                "endpoint_health_response",
                HealthCheckRequestOrEndpointHealthResponse::has_endpoint_health_response,
                HealthCheckRequestOrEndpointHealthResponse::get_endpoint_health_response,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HealthCheckRequestOrEndpointHealthResponse>(
                "HealthCheckRequestOrEndpointHealthResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HealthCheckRequestOrEndpointHealthResponse {
        static instance: ::protobuf::rt::LazyV2<HealthCheckRequestOrEndpointHealthResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HealthCheckRequestOrEndpointHealthResponse::new)
    }
}

impl ::protobuf::Clear for HealthCheckRequestOrEndpointHealthResponse {
    fn clear(&mut self) {
        self.request_type = ::std::option::Option::None;
        self.request_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HealthCheckRequestOrEndpointHealthResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HealthCheckRequestOrEndpointHealthResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LocalityEndpoints {
    // message fields
    pub locality: ::protobuf::SingularPtrField<super::base::Locality>,
    pub endpoints: ::protobuf::RepeatedField<super::endpoint_components::Endpoint>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LocalityEndpoints {
    fn default() -> &'a LocalityEndpoints {
        <LocalityEndpoints as ::protobuf::Message>::default_instance()
    }
}

impl LocalityEndpoints {
    pub fn new() -> LocalityEndpoints {
        ::std::default::Default::default()
    }

    // .envoy.api.v2.core.Locality locality = 1;


    pub fn get_locality(&self) -> &super::base::Locality {
        self.locality.as_ref().unwrap_or_else(|| <super::base::Locality as ::protobuf::Message>::default_instance())
    }
    pub fn clear_locality(&mut self) {
        self.locality.clear();
    }

    pub fn has_locality(&self) -> bool {
        self.locality.is_some()
    }

    // Param is passed by value, moved
    pub fn set_locality(&mut self, v: super::base::Locality) {
        self.locality = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_locality(&mut self) -> &mut super::base::Locality {
        if self.locality.is_none() {
            self.locality.set_default();
        }
        self.locality.as_mut().unwrap()
    }

    // Take field
    pub fn take_locality(&mut self) -> super::base::Locality {
        self.locality.take().unwrap_or_else(|| super::base::Locality::new())
    }

    // repeated .envoy.api.v2.endpoint.Endpoint endpoints = 2;


    pub fn get_endpoints(&self) -> &[super::endpoint_components::Endpoint] {
        &self.endpoints
    }
    pub fn clear_endpoints(&mut self) {
        self.endpoints.clear();
    }

    // Param is passed by value, moved
    pub fn set_endpoints(&mut self, v: ::protobuf::RepeatedField<super::endpoint_components::Endpoint>) {
        self.endpoints = v;
    }

    // Mutable pointer to the field.
    pub fn mut_endpoints(&mut self) -> &mut ::protobuf::RepeatedField<super::endpoint_components::Endpoint> {
        &mut self.endpoints
    }

    // Take field
    pub fn take_endpoints(&mut self) -> ::protobuf::RepeatedField<super::endpoint_components::Endpoint> {
        ::std::mem::replace(&mut self.endpoints, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for LocalityEndpoints {
    fn is_initialized(&self) -> bool {
        for v in &self.locality {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.endpoints {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.locality)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.endpoints)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.locality.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.endpoints {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.locality.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.endpoints {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LocalityEndpoints {
        LocalityEndpoints::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Locality>>(
                "locality",
                |m: &LocalityEndpoints| { &m.locality },
                |m: &mut LocalityEndpoints| { &mut m.locality },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::endpoint_components::Endpoint>>(
                "endpoints",
                |m: &LocalityEndpoints| { &m.endpoints },
                |m: &mut LocalityEndpoints| { &mut m.endpoints },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LocalityEndpoints>(
                "LocalityEndpoints",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LocalityEndpoints {
        static instance: ::protobuf::rt::LazyV2<LocalityEndpoints> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LocalityEndpoints::new)
    }
}

impl ::protobuf::Clear for LocalityEndpoints {
    fn clear(&mut self) {
        self.locality.clear();
        self.endpoints.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LocalityEndpoints {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LocalityEndpoints {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClusterHealthCheck {
    // message fields
    pub cluster_name: ::std::string::String,
    pub health_checks: ::protobuf::RepeatedField<super::health_check::HealthCheck>,
    pub locality_endpoints: ::protobuf::RepeatedField<LocalityEndpoints>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClusterHealthCheck {
    fn default() -> &'a ClusterHealthCheck {
        <ClusterHealthCheck as ::protobuf::Message>::default_instance()
    }
}

impl ClusterHealthCheck {
    pub fn new() -> ClusterHealthCheck {
        ::std::default::Default::default()
    }

    // string cluster_name = 1;


    pub fn get_cluster_name(&self) -> &str {
        &self.cluster_name
    }
    pub fn clear_cluster_name(&mut self) {
        self.cluster_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cluster_name(&mut self, v: ::std::string::String) {
        self.cluster_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cluster_name(&mut self) -> &mut ::std::string::String {
        &mut self.cluster_name
    }

    // Take field
    pub fn take_cluster_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cluster_name, ::std::string::String::new())
    }

    // repeated .envoy.api.v2.core.HealthCheck health_checks = 2;


    pub fn get_health_checks(&self) -> &[super::health_check::HealthCheck] {
        &self.health_checks
    }
    pub fn clear_health_checks(&mut self) {
        self.health_checks.clear();
    }

    // Param is passed by value, moved
    pub fn set_health_checks(&mut self, v: ::protobuf::RepeatedField<super::health_check::HealthCheck>) {
        self.health_checks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_health_checks(&mut self) -> &mut ::protobuf::RepeatedField<super::health_check::HealthCheck> {
        &mut self.health_checks
    }

    // Take field
    pub fn take_health_checks(&mut self) -> ::protobuf::RepeatedField<super::health_check::HealthCheck> {
        ::std::mem::replace(&mut self.health_checks, ::protobuf::RepeatedField::new())
    }

    // repeated .envoy.service.discovery.v2.LocalityEndpoints locality_endpoints = 3;


    pub fn get_locality_endpoints(&self) -> &[LocalityEndpoints] {
        &self.locality_endpoints
    }
    pub fn clear_locality_endpoints(&mut self) {
        self.locality_endpoints.clear();
    }

    // Param is passed by value, moved
    pub fn set_locality_endpoints(&mut self, v: ::protobuf::RepeatedField<LocalityEndpoints>) {
        self.locality_endpoints = v;
    }

    // Mutable pointer to the field.
    pub fn mut_locality_endpoints(&mut self) -> &mut ::protobuf::RepeatedField<LocalityEndpoints> {
        &mut self.locality_endpoints
    }

    // Take field
    pub fn take_locality_endpoints(&mut self) -> ::protobuf::RepeatedField<LocalityEndpoints> {
        ::std::mem::replace(&mut self.locality_endpoints, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ClusterHealthCheck {
    fn is_initialized(&self) -> bool {
        for v in &self.health_checks {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.locality_endpoints {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cluster_name)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.health_checks)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.locality_endpoints)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.cluster_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.cluster_name);
        }
        for value in &self.health_checks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.locality_endpoints {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.cluster_name.is_empty() {
            os.write_string(1, &self.cluster_name)?;
        }
        for v in &self.health_checks {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.locality_endpoints {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClusterHealthCheck {
        ClusterHealthCheck::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cluster_name",
                |m: &ClusterHealthCheck| { &m.cluster_name },
                |m: &mut ClusterHealthCheck| { &mut m.cluster_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::health_check::HealthCheck>>(
                "health_checks",
                |m: &ClusterHealthCheck| { &m.health_checks },
                |m: &mut ClusterHealthCheck| { &mut m.health_checks },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LocalityEndpoints>>(
                "locality_endpoints",
                |m: &ClusterHealthCheck| { &m.locality_endpoints },
                |m: &mut ClusterHealthCheck| { &mut m.locality_endpoints },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClusterHealthCheck>(
                "ClusterHealthCheck",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClusterHealthCheck {
        static instance: ::protobuf::rt::LazyV2<ClusterHealthCheck> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClusterHealthCheck::new)
    }
}

impl ::protobuf::Clear for ClusterHealthCheck {
    fn clear(&mut self) {
        self.cluster_name.clear();
        self.health_checks.clear();
        self.locality_endpoints.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClusterHealthCheck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClusterHealthCheck {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HealthCheckSpecifier {
    // message fields
    pub cluster_health_checks: ::protobuf::RepeatedField<ClusterHealthCheck>,
    pub interval: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HealthCheckSpecifier {
    fn default() -> &'a HealthCheckSpecifier {
        <HealthCheckSpecifier as ::protobuf::Message>::default_instance()
    }
}

impl HealthCheckSpecifier {
    pub fn new() -> HealthCheckSpecifier {
        ::std::default::Default::default()
    }

    // repeated .envoy.service.discovery.v2.ClusterHealthCheck cluster_health_checks = 1;


    pub fn get_cluster_health_checks(&self) -> &[ClusterHealthCheck] {
        &self.cluster_health_checks
    }
    pub fn clear_cluster_health_checks(&mut self) {
        self.cluster_health_checks.clear();
    }

    // Param is passed by value, moved
    pub fn set_cluster_health_checks(&mut self, v: ::protobuf::RepeatedField<ClusterHealthCheck>) {
        self.cluster_health_checks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cluster_health_checks(&mut self) -> &mut ::protobuf::RepeatedField<ClusterHealthCheck> {
        &mut self.cluster_health_checks
    }

    // Take field
    pub fn take_cluster_health_checks(&mut self) -> ::protobuf::RepeatedField<ClusterHealthCheck> {
        ::std::mem::replace(&mut self.cluster_health_checks, ::protobuf::RepeatedField::new())
    }

    // .google.protobuf.Duration interval = 2;


    pub fn get_interval(&self) -> &::protobuf::well_known_types::Duration {
        self.interval.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_interval(&mut self) {
        self.interval.clear();
    }

    pub fn has_interval(&self) -> bool {
        self.interval.is_some()
    }

    // Param is passed by value, moved
    pub fn set_interval(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.interval = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interval(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.interval.is_none() {
            self.interval.set_default();
        }
        self.interval.as_mut().unwrap()
    }

    // Take field
    pub fn take_interval(&mut self) -> ::protobuf::well_known_types::Duration {
        self.interval.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }
}

impl ::protobuf::Message for HealthCheckSpecifier {
    fn is_initialized(&self) -> bool {
        for v in &self.cluster_health_checks {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.interval {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.cluster_health_checks)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.interval)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.cluster_health_checks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.interval.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.cluster_health_checks {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.interval.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HealthCheckSpecifier {
        HealthCheckSpecifier::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ClusterHealthCheck>>(
                "cluster_health_checks",
                |m: &HealthCheckSpecifier| { &m.cluster_health_checks },
                |m: &mut HealthCheckSpecifier| { &mut m.cluster_health_checks },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "interval",
                |m: &HealthCheckSpecifier| { &m.interval },
                |m: &mut HealthCheckSpecifier| { &mut m.interval },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HealthCheckSpecifier>(
                "HealthCheckSpecifier",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HealthCheckSpecifier {
        static instance: ::protobuf::rt::LazyV2<HealthCheckSpecifier> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HealthCheckSpecifier::new)
    }
}

impl ::protobuf::Clear for HealthCheckSpecifier {
    fn clear(&mut self) {
        self.cluster_health_checks.clear();
        self.interval.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HealthCheckSpecifier {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HealthCheckSpecifier {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$envoy/service/discovery/v2/hds.proto\x12\x1aenvoy.service.discovery.v\
    2\x1a\x1cenvoy/api/v2/core/base.proto\x1a$envoy/api/v2/core/health_check\
    .proto\x1a/envoy/api/v2/endpoint/endpoint_components.proto\x1a\x1cgoogle\
    /api/annotations.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1eudpa\
    /annotations/migrate.proto\x1a\x1dudpa/annotations/status.proto\"\x9d\
    \x01\n\nCapability\x12e\n\x16health_check_protocols\x18\x01\x20\x03(\x0e\
    2/.envoy.service.discovery.v2.Capability.ProtocolR\x14healthCheckProtoco\
    ls\"(\n\x08Protocol\x12\x08\n\x04HTTP\x10\0\x12\x07\n\x03TCP\x10\x01\x12\
    \t\n\x05REDIS\x10\x02\"\x89\x01\n\x12HealthCheckRequest\x12+\n\x04node\
    \x18\x01\x20\x01(\x0b2\x17.envoy.api.v2.core.NodeR\x04node\x12F\n\ncapab\
    ility\x18\x02\x20\x01(\x0b2&.envoy.service.discovery.v2.CapabilityR\ncap\
    ability\"\x93\x01\n\x0eEndpointHealth\x12;\n\x08endpoint\x18\x01\x20\x01\
    (\x0b2\x1f.envoy.api.v2.endpoint.EndpointR\x08endpoint\x12D\n\rhealth_st\
    atus\x18\x02\x20\x01(\x0e2\x1f.envoy.api.v2.core.HealthStatusR\x0chealth\
    Status\"o\n\x16EndpointHealthResponse\x12U\n\x10endpoints_health\x18\x01\
    \x20\x03(\x0b2*.envoy.service.discovery.v2.EndpointHealthR\x0fendpointsH\
    ealth\"\x90\x02\n*HealthCheckRequestOrEndpointHealthResponse\x12b\n\x14h\
    ealth_check_request\x18\x01\x20\x01(\x0b2..envoy.service.discovery.v2.He\
    althCheckRequestH\0R\x12healthCheckRequest\x12n\n\x18endpoint_health_res\
    ponse\x18\x02\x20\x01(\x0b22.envoy.service.discovery.v2.EndpointHealthRe\
    sponseH\0R\x16endpointHealthResponseB\x0e\n\x0crequest_type\"\x8b\x01\n\
    \x11LocalityEndpoints\x127\n\x08locality\x18\x01\x20\x01(\x0b2\x1b.envoy\
    .api.v2.core.LocalityR\x08locality\x12=\n\tendpoints\x18\x02\x20\x03(\
    \x0b2\x1f.envoy.api.v2.endpoint.EndpointR\tendpoints\"\xda\x01\n\x12Clus\
    terHealthCheck\x12!\n\x0ccluster_name\x18\x01\x20\x01(\tR\x0bclusterName\
    \x12C\n\rhealth_checks\x18\x02\x20\x03(\x0b2\x1e.envoy.api.v2.core.Healt\
    hCheckR\x0chealthChecks\x12\\\n\x12locality_endpoints\x18\x03\x20\x03(\
    \x0b2-.envoy.service.discovery.v2.LocalityEndpointsR\x11localityEndpoint\
    s\"\xb1\x01\n\x14HealthCheckSpecifier\x12b\n\x15cluster_health_checks\
    \x18\x01\x20\x03(\x0b2..envoy.service.discovery.v2.ClusterHealthCheckR\
    \x13clusterHealthChecks\x125\n\x08interval\x18\x02\x20\x01(\x0b2\x19.goo\
    gle.protobuf.DurationR\x08interval2\xea\x02\n\x16HealthDiscoveryService\
    \x12\x93\x01\n\x11StreamHealthCheck\x12F.envoy.service.discovery.v2.Heal\
    thCheckRequestOrEndpointHealthResponse\x1a0.envoy.service.discovery.v2.H\
    ealthCheckSpecifier\"\0(\x010\x01\x12\xb9\x01\n\x10FetchHealthCheck\x12F\
    .envoy.service.discovery.v2.HealthCheckRequestOrEndpointHealthResponse\
    \x1a0.envoy.service.discovery.v2.HealthCheckSpecifier\"+\x82\xd3\xe4\x93\
    \x02\x1c\"\x1a/v2/discovery:health_check\x82\xd3\xe4\x93\x02\x03:\x01*B`\
    \n(io.envoyproxy.envoy.service.discovery.v2B\x08HdsProtoP\x01\x88\x01\
    \x01\xba\x80\xc8\xd1\x06\x02\x10\x01\xf2\x98\xfe\x8f\x05\x19\x12\x17envo\
    y.service.health.v3b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
