// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/service/metrics/v3/metrics_service.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct StreamMetricsResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StreamMetricsResponse {
    fn default() -> &'a StreamMetricsResponse {
        <StreamMetricsResponse as ::protobuf::Message>::default_instance()
    }
}

impl StreamMetricsResponse {
    pub fn new() -> StreamMetricsResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for StreamMetricsResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StreamMetricsResponse {
        StreamMetricsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StreamMetricsResponse>(
                "StreamMetricsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StreamMetricsResponse {
        static instance: ::protobuf::rt::LazyV2<StreamMetricsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StreamMetricsResponse::new)
    }
}

impl ::protobuf::Clear for StreamMetricsResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StreamMetricsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamMetricsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StreamMetricsMessage {
    // message fields
    pub identifier: ::protobuf::SingularPtrField<StreamMetricsMessage_Identifier>,
    pub envoy_metrics: ::protobuf::RepeatedField<super::metrics::MetricFamily>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StreamMetricsMessage {
    fn default() -> &'a StreamMetricsMessage {
        <StreamMetricsMessage as ::protobuf::Message>::default_instance()
    }
}

impl StreamMetricsMessage {
    pub fn new() -> StreamMetricsMessage {
        ::std::default::Default::default()
    }

    // .envoy.service.metrics.v3.StreamMetricsMessage.Identifier identifier = 1;


    pub fn get_identifier(&self) -> &StreamMetricsMessage_Identifier {
        self.identifier.as_ref().unwrap_or_else(|| <StreamMetricsMessage_Identifier as ::protobuf::Message>::default_instance())
    }
    pub fn clear_identifier(&mut self) {
        self.identifier.clear();
    }

    pub fn has_identifier(&self) -> bool {
        self.identifier.is_some()
    }

    // Param is passed by value, moved
    pub fn set_identifier(&mut self, v: StreamMetricsMessage_Identifier) {
        self.identifier = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_identifier(&mut self) -> &mut StreamMetricsMessage_Identifier {
        if self.identifier.is_none() {
            self.identifier.set_default();
        }
        self.identifier.as_mut().unwrap()
    }

    // Take field
    pub fn take_identifier(&mut self) -> StreamMetricsMessage_Identifier {
        self.identifier.take().unwrap_or_else(|| StreamMetricsMessage_Identifier::new())
    }

    // repeated .io.prometheus.client.MetricFamily envoy_metrics = 2;


    pub fn get_envoy_metrics(&self) -> &[super::metrics::MetricFamily] {
        &self.envoy_metrics
    }
    pub fn clear_envoy_metrics(&mut self) {
        self.envoy_metrics.clear();
    }

    // Param is passed by value, moved
    pub fn set_envoy_metrics(&mut self, v: ::protobuf::RepeatedField<super::metrics::MetricFamily>) {
        self.envoy_metrics = v;
    }

    // Mutable pointer to the field.
    pub fn mut_envoy_metrics(&mut self) -> &mut ::protobuf::RepeatedField<super::metrics::MetricFamily> {
        &mut self.envoy_metrics
    }

    // Take field
    pub fn take_envoy_metrics(&mut self) -> ::protobuf::RepeatedField<super::metrics::MetricFamily> {
        ::std::mem::replace(&mut self.envoy_metrics, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for StreamMetricsMessage {
    fn is_initialized(&self) -> bool {
        for v in &self.identifier {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.envoy_metrics {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.identifier)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.envoy_metrics)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.identifier.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.envoy_metrics {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.identifier.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.envoy_metrics {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StreamMetricsMessage {
        StreamMetricsMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<StreamMetricsMessage_Identifier>>(
                "identifier",
                |m: &StreamMetricsMessage| { &m.identifier },
                |m: &mut StreamMetricsMessage| { &mut m.identifier },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::metrics::MetricFamily>>(
                "envoy_metrics",
                |m: &StreamMetricsMessage| { &m.envoy_metrics },
                |m: &mut StreamMetricsMessage| { &mut m.envoy_metrics },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StreamMetricsMessage>(
                "StreamMetricsMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StreamMetricsMessage {
        static instance: ::protobuf::rt::LazyV2<StreamMetricsMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StreamMetricsMessage::new)
    }
}

impl ::protobuf::Clear for StreamMetricsMessage {
    fn clear(&mut self) {
        self.identifier.clear();
        self.envoy_metrics.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StreamMetricsMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamMetricsMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StreamMetricsMessage_Identifier {
    // message fields
    pub node: ::protobuf::SingularPtrField<super::base::Node>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StreamMetricsMessage_Identifier {
    fn default() -> &'a StreamMetricsMessage_Identifier {
        <StreamMetricsMessage_Identifier as ::protobuf::Message>::default_instance()
    }
}

impl StreamMetricsMessage_Identifier {
    pub fn new() -> StreamMetricsMessage_Identifier {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.Node node = 1;


    pub fn get_node(&self) -> &super::base::Node {
        self.node.as_ref().unwrap_or_else(|| <super::base::Node as ::protobuf::Message>::default_instance())
    }
    pub fn clear_node(&mut self) {
        self.node.clear();
    }

    pub fn has_node(&self) -> bool {
        self.node.is_some()
    }

    // Param is passed by value, moved
    pub fn set_node(&mut self, v: super::base::Node) {
        self.node = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node(&mut self) -> &mut super::base::Node {
        if self.node.is_none() {
            self.node.set_default();
        }
        self.node.as_mut().unwrap()
    }

    // Take field
    pub fn take_node(&mut self) -> super::base::Node {
        self.node.take().unwrap_or_else(|| super::base::Node::new())
    }
}

impl ::protobuf::Message for StreamMetricsMessage_Identifier {
    fn is_initialized(&self) -> bool {
        for v in &self.node {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.node)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.node.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.node.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StreamMetricsMessage_Identifier {
        StreamMetricsMessage_Identifier::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Node>>(
                "node",
                |m: &StreamMetricsMessage_Identifier| { &m.node },
                |m: &mut StreamMetricsMessage_Identifier| { &mut m.node },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StreamMetricsMessage_Identifier>(
                "StreamMetricsMessage.Identifier",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StreamMetricsMessage_Identifier {
        static instance: ::protobuf::rt::LazyV2<StreamMetricsMessage_Identifier> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StreamMetricsMessage_Identifier::new)
    }
}

impl ::protobuf::Clear for StreamMetricsMessage_Identifier {
    fn clear(&mut self) {
        self.node.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StreamMetricsMessage_Identifier {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StreamMetricsMessage_Identifier {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n.envoy/service/metrics/v3/metrics_service.proto\x12\x18envoy.service.m\
    etrics.v3\x1a\x1fenvoy/config/core/v3/base.proto\x1a\rmetrics.proto\x1a\
    \x1dudpa/annotations/status.proto\x1a!udpa/annotations/versioning.proto\
    \x1a\x17validate/validate.proto\"N\n\x15StreamMetricsResponse:5\x9a\xc5\
    \x88\x1e0\n.envoy.service.metrics.v2.StreamMetricsResponse\"\xfa\x02\n\
    \x14StreamMetricsMessage\x12Y\n\nidentifier\x18\x01\x20\x01(\x0b29.envoy\
    .service.metrics.v3.StreamMetricsMessage.IdentifierR\nidentifier\x12G\n\
    \renvoy_metrics\x18\x02\x20\x03(\x0b2\".io.prometheus.client.MetricFamil\
    yR\x0cenvoyMetrics\x1a\x87\x01\n\nIdentifier\x128\n\x04node\x18\x01\x20\
    \x01(\x0b2\x1a.envoy.config.core.v3.NodeR\x04nodeB\x08\xfaB\x05\x8a\x01\
    \x02\x10\x01:?\x9a\xc5\x88\x1e:\n8envoy.service.metrics.v2.StreamMetrics\
    Message.Identifier:4\x9a\xc5\x88\x1e/\n-envoy.service.metrics.v2.StreamM\
    etricsMessage2\x86\x01\n\x0eMetricsService\x12t\n\rStreamMetrics\x12..en\
    voy.service.metrics.v3.StreamMetricsMessage\x1a/.envoy.service.metrics.v\
    3.StreamMetricsResponse\"\0(\x01BJ\n&io.envoyproxy.envoy.service.metrics\
    .v3B\x13MetricsServiceProtoP\x01\x88\x01\x01\xba\x80\xc8\xd1\x06\x02\x10\
    \x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
