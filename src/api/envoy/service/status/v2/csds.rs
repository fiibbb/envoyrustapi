// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/service/status/v2/csds.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct ClientStatusRequest {
    // message fields
    pub node_matchers: ::protobuf::RepeatedField<super::node::NodeMatcher>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientStatusRequest {
    fn default() -> &'a ClientStatusRequest {
        <ClientStatusRequest as ::protobuf::Message>::default_instance()
    }
}

impl ClientStatusRequest {
    pub fn new() -> ClientStatusRequest {
        ::std::default::Default::default()
    }

    // repeated .envoy.type.matcher.NodeMatcher node_matchers = 1;


    pub fn get_node_matchers(&self) -> &[super::node::NodeMatcher] {
        &self.node_matchers
    }
    pub fn clear_node_matchers(&mut self) {
        self.node_matchers.clear();
    }

    // Param is passed by value, moved
    pub fn set_node_matchers(&mut self, v: ::protobuf::RepeatedField<super::node::NodeMatcher>) {
        self.node_matchers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_node_matchers(&mut self) -> &mut ::protobuf::RepeatedField<super::node::NodeMatcher> {
        &mut self.node_matchers
    }

    // Take field
    pub fn take_node_matchers(&mut self) -> ::protobuf::RepeatedField<super::node::NodeMatcher> {
        ::std::mem::replace(&mut self.node_matchers, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ClientStatusRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.node_matchers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.node_matchers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.node_matchers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.node_matchers {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientStatusRequest {
        ClientStatusRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::node::NodeMatcher>>(
                "node_matchers",
                |m: &ClientStatusRequest| { &m.node_matchers },
                |m: &mut ClientStatusRequest| { &mut m.node_matchers },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientStatusRequest>(
                "ClientStatusRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientStatusRequest {
        static instance: ::protobuf::rt::LazyV2<ClientStatusRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientStatusRequest::new)
    }
}

impl ::protobuf::Clear for ClientStatusRequest {
    fn clear(&mut self) {
        self.node_matchers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientStatusRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientStatusRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PerXdsConfig {
    // message fields
    pub status: ConfigStatus,
    // message oneof groups
    pub per_xds_config: ::std::option::Option<PerXdsConfig_oneof_per_xds_config>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PerXdsConfig {
    fn default() -> &'a PerXdsConfig {
        <PerXdsConfig as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum PerXdsConfig_oneof_per_xds_config {
    listener_config(super::config_dump::ListenersConfigDump),
    cluster_config(super::config_dump::ClustersConfigDump),
    route_config(super::config_dump::RoutesConfigDump),
    scoped_route_config(super::config_dump::ScopedRoutesConfigDump),
}

impl PerXdsConfig {
    pub fn new() -> PerXdsConfig {
        ::std::default::Default::default()
    }

    // .envoy.service.status.v2.ConfigStatus status = 1;


    pub fn get_status(&self) -> ConfigStatus {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ConfigStatus::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ConfigStatus) {
        self.status = v;
    }

    // .envoy.admin.v2alpha.ListenersConfigDump listener_config = 2;


    pub fn get_listener_config(&self) -> &super::config_dump::ListenersConfigDump {
        match self.per_xds_config {
            ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::listener_config(ref v)) => v,
            _ => <super::config_dump::ListenersConfigDump as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_listener_config(&mut self) {
        self.per_xds_config = ::std::option::Option::None;
    }

    pub fn has_listener_config(&self) -> bool {
        match self.per_xds_config {
            ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::listener_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_listener_config(&mut self, v: super::config_dump::ListenersConfigDump) {
        self.per_xds_config = ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::listener_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_listener_config(&mut self) -> &mut super::config_dump::ListenersConfigDump {
        if let ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::listener_config(_)) = self.per_xds_config {
        } else {
            self.per_xds_config = ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::listener_config(super::config_dump::ListenersConfigDump::new()));
        }
        match self.per_xds_config {
            ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::listener_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_listener_config(&mut self) -> super::config_dump::ListenersConfigDump {
        if self.has_listener_config() {
            match self.per_xds_config.take() {
                ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::listener_config(v)) => v,
                _ => panic!(),
            }
        } else {
            super::config_dump::ListenersConfigDump::new()
        }
    }

    // .envoy.admin.v2alpha.ClustersConfigDump cluster_config = 3;


    pub fn get_cluster_config(&self) -> &super::config_dump::ClustersConfigDump {
        match self.per_xds_config {
            ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::cluster_config(ref v)) => v,
            _ => <super::config_dump::ClustersConfigDump as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_cluster_config(&mut self) {
        self.per_xds_config = ::std::option::Option::None;
    }

    pub fn has_cluster_config(&self) -> bool {
        match self.per_xds_config {
            ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::cluster_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_cluster_config(&mut self, v: super::config_dump::ClustersConfigDump) {
        self.per_xds_config = ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::cluster_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_cluster_config(&mut self) -> &mut super::config_dump::ClustersConfigDump {
        if let ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::cluster_config(_)) = self.per_xds_config {
        } else {
            self.per_xds_config = ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::cluster_config(super::config_dump::ClustersConfigDump::new()));
        }
        match self.per_xds_config {
            ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::cluster_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_cluster_config(&mut self) -> super::config_dump::ClustersConfigDump {
        if self.has_cluster_config() {
            match self.per_xds_config.take() {
                ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::cluster_config(v)) => v,
                _ => panic!(),
            }
        } else {
            super::config_dump::ClustersConfigDump::new()
        }
    }

    // .envoy.admin.v2alpha.RoutesConfigDump route_config = 4;


    pub fn get_route_config(&self) -> &super::config_dump::RoutesConfigDump {
        match self.per_xds_config {
            ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::route_config(ref v)) => v,
            _ => <super::config_dump::RoutesConfigDump as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_route_config(&mut self) {
        self.per_xds_config = ::std::option::Option::None;
    }

    pub fn has_route_config(&self) -> bool {
        match self.per_xds_config {
            ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::route_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_route_config(&mut self, v: super::config_dump::RoutesConfigDump) {
        self.per_xds_config = ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::route_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_route_config(&mut self) -> &mut super::config_dump::RoutesConfigDump {
        if let ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::route_config(_)) = self.per_xds_config {
        } else {
            self.per_xds_config = ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::route_config(super::config_dump::RoutesConfigDump::new()));
        }
        match self.per_xds_config {
            ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::route_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_route_config(&mut self) -> super::config_dump::RoutesConfigDump {
        if self.has_route_config() {
            match self.per_xds_config.take() {
                ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::route_config(v)) => v,
                _ => panic!(),
            }
        } else {
            super::config_dump::RoutesConfigDump::new()
        }
    }

    // .envoy.admin.v2alpha.ScopedRoutesConfigDump scoped_route_config = 5;


    pub fn get_scoped_route_config(&self) -> &super::config_dump::ScopedRoutesConfigDump {
        match self.per_xds_config {
            ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::scoped_route_config(ref v)) => v,
            _ => <super::config_dump::ScopedRoutesConfigDump as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_scoped_route_config(&mut self) {
        self.per_xds_config = ::std::option::Option::None;
    }

    pub fn has_scoped_route_config(&self) -> bool {
        match self.per_xds_config {
            ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::scoped_route_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_scoped_route_config(&mut self, v: super::config_dump::ScopedRoutesConfigDump) {
        self.per_xds_config = ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::scoped_route_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_scoped_route_config(&mut self) -> &mut super::config_dump::ScopedRoutesConfigDump {
        if let ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::scoped_route_config(_)) = self.per_xds_config {
        } else {
            self.per_xds_config = ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::scoped_route_config(super::config_dump::ScopedRoutesConfigDump::new()));
        }
        match self.per_xds_config {
            ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::scoped_route_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_scoped_route_config(&mut self) -> super::config_dump::ScopedRoutesConfigDump {
        if self.has_scoped_route_config() {
            match self.per_xds_config.take() {
                ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::scoped_route_config(v)) => v,
                _ => panic!(),
            }
        } else {
            super::config_dump::ScopedRoutesConfigDump::new()
        }
    }
}

impl ::protobuf::Message for PerXdsConfig {
    fn is_initialized(&self) -> bool {
        if let Some(PerXdsConfig_oneof_per_xds_config::listener_config(ref v)) = self.per_xds_config {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(PerXdsConfig_oneof_per_xds_config::cluster_config(ref v)) = self.per_xds_config {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(PerXdsConfig_oneof_per_xds_config::route_config(ref v)) = self.per_xds_config {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(PerXdsConfig_oneof_per_xds_config::scoped_route_config(ref v)) = self.per_xds_config {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.per_xds_config = ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::listener_config(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.per_xds_config = ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::cluster_config(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.per_xds_config = ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::route_config(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.per_xds_config = ::std::option::Option::Some(PerXdsConfig_oneof_per_xds_config::scoped_route_config(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ConfigStatus::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        if let ::std::option::Option::Some(ref v) = self.per_xds_config {
            match v {
                &PerXdsConfig_oneof_per_xds_config::listener_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &PerXdsConfig_oneof_per_xds_config::cluster_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &PerXdsConfig_oneof_per_xds_config::route_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &PerXdsConfig_oneof_per_xds_config::scoped_route_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ConfigStatus::UNKNOWN {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        if let ::std::option::Option::Some(ref v) = self.per_xds_config {
            match v {
                &PerXdsConfig_oneof_per_xds_config::listener_config(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &PerXdsConfig_oneof_per_xds_config::cluster_config(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &PerXdsConfig_oneof_per_xds_config::route_config(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &PerXdsConfig_oneof_per_xds_config::scoped_route_config(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PerXdsConfig {
        PerXdsConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ConfigStatus>>(
                "status",
                |m: &PerXdsConfig| { &m.status },
                |m: &mut PerXdsConfig| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::config_dump::ListenersConfigDump>(
                "listener_config",
                PerXdsConfig::has_listener_config,
                PerXdsConfig::get_listener_config,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::config_dump::ClustersConfigDump>(
                "cluster_config",
                PerXdsConfig::has_cluster_config,
                PerXdsConfig::get_cluster_config,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::config_dump::RoutesConfigDump>(
                "route_config",
                PerXdsConfig::has_route_config,
                PerXdsConfig::get_route_config,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::config_dump::ScopedRoutesConfigDump>(
                "scoped_route_config",
                PerXdsConfig::has_scoped_route_config,
                PerXdsConfig::get_scoped_route_config,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PerXdsConfig>(
                "PerXdsConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PerXdsConfig {
        static instance: ::protobuf::rt::LazyV2<PerXdsConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PerXdsConfig::new)
    }
}

impl ::protobuf::Clear for PerXdsConfig {
    fn clear(&mut self) {
        self.status = ConfigStatus::UNKNOWN;
        self.per_xds_config = ::std::option::Option::None;
        self.per_xds_config = ::std::option::Option::None;
        self.per_xds_config = ::std::option::Option::None;
        self.per_xds_config = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PerXdsConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PerXdsConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientConfig {
    // message fields
    pub node: ::protobuf::SingularPtrField<super::base::Node>,
    pub xds_config: ::protobuf::RepeatedField<PerXdsConfig>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientConfig {
    fn default() -> &'a ClientConfig {
        <ClientConfig as ::protobuf::Message>::default_instance()
    }
}

impl ClientConfig {
    pub fn new() -> ClientConfig {
        ::std::default::Default::default()
    }

    // .envoy.api.v2.core.Node node = 1;


    pub fn get_node(&self) -> &super::base::Node {
        self.node.as_ref().unwrap_or_else(|| <super::base::Node as ::protobuf::Message>::default_instance())
    }
    pub fn clear_node(&mut self) {
        self.node.clear();
    }

    pub fn has_node(&self) -> bool {
        self.node.is_some()
    }

    // Param is passed by value, moved
    pub fn set_node(&mut self, v: super::base::Node) {
        self.node = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_node(&mut self) -> &mut super::base::Node {
        if self.node.is_none() {
            self.node.set_default();
        }
        self.node.as_mut().unwrap()
    }

    // Take field
    pub fn take_node(&mut self) -> super::base::Node {
        self.node.take().unwrap_or_else(|| super::base::Node::new())
    }

    // repeated .envoy.service.status.v2.PerXdsConfig xds_config = 2;


    pub fn get_xds_config(&self) -> &[PerXdsConfig] {
        &self.xds_config
    }
    pub fn clear_xds_config(&mut self) {
        self.xds_config.clear();
    }

    // Param is passed by value, moved
    pub fn set_xds_config(&mut self, v: ::protobuf::RepeatedField<PerXdsConfig>) {
        self.xds_config = v;
    }

    // Mutable pointer to the field.
    pub fn mut_xds_config(&mut self) -> &mut ::protobuf::RepeatedField<PerXdsConfig> {
        &mut self.xds_config
    }

    // Take field
    pub fn take_xds_config(&mut self) -> ::protobuf::RepeatedField<PerXdsConfig> {
        ::std::mem::replace(&mut self.xds_config, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ClientConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.node {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.xds_config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.node)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.xds_config)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.node.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.xds_config {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.node.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.xds_config {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientConfig {
        ClientConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Node>>(
                "node",
                |m: &ClientConfig| { &m.node },
                |m: &mut ClientConfig| { &mut m.node },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PerXdsConfig>>(
                "xds_config",
                |m: &ClientConfig| { &m.xds_config },
                |m: &mut ClientConfig| { &mut m.xds_config },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientConfig>(
                "ClientConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientConfig {
        static instance: ::protobuf::rt::LazyV2<ClientConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientConfig::new)
    }
}

impl ::protobuf::Clear for ClientConfig {
    fn clear(&mut self) {
        self.node.clear();
        self.xds_config.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientStatusResponse {
    // message fields
    pub config: ::protobuf::RepeatedField<ClientConfig>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientStatusResponse {
    fn default() -> &'a ClientStatusResponse {
        <ClientStatusResponse as ::protobuf::Message>::default_instance()
    }
}

impl ClientStatusResponse {
    pub fn new() -> ClientStatusResponse {
        ::std::default::Default::default()
    }

    // repeated .envoy.service.status.v2.ClientConfig config = 1;


    pub fn get_config(&self) -> &[ClientConfig] {
        &self.config
    }
    pub fn clear_config(&mut self) {
        self.config.clear();
    }

    // Param is passed by value, moved
    pub fn set_config(&mut self, v: ::protobuf::RepeatedField<ClientConfig>) {
        self.config = v;
    }

    // Mutable pointer to the field.
    pub fn mut_config(&mut self) -> &mut ::protobuf::RepeatedField<ClientConfig> {
        &mut self.config
    }

    // Take field
    pub fn take_config(&mut self) -> ::protobuf::RepeatedField<ClientConfig> {
        ::std::mem::replace(&mut self.config, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ClientStatusResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.config)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.config {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.config {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientStatusResponse {
        ClientStatusResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ClientConfig>>(
                "config",
                |m: &ClientStatusResponse| { &m.config },
                |m: &mut ClientStatusResponse| { &mut m.config },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientStatusResponse>(
                "ClientStatusResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientStatusResponse {
        static instance: ::protobuf::rt::LazyV2<ClientStatusResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientStatusResponse::new)
    }
}

impl ::protobuf::Clear for ClientStatusResponse {
    fn clear(&mut self) {
        self.config.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientStatusResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientStatusResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ConfigStatus {
    UNKNOWN = 0,
    SYNCED = 1,
    NOT_SENT = 2,
    STALE = 3,
    ERROR = 4,
}

impl ::protobuf::ProtobufEnum for ConfigStatus {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ConfigStatus> {
        match value {
            0 => ::std::option::Option::Some(ConfigStatus::UNKNOWN),
            1 => ::std::option::Option::Some(ConfigStatus::SYNCED),
            2 => ::std::option::Option::Some(ConfigStatus::NOT_SENT),
            3 => ::std::option::Option::Some(ConfigStatus::STALE),
            4 => ::std::option::Option::Some(ConfigStatus::ERROR),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ConfigStatus] = &[
            ConfigStatus::UNKNOWN,
            ConfigStatus::SYNCED,
            ConfigStatus::NOT_SENT,
            ConfigStatus::STALE,
            ConfigStatus::ERROR,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ConfigStatus>("ConfigStatus", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ConfigStatus {
}

impl ::std::default::Default for ConfigStatus {
    fn default() -> Self {
        ConfigStatus::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for ConfigStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\"envoy/service/status/v2/csds.proto\x12\x17envoy.service.status.v2\
    \x1a%envoy/admin/v2alpha/config_dump.proto\x1a\x1cenvoy/api/v2/core/base\
    .proto\x1a\x1denvoy/type/matcher/node.proto\x1a\x1cgoogle/api/annotation\
    s.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1dudpa/annotations/stat\
    us.proto\"[\n\x13ClientStatusRequest\x12D\n\rnode_matchers\x18\x01\x20\
    \x03(\x0b2\x1f.envoy.type.matcher.NodeMatcherR\x0cnodeMatchers\"\xb1\x03\
    \n\x0cPerXdsConfig\x12=\n\x06status\x18\x01\x20\x01(\x0e2%.envoy.service\
    .status.v2.ConfigStatusR\x06status\x12S\n\x0flistener_config\x18\x02\x20\
    \x01(\x0b2(.envoy.admin.v2alpha.ListenersConfigDumpH\0R\x0elistenerConfi\
    g\x12P\n\x0ecluster_config\x18\x03\x20\x01(\x0b2'.envoy.admin.v2alpha.Cl\
    ustersConfigDumpH\0R\rclusterConfig\x12J\n\x0croute_config\x18\x04\x20\
    \x01(\x0b2%.envoy.admin.v2alpha.RoutesConfigDumpH\0R\x0brouteConfig\x12]\
    \n\x13scoped_route_config\x18\x05\x20\x01(\x0b2+.envoy.admin.v2alpha.Sco\
    pedRoutesConfigDumpH\0R\x11scopedRouteConfigB\x10\n\x0eper_xds_config\"\
    \x81\x01\n\x0cClientConfig\x12+\n\x04node\x18\x01\x20\x01(\x0b2\x17.envo\
    y.api.v2.core.NodeR\x04node\x12D\n\nxds_config\x18\x02\x20\x03(\x0b2%.en\
    voy.service.status.v2.PerXdsConfigR\txdsConfig\"U\n\x14ClientStatusRespo\
    nse\x12=\n\x06config\x18\x01\x20\x03(\x0b2%.envoy.service.status.v2.Clie\
    ntConfigR\x06config*K\n\x0cConfigStatus\x12\x0b\n\x07UNKNOWN\x10\0\x12\n\
    \n\x06SYNCED\x10\x01\x12\x0c\n\x08NOT_SENT\x10\x02\x12\t\n\x05STALE\x10\
    \x03\x12\t\n\x05ERROR\x10\x042\xb8\x02\n\x1cClientStatusDiscoveryService\
    \x12w\n\x12StreamClientStatus\x12,.envoy.service.status.v2.ClientStatusR\
    equest\x1a-.envoy.service.status.v2.ClientStatusResponse\"\0(\x010\x01\
    \x12\x9e\x01\n\x11FetchClientStatus\x12,.envoy.service.status.v2.ClientS\
    tatusRequest\x1a-.envoy.service.status.v2.ClientStatusResponse\",\x82\
    \xd3\xe4\x93\x02\x1d\"\x1b/v2/discovery:client_status\x82\xd3\xe4\x93\
    \x02\x03:\x01*B?\n%io.envoyproxy.envoy.service.status.v2B\tCsdsProtoP\
    \x01\x88\x01\x01\xba\x80\xc8\xd1\x06\x02\x10\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
