// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/api/v2/rds.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct RdsDummy {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RdsDummy {
    fn default() -> &'a RdsDummy {
        <RdsDummy as ::protobuf::Message>::default_instance()
    }
}

impl RdsDummy {
    pub fn new() -> RdsDummy {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for RdsDummy {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RdsDummy {
        RdsDummy::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RdsDummy>(
                "RdsDummy",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RdsDummy {
        static instance: ::protobuf::rt::LazyV2<RdsDummy> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RdsDummy::new)
    }
}

impl ::protobuf::Clear for RdsDummy {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RdsDummy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RdsDummy {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x16envoy/api/v2/rds.proto\x12\x0cenvoy.api.v2\x1a\x1cenvoy/api/v2/dis\
    covery.proto\x1a\x1cgoogle/api/annotations.proto\x1a\x1egoogle/protobuf/\
    wrappers.proto\x1a\x20envoy/annotations/resource.proto\x1a\x1eudpa/annot\
    ations/migrate.proto\x1a\x1dudpa/annotations/status.proto\x1a\x17validat\
    e/validate.proto\x1a\x18envoy/api/v2/route.protoP\x07\"\n\n\x08RdsDummy2\
    \xee\x02\n\x15RouteDiscoveryService\x12U\n\x0cStreamRoutes\x12\x1e.envoy\
    .api.v2.DiscoveryRequest\x1a\x1f.envoy.api.v2.DiscoveryResponse\"\0(\x01\
    0\x01\x12^\n\x0bDeltaRoutes\x12#.envoy.api.v2.DeltaDiscoveryRequest\x1a$\
    .envoy.api.v2.DeltaDiscoveryResponse\"\0(\x010\x01\x12u\n\x0bFetchRoutes\
    \x12\x1e.envoy.api.v2.DiscoveryRequest\x1a\x1f.envoy.api.v2.DiscoveryRes\
    ponse\"%\x82\xd3\xe4\x93\x02\x16\"\x14/v2/discovery:routes\x82\xd3\xe4\
    \x93\x02\x03:\x01*\x1a'\x8a\xa4\x96\xf3\x07!\n\x1fenvoy.api.v2.RouteConf\
    iguration2\xab\x01\n\x1bVirtualHostDiscoveryService\x12d\n\x11DeltaVirtu\
    alHosts\x12#.envoy.api.v2.DeltaDiscoveryRequest\x1a$.envoy.api.v2.DeltaD\
    iscoveryResponse\"\0(\x010\x01\x1a&\x8a\xa4\x96\xf3\x07\x20\n\x1eenvoy.a\
    pi.v2.route.VirtualHostBQ\n\x1aio.envoyproxy.envoy.api.v2B\x08RdsProtoP\
    \x01\x88\x01\x01\xf2\x98\xfe\x8f\x05\x18\x12\x16envoy.service.route.v3\
    \xba\x80\xc8\xd1\x06\x02\x10\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
