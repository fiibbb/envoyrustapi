// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/api/v2/auth/common.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct TlsParameters {
    // message fields
    pub tls_minimum_protocol_version: TlsParameters_TlsProtocol,
    pub tls_maximum_protocol_version: TlsParameters_TlsProtocol,
    pub cipher_suites: ::protobuf::RepeatedField<::std::string::String>,
    pub ecdh_curves: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TlsParameters {
    fn default() -> &'a TlsParameters {
        <TlsParameters as ::protobuf::Message>::default_instance()
    }
}

impl TlsParameters {
    pub fn new() -> TlsParameters {
        ::std::default::Default::default()
    }

    // .envoy.api.v2.auth.TlsParameters.TlsProtocol tls_minimum_protocol_version = 1;


    pub fn get_tls_minimum_protocol_version(&self) -> TlsParameters_TlsProtocol {
        self.tls_minimum_protocol_version
    }
    pub fn clear_tls_minimum_protocol_version(&mut self) {
        self.tls_minimum_protocol_version = TlsParameters_TlsProtocol::TLS_AUTO;
    }

    // Param is passed by value, moved
    pub fn set_tls_minimum_protocol_version(&mut self, v: TlsParameters_TlsProtocol) {
        self.tls_minimum_protocol_version = v;
    }

    // .envoy.api.v2.auth.TlsParameters.TlsProtocol tls_maximum_protocol_version = 2;


    pub fn get_tls_maximum_protocol_version(&self) -> TlsParameters_TlsProtocol {
        self.tls_maximum_protocol_version
    }
    pub fn clear_tls_maximum_protocol_version(&mut self) {
        self.tls_maximum_protocol_version = TlsParameters_TlsProtocol::TLS_AUTO;
    }

    // Param is passed by value, moved
    pub fn set_tls_maximum_protocol_version(&mut self, v: TlsParameters_TlsProtocol) {
        self.tls_maximum_protocol_version = v;
    }

    // repeated string cipher_suites = 3;


    pub fn get_cipher_suites(&self) -> &[::std::string::String] {
        &self.cipher_suites
    }
    pub fn clear_cipher_suites(&mut self) {
        self.cipher_suites.clear();
    }

    // Param is passed by value, moved
    pub fn set_cipher_suites(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.cipher_suites = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cipher_suites(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.cipher_suites
    }

    // Take field
    pub fn take_cipher_suites(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.cipher_suites, ::protobuf::RepeatedField::new())
    }

    // repeated string ecdh_curves = 4;


    pub fn get_ecdh_curves(&self) -> &[::std::string::String] {
        &self.ecdh_curves
    }
    pub fn clear_ecdh_curves(&mut self) {
        self.ecdh_curves.clear();
    }

    // Param is passed by value, moved
    pub fn set_ecdh_curves(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.ecdh_curves = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ecdh_curves(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.ecdh_curves
    }

    // Take field
    pub fn take_ecdh_curves(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.ecdh_curves, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TlsParameters {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.tls_minimum_protocol_version, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.tls_maximum_protocol_version, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.cipher_suites)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.ecdh_curves)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.tls_minimum_protocol_version != TlsParameters_TlsProtocol::TLS_AUTO {
            my_size += ::protobuf::rt::enum_size(1, self.tls_minimum_protocol_version);
        }
        if self.tls_maximum_protocol_version != TlsParameters_TlsProtocol::TLS_AUTO {
            my_size += ::protobuf::rt::enum_size(2, self.tls_maximum_protocol_version);
        }
        for value in &self.cipher_suites {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        for value in &self.ecdh_curves {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.tls_minimum_protocol_version != TlsParameters_TlsProtocol::TLS_AUTO {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.tls_minimum_protocol_version))?;
        }
        if self.tls_maximum_protocol_version != TlsParameters_TlsProtocol::TLS_AUTO {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.tls_maximum_protocol_version))?;
        }
        for v in &self.cipher_suites {
            os.write_string(3, &v)?;
        };
        for v in &self.ecdh_curves {
            os.write_string(4, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TlsParameters {
        TlsParameters::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TlsParameters_TlsProtocol>>(
                "tls_minimum_protocol_version",
                |m: &TlsParameters| { &m.tls_minimum_protocol_version },
                |m: &mut TlsParameters| { &mut m.tls_minimum_protocol_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TlsParameters_TlsProtocol>>(
                "tls_maximum_protocol_version",
                |m: &TlsParameters| { &m.tls_maximum_protocol_version },
                |m: &mut TlsParameters| { &mut m.tls_maximum_protocol_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cipher_suites",
                |m: &TlsParameters| { &m.cipher_suites },
                |m: &mut TlsParameters| { &mut m.cipher_suites },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "ecdh_curves",
                |m: &TlsParameters| { &m.ecdh_curves },
                |m: &mut TlsParameters| { &mut m.ecdh_curves },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TlsParameters>(
                "TlsParameters",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TlsParameters {
        static instance: ::protobuf::rt::LazyV2<TlsParameters> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TlsParameters::new)
    }
}

impl ::protobuf::Clear for TlsParameters {
    fn clear(&mut self) {
        self.tls_minimum_protocol_version = TlsParameters_TlsProtocol::TLS_AUTO;
        self.tls_maximum_protocol_version = TlsParameters_TlsProtocol::TLS_AUTO;
        self.cipher_suites.clear();
        self.ecdh_curves.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TlsParameters {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TlsParameters {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TlsParameters_TlsProtocol {
    TLS_AUTO = 0,
    TLSv1_0 = 1,
    TLSv1_1 = 2,
    TLSv1_2 = 3,
    TLSv1_3 = 4,
}

impl ::protobuf::ProtobufEnum for TlsParameters_TlsProtocol {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TlsParameters_TlsProtocol> {
        match value {
            0 => ::std::option::Option::Some(TlsParameters_TlsProtocol::TLS_AUTO),
            1 => ::std::option::Option::Some(TlsParameters_TlsProtocol::TLSv1_0),
            2 => ::std::option::Option::Some(TlsParameters_TlsProtocol::TLSv1_1),
            3 => ::std::option::Option::Some(TlsParameters_TlsProtocol::TLSv1_2),
            4 => ::std::option::Option::Some(TlsParameters_TlsProtocol::TLSv1_3),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TlsParameters_TlsProtocol] = &[
            TlsParameters_TlsProtocol::TLS_AUTO,
            TlsParameters_TlsProtocol::TLSv1_0,
            TlsParameters_TlsProtocol::TLSv1_1,
            TlsParameters_TlsProtocol::TLSv1_2,
            TlsParameters_TlsProtocol::TLSv1_3,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<TlsParameters_TlsProtocol>("TlsParameters.TlsProtocol", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for TlsParameters_TlsProtocol {
}

impl ::std::default::Default for TlsParameters_TlsProtocol {
    fn default() -> Self {
        TlsParameters_TlsProtocol::TLS_AUTO
    }
}

impl ::protobuf::reflect::ProtobufValue for TlsParameters_TlsProtocol {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PrivateKeyProvider {
    // message fields
    pub provider_name: ::std::string::String,
    // message oneof groups
    pub config_type: ::std::option::Option<PrivateKeyProvider_oneof_config_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PrivateKeyProvider {
    fn default() -> &'a PrivateKeyProvider {
        <PrivateKeyProvider as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum PrivateKeyProvider_oneof_config_type {
    config(::protobuf::well_known_types::Struct),
    typed_config(::protobuf::well_known_types::Any),
}

impl PrivateKeyProvider {
    pub fn new() -> PrivateKeyProvider {
        ::std::default::Default::default()
    }

    // string provider_name = 1;


    pub fn get_provider_name(&self) -> &str {
        &self.provider_name
    }
    pub fn clear_provider_name(&mut self) {
        self.provider_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_provider_name(&mut self, v: ::std::string::String) {
        self.provider_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_provider_name(&mut self) -> &mut ::std::string::String {
        &mut self.provider_name
    }

    // Take field
    pub fn take_provider_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.provider_name, ::std::string::String::new())
    }

    // .google.protobuf.Struct config = 2;


    pub fn get_config(&self) -> &::protobuf::well_known_types::Struct {
        match self.config_type {
            ::std::option::Option::Some(PrivateKeyProvider_oneof_config_type::config(ref v)) => v,
            _ => <::protobuf::well_known_types::Struct as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_config(&mut self) {
        self.config_type = ::std::option::Option::None;
    }

    pub fn has_config(&self) -> bool {
        match self.config_type {
            ::std::option::Option::Some(PrivateKeyProvider_oneof_config_type::config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_config(&mut self, v: ::protobuf::well_known_types::Struct) {
        self.config_type = ::std::option::Option::Some(PrivateKeyProvider_oneof_config_type::config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_config(&mut self) -> &mut ::protobuf::well_known_types::Struct {
        if let ::std::option::Option::Some(PrivateKeyProvider_oneof_config_type::config(_)) = self.config_type {
        } else {
            self.config_type = ::std::option::Option::Some(PrivateKeyProvider_oneof_config_type::config(::protobuf::well_known_types::Struct::new()));
        }
        match self.config_type {
            ::std::option::Option::Some(PrivateKeyProvider_oneof_config_type::config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_config(&mut self) -> ::protobuf::well_known_types::Struct {
        if self.has_config() {
            match self.config_type.take() {
                ::std::option::Option::Some(PrivateKeyProvider_oneof_config_type::config(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Struct::new()
        }
    }

    // .google.protobuf.Any typed_config = 3;


    pub fn get_typed_config(&self) -> &::protobuf::well_known_types::Any {
        match self.config_type {
            ::std::option::Option::Some(PrivateKeyProvider_oneof_config_type::typed_config(ref v)) => v,
            _ => <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_typed_config(&mut self) {
        self.config_type = ::std::option::Option::None;
    }

    pub fn has_typed_config(&self) -> bool {
        match self.config_type {
            ::std::option::Option::Some(PrivateKeyProvider_oneof_config_type::typed_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_typed_config(&mut self, v: ::protobuf::well_known_types::Any) {
        self.config_type = ::std::option::Option::Some(PrivateKeyProvider_oneof_config_type::typed_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_typed_config(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if let ::std::option::Option::Some(PrivateKeyProvider_oneof_config_type::typed_config(_)) = self.config_type {
        } else {
            self.config_type = ::std::option::Option::Some(PrivateKeyProvider_oneof_config_type::typed_config(::protobuf::well_known_types::Any::new()));
        }
        match self.config_type {
            ::std::option::Option::Some(PrivateKeyProvider_oneof_config_type::typed_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_typed_config(&mut self) -> ::protobuf::well_known_types::Any {
        if self.has_typed_config() {
            match self.config_type.take() {
                ::std::option::Option::Some(PrivateKeyProvider_oneof_config_type::typed_config(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Any::new()
        }
    }
}

impl ::protobuf::Message for PrivateKeyProvider {
    fn is_initialized(&self) -> bool {
        if let Some(PrivateKeyProvider_oneof_config_type::config(ref v)) = self.config_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(PrivateKeyProvider_oneof_config_type::typed_config(ref v)) = self.config_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.provider_name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config_type = ::std::option::Option::Some(PrivateKeyProvider_oneof_config_type::config(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config_type = ::std::option::Option::Some(PrivateKeyProvider_oneof_config_type::typed_config(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.provider_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.provider_name);
        }
        if let ::std::option::Option::Some(ref v) = self.config_type {
            match v {
                &PrivateKeyProvider_oneof_config_type::config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &PrivateKeyProvider_oneof_config_type::typed_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.provider_name.is_empty() {
            os.write_string(1, &self.provider_name)?;
        }
        if let ::std::option::Option::Some(ref v) = self.config_type {
            match v {
                &PrivateKeyProvider_oneof_config_type::config(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &PrivateKeyProvider_oneof_config_type::typed_config(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PrivateKeyProvider {
        PrivateKeyProvider::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "provider_name",
                |m: &PrivateKeyProvider| { &m.provider_name },
                |m: &mut PrivateKeyProvider| { &mut m.provider_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Struct>(
                "config",
                PrivateKeyProvider::has_config,
                PrivateKeyProvider::get_config,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Any>(
                "typed_config",
                PrivateKeyProvider::has_typed_config,
                PrivateKeyProvider::get_typed_config,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PrivateKeyProvider>(
                "PrivateKeyProvider",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PrivateKeyProvider {
        static instance: ::protobuf::rt::LazyV2<PrivateKeyProvider> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PrivateKeyProvider::new)
    }
}

impl ::protobuf::Clear for PrivateKeyProvider {
    fn clear(&mut self) {
        self.provider_name.clear();
        self.config_type = ::std::option::Option::None;
        self.config_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PrivateKeyProvider {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PrivateKeyProvider {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TlsCertificate {
    // message fields
    pub certificate_chain: ::protobuf::SingularPtrField<super::base::DataSource>,
    pub private_key: ::protobuf::SingularPtrField<super::base::DataSource>,
    pub private_key_provider: ::protobuf::SingularPtrField<PrivateKeyProvider>,
    pub password: ::protobuf::SingularPtrField<super::base::DataSource>,
    pub ocsp_staple: ::protobuf::SingularPtrField<super::base::DataSource>,
    pub signed_certificate_timestamp: ::protobuf::RepeatedField<super::base::DataSource>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TlsCertificate {
    fn default() -> &'a TlsCertificate {
        <TlsCertificate as ::protobuf::Message>::default_instance()
    }
}

impl TlsCertificate {
    pub fn new() -> TlsCertificate {
        ::std::default::Default::default()
    }

    // .envoy.api.v2.core.DataSource certificate_chain = 1;


    pub fn get_certificate_chain(&self) -> &super::base::DataSource {
        self.certificate_chain.as_ref().unwrap_or_else(|| <super::base::DataSource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_certificate_chain(&mut self) {
        self.certificate_chain.clear();
    }

    pub fn has_certificate_chain(&self) -> bool {
        self.certificate_chain.is_some()
    }

    // Param is passed by value, moved
    pub fn set_certificate_chain(&mut self, v: super::base::DataSource) {
        self.certificate_chain = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_certificate_chain(&mut self) -> &mut super::base::DataSource {
        if self.certificate_chain.is_none() {
            self.certificate_chain.set_default();
        }
        self.certificate_chain.as_mut().unwrap()
    }

    // Take field
    pub fn take_certificate_chain(&mut self) -> super::base::DataSource {
        self.certificate_chain.take().unwrap_or_else(|| super::base::DataSource::new())
    }

    // .envoy.api.v2.core.DataSource private_key = 2;


    pub fn get_private_key(&self) -> &super::base::DataSource {
        self.private_key.as_ref().unwrap_or_else(|| <super::base::DataSource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_private_key(&mut self) {
        self.private_key.clear();
    }

    pub fn has_private_key(&self) -> bool {
        self.private_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_private_key(&mut self, v: super::base::DataSource) {
        self.private_key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_private_key(&mut self) -> &mut super::base::DataSource {
        if self.private_key.is_none() {
            self.private_key.set_default();
        }
        self.private_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_private_key(&mut self) -> super::base::DataSource {
        self.private_key.take().unwrap_or_else(|| super::base::DataSource::new())
    }

    // .envoy.api.v2.auth.PrivateKeyProvider private_key_provider = 6;


    pub fn get_private_key_provider(&self) -> &PrivateKeyProvider {
        self.private_key_provider.as_ref().unwrap_or_else(|| <PrivateKeyProvider as ::protobuf::Message>::default_instance())
    }
    pub fn clear_private_key_provider(&mut self) {
        self.private_key_provider.clear();
    }

    pub fn has_private_key_provider(&self) -> bool {
        self.private_key_provider.is_some()
    }

    // Param is passed by value, moved
    pub fn set_private_key_provider(&mut self, v: PrivateKeyProvider) {
        self.private_key_provider = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_private_key_provider(&mut self) -> &mut PrivateKeyProvider {
        if self.private_key_provider.is_none() {
            self.private_key_provider.set_default();
        }
        self.private_key_provider.as_mut().unwrap()
    }

    // Take field
    pub fn take_private_key_provider(&mut self) -> PrivateKeyProvider {
        self.private_key_provider.take().unwrap_or_else(|| PrivateKeyProvider::new())
    }

    // .envoy.api.v2.core.DataSource password = 3;


    pub fn get_password(&self) -> &super::base::DataSource {
        self.password.as_ref().unwrap_or_else(|| <super::base::DataSource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_password(&mut self) {
        self.password.clear();
    }

    pub fn has_password(&self) -> bool {
        self.password.is_some()
    }

    // Param is passed by value, moved
    pub fn set_password(&mut self, v: super::base::DataSource) {
        self.password = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_password(&mut self) -> &mut super::base::DataSource {
        if self.password.is_none() {
            self.password.set_default();
        }
        self.password.as_mut().unwrap()
    }

    // Take field
    pub fn take_password(&mut self) -> super::base::DataSource {
        self.password.take().unwrap_or_else(|| super::base::DataSource::new())
    }

    // .envoy.api.v2.core.DataSource ocsp_staple = 4;


    pub fn get_ocsp_staple(&self) -> &super::base::DataSource {
        self.ocsp_staple.as_ref().unwrap_or_else(|| <super::base::DataSource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ocsp_staple(&mut self) {
        self.ocsp_staple.clear();
    }

    pub fn has_ocsp_staple(&self) -> bool {
        self.ocsp_staple.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ocsp_staple(&mut self, v: super::base::DataSource) {
        self.ocsp_staple = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ocsp_staple(&mut self) -> &mut super::base::DataSource {
        if self.ocsp_staple.is_none() {
            self.ocsp_staple.set_default();
        }
        self.ocsp_staple.as_mut().unwrap()
    }

    // Take field
    pub fn take_ocsp_staple(&mut self) -> super::base::DataSource {
        self.ocsp_staple.take().unwrap_or_else(|| super::base::DataSource::new())
    }

    // repeated .envoy.api.v2.core.DataSource signed_certificate_timestamp = 5;


    pub fn get_signed_certificate_timestamp(&self) -> &[super::base::DataSource] {
        &self.signed_certificate_timestamp
    }
    pub fn clear_signed_certificate_timestamp(&mut self) {
        self.signed_certificate_timestamp.clear();
    }

    // Param is passed by value, moved
    pub fn set_signed_certificate_timestamp(&mut self, v: ::protobuf::RepeatedField<super::base::DataSource>) {
        self.signed_certificate_timestamp = v;
    }

    // Mutable pointer to the field.
    pub fn mut_signed_certificate_timestamp(&mut self) -> &mut ::protobuf::RepeatedField<super::base::DataSource> {
        &mut self.signed_certificate_timestamp
    }

    // Take field
    pub fn take_signed_certificate_timestamp(&mut self) -> ::protobuf::RepeatedField<super::base::DataSource> {
        ::std::mem::replace(&mut self.signed_certificate_timestamp, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TlsCertificate {
    fn is_initialized(&self) -> bool {
        for v in &self.certificate_chain {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.private_key {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.private_key_provider {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.password {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.ocsp_staple {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.signed_certificate_timestamp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.certificate_chain)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.private_key)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.private_key_provider)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.password)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ocsp_staple)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.signed_certificate_timestamp)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.certificate_chain.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.private_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.private_key_provider.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.password.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.ocsp_staple.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.signed_certificate_timestamp {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.certificate_chain.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.private_key.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.private_key_provider.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.password.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.ocsp_staple.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.signed_certificate_timestamp {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TlsCertificate {
        TlsCertificate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::DataSource>>(
                "certificate_chain",
                |m: &TlsCertificate| { &m.certificate_chain },
                |m: &mut TlsCertificate| { &mut m.certificate_chain },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::DataSource>>(
                "private_key",
                |m: &TlsCertificate| { &m.private_key },
                |m: &mut TlsCertificate| { &mut m.private_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PrivateKeyProvider>>(
                "private_key_provider",
                |m: &TlsCertificate| { &m.private_key_provider },
                |m: &mut TlsCertificate| { &mut m.private_key_provider },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::DataSource>>(
                "password",
                |m: &TlsCertificate| { &m.password },
                |m: &mut TlsCertificate| { &mut m.password },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::DataSource>>(
                "ocsp_staple",
                |m: &TlsCertificate| { &m.ocsp_staple },
                |m: &mut TlsCertificate| { &mut m.ocsp_staple },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::DataSource>>(
                "signed_certificate_timestamp",
                |m: &TlsCertificate| { &m.signed_certificate_timestamp },
                |m: &mut TlsCertificate| { &mut m.signed_certificate_timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TlsCertificate>(
                "TlsCertificate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TlsCertificate {
        static instance: ::protobuf::rt::LazyV2<TlsCertificate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TlsCertificate::new)
    }
}

impl ::protobuf::Clear for TlsCertificate {
    fn clear(&mut self) {
        self.certificate_chain.clear();
        self.private_key.clear();
        self.private_key_provider.clear();
        self.password.clear();
        self.ocsp_staple.clear();
        self.signed_certificate_timestamp.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TlsCertificate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TlsCertificate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TlsSessionTicketKeys {
    // message fields
    pub keys: ::protobuf::RepeatedField<super::base::DataSource>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TlsSessionTicketKeys {
    fn default() -> &'a TlsSessionTicketKeys {
        <TlsSessionTicketKeys as ::protobuf::Message>::default_instance()
    }
}

impl TlsSessionTicketKeys {
    pub fn new() -> TlsSessionTicketKeys {
        ::std::default::Default::default()
    }

    // repeated .envoy.api.v2.core.DataSource keys = 1;


    pub fn get_keys(&self) -> &[super::base::DataSource] {
        &self.keys
    }
    pub fn clear_keys(&mut self) {
        self.keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_keys(&mut self, v: ::protobuf::RepeatedField<super::base::DataSource>) {
        self.keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_keys(&mut self) -> &mut ::protobuf::RepeatedField<super::base::DataSource> {
        &mut self.keys
    }

    // Take field
    pub fn take_keys(&mut self) -> ::protobuf::RepeatedField<super::base::DataSource> {
        ::std::mem::replace(&mut self.keys, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TlsSessionTicketKeys {
    fn is_initialized(&self) -> bool {
        for v in &self.keys {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.keys)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.keys {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.keys {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TlsSessionTicketKeys {
        TlsSessionTicketKeys::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::DataSource>>(
                "keys",
                |m: &TlsSessionTicketKeys| { &m.keys },
                |m: &mut TlsSessionTicketKeys| { &mut m.keys },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TlsSessionTicketKeys>(
                "TlsSessionTicketKeys",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TlsSessionTicketKeys {
        static instance: ::protobuf::rt::LazyV2<TlsSessionTicketKeys> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TlsSessionTicketKeys::new)
    }
}

impl ::protobuf::Clear for TlsSessionTicketKeys {
    fn clear(&mut self) {
        self.keys.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TlsSessionTicketKeys {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TlsSessionTicketKeys {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CertificateValidationContext {
    // message fields
    pub trusted_ca: ::protobuf::SingularPtrField<super::base::DataSource>,
    pub verify_certificate_spki: ::protobuf::RepeatedField<::std::string::String>,
    pub verify_certificate_hash: ::protobuf::RepeatedField<::std::string::String>,
    pub verify_subject_alt_name: ::protobuf::RepeatedField<::std::string::String>,
    pub match_subject_alt_names: ::protobuf::RepeatedField<super::string::StringMatcher>,
    pub require_ocsp_staple: ::protobuf::SingularPtrField<::protobuf::well_known_types::BoolValue>,
    pub require_signed_certificate_timestamp: ::protobuf::SingularPtrField<::protobuf::well_known_types::BoolValue>,
    pub crl: ::protobuf::SingularPtrField<super::base::DataSource>,
    pub allow_expired_certificate: bool,
    pub trust_chain_verification: CertificateValidationContext_TrustChainVerification,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CertificateValidationContext {
    fn default() -> &'a CertificateValidationContext {
        <CertificateValidationContext as ::protobuf::Message>::default_instance()
    }
}

impl CertificateValidationContext {
    pub fn new() -> CertificateValidationContext {
        ::std::default::Default::default()
    }

    // .envoy.api.v2.core.DataSource trusted_ca = 1;


    pub fn get_trusted_ca(&self) -> &super::base::DataSource {
        self.trusted_ca.as_ref().unwrap_or_else(|| <super::base::DataSource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_trusted_ca(&mut self) {
        self.trusted_ca.clear();
    }

    pub fn has_trusted_ca(&self) -> bool {
        self.trusted_ca.is_some()
    }

    // Param is passed by value, moved
    pub fn set_trusted_ca(&mut self, v: super::base::DataSource) {
        self.trusted_ca = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trusted_ca(&mut self) -> &mut super::base::DataSource {
        if self.trusted_ca.is_none() {
            self.trusted_ca.set_default();
        }
        self.trusted_ca.as_mut().unwrap()
    }

    // Take field
    pub fn take_trusted_ca(&mut self) -> super::base::DataSource {
        self.trusted_ca.take().unwrap_or_else(|| super::base::DataSource::new())
    }

    // repeated string verify_certificate_spki = 3;


    pub fn get_verify_certificate_spki(&self) -> &[::std::string::String] {
        &self.verify_certificate_spki
    }
    pub fn clear_verify_certificate_spki(&mut self) {
        self.verify_certificate_spki.clear();
    }

    // Param is passed by value, moved
    pub fn set_verify_certificate_spki(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.verify_certificate_spki = v;
    }

    // Mutable pointer to the field.
    pub fn mut_verify_certificate_spki(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.verify_certificate_spki
    }

    // Take field
    pub fn take_verify_certificate_spki(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.verify_certificate_spki, ::protobuf::RepeatedField::new())
    }

    // repeated string verify_certificate_hash = 2;


    pub fn get_verify_certificate_hash(&self) -> &[::std::string::String] {
        &self.verify_certificate_hash
    }
    pub fn clear_verify_certificate_hash(&mut self) {
        self.verify_certificate_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_verify_certificate_hash(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.verify_certificate_hash = v;
    }

    // Mutable pointer to the field.
    pub fn mut_verify_certificate_hash(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.verify_certificate_hash
    }

    // Take field
    pub fn take_verify_certificate_hash(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.verify_certificate_hash, ::protobuf::RepeatedField::new())
    }

    // repeated string verify_subject_alt_name = 4;


    pub fn get_verify_subject_alt_name(&self) -> &[::std::string::String] {
        &self.verify_subject_alt_name
    }
    pub fn clear_verify_subject_alt_name(&mut self) {
        self.verify_subject_alt_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_verify_subject_alt_name(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.verify_subject_alt_name = v;
    }

    // Mutable pointer to the field.
    pub fn mut_verify_subject_alt_name(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.verify_subject_alt_name
    }

    // Take field
    pub fn take_verify_subject_alt_name(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.verify_subject_alt_name, ::protobuf::RepeatedField::new())
    }

    // repeated .envoy.type.matcher.StringMatcher match_subject_alt_names = 9;


    pub fn get_match_subject_alt_names(&self) -> &[super::string::StringMatcher] {
        &self.match_subject_alt_names
    }
    pub fn clear_match_subject_alt_names(&mut self) {
        self.match_subject_alt_names.clear();
    }

    // Param is passed by value, moved
    pub fn set_match_subject_alt_names(&mut self, v: ::protobuf::RepeatedField<super::string::StringMatcher>) {
        self.match_subject_alt_names = v;
    }

    // Mutable pointer to the field.
    pub fn mut_match_subject_alt_names(&mut self) -> &mut ::protobuf::RepeatedField<super::string::StringMatcher> {
        &mut self.match_subject_alt_names
    }

    // Take field
    pub fn take_match_subject_alt_names(&mut self) -> ::protobuf::RepeatedField<super::string::StringMatcher> {
        ::std::mem::replace(&mut self.match_subject_alt_names, ::protobuf::RepeatedField::new())
    }

    // .google.protobuf.BoolValue require_ocsp_staple = 5;


    pub fn get_require_ocsp_staple(&self) -> &::protobuf::well_known_types::BoolValue {
        self.require_ocsp_staple.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::BoolValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_require_ocsp_staple(&mut self) {
        self.require_ocsp_staple.clear();
    }

    pub fn has_require_ocsp_staple(&self) -> bool {
        self.require_ocsp_staple.is_some()
    }

    // Param is passed by value, moved
    pub fn set_require_ocsp_staple(&mut self, v: ::protobuf::well_known_types::BoolValue) {
        self.require_ocsp_staple = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_require_ocsp_staple(&mut self) -> &mut ::protobuf::well_known_types::BoolValue {
        if self.require_ocsp_staple.is_none() {
            self.require_ocsp_staple.set_default();
        }
        self.require_ocsp_staple.as_mut().unwrap()
    }

    // Take field
    pub fn take_require_ocsp_staple(&mut self) -> ::protobuf::well_known_types::BoolValue {
        self.require_ocsp_staple.take().unwrap_or_else(|| ::protobuf::well_known_types::BoolValue::new())
    }

    // .google.protobuf.BoolValue require_signed_certificate_timestamp = 6;


    pub fn get_require_signed_certificate_timestamp(&self) -> &::protobuf::well_known_types::BoolValue {
        self.require_signed_certificate_timestamp.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::BoolValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_require_signed_certificate_timestamp(&mut self) {
        self.require_signed_certificate_timestamp.clear();
    }

    pub fn has_require_signed_certificate_timestamp(&self) -> bool {
        self.require_signed_certificate_timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_require_signed_certificate_timestamp(&mut self, v: ::protobuf::well_known_types::BoolValue) {
        self.require_signed_certificate_timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_require_signed_certificate_timestamp(&mut self) -> &mut ::protobuf::well_known_types::BoolValue {
        if self.require_signed_certificate_timestamp.is_none() {
            self.require_signed_certificate_timestamp.set_default();
        }
        self.require_signed_certificate_timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_require_signed_certificate_timestamp(&mut self) -> ::protobuf::well_known_types::BoolValue {
        self.require_signed_certificate_timestamp.take().unwrap_or_else(|| ::protobuf::well_known_types::BoolValue::new())
    }

    // .envoy.api.v2.core.DataSource crl = 7;


    pub fn get_crl(&self) -> &super::base::DataSource {
        self.crl.as_ref().unwrap_or_else(|| <super::base::DataSource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_crl(&mut self) {
        self.crl.clear();
    }

    pub fn has_crl(&self) -> bool {
        self.crl.is_some()
    }

    // Param is passed by value, moved
    pub fn set_crl(&mut self, v: super::base::DataSource) {
        self.crl = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_crl(&mut self) -> &mut super::base::DataSource {
        if self.crl.is_none() {
            self.crl.set_default();
        }
        self.crl.as_mut().unwrap()
    }

    // Take field
    pub fn take_crl(&mut self) -> super::base::DataSource {
        self.crl.take().unwrap_or_else(|| super::base::DataSource::new())
    }

    // bool allow_expired_certificate = 8;


    pub fn get_allow_expired_certificate(&self) -> bool {
        self.allow_expired_certificate
    }
    pub fn clear_allow_expired_certificate(&mut self) {
        self.allow_expired_certificate = false;
    }

    // Param is passed by value, moved
    pub fn set_allow_expired_certificate(&mut self, v: bool) {
        self.allow_expired_certificate = v;
    }

    // .envoy.api.v2.auth.CertificateValidationContext.TrustChainVerification trust_chain_verification = 10;


    pub fn get_trust_chain_verification(&self) -> CertificateValidationContext_TrustChainVerification {
        self.trust_chain_verification
    }
    pub fn clear_trust_chain_verification(&mut self) {
        self.trust_chain_verification = CertificateValidationContext_TrustChainVerification::VERIFY_TRUST_CHAIN;
    }

    // Param is passed by value, moved
    pub fn set_trust_chain_verification(&mut self, v: CertificateValidationContext_TrustChainVerification) {
        self.trust_chain_verification = v;
    }
}

impl ::protobuf::Message for CertificateValidationContext {
    fn is_initialized(&self) -> bool {
        for v in &self.trusted_ca {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.match_subject_alt_names {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.require_ocsp_staple {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.require_signed_certificate_timestamp {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.crl {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.trusted_ca)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.verify_certificate_spki)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.verify_certificate_hash)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.verify_subject_alt_name)?;
                },
                9 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.match_subject_alt_names)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.require_ocsp_staple)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.require_signed_certificate_timestamp)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.crl)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.allow_expired_certificate = tmp;
                },
                10 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.trust_chain_verification, 10, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.trusted_ca.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.verify_certificate_spki {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        for value in &self.verify_certificate_hash {
            my_size += ::protobuf::rt::string_size(2, &value);
        };
        for value in &self.verify_subject_alt_name {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        for value in &self.match_subject_alt_names {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.require_ocsp_staple.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.require_signed_certificate_timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.crl.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.allow_expired_certificate != false {
            my_size += 2;
        }
        if self.trust_chain_verification != CertificateValidationContext_TrustChainVerification::VERIFY_TRUST_CHAIN {
            my_size += ::protobuf::rt::enum_size(10, self.trust_chain_verification);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.trusted_ca.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.verify_certificate_spki {
            os.write_string(3, &v)?;
        };
        for v in &self.verify_certificate_hash {
            os.write_string(2, &v)?;
        };
        for v in &self.verify_subject_alt_name {
            os.write_string(4, &v)?;
        };
        for v in &self.match_subject_alt_names {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.require_ocsp_staple.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.require_signed_certificate_timestamp.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.crl.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.allow_expired_certificate != false {
            os.write_bool(8, self.allow_expired_certificate)?;
        }
        if self.trust_chain_verification != CertificateValidationContext_TrustChainVerification::VERIFY_TRUST_CHAIN {
            os.write_enum(10, ::protobuf::ProtobufEnum::value(&self.trust_chain_verification))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CertificateValidationContext {
        CertificateValidationContext::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::DataSource>>(
                "trusted_ca",
                |m: &CertificateValidationContext| { &m.trusted_ca },
                |m: &mut CertificateValidationContext| { &mut m.trusted_ca },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "verify_certificate_spki",
                |m: &CertificateValidationContext| { &m.verify_certificate_spki },
                |m: &mut CertificateValidationContext| { &mut m.verify_certificate_spki },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "verify_certificate_hash",
                |m: &CertificateValidationContext| { &m.verify_certificate_hash },
                |m: &mut CertificateValidationContext| { &mut m.verify_certificate_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "verify_subject_alt_name",
                |m: &CertificateValidationContext| { &m.verify_subject_alt_name },
                |m: &mut CertificateValidationContext| { &mut m.verify_subject_alt_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::string::StringMatcher>>(
                "match_subject_alt_names",
                |m: &CertificateValidationContext| { &m.match_subject_alt_names },
                |m: &mut CertificateValidationContext| { &mut m.match_subject_alt_names },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::BoolValue>>(
                "require_ocsp_staple",
                |m: &CertificateValidationContext| { &m.require_ocsp_staple },
                |m: &mut CertificateValidationContext| { &mut m.require_ocsp_staple },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::BoolValue>>(
                "require_signed_certificate_timestamp",
                |m: &CertificateValidationContext| { &m.require_signed_certificate_timestamp },
                |m: &mut CertificateValidationContext| { &mut m.require_signed_certificate_timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::DataSource>>(
                "crl",
                |m: &CertificateValidationContext| { &m.crl },
                |m: &mut CertificateValidationContext| { &mut m.crl },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "allow_expired_certificate",
                |m: &CertificateValidationContext| { &m.allow_expired_certificate },
                |m: &mut CertificateValidationContext| { &mut m.allow_expired_certificate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CertificateValidationContext_TrustChainVerification>>(
                "trust_chain_verification",
                |m: &CertificateValidationContext| { &m.trust_chain_verification },
                |m: &mut CertificateValidationContext| { &mut m.trust_chain_verification },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CertificateValidationContext>(
                "CertificateValidationContext",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CertificateValidationContext {
        static instance: ::protobuf::rt::LazyV2<CertificateValidationContext> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CertificateValidationContext::new)
    }
}

impl ::protobuf::Clear for CertificateValidationContext {
    fn clear(&mut self) {
        self.trusted_ca.clear();
        self.verify_certificate_spki.clear();
        self.verify_certificate_hash.clear();
        self.verify_subject_alt_name.clear();
        self.match_subject_alt_names.clear();
        self.require_ocsp_staple.clear();
        self.require_signed_certificate_timestamp.clear();
        self.crl.clear();
        self.allow_expired_certificate = false;
        self.trust_chain_verification = CertificateValidationContext_TrustChainVerification::VERIFY_TRUST_CHAIN;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CertificateValidationContext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CertificateValidationContext {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CertificateValidationContext_TrustChainVerification {
    VERIFY_TRUST_CHAIN = 0,
    ACCEPT_UNTRUSTED = 1,
}

impl ::protobuf::ProtobufEnum for CertificateValidationContext_TrustChainVerification {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CertificateValidationContext_TrustChainVerification> {
        match value {
            0 => ::std::option::Option::Some(CertificateValidationContext_TrustChainVerification::VERIFY_TRUST_CHAIN),
            1 => ::std::option::Option::Some(CertificateValidationContext_TrustChainVerification::ACCEPT_UNTRUSTED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CertificateValidationContext_TrustChainVerification] = &[
            CertificateValidationContext_TrustChainVerification::VERIFY_TRUST_CHAIN,
            CertificateValidationContext_TrustChainVerification::ACCEPT_UNTRUSTED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<CertificateValidationContext_TrustChainVerification>("CertificateValidationContext.TrustChainVerification", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for CertificateValidationContext_TrustChainVerification {
}

impl ::std::default::Default for CertificateValidationContext_TrustChainVerification {
    fn default() -> Self {
        CertificateValidationContext_TrustChainVerification::VERIFY_TRUST_CHAIN
    }
}

impl ::protobuf::reflect::ProtobufValue for CertificateValidationContext_TrustChainVerification {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1eenvoy/api/v2/auth/common.proto\x12\x11envoy.api.v2.auth\x1a\x1cenv\
    oy/api/v2/core/base.proto\x1a\x1fenvoy/type/matcher/string.proto\x1a\x19\
    google/protobuf/any.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1egoo\
    gle/protobuf/wrappers.proto\x1a\x1eudpa/annotations/migrate.proto\x1a\
    \x20udpa/annotations/sensitive.proto\x1a\x1dudpa/annotations/status.prot\
    o\x1a\x17validate/validate.proto\"\x98\x03\n\rTlsParameters\x12w\n\x1ctl\
    s_minimum_protocol_version\x18\x01\x20\x01(\x0e2,.envoy.api.v2.auth.TlsP\
    arameters.TlsProtocolR\x19tlsMinimumProtocolVersionB\x08\xfaB\x05\x82\
    \x01\x02\x10\x01\x12w\n\x1ctls_maximum_protocol_version\x18\x02\x20\x01(\
    \x0e2,.envoy.api.v2.auth.TlsParameters.TlsProtocolR\x19tlsMaximumProtoco\
    lVersionB\x08\xfaB\x05\x82\x01\x02\x10\x01\x12#\n\rcipher_suites\x18\x03\
    \x20\x03(\tR\x0ccipherSuites\x12\x1f\n\x0becdh_curves\x18\x04\x20\x03(\t\
    R\necdhCurves\"O\n\x0bTlsProtocol\x12\x0c\n\x08TLS_AUTO\x10\0\x12\x0b\n\
    \x07TLSv1_0\x10\x01\x12\x0b\n\x07TLSv1_1\x10\x02\x12\x0b\n\x07TLSv1_2\
    \x10\x03\x12\x0b\n\x07TLSv1_3\x10\x04\"\xd1\x01\n\x12PrivateKeyProvider\
    \x12,\n\rprovider_name\x18\x01\x20\x01(\tR\x0cproviderNameB\x07\xfaB\x04\
    r\x02\x20\x01\x12;\n\x06config\x18\x02\x20\x01(\x0b2\x17.google.protobuf\
    .StructH\0R\x06configB\x08\x18\x01\xb8\xb7\x8b\xa4\x02\x01\x12A\n\x0ctyp\
    ed_config\x18\x03\x20\x01(\x0b2\x14.google.protobuf.AnyH\0R\x0btypedConf\
    igB\x06\xb8\xb7\x8b\xa4\x02\x01B\r\n\x0bconfig_type\"\xe1\x03\n\x0eTlsCe\
    rtificate\x12J\n\x11certificate_chain\x18\x01\x20\x01(\x0b2\x1d.envoy.ap\
    i.v2.core.DataSourceR\x10certificateChain\x12F\n\x0bprivate_key\x18\x02\
    \x20\x01(\x0b2\x1d.envoy.api.v2.core.DataSourceR\nprivateKeyB\x06\xb8\
    \xb7\x8b\xa4\x02\x01\x12W\n\x14private_key_provider\x18\x06\x20\x01(\x0b\
    2%.envoy.api.v2.auth.PrivateKeyProviderR\x12privateKeyProvider\x12A\n\
    \x08password\x18\x03\x20\x01(\x0b2\x1d.envoy.api.v2.core.DataSourceR\x08\
    passwordB\x06\xb8\xb7\x8b\xa4\x02\x01\x12>\n\x0bocsp_staple\x18\x04\x20\
    \x01(\x0b2\x1d.envoy.api.v2.core.DataSourceR\nocspStaple\x12_\n\x1csigne\
    d_certificate_timestamp\x18\x05\x20\x03(\x0b2\x1d.envoy.api.v2.core.Data\
    SourceR\x1asignedCertificateTimestamp\"Y\n\x14TlsSessionTicketKeys\x12A\
    \n\x04keys\x18\x01\x20\x03(\x0b2\x1d.envoy.api.v2.core.DataSourceR\x04ke\
    ysB\x0e\xb8\xb7\x8b\xa4\x02\x01\xfaB\x05\x92\x01\x02\x08\x01\"\xfc\x06\n\
    \x1cCertificateValidationContext\x12<\n\ntrusted_ca\x18\x01\x20\x01(\x0b\
    2\x1d.envoy.api.v2.core.DataSourceR\ttrustedCa\x12F\n\x17verify_certific\
    ate_spki\x18\x03\x20\x03(\tR\x15verifyCertificateSpkiB\x0e\xfaB\x0b\x92\
    \x01\x08\"\x06r\x04\x20,(,\x12F\n\x17verify_certificate_hash\x18\x02\x20\
    \x03(\tR\x15verifyCertificateHashB\x0e\xfaB\x0b\x92\x01\x08\"\x06r\x04\
    \x20@(_\x129\n\x17verify_subject_alt_name\x18\x04\x20\x03(\tR\x14verifyS\
    ubjectAltNameB\x02\x18\x01\x12X\n\x17match_subject_alt_names\x18\t\x20\
    \x03(\x0b2!.envoy.type.matcher.StringMatcherR\x14matchSubjectAltNames\
    \x12J\n\x13require_ocsp_staple\x18\x05\x20\x01(\x0b2\x1a.google.protobuf\
    .BoolValueR\x11requireOcspStaple\x12k\n$require_signed_certificate_times\
    tamp\x18\x06\x20\x01(\x0b2\x1a.google.protobuf.BoolValueR!requireSignedC\
    ertificateTimestamp\x12/\n\x03crl\x18\x07\x20\x01(\x0b2\x1d.envoy.api.v2\
    .core.DataSourceR\x03crl\x12:\n\x19allow_expired_certificate\x18\x08\x20\
    \x01(\x08R\x17allowExpiredCertificate\x12\x8a\x01\n\x18trust_chain_verif\
    ication\x18\n\x20\x01(\x0e2F.envoy.api.v2.auth.CertificateValidationCont\
    ext.TrustChainVerificationR\x16trustChainVerificationB\x08\xfaB\x05\x82\
    \x01\x02\x10\x01\"F\n\x16TrustChainVerification\x12\x16\n\x12VERIFY_TRUS\
    T_CHAIN\x10\0\x12\x14\n\x10ACCEPT_UNTRUSTED\x10\x01Bi\n\x1fio.envoyproxy\
    .envoy.api.v2.authB\x0bCommonProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\x01\
    \xf2\x98\xfe\x8f\x05+\x12)envoy.extensions.transport_sockets.tls.v3b\x06\
    proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
