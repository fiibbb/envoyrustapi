// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/api/v2/auth/tls.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct UpstreamTlsContext {
    // message fields
    pub common_tls_context: ::protobuf::SingularPtrField<CommonTlsContext>,
    pub sni: ::std::string::String,
    pub allow_renegotiation: bool,
    pub max_session_keys: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpstreamTlsContext {
    fn default() -> &'a UpstreamTlsContext {
        <UpstreamTlsContext as ::protobuf::Message>::default_instance()
    }
}

impl UpstreamTlsContext {
    pub fn new() -> UpstreamTlsContext {
        ::std::default::Default::default()
    }

    // .envoy.api.v2.auth.CommonTlsContext common_tls_context = 1;


    pub fn get_common_tls_context(&self) -> &CommonTlsContext {
        self.common_tls_context.as_ref().unwrap_or_else(|| <CommonTlsContext as ::protobuf::Message>::default_instance())
    }
    pub fn clear_common_tls_context(&mut self) {
        self.common_tls_context.clear();
    }

    pub fn has_common_tls_context(&self) -> bool {
        self.common_tls_context.is_some()
    }

    // Param is passed by value, moved
    pub fn set_common_tls_context(&mut self, v: CommonTlsContext) {
        self.common_tls_context = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_common_tls_context(&mut self) -> &mut CommonTlsContext {
        if self.common_tls_context.is_none() {
            self.common_tls_context.set_default();
        }
        self.common_tls_context.as_mut().unwrap()
    }

    // Take field
    pub fn take_common_tls_context(&mut self) -> CommonTlsContext {
        self.common_tls_context.take().unwrap_or_else(|| CommonTlsContext::new())
    }

    // string sni = 2;


    pub fn get_sni(&self) -> &str {
        &self.sni
    }
    pub fn clear_sni(&mut self) {
        self.sni.clear();
    }

    // Param is passed by value, moved
    pub fn set_sni(&mut self, v: ::std::string::String) {
        self.sni = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sni(&mut self) -> &mut ::std::string::String {
        &mut self.sni
    }

    // Take field
    pub fn take_sni(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sni, ::std::string::String::new())
    }

    // bool allow_renegotiation = 3;


    pub fn get_allow_renegotiation(&self) -> bool {
        self.allow_renegotiation
    }
    pub fn clear_allow_renegotiation(&mut self) {
        self.allow_renegotiation = false;
    }

    // Param is passed by value, moved
    pub fn set_allow_renegotiation(&mut self, v: bool) {
        self.allow_renegotiation = v;
    }

    // .google.protobuf.UInt32Value max_session_keys = 4;


    pub fn get_max_session_keys(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.max_session_keys.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_max_session_keys(&mut self) {
        self.max_session_keys.clear();
    }

    pub fn has_max_session_keys(&self) -> bool {
        self.max_session_keys.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_session_keys(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.max_session_keys = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_session_keys(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.max_session_keys.is_none() {
            self.max_session_keys.set_default();
        }
        self.max_session_keys.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_session_keys(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.max_session_keys.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }
}

impl ::protobuf::Message for UpstreamTlsContext {
    fn is_initialized(&self) -> bool {
        for v in &self.common_tls_context {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.max_session_keys {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.common_tls_context)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sni)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.allow_renegotiation = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_session_keys)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.common_tls_context.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.sni.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.sni);
        }
        if self.allow_renegotiation != false {
            my_size += 2;
        }
        if let Some(ref v) = self.max_session_keys.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.common_tls_context.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.sni.is_empty() {
            os.write_string(2, &self.sni)?;
        }
        if self.allow_renegotiation != false {
            os.write_bool(3, self.allow_renegotiation)?;
        }
        if let Some(ref v) = self.max_session_keys.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpstreamTlsContext {
        UpstreamTlsContext::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CommonTlsContext>>(
                "common_tls_context",
                |m: &UpstreamTlsContext| { &m.common_tls_context },
                |m: &mut UpstreamTlsContext| { &mut m.common_tls_context },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sni",
                |m: &UpstreamTlsContext| { &m.sni },
                |m: &mut UpstreamTlsContext| { &mut m.sni },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "allow_renegotiation",
                |m: &UpstreamTlsContext| { &m.allow_renegotiation },
                |m: &mut UpstreamTlsContext| { &mut m.allow_renegotiation },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "max_session_keys",
                |m: &UpstreamTlsContext| { &m.max_session_keys },
                |m: &mut UpstreamTlsContext| { &mut m.max_session_keys },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpstreamTlsContext>(
                "UpstreamTlsContext",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpstreamTlsContext {
        static instance: ::protobuf::rt::LazyV2<UpstreamTlsContext> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpstreamTlsContext::new)
    }
}

impl ::protobuf::Clear for UpstreamTlsContext {
    fn clear(&mut self) {
        self.common_tls_context.clear();
        self.sni.clear();
        self.allow_renegotiation = false;
        self.max_session_keys.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpstreamTlsContext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpstreamTlsContext {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DownstreamTlsContext {
    // message fields
    pub common_tls_context: ::protobuf::SingularPtrField<CommonTlsContext>,
    pub require_client_certificate: ::protobuf::SingularPtrField<::protobuf::well_known_types::BoolValue>,
    pub require_sni: ::protobuf::SingularPtrField<::protobuf::well_known_types::BoolValue>,
    pub session_timeout: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    // message oneof groups
    pub session_ticket_keys_type: ::std::option::Option<DownstreamTlsContext_oneof_session_ticket_keys_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DownstreamTlsContext {
    fn default() -> &'a DownstreamTlsContext {
        <DownstreamTlsContext as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum DownstreamTlsContext_oneof_session_ticket_keys_type {
    session_ticket_keys(super::common::TlsSessionTicketKeys),
    session_ticket_keys_sds_secret_config(super::secret::SdsSecretConfig),
    disable_stateless_session_resumption(bool),
}

impl DownstreamTlsContext {
    pub fn new() -> DownstreamTlsContext {
        ::std::default::Default::default()
    }

    // .envoy.api.v2.auth.CommonTlsContext common_tls_context = 1;


    pub fn get_common_tls_context(&self) -> &CommonTlsContext {
        self.common_tls_context.as_ref().unwrap_or_else(|| <CommonTlsContext as ::protobuf::Message>::default_instance())
    }
    pub fn clear_common_tls_context(&mut self) {
        self.common_tls_context.clear();
    }

    pub fn has_common_tls_context(&self) -> bool {
        self.common_tls_context.is_some()
    }

    // Param is passed by value, moved
    pub fn set_common_tls_context(&mut self, v: CommonTlsContext) {
        self.common_tls_context = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_common_tls_context(&mut self) -> &mut CommonTlsContext {
        if self.common_tls_context.is_none() {
            self.common_tls_context.set_default();
        }
        self.common_tls_context.as_mut().unwrap()
    }

    // Take field
    pub fn take_common_tls_context(&mut self) -> CommonTlsContext {
        self.common_tls_context.take().unwrap_or_else(|| CommonTlsContext::new())
    }

    // .google.protobuf.BoolValue require_client_certificate = 2;


    pub fn get_require_client_certificate(&self) -> &::protobuf::well_known_types::BoolValue {
        self.require_client_certificate.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::BoolValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_require_client_certificate(&mut self) {
        self.require_client_certificate.clear();
    }

    pub fn has_require_client_certificate(&self) -> bool {
        self.require_client_certificate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_require_client_certificate(&mut self, v: ::protobuf::well_known_types::BoolValue) {
        self.require_client_certificate = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_require_client_certificate(&mut self) -> &mut ::protobuf::well_known_types::BoolValue {
        if self.require_client_certificate.is_none() {
            self.require_client_certificate.set_default();
        }
        self.require_client_certificate.as_mut().unwrap()
    }

    // Take field
    pub fn take_require_client_certificate(&mut self) -> ::protobuf::well_known_types::BoolValue {
        self.require_client_certificate.take().unwrap_or_else(|| ::protobuf::well_known_types::BoolValue::new())
    }

    // .google.protobuf.BoolValue require_sni = 3;


    pub fn get_require_sni(&self) -> &::protobuf::well_known_types::BoolValue {
        self.require_sni.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::BoolValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_require_sni(&mut self) {
        self.require_sni.clear();
    }

    pub fn has_require_sni(&self) -> bool {
        self.require_sni.is_some()
    }

    // Param is passed by value, moved
    pub fn set_require_sni(&mut self, v: ::protobuf::well_known_types::BoolValue) {
        self.require_sni = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_require_sni(&mut self) -> &mut ::protobuf::well_known_types::BoolValue {
        if self.require_sni.is_none() {
            self.require_sni.set_default();
        }
        self.require_sni.as_mut().unwrap()
    }

    // Take field
    pub fn take_require_sni(&mut self) -> ::protobuf::well_known_types::BoolValue {
        self.require_sni.take().unwrap_or_else(|| ::protobuf::well_known_types::BoolValue::new())
    }

    // .envoy.api.v2.auth.TlsSessionTicketKeys session_ticket_keys = 4;


    pub fn get_session_ticket_keys(&self) -> &super::common::TlsSessionTicketKeys {
        match self.session_ticket_keys_type {
            ::std::option::Option::Some(DownstreamTlsContext_oneof_session_ticket_keys_type::session_ticket_keys(ref v)) => v,
            _ => <super::common::TlsSessionTicketKeys as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_session_ticket_keys(&mut self) {
        self.session_ticket_keys_type = ::std::option::Option::None;
    }

    pub fn has_session_ticket_keys(&self) -> bool {
        match self.session_ticket_keys_type {
            ::std::option::Option::Some(DownstreamTlsContext_oneof_session_ticket_keys_type::session_ticket_keys(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_session_ticket_keys(&mut self, v: super::common::TlsSessionTicketKeys) {
        self.session_ticket_keys_type = ::std::option::Option::Some(DownstreamTlsContext_oneof_session_ticket_keys_type::session_ticket_keys(v))
    }

    // Mutable pointer to the field.
    pub fn mut_session_ticket_keys(&mut self) -> &mut super::common::TlsSessionTicketKeys {
        if let ::std::option::Option::Some(DownstreamTlsContext_oneof_session_ticket_keys_type::session_ticket_keys(_)) = self.session_ticket_keys_type {
        } else {
            self.session_ticket_keys_type = ::std::option::Option::Some(DownstreamTlsContext_oneof_session_ticket_keys_type::session_ticket_keys(super::common::TlsSessionTicketKeys::new()));
        }
        match self.session_ticket_keys_type {
            ::std::option::Option::Some(DownstreamTlsContext_oneof_session_ticket_keys_type::session_ticket_keys(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_session_ticket_keys(&mut self) -> super::common::TlsSessionTicketKeys {
        if self.has_session_ticket_keys() {
            match self.session_ticket_keys_type.take() {
                ::std::option::Option::Some(DownstreamTlsContext_oneof_session_ticket_keys_type::session_ticket_keys(v)) => v,
                _ => panic!(),
            }
        } else {
            super::common::TlsSessionTicketKeys::new()
        }
    }

    // .envoy.api.v2.auth.SdsSecretConfig session_ticket_keys_sds_secret_config = 5;


    pub fn get_session_ticket_keys_sds_secret_config(&self) -> &super::secret::SdsSecretConfig {
        match self.session_ticket_keys_type {
            ::std::option::Option::Some(DownstreamTlsContext_oneof_session_ticket_keys_type::session_ticket_keys_sds_secret_config(ref v)) => v,
            _ => <super::secret::SdsSecretConfig as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_session_ticket_keys_sds_secret_config(&mut self) {
        self.session_ticket_keys_type = ::std::option::Option::None;
    }

    pub fn has_session_ticket_keys_sds_secret_config(&self) -> bool {
        match self.session_ticket_keys_type {
            ::std::option::Option::Some(DownstreamTlsContext_oneof_session_ticket_keys_type::session_ticket_keys_sds_secret_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_session_ticket_keys_sds_secret_config(&mut self, v: super::secret::SdsSecretConfig) {
        self.session_ticket_keys_type = ::std::option::Option::Some(DownstreamTlsContext_oneof_session_ticket_keys_type::session_ticket_keys_sds_secret_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_session_ticket_keys_sds_secret_config(&mut self) -> &mut super::secret::SdsSecretConfig {
        if let ::std::option::Option::Some(DownstreamTlsContext_oneof_session_ticket_keys_type::session_ticket_keys_sds_secret_config(_)) = self.session_ticket_keys_type {
        } else {
            self.session_ticket_keys_type = ::std::option::Option::Some(DownstreamTlsContext_oneof_session_ticket_keys_type::session_ticket_keys_sds_secret_config(super::secret::SdsSecretConfig::new()));
        }
        match self.session_ticket_keys_type {
            ::std::option::Option::Some(DownstreamTlsContext_oneof_session_ticket_keys_type::session_ticket_keys_sds_secret_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_session_ticket_keys_sds_secret_config(&mut self) -> super::secret::SdsSecretConfig {
        if self.has_session_ticket_keys_sds_secret_config() {
            match self.session_ticket_keys_type.take() {
                ::std::option::Option::Some(DownstreamTlsContext_oneof_session_ticket_keys_type::session_ticket_keys_sds_secret_config(v)) => v,
                _ => panic!(),
            }
        } else {
            super::secret::SdsSecretConfig::new()
        }
    }

    // bool disable_stateless_session_resumption = 7;


    pub fn get_disable_stateless_session_resumption(&self) -> bool {
        match self.session_ticket_keys_type {
            ::std::option::Option::Some(DownstreamTlsContext_oneof_session_ticket_keys_type::disable_stateless_session_resumption(v)) => v,
            _ => false,
        }
    }
    pub fn clear_disable_stateless_session_resumption(&mut self) {
        self.session_ticket_keys_type = ::std::option::Option::None;
    }

    pub fn has_disable_stateless_session_resumption(&self) -> bool {
        match self.session_ticket_keys_type {
            ::std::option::Option::Some(DownstreamTlsContext_oneof_session_ticket_keys_type::disable_stateless_session_resumption(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_disable_stateless_session_resumption(&mut self, v: bool) {
        self.session_ticket_keys_type = ::std::option::Option::Some(DownstreamTlsContext_oneof_session_ticket_keys_type::disable_stateless_session_resumption(v))
    }

    // .google.protobuf.Duration session_timeout = 6;


    pub fn get_session_timeout(&self) -> &::protobuf::well_known_types::Duration {
        self.session_timeout.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_session_timeout(&mut self) {
        self.session_timeout.clear();
    }

    pub fn has_session_timeout(&self) -> bool {
        self.session_timeout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_session_timeout(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.session_timeout = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_session_timeout(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.session_timeout.is_none() {
            self.session_timeout.set_default();
        }
        self.session_timeout.as_mut().unwrap()
    }

    // Take field
    pub fn take_session_timeout(&mut self) -> ::protobuf::well_known_types::Duration {
        self.session_timeout.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }
}

impl ::protobuf::Message for DownstreamTlsContext {
    fn is_initialized(&self) -> bool {
        for v in &self.common_tls_context {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.require_client_certificate {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.require_sni {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(DownstreamTlsContext_oneof_session_ticket_keys_type::session_ticket_keys(ref v)) = self.session_ticket_keys_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(DownstreamTlsContext_oneof_session_ticket_keys_type::session_ticket_keys_sds_secret_config(ref v)) = self.session_ticket_keys_type {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.session_timeout {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.common_tls_context)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.require_client_certificate)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.require_sni)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.session_ticket_keys_type = ::std::option::Option::Some(DownstreamTlsContext_oneof_session_ticket_keys_type::session_ticket_keys(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.session_ticket_keys_type = ::std::option::Option::Some(DownstreamTlsContext_oneof_session_ticket_keys_type::session_ticket_keys_sds_secret_config(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.session_ticket_keys_type = ::std::option::Option::Some(DownstreamTlsContext_oneof_session_ticket_keys_type::disable_stateless_session_resumption(is.read_bool()?));
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.session_timeout)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.common_tls_context.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.require_client_certificate.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.require_sni.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.session_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.session_ticket_keys_type {
            match v {
                &DownstreamTlsContext_oneof_session_ticket_keys_type::session_ticket_keys(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &DownstreamTlsContext_oneof_session_ticket_keys_type::session_ticket_keys_sds_secret_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &DownstreamTlsContext_oneof_session_ticket_keys_type::disable_stateless_session_resumption(v) => {
                    my_size += 2;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.common_tls_context.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.require_client_certificate.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.require_sni.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.session_timeout.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.session_ticket_keys_type {
            match v {
                &DownstreamTlsContext_oneof_session_ticket_keys_type::session_ticket_keys(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &DownstreamTlsContext_oneof_session_ticket_keys_type::session_ticket_keys_sds_secret_config(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &DownstreamTlsContext_oneof_session_ticket_keys_type::disable_stateless_session_resumption(v) => {
                    os.write_bool(7, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DownstreamTlsContext {
        DownstreamTlsContext::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CommonTlsContext>>(
                "common_tls_context",
                |m: &DownstreamTlsContext| { &m.common_tls_context },
                |m: &mut DownstreamTlsContext| { &mut m.common_tls_context },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::BoolValue>>(
                "require_client_certificate",
                |m: &DownstreamTlsContext| { &m.require_client_certificate },
                |m: &mut DownstreamTlsContext| { &mut m.require_client_certificate },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::BoolValue>>(
                "require_sni",
                |m: &DownstreamTlsContext| { &m.require_sni },
                |m: &mut DownstreamTlsContext| { &mut m.require_sni },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::common::TlsSessionTicketKeys>(
                "session_ticket_keys",
                DownstreamTlsContext::has_session_ticket_keys,
                DownstreamTlsContext::get_session_ticket_keys,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::secret::SdsSecretConfig>(
                "session_ticket_keys_sds_secret_config",
                DownstreamTlsContext::has_session_ticket_keys_sds_secret_config,
                DownstreamTlsContext::get_session_ticket_keys_sds_secret_config,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "disable_stateless_session_resumption",
                DownstreamTlsContext::has_disable_stateless_session_resumption,
                DownstreamTlsContext::get_disable_stateless_session_resumption,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "session_timeout",
                |m: &DownstreamTlsContext| { &m.session_timeout },
                |m: &mut DownstreamTlsContext| { &mut m.session_timeout },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DownstreamTlsContext>(
                "DownstreamTlsContext",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DownstreamTlsContext {
        static instance: ::protobuf::rt::LazyV2<DownstreamTlsContext> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DownstreamTlsContext::new)
    }
}

impl ::protobuf::Clear for DownstreamTlsContext {
    fn clear(&mut self) {
        self.common_tls_context.clear();
        self.require_client_certificate.clear();
        self.require_sni.clear();
        self.session_ticket_keys_type = ::std::option::Option::None;
        self.session_ticket_keys_type = ::std::option::Option::None;
        self.session_ticket_keys_type = ::std::option::Option::None;
        self.session_timeout.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DownstreamTlsContext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DownstreamTlsContext {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CommonTlsContext {
    // message fields
    pub tls_params: ::protobuf::SingularPtrField<super::common::TlsParameters>,
    pub tls_certificates: ::protobuf::RepeatedField<super::common::TlsCertificate>,
    pub tls_certificate_sds_secret_configs: ::protobuf::RepeatedField<super::secret::SdsSecretConfig>,
    pub alpn_protocols: ::protobuf::RepeatedField<::std::string::String>,
    // message oneof groups
    pub validation_context_type: ::std::option::Option<CommonTlsContext_oneof_validation_context_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CommonTlsContext {
    fn default() -> &'a CommonTlsContext {
        <CommonTlsContext as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum CommonTlsContext_oneof_validation_context_type {
    validation_context(super::common::CertificateValidationContext),
    validation_context_sds_secret_config(super::secret::SdsSecretConfig),
    combined_validation_context(CommonTlsContext_CombinedCertificateValidationContext),
}

impl CommonTlsContext {
    pub fn new() -> CommonTlsContext {
        ::std::default::Default::default()
    }

    // .envoy.api.v2.auth.TlsParameters tls_params = 1;


    pub fn get_tls_params(&self) -> &super::common::TlsParameters {
        self.tls_params.as_ref().unwrap_or_else(|| <super::common::TlsParameters as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tls_params(&mut self) {
        self.tls_params.clear();
    }

    pub fn has_tls_params(&self) -> bool {
        self.tls_params.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tls_params(&mut self, v: super::common::TlsParameters) {
        self.tls_params = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tls_params(&mut self) -> &mut super::common::TlsParameters {
        if self.tls_params.is_none() {
            self.tls_params.set_default();
        }
        self.tls_params.as_mut().unwrap()
    }

    // Take field
    pub fn take_tls_params(&mut self) -> super::common::TlsParameters {
        self.tls_params.take().unwrap_or_else(|| super::common::TlsParameters::new())
    }

    // repeated .envoy.api.v2.auth.TlsCertificate tls_certificates = 2;


    pub fn get_tls_certificates(&self) -> &[super::common::TlsCertificate] {
        &self.tls_certificates
    }
    pub fn clear_tls_certificates(&mut self) {
        self.tls_certificates.clear();
    }

    // Param is passed by value, moved
    pub fn set_tls_certificates(&mut self, v: ::protobuf::RepeatedField<super::common::TlsCertificate>) {
        self.tls_certificates = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tls_certificates(&mut self) -> &mut ::protobuf::RepeatedField<super::common::TlsCertificate> {
        &mut self.tls_certificates
    }

    // Take field
    pub fn take_tls_certificates(&mut self) -> ::protobuf::RepeatedField<super::common::TlsCertificate> {
        ::std::mem::replace(&mut self.tls_certificates, ::protobuf::RepeatedField::new())
    }

    // repeated .envoy.api.v2.auth.SdsSecretConfig tls_certificate_sds_secret_configs = 6;


    pub fn get_tls_certificate_sds_secret_configs(&self) -> &[super::secret::SdsSecretConfig] {
        &self.tls_certificate_sds_secret_configs
    }
    pub fn clear_tls_certificate_sds_secret_configs(&mut self) {
        self.tls_certificate_sds_secret_configs.clear();
    }

    // Param is passed by value, moved
    pub fn set_tls_certificate_sds_secret_configs(&mut self, v: ::protobuf::RepeatedField<super::secret::SdsSecretConfig>) {
        self.tls_certificate_sds_secret_configs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tls_certificate_sds_secret_configs(&mut self) -> &mut ::protobuf::RepeatedField<super::secret::SdsSecretConfig> {
        &mut self.tls_certificate_sds_secret_configs
    }

    // Take field
    pub fn take_tls_certificate_sds_secret_configs(&mut self) -> ::protobuf::RepeatedField<super::secret::SdsSecretConfig> {
        ::std::mem::replace(&mut self.tls_certificate_sds_secret_configs, ::protobuf::RepeatedField::new())
    }

    // .envoy.api.v2.auth.CertificateValidationContext validation_context = 3;


    pub fn get_validation_context(&self) -> &super::common::CertificateValidationContext {
        match self.validation_context_type {
            ::std::option::Option::Some(CommonTlsContext_oneof_validation_context_type::validation_context(ref v)) => v,
            _ => <super::common::CertificateValidationContext as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_validation_context(&mut self) {
        self.validation_context_type = ::std::option::Option::None;
    }

    pub fn has_validation_context(&self) -> bool {
        match self.validation_context_type {
            ::std::option::Option::Some(CommonTlsContext_oneof_validation_context_type::validation_context(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_validation_context(&mut self, v: super::common::CertificateValidationContext) {
        self.validation_context_type = ::std::option::Option::Some(CommonTlsContext_oneof_validation_context_type::validation_context(v))
    }

    // Mutable pointer to the field.
    pub fn mut_validation_context(&mut self) -> &mut super::common::CertificateValidationContext {
        if let ::std::option::Option::Some(CommonTlsContext_oneof_validation_context_type::validation_context(_)) = self.validation_context_type {
        } else {
            self.validation_context_type = ::std::option::Option::Some(CommonTlsContext_oneof_validation_context_type::validation_context(super::common::CertificateValidationContext::new()));
        }
        match self.validation_context_type {
            ::std::option::Option::Some(CommonTlsContext_oneof_validation_context_type::validation_context(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_validation_context(&mut self) -> super::common::CertificateValidationContext {
        if self.has_validation_context() {
            match self.validation_context_type.take() {
                ::std::option::Option::Some(CommonTlsContext_oneof_validation_context_type::validation_context(v)) => v,
                _ => panic!(),
            }
        } else {
            super::common::CertificateValidationContext::new()
        }
    }

    // .envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 7;


    pub fn get_validation_context_sds_secret_config(&self) -> &super::secret::SdsSecretConfig {
        match self.validation_context_type {
            ::std::option::Option::Some(CommonTlsContext_oneof_validation_context_type::validation_context_sds_secret_config(ref v)) => v,
            _ => <super::secret::SdsSecretConfig as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_validation_context_sds_secret_config(&mut self) {
        self.validation_context_type = ::std::option::Option::None;
    }

    pub fn has_validation_context_sds_secret_config(&self) -> bool {
        match self.validation_context_type {
            ::std::option::Option::Some(CommonTlsContext_oneof_validation_context_type::validation_context_sds_secret_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_validation_context_sds_secret_config(&mut self, v: super::secret::SdsSecretConfig) {
        self.validation_context_type = ::std::option::Option::Some(CommonTlsContext_oneof_validation_context_type::validation_context_sds_secret_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_validation_context_sds_secret_config(&mut self) -> &mut super::secret::SdsSecretConfig {
        if let ::std::option::Option::Some(CommonTlsContext_oneof_validation_context_type::validation_context_sds_secret_config(_)) = self.validation_context_type {
        } else {
            self.validation_context_type = ::std::option::Option::Some(CommonTlsContext_oneof_validation_context_type::validation_context_sds_secret_config(super::secret::SdsSecretConfig::new()));
        }
        match self.validation_context_type {
            ::std::option::Option::Some(CommonTlsContext_oneof_validation_context_type::validation_context_sds_secret_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_validation_context_sds_secret_config(&mut self) -> super::secret::SdsSecretConfig {
        if self.has_validation_context_sds_secret_config() {
            match self.validation_context_type.take() {
                ::std::option::Option::Some(CommonTlsContext_oneof_validation_context_type::validation_context_sds_secret_config(v)) => v,
                _ => panic!(),
            }
        } else {
            super::secret::SdsSecretConfig::new()
        }
    }

    // .envoy.api.v2.auth.CommonTlsContext.CombinedCertificateValidationContext combined_validation_context = 8;


    pub fn get_combined_validation_context(&self) -> &CommonTlsContext_CombinedCertificateValidationContext {
        match self.validation_context_type {
            ::std::option::Option::Some(CommonTlsContext_oneof_validation_context_type::combined_validation_context(ref v)) => v,
            _ => <CommonTlsContext_CombinedCertificateValidationContext as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_combined_validation_context(&mut self) {
        self.validation_context_type = ::std::option::Option::None;
    }

    pub fn has_combined_validation_context(&self) -> bool {
        match self.validation_context_type {
            ::std::option::Option::Some(CommonTlsContext_oneof_validation_context_type::combined_validation_context(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_combined_validation_context(&mut self, v: CommonTlsContext_CombinedCertificateValidationContext) {
        self.validation_context_type = ::std::option::Option::Some(CommonTlsContext_oneof_validation_context_type::combined_validation_context(v))
    }

    // Mutable pointer to the field.
    pub fn mut_combined_validation_context(&mut self) -> &mut CommonTlsContext_CombinedCertificateValidationContext {
        if let ::std::option::Option::Some(CommonTlsContext_oneof_validation_context_type::combined_validation_context(_)) = self.validation_context_type {
        } else {
            self.validation_context_type = ::std::option::Option::Some(CommonTlsContext_oneof_validation_context_type::combined_validation_context(CommonTlsContext_CombinedCertificateValidationContext::new()));
        }
        match self.validation_context_type {
            ::std::option::Option::Some(CommonTlsContext_oneof_validation_context_type::combined_validation_context(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_combined_validation_context(&mut self) -> CommonTlsContext_CombinedCertificateValidationContext {
        if self.has_combined_validation_context() {
            match self.validation_context_type.take() {
                ::std::option::Option::Some(CommonTlsContext_oneof_validation_context_type::combined_validation_context(v)) => v,
                _ => panic!(),
            }
        } else {
            CommonTlsContext_CombinedCertificateValidationContext::new()
        }
    }

    // repeated string alpn_protocols = 4;


    pub fn get_alpn_protocols(&self) -> &[::std::string::String] {
        &self.alpn_protocols
    }
    pub fn clear_alpn_protocols(&mut self) {
        self.alpn_protocols.clear();
    }

    // Param is passed by value, moved
    pub fn set_alpn_protocols(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.alpn_protocols = v;
    }

    // Mutable pointer to the field.
    pub fn mut_alpn_protocols(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.alpn_protocols
    }

    // Take field
    pub fn take_alpn_protocols(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.alpn_protocols, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CommonTlsContext {
    fn is_initialized(&self) -> bool {
        for v in &self.tls_params {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tls_certificates {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tls_certificate_sds_secret_configs {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(CommonTlsContext_oneof_validation_context_type::validation_context(ref v)) = self.validation_context_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(CommonTlsContext_oneof_validation_context_type::validation_context_sds_secret_config(ref v)) = self.validation_context_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(CommonTlsContext_oneof_validation_context_type::combined_validation_context(ref v)) = self.validation_context_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tls_params)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tls_certificates)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.tls_certificate_sds_secret_configs)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.validation_context_type = ::std::option::Option::Some(CommonTlsContext_oneof_validation_context_type::validation_context(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.validation_context_type = ::std::option::Option::Some(CommonTlsContext_oneof_validation_context_type::validation_context_sds_secret_config(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.validation_context_type = ::std::option::Option::Some(CommonTlsContext_oneof_validation_context_type::combined_validation_context(is.read_message()?));
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.alpn_protocols)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.tls_params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.tls_certificates {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.tls_certificate_sds_secret_configs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.alpn_protocols {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if let ::std::option::Option::Some(ref v) = self.validation_context_type {
            match v {
                &CommonTlsContext_oneof_validation_context_type::validation_context(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &CommonTlsContext_oneof_validation_context_type::validation_context_sds_secret_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &CommonTlsContext_oneof_validation_context_type::combined_validation_context(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.tls_params.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.tls_certificates {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.tls_certificate_sds_secret_configs {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.alpn_protocols {
            os.write_string(4, &v)?;
        };
        if let ::std::option::Option::Some(ref v) = self.validation_context_type {
            match v {
                &CommonTlsContext_oneof_validation_context_type::validation_context(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &CommonTlsContext_oneof_validation_context_type::validation_context_sds_secret_config(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &CommonTlsContext_oneof_validation_context_type::combined_validation_context(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommonTlsContext {
        CommonTlsContext::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::TlsParameters>>(
                "tls_params",
                |m: &CommonTlsContext| { &m.tls_params },
                |m: &mut CommonTlsContext| { &mut m.tls_params },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::TlsCertificate>>(
                "tls_certificates",
                |m: &CommonTlsContext| { &m.tls_certificates },
                |m: &mut CommonTlsContext| { &mut m.tls_certificates },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::secret::SdsSecretConfig>>(
                "tls_certificate_sds_secret_configs",
                |m: &CommonTlsContext| { &m.tls_certificate_sds_secret_configs },
                |m: &mut CommonTlsContext| { &mut m.tls_certificate_sds_secret_configs },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::common::CertificateValidationContext>(
                "validation_context",
                CommonTlsContext::has_validation_context,
                CommonTlsContext::get_validation_context,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::secret::SdsSecretConfig>(
                "validation_context_sds_secret_config",
                CommonTlsContext::has_validation_context_sds_secret_config,
                CommonTlsContext::get_validation_context_sds_secret_config,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, CommonTlsContext_CombinedCertificateValidationContext>(
                "combined_validation_context",
                CommonTlsContext::has_combined_validation_context,
                CommonTlsContext::get_combined_validation_context,
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "alpn_protocols",
                |m: &CommonTlsContext| { &m.alpn_protocols },
                |m: &mut CommonTlsContext| { &mut m.alpn_protocols },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CommonTlsContext>(
                "CommonTlsContext",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CommonTlsContext {
        static instance: ::protobuf::rt::LazyV2<CommonTlsContext> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CommonTlsContext::new)
    }
}

impl ::protobuf::Clear for CommonTlsContext {
    fn clear(&mut self) {
        self.tls_params.clear();
        self.tls_certificates.clear();
        self.tls_certificate_sds_secret_configs.clear();
        self.validation_context_type = ::std::option::Option::None;
        self.validation_context_type = ::std::option::Option::None;
        self.validation_context_type = ::std::option::Option::None;
        self.alpn_protocols.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CommonTlsContext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommonTlsContext {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CommonTlsContext_CombinedCertificateValidationContext {
    // message fields
    pub default_validation_context: ::protobuf::SingularPtrField<super::common::CertificateValidationContext>,
    pub validation_context_sds_secret_config: ::protobuf::SingularPtrField<super::secret::SdsSecretConfig>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CommonTlsContext_CombinedCertificateValidationContext {
    fn default() -> &'a CommonTlsContext_CombinedCertificateValidationContext {
        <CommonTlsContext_CombinedCertificateValidationContext as ::protobuf::Message>::default_instance()
    }
}

impl CommonTlsContext_CombinedCertificateValidationContext {
    pub fn new() -> CommonTlsContext_CombinedCertificateValidationContext {
        ::std::default::Default::default()
    }

    // .envoy.api.v2.auth.CertificateValidationContext default_validation_context = 1;


    pub fn get_default_validation_context(&self) -> &super::common::CertificateValidationContext {
        self.default_validation_context.as_ref().unwrap_or_else(|| <super::common::CertificateValidationContext as ::protobuf::Message>::default_instance())
    }
    pub fn clear_default_validation_context(&mut self) {
        self.default_validation_context.clear();
    }

    pub fn has_default_validation_context(&self) -> bool {
        self.default_validation_context.is_some()
    }

    // Param is passed by value, moved
    pub fn set_default_validation_context(&mut self, v: super::common::CertificateValidationContext) {
        self.default_validation_context = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_default_validation_context(&mut self) -> &mut super::common::CertificateValidationContext {
        if self.default_validation_context.is_none() {
            self.default_validation_context.set_default();
        }
        self.default_validation_context.as_mut().unwrap()
    }

    // Take field
    pub fn take_default_validation_context(&mut self) -> super::common::CertificateValidationContext {
        self.default_validation_context.take().unwrap_or_else(|| super::common::CertificateValidationContext::new())
    }

    // .envoy.api.v2.auth.SdsSecretConfig validation_context_sds_secret_config = 2;


    pub fn get_validation_context_sds_secret_config(&self) -> &super::secret::SdsSecretConfig {
        self.validation_context_sds_secret_config.as_ref().unwrap_or_else(|| <super::secret::SdsSecretConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_validation_context_sds_secret_config(&mut self) {
        self.validation_context_sds_secret_config.clear();
    }

    pub fn has_validation_context_sds_secret_config(&self) -> bool {
        self.validation_context_sds_secret_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_validation_context_sds_secret_config(&mut self, v: super::secret::SdsSecretConfig) {
        self.validation_context_sds_secret_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validation_context_sds_secret_config(&mut self) -> &mut super::secret::SdsSecretConfig {
        if self.validation_context_sds_secret_config.is_none() {
            self.validation_context_sds_secret_config.set_default();
        }
        self.validation_context_sds_secret_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_validation_context_sds_secret_config(&mut self) -> super::secret::SdsSecretConfig {
        self.validation_context_sds_secret_config.take().unwrap_or_else(|| super::secret::SdsSecretConfig::new())
    }
}

impl ::protobuf::Message for CommonTlsContext_CombinedCertificateValidationContext {
    fn is_initialized(&self) -> bool {
        for v in &self.default_validation_context {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.validation_context_sds_secret_config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.default_validation_context)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.validation_context_sds_secret_config)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.default_validation_context.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.validation_context_sds_secret_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.default_validation_context.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.validation_context_sds_secret_config.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CommonTlsContext_CombinedCertificateValidationContext {
        CommonTlsContext_CombinedCertificateValidationContext::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::CertificateValidationContext>>(
                "default_validation_context",
                |m: &CommonTlsContext_CombinedCertificateValidationContext| { &m.default_validation_context },
                |m: &mut CommonTlsContext_CombinedCertificateValidationContext| { &mut m.default_validation_context },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::secret::SdsSecretConfig>>(
                "validation_context_sds_secret_config",
                |m: &CommonTlsContext_CombinedCertificateValidationContext| { &m.validation_context_sds_secret_config },
                |m: &mut CommonTlsContext_CombinedCertificateValidationContext| { &mut m.validation_context_sds_secret_config },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CommonTlsContext_CombinedCertificateValidationContext>(
                "CommonTlsContext.CombinedCertificateValidationContext",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CommonTlsContext_CombinedCertificateValidationContext {
        static instance: ::protobuf::rt::LazyV2<CommonTlsContext_CombinedCertificateValidationContext> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CommonTlsContext_CombinedCertificateValidationContext::new)
    }
}

impl ::protobuf::Clear for CommonTlsContext_CombinedCertificateValidationContext {
    fn clear(&mut self) {
        self.default_validation_context.clear();
        self.validation_context_sds_secret_config.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CommonTlsContext_CombinedCertificateValidationContext {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CommonTlsContext_CombinedCertificateValidationContext {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1benvoy/api/v2/auth/tls.proto\x12\x11envoy.api.v2.auth\x1a\x1eenvoy/\
    api/v2/auth/common.proto\x1a\x1eenvoy/api/v2/auth/secret.proto\x1a\x1ego\
    ogle/protobuf/duration.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\
    \x1eudpa/annotations/migrate.proto\x1a\x1dudpa/annotations/status.proto\
    \x1a\x17validate/validate.proto\"\xfc\x01\n\x12UpstreamTlsContext\x12Q\n\
    \x12common_tls_context\x18\x01\x20\x01(\x0b2#.envoy.api.v2.auth.CommonTl\
    sContextR\x10commonTlsContext\x12\x1a\n\x03sni\x18\x02\x20\x01(\tR\x03sn\
    iB\x08\xfaB\x05r\x03(\xff\x01\x12/\n\x13allow_renegotiation\x18\x03\x20\
    \x01(\x08R\x12allowRenegotiation\x12F\n\x10max_session_keys\x18\x04\x20\
    \x01(\x0b2\x1c.google.protobuf.UInt32ValueR\x0emaxSessionKeys\"\x97\x05\
    \n\x14DownstreamTlsContext\x12Q\n\x12common_tls_context\x18\x01\x20\x01(\
    \x0b2#.envoy.api.v2.auth.CommonTlsContextR\x10commonTlsContext\x12X\n\
    \x1arequire_client_certificate\x18\x02\x20\x01(\x0b2\x1a.google.protobuf\
    .BoolValueR\x18requireClientCertificate\x12;\n\x0brequire_sni\x18\x03\
    \x20\x01(\x0b2\x1a.google.protobuf.BoolValueR\nrequireSni\x12Y\n\x13sess\
    ion_ticket_keys\x18\x04\x20\x01(\x0b2'.envoy.api.v2.auth.TlsSessionTicke\
    tKeysH\0R\x11sessionTicketKeys\x12u\n%session_ticket_keys_sds_secret_con\
    fig\x18\x05\x20\x01(\x0b2\".envoy.api.v2.auth.SdsSecretConfigH\0R\x20ses\
    sionTicketKeysSdsSecretConfig\x12Q\n$disable_stateless_session_resumptio\
    n\x18\x07\x20\x01(\x08H\0R!disableStatelessSessionResumption\x12T\n\x0fs\
    ession_timeout\x18\x06\x20\x01(\x0b2\x19.google.protobuf.DurationR\x0ese\
    ssionTimeoutB\x10\xfaB\r\xaa\x01\n\x1a\x06\x08\x80\x80\x80\x80\x102\0B\
    \x1a\n\x18session_ticket_keys_type\"\xe8\x07\n\x10CommonTlsContext\x12?\
    \n\ntls_params\x18\x01\x20\x01(\x0b2\x20.envoy.api.v2.auth.TlsParameters\
    R\ttlsParams\x12L\n\x10tls_certificates\x18\x02\x20\x03(\x0b2!.envoy.api\
    .v2.auth.TlsCertificateR\x0ftlsCertificates\x12x\n\"tls_certificate_sds_\
    secret_configs\x18\x06\x20\x03(\x0b2\".envoy.api.v2.auth.SdsSecretConfig\
    R\x1etlsCertificateSdsSecretConfigsB\x08\xfaB\x05\x92\x01\x02\x10\x01\
    \x12`\n\x12validation_context\x18\x03\x20\x01(\x0b2/.envoy.api.v2.auth.C\
    ertificateValidationContextH\0R\x11validationContext\x12t\n$validation_c\
    ontext_sds_secret_config\x18\x07\x20\x01(\x0b2\".envoy.api.v2.auth.SdsSe\
    cretConfigH\0R\x20validationContextSdsSecretConfig\x12\x8a\x01\n\x1bcomb\
    ined_validation_context\x18\x08\x20\x01(\x0b2H.envoy.api.v2.auth.CommonT\
    lsContext.CombinedCertificateValidationContextH\0R\x19combinedValidation\
    Context\x12%\n\x0ealpn_protocols\x18\x04\x20\x03(\tR\ralpnProtocols\x1a\
    \x9d\x02\n$CombinedCertificateValidationContext\x12w\n\x1adefault_valida\
    tion_context\x18\x01\x20\x01(\x0b2/.envoy.api.v2.auth.CertificateValidat\
    ionContextR\x18defaultValidationContextB\x08\xfaB\x05\x8a\x01\x02\x10\
    \x01\x12|\n$validation_context_sds_secret_config\x18\x02\x20\x01(\x0b2\"\
    .envoy.api.v2.auth.SdsSecretConfigR\x20validationContextSdsSecretConfigB\
    \x08\xfaB\x05\x8a\x01\x02\x10\x01B\x19\n\x17validation_context_typeJ\x04\
    \x08\x05\x10\x06Bf\n\x1fio.envoyproxy.envoy.api.v2.authB\x08TlsProtoP\
    \x01\xba\x80\xc8\xd1\x06\x02\x10\x01\xf2\x98\xfe\x8f\x05+\x12)envoy.exte\
    nsions.transport_sockets.tls.v3b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
