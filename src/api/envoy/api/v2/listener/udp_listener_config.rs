// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/api/v2/listener/udp_listener_config.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct UdpListenerConfig {
    // message fields
    pub udp_listener_name: ::std::string::String,
    // message oneof groups
    pub config_type: ::std::option::Option<UdpListenerConfig_oneof_config_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UdpListenerConfig {
    fn default() -> &'a UdpListenerConfig {
        <UdpListenerConfig as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum UdpListenerConfig_oneof_config_type {
    config(::protobuf::well_known_types::Struct),
    typed_config(::protobuf::well_known_types::Any),
}

impl UdpListenerConfig {
    pub fn new() -> UdpListenerConfig {
        ::std::default::Default::default()
    }

    // string udp_listener_name = 1;


    pub fn get_udp_listener_name(&self) -> &str {
        &self.udp_listener_name
    }
    pub fn clear_udp_listener_name(&mut self) {
        self.udp_listener_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_udp_listener_name(&mut self, v: ::std::string::String) {
        self.udp_listener_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_udp_listener_name(&mut self) -> &mut ::std::string::String {
        &mut self.udp_listener_name
    }

    // Take field
    pub fn take_udp_listener_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.udp_listener_name, ::std::string::String::new())
    }

    // .google.protobuf.Struct config = 2;


    pub fn get_config(&self) -> &::protobuf::well_known_types::Struct {
        match self.config_type {
            ::std::option::Option::Some(UdpListenerConfig_oneof_config_type::config(ref v)) => v,
            _ => <::protobuf::well_known_types::Struct as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_config(&mut self) {
        self.config_type = ::std::option::Option::None;
    }

    pub fn has_config(&self) -> bool {
        match self.config_type {
            ::std::option::Option::Some(UdpListenerConfig_oneof_config_type::config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_config(&mut self, v: ::protobuf::well_known_types::Struct) {
        self.config_type = ::std::option::Option::Some(UdpListenerConfig_oneof_config_type::config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_config(&mut self) -> &mut ::protobuf::well_known_types::Struct {
        if let ::std::option::Option::Some(UdpListenerConfig_oneof_config_type::config(_)) = self.config_type {
        } else {
            self.config_type = ::std::option::Option::Some(UdpListenerConfig_oneof_config_type::config(::protobuf::well_known_types::Struct::new()));
        }
        match self.config_type {
            ::std::option::Option::Some(UdpListenerConfig_oneof_config_type::config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_config(&mut self) -> ::protobuf::well_known_types::Struct {
        if self.has_config() {
            match self.config_type.take() {
                ::std::option::Option::Some(UdpListenerConfig_oneof_config_type::config(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Struct::new()
        }
    }

    // .google.protobuf.Any typed_config = 3;


    pub fn get_typed_config(&self) -> &::protobuf::well_known_types::Any {
        match self.config_type {
            ::std::option::Option::Some(UdpListenerConfig_oneof_config_type::typed_config(ref v)) => v,
            _ => <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_typed_config(&mut self) {
        self.config_type = ::std::option::Option::None;
    }

    pub fn has_typed_config(&self) -> bool {
        match self.config_type {
            ::std::option::Option::Some(UdpListenerConfig_oneof_config_type::typed_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_typed_config(&mut self, v: ::protobuf::well_known_types::Any) {
        self.config_type = ::std::option::Option::Some(UdpListenerConfig_oneof_config_type::typed_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_typed_config(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if let ::std::option::Option::Some(UdpListenerConfig_oneof_config_type::typed_config(_)) = self.config_type {
        } else {
            self.config_type = ::std::option::Option::Some(UdpListenerConfig_oneof_config_type::typed_config(::protobuf::well_known_types::Any::new()));
        }
        match self.config_type {
            ::std::option::Option::Some(UdpListenerConfig_oneof_config_type::typed_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_typed_config(&mut self) -> ::protobuf::well_known_types::Any {
        if self.has_typed_config() {
            match self.config_type.take() {
                ::std::option::Option::Some(UdpListenerConfig_oneof_config_type::typed_config(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Any::new()
        }
    }
}

impl ::protobuf::Message for UdpListenerConfig {
    fn is_initialized(&self) -> bool {
        if let Some(UdpListenerConfig_oneof_config_type::config(ref v)) = self.config_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(UdpListenerConfig_oneof_config_type::typed_config(ref v)) = self.config_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.udp_listener_name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config_type = ::std::option::Option::Some(UdpListenerConfig_oneof_config_type::config(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config_type = ::std::option::Option::Some(UdpListenerConfig_oneof_config_type::typed_config(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.udp_listener_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.udp_listener_name);
        }
        if let ::std::option::Option::Some(ref v) = self.config_type {
            match v {
                &UdpListenerConfig_oneof_config_type::config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &UdpListenerConfig_oneof_config_type::typed_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.udp_listener_name.is_empty() {
            os.write_string(1, &self.udp_listener_name)?;
        }
        if let ::std::option::Option::Some(ref v) = self.config_type {
            match v {
                &UdpListenerConfig_oneof_config_type::config(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &UdpListenerConfig_oneof_config_type::typed_config(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UdpListenerConfig {
        UdpListenerConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "udp_listener_name",
                |m: &UdpListenerConfig| { &m.udp_listener_name },
                |m: &mut UdpListenerConfig| { &mut m.udp_listener_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Struct>(
                "config",
                UdpListenerConfig::has_config,
                UdpListenerConfig::get_config,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Any>(
                "typed_config",
                UdpListenerConfig::has_typed_config,
                UdpListenerConfig::get_typed_config,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UdpListenerConfig>(
                "UdpListenerConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UdpListenerConfig {
        static instance: ::protobuf::rt::LazyV2<UdpListenerConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UdpListenerConfig::new)
    }
}

impl ::protobuf::Clear for UdpListenerConfig {
    fn clear(&mut self) {
        self.udp_listener_name.clear();
        self.config_type = ::std::option::Option::None;
        self.config_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UdpListenerConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UdpListenerConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ActiveRawUdpListenerConfig {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ActiveRawUdpListenerConfig {
    fn default() -> &'a ActiveRawUdpListenerConfig {
        <ActiveRawUdpListenerConfig as ::protobuf::Message>::default_instance()
    }
}

impl ActiveRawUdpListenerConfig {
    pub fn new() -> ActiveRawUdpListenerConfig {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ActiveRawUdpListenerConfig {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ActiveRawUdpListenerConfig {
        ActiveRawUdpListenerConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ActiveRawUdpListenerConfig>(
                "ActiveRawUdpListenerConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ActiveRawUdpListenerConfig {
        static instance: ::protobuf::rt::LazyV2<ActiveRawUdpListenerConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ActiveRawUdpListenerConfig::new)
    }
}

impl ::protobuf::Clear for ActiveRawUdpListenerConfig {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ActiveRawUdpListenerConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ActiveRawUdpListenerConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n/envoy/api/v2/listener/udp_listener_config.proto\x12\x15envoy.api.v2.l\
    istener\x1a\x19google/protobuf/any.proto\x1a\x1cgoogle/protobuf/struct.p\
    roto\x1a\x1eudpa/annotations/migrate.proto\x1a\x1dudpa/annotations/statu\
    s.proto\"\xc0\x01\n\x11UdpListenerConfig\x12*\n\x11udp_listener_name\x18\
    \x01\x20\x01(\tR\x0fudpListenerName\x125\n\x06config\x18\x02\x20\x01(\
    \x0b2\x17.google.protobuf.StructH\0R\x06configB\x02\x18\x01\x129\n\x0cty\
    ped_config\x18\x03\x20\x01(\x0b2\x14.google.protobuf.AnyH\0R\x0btypedCon\
    figB\r\n\x0bconfig_type\"\x1c\n\x1aActiveRawUdpListenerConfigB\x9b\x01\n\
    #io.envoyproxy.envoy.api.v2.listenerB\x16UdpListenerConfigProtoP\x01\xaa\
    \x02\x17Envoy.Api.V2.ListenerNS\xf2\x98\xfe\x8f\x05\x1a\x12\x18envoy.con\
    fig.listener.v3\xba\x80\xc8\xd1\x06\x02\x10\x01\xea\x02\x17Envoy.Api.V2.\
    ListenerNSb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
