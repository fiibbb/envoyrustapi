// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/api/v2/listener/quic_config.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct QuicProtocolOptions {
    // message fields
    pub max_concurrent_streams: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub idle_timeout: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub crypto_handshake_timeout: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QuicProtocolOptions {
    fn default() -> &'a QuicProtocolOptions {
        <QuicProtocolOptions as ::protobuf::Message>::default_instance()
    }
}

impl QuicProtocolOptions {
    pub fn new() -> QuicProtocolOptions {
        ::std::default::Default::default()
    }

    // .google.protobuf.UInt32Value max_concurrent_streams = 1;


    pub fn get_max_concurrent_streams(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.max_concurrent_streams.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_max_concurrent_streams(&mut self) {
        self.max_concurrent_streams.clear();
    }

    pub fn has_max_concurrent_streams(&self) -> bool {
        self.max_concurrent_streams.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_concurrent_streams(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.max_concurrent_streams = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_concurrent_streams(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.max_concurrent_streams.is_none() {
            self.max_concurrent_streams.set_default();
        }
        self.max_concurrent_streams.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_concurrent_streams(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.max_concurrent_streams.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.Duration idle_timeout = 2;


    pub fn get_idle_timeout(&self) -> &::protobuf::well_known_types::Duration {
        self.idle_timeout.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_idle_timeout(&mut self) {
        self.idle_timeout.clear();
    }

    pub fn has_idle_timeout(&self) -> bool {
        self.idle_timeout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_idle_timeout(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.idle_timeout = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_idle_timeout(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.idle_timeout.is_none() {
            self.idle_timeout.set_default();
        }
        self.idle_timeout.as_mut().unwrap()
    }

    // Take field
    pub fn take_idle_timeout(&mut self) -> ::protobuf::well_known_types::Duration {
        self.idle_timeout.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.Duration crypto_handshake_timeout = 3;


    pub fn get_crypto_handshake_timeout(&self) -> &::protobuf::well_known_types::Duration {
        self.crypto_handshake_timeout.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_crypto_handshake_timeout(&mut self) {
        self.crypto_handshake_timeout.clear();
    }

    pub fn has_crypto_handshake_timeout(&self) -> bool {
        self.crypto_handshake_timeout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_crypto_handshake_timeout(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.crypto_handshake_timeout = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_crypto_handshake_timeout(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.crypto_handshake_timeout.is_none() {
            self.crypto_handshake_timeout.set_default();
        }
        self.crypto_handshake_timeout.as_mut().unwrap()
    }

    // Take field
    pub fn take_crypto_handshake_timeout(&mut self) -> ::protobuf::well_known_types::Duration {
        self.crypto_handshake_timeout.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }
}

impl ::protobuf::Message for QuicProtocolOptions {
    fn is_initialized(&self) -> bool {
        for v in &self.max_concurrent_streams {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.idle_timeout {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.crypto_handshake_timeout {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_concurrent_streams)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.idle_timeout)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.crypto_handshake_timeout)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.max_concurrent_streams.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.idle_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.crypto_handshake_timeout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.max_concurrent_streams.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.idle_timeout.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.crypto_handshake_timeout.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QuicProtocolOptions {
        QuicProtocolOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "max_concurrent_streams",
                |m: &QuicProtocolOptions| { &m.max_concurrent_streams },
                |m: &mut QuicProtocolOptions| { &mut m.max_concurrent_streams },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "idle_timeout",
                |m: &QuicProtocolOptions| { &m.idle_timeout },
                |m: &mut QuicProtocolOptions| { &mut m.idle_timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "crypto_handshake_timeout",
                |m: &QuicProtocolOptions| { &m.crypto_handshake_timeout },
                |m: &mut QuicProtocolOptions| { &mut m.crypto_handshake_timeout },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QuicProtocolOptions>(
                "QuicProtocolOptions",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QuicProtocolOptions {
        static instance: ::protobuf::rt::LazyV2<QuicProtocolOptions> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QuicProtocolOptions::new)
    }
}

impl ::protobuf::Clear for QuicProtocolOptions {
    fn clear(&mut self) {
        self.max_concurrent_streams.clear();
        self.idle_timeout.clear();
        self.crypto_handshake_timeout.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QuicProtocolOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QuicProtocolOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n'envoy/api/v2/listener/quic_config.proto\x12\x15envoy.api.v2.listener\
    \x1a\x1egoogle/protobuf/duration.proto\x1a\x1egoogle/protobuf/wrappers.p\
    roto\x1a\x1eudpa/annotations/migrate.proto\x1a\x1dudpa/annotations/statu\
    s.proto\"\xfc\x01\n\x13QuicProtocolOptions\x12R\n\x16max_concurrent_stre\
    ams\x18\x01\x20\x01(\x0b2\x1c.google.protobuf.UInt32ValueR\x14maxConcurr\
    entStreams\x12<\n\x0cidle_timeout\x18\x02\x20\x01(\x0b2\x19.google.proto\
    buf.DurationR\x0bidleTimeout\x12S\n\x18crypto_handshake_timeout\x18\x03\
    \x20\x01(\x0b2\x19.google.protobuf.DurationR\x16cryptoHandshakeTimeoutB\
    \x94\x01\n#io.envoyproxy.envoy.api.v2.listenerB\x0fQuicConfigProtoP\x01\
    \xaa\x02\x17Envoy.Api.V2.ListenerNS\xf2\x98\xfe\x8f\x05\x1a\x12\x18envoy\
    .config.listener.v3\xea\x02\x17Envoy.Api.V2.ListenerNS\xba\x80\xc8\xd1\
    \x06\x02\x10\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
