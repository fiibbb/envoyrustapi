// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/api/v2/listener/listener_components.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct Filter {
    // message fields
    pub name: ::std::string::String,
    // message oneof groups
    pub config_type: ::std::option::Option<Filter_oneof_config_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Filter {
    fn default() -> &'a Filter {
        <Filter as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Filter_oneof_config_type {
    config(::protobuf::well_known_types::Struct),
    typed_config(::protobuf::well_known_types::Any),
}

impl Filter {
    pub fn new() -> Filter {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .google.protobuf.Struct config = 2;


    pub fn get_config(&self) -> &::protobuf::well_known_types::Struct {
        match self.config_type {
            ::std::option::Option::Some(Filter_oneof_config_type::config(ref v)) => v,
            _ => <::protobuf::well_known_types::Struct as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_config(&mut self) {
        self.config_type = ::std::option::Option::None;
    }

    pub fn has_config(&self) -> bool {
        match self.config_type {
            ::std::option::Option::Some(Filter_oneof_config_type::config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_config(&mut self, v: ::protobuf::well_known_types::Struct) {
        self.config_type = ::std::option::Option::Some(Filter_oneof_config_type::config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_config(&mut self) -> &mut ::protobuf::well_known_types::Struct {
        if let ::std::option::Option::Some(Filter_oneof_config_type::config(_)) = self.config_type {
        } else {
            self.config_type = ::std::option::Option::Some(Filter_oneof_config_type::config(::protobuf::well_known_types::Struct::new()));
        }
        match self.config_type {
            ::std::option::Option::Some(Filter_oneof_config_type::config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_config(&mut self) -> ::protobuf::well_known_types::Struct {
        if self.has_config() {
            match self.config_type.take() {
                ::std::option::Option::Some(Filter_oneof_config_type::config(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Struct::new()
        }
    }

    // .google.protobuf.Any typed_config = 4;


    pub fn get_typed_config(&self) -> &::protobuf::well_known_types::Any {
        match self.config_type {
            ::std::option::Option::Some(Filter_oneof_config_type::typed_config(ref v)) => v,
            _ => <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_typed_config(&mut self) {
        self.config_type = ::std::option::Option::None;
    }

    pub fn has_typed_config(&self) -> bool {
        match self.config_type {
            ::std::option::Option::Some(Filter_oneof_config_type::typed_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_typed_config(&mut self, v: ::protobuf::well_known_types::Any) {
        self.config_type = ::std::option::Option::Some(Filter_oneof_config_type::typed_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_typed_config(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if let ::std::option::Option::Some(Filter_oneof_config_type::typed_config(_)) = self.config_type {
        } else {
            self.config_type = ::std::option::Option::Some(Filter_oneof_config_type::typed_config(::protobuf::well_known_types::Any::new()));
        }
        match self.config_type {
            ::std::option::Option::Some(Filter_oneof_config_type::typed_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_typed_config(&mut self) -> ::protobuf::well_known_types::Any {
        if self.has_typed_config() {
            match self.config_type.take() {
                ::std::option::Option::Some(Filter_oneof_config_type::typed_config(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Any::new()
        }
    }
}

impl ::protobuf::Message for Filter {
    fn is_initialized(&self) -> bool {
        if let Some(Filter_oneof_config_type::config(ref v)) = self.config_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Filter_oneof_config_type::typed_config(ref v)) = self.config_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config_type = ::std::option::Option::Some(Filter_oneof_config_type::config(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config_type = ::std::option::Option::Some(Filter_oneof_config_type::typed_config(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let ::std::option::Option::Some(ref v) = self.config_type {
            match v {
                &Filter_oneof_config_type::config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Filter_oneof_config_type::typed_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let ::std::option::Option::Some(ref v) = self.config_type {
            match v {
                &Filter_oneof_config_type::config(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Filter_oneof_config_type::typed_config(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Filter {
        Filter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Filter| { &m.name },
                |m: &mut Filter| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Struct>(
                "config",
                Filter::has_config,
                Filter::get_config,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Any>(
                "typed_config",
                Filter::has_typed_config,
                Filter::get_typed_config,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Filter>(
                "Filter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Filter {
        static instance: ::protobuf::rt::LazyV2<Filter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Filter::new)
    }
}

impl ::protobuf::Clear for Filter {
    fn clear(&mut self) {
        self.name.clear();
        self.config_type = ::std::option::Option::None;
        self.config_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Filter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Filter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FilterChainMatch {
    // message fields
    pub destination_port: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub prefix_ranges: ::protobuf::RepeatedField<super::address::CidrRange>,
    pub address_suffix: ::std::string::String,
    pub suffix_len: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub source_type: FilterChainMatch_ConnectionSourceType,
    pub source_prefix_ranges: ::protobuf::RepeatedField<super::address::CidrRange>,
    pub source_ports: ::std::vec::Vec<u32>,
    pub server_names: ::protobuf::RepeatedField<::std::string::String>,
    pub transport_protocol: ::std::string::String,
    pub application_protocols: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FilterChainMatch {
    fn default() -> &'a FilterChainMatch {
        <FilterChainMatch as ::protobuf::Message>::default_instance()
    }
}

impl FilterChainMatch {
    pub fn new() -> FilterChainMatch {
        ::std::default::Default::default()
    }

    // .google.protobuf.UInt32Value destination_port = 8;


    pub fn get_destination_port(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.destination_port.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_destination_port(&mut self) {
        self.destination_port.clear();
    }

    pub fn has_destination_port(&self) -> bool {
        self.destination_port.is_some()
    }

    // Param is passed by value, moved
    pub fn set_destination_port(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.destination_port = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_destination_port(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.destination_port.is_none() {
            self.destination_port.set_default();
        }
        self.destination_port.as_mut().unwrap()
    }

    // Take field
    pub fn take_destination_port(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.destination_port.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // repeated .envoy.api.v2.core.CidrRange prefix_ranges = 3;


    pub fn get_prefix_ranges(&self) -> &[super::address::CidrRange] {
        &self.prefix_ranges
    }
    pub fn clear_prefix_ranges(&mut self) {
        self.prefix_ranges.clear();
    }

    // Param is passed by value, moved
    pub fn set_prefix_ranges(&mut self, v: ::protobuf::RepeatedField<super::address::CidrRange>) {
        self.prefix_ranges = v;
    }

    // Mutable pointer to the field.
    pub fn mut_prefix_ranges(&mut self) -> &mut ::protobuf::RepeatedField<super::address::CidrRange> {
        &mut self.prefix_ranges
    }

    // Take field
    pub fn take_prefix_ranges(&mut self) -> ::protobuf::RepeatedField<super::address::CidrRange> {
        ::std::mem::replace(&mut self.prefix_ranges, ::protobuf::RepeatedField::new())
    }

    // string address_suffix = 4;


    pub fn get_address_suffix(&self) -> &str {
        &self.address_suffix
    }
    pub fn clear_address_suffix(&mut self) {
        self.address_suffix.clear();
    }

    // Param is passed by value, moved
    pub fn set_address_suffix(&mut self, v: ::std::string::String) {
        self.address_suffix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address_suffix(&mut self) -> &mut ::std::string::String {
        &mut self.address_suffix
    }

    // Take field
    pub fn take_address_suffix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address_suffix, ::std::string::String::new())
    }

    // .google.protobuf.UInt32Value suffix_len = 5;


    pub fn get_suffix_len(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.suffix_len.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_suffix_len(&mut self) {
        self.suffix_len.clear();
    }

    pub fn has_suffix_len(&self) -> bool {
        self.suffix_len.is_some()
    }

    // Param is passed by value, moved
    pub fn set_suffix_len(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.suffix_len = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_suffix_len(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.suffix_len.is_none() {
            self.suffix_len.set_default();
        }
        self.suffix_len.as_mut().unwrap()
    }

    // Take field
    pub fn take_suffix_len(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.suffix_len.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .envoy.api.v2.listener.FilterChainMatch.ConnectionSourceType source_type = 12;


    pub fn get_source_type(&self) -> FilterChainMatch_ConnectionSourceType {
        self.source_type
    }
    pub fn clear_source_type(&mut self) {
        self.source_type = FilterChainMatch_ConnectionSourceType::ANY;
    }

    // Param is passed by value, moved
    pub fn set_source_type(&mut self, v: FilterChainMatch_ConnectionSourceType) {
        self.source_type = v;
    }

    // repeated .envoy.api.v2.core.CidrRange source_prefix_ranges = 6;


    pub fn get_source_prefix_ranges(&self) -> &[super::address::CidrRange] {
        &self.source_prefix_ranges
    }
    pub fn clear_source_prefix_ranges(&mut self) {
        self.source_prefix_ranges.clear();
    }

    // Param is passed by value, moved
    pub fn set_source_prefix_ranges(&mut self, v: ::protobuf::RepeatedField<super::address::CidrRange>) {
        self.source_prefix_ranges = v;
    }

    // Mutable pointer to the field.
    pub fn mut_source_prefix_ranges(&mut self) -> &mut ::protobuf::RepeatedField<super::address::CidrRange> {
        &mut self.source_prefix_ranges
    }

    // Take field
    pub fn take_source_prefix_ranges(&mut self) -> ::protobuf::RepeatedField<super::address::CidrRange> {
        ::std::mem::replace(&mut self.source_prefix_ranges, ::protobuf::RepeatedField::new())
    }

    // repeated uint32 source_ports = 7;


    pub fn get_source_ports(&self) -> &[u32] {
        &self.source_ports
    }
    pub fn clear_source_ports(&mut self) {
        self.source_ports.clear();
    }

    // Param is passed by value, moved
    pub fn set_source_ports(&mut self, v: ::std::vec::Vec<u32>) {
        self.source_ports = v;
    }

    // Mutable pointer to the field.
    pub fn mut_source_ports(&mut self) -> &mut ::std::vec::Vec<u32> {
        &mut self.source_ports
    }

    // Take field
    pub fn take_source_ports(&mut self) -> ::std::vec::Vec<u32> {
        ::std::mem::replace(&mut self.source_ports, ::std::vec::Vec::new())
    }

    // repeated string server_names = 11;


    pub fn get_server_names(&self) -> &[::std::string::String] {
        &self.server_names
    }
    pub fn clear_server_names(&mut self) {
        self.server_names.clear();
    }

    // Param is passed by value, moved
    pub fn set_server_names(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.server_names = v;
    }

    // Mutable pointer to the field.
    pub fn mut_server_names(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.server_names
    }

    // Take field
    pub fn take_server_names(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.server_names, ::protobuf::RepeatedField::new())
    }

    // string transport_protocol = 9;


    pub fn get_transport_protocol(&self) -> &str {
        &self.transport_protocol
    }
    pub fn clear_transport_protocol(&mut self) {
        self.transport_protocol.clear();
    }

    // Param is passed by value, moved
    pub fn set_transport_protocol(&mut self, v: ::std::string::String) {
        self.transport_protocol = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transport_protocol(&mut self) -> &mut ::std::string::String {
        &mut self.transport_protocol
    }

    // Take field
    pub fn take_transport_protocol(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.transport_protocol, ::std::string::String::new())
    }

    // repeated string application_protocols = 10;


    pub fn get_application_protocols(&self) -> &[::std::string::String] {
        &self.application_protocols
    }
    pub fn clear_application_protocols(&mut self) {
        self.application_protocols.clear();
    }

    // Param is passed by value, moved
    pub fn set_application_protocols(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.application_protocols = v;
    }

    // Mutable pointer to the field.
    pub fn mut_application_protocols(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.application_protocols
    }

    // Take field
    pub fn take_application_protocols(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.application_protocols, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for FilterChainMatch {
    fn is_initialized(&self) -> bool {
        for v in &self.destination_port {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.prefix_ranges {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.suffix_len {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.source_prefix_ranges {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.destination_port)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.prefix_ranges)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address_suffix)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.suffix_len)?;
                },
                12 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.source_type, 12, &mut self.unknown_fields)?
                },
                6 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.source_prefix_ranges)?;
                },
                7 => {
                    ::protobuf::rt::read_repeated_uint32_into(wire_type, is, &mut self.source_ports)?;
                },
                11 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.server_names)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.transport_protocol)?;
                },
                10 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.application_protocols)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.destination_port.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.prefix_ranges {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.address_suffix.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.address_suffix);
        }
        if let Some(ref v) = self.suffix_len.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.source_type != FilterChainMatch_ConnectionSourceType::ANY {
            my_size += ::protobuf::rt::enum_size(12, self.source_type);
        }
        for value in &self.source_prefix_ranges {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.source_ports {
            my_size += ::protobuf::rt::value_size(7, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        for value in &self.server_names {
            my_size += ::protobuf::rt::string_size(11, &value);
        };
        if !self.transport_protocol.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.transport_protocol);
        }
        for value in &self.application_protocols {
            my_size += ::protobuf::rt::string_size(10, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.destination_port.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.prefix_ranges {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.address_suffix.is_empty() {
            os.write_string(4, &self.address_suffix)?;
        }
        if let Some(ref v) = self.suffix_len.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.source_type != FilterChainMatch_ConnectionSourceType::ANY {
            os.write_enum(12, ::protobuf::ProtobufEnum::value(&self.source_type))?;
        }
        for v in &self.source_prefix_ranges {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.source_ports {
            os.write_uint32(7, *v)?;
        };
        for v in &self.server_names {
            os.write_string(11, &v)?;
        };
        if !self.transport_protocol.is_empty() {
            os.write_string(9, &self.transport_protocol)?;
        }
        for v in &self.application_protocols {
            os.write_string(10, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FilterChainMatch {
        FilterChainMatch::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "destination_port",
                |m: &FilterChainMatch| { &m.destination_port },
                |m: &mut FilterChainMatch| { &mut m.destination_port },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::address::CidrRange>>(
                "prefix_ranges",
                |m: &FilterChainMatch| { &m.prefix_ranges },
                |m: &mut FilterChainMatch| { &mut m.prefix_ranges },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address_suffix",
                |m: &FilterChainMatch| { &m.address_suffix },
                |m: &mut FilterChainMatch| { &mut m.address_suffix },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "suffix_len",
                |m: &FilterChainMatch| { &m.suffix_len },
                |m: &mut FilterChainMatch| { &mut m.suffix_len },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<FilterChainMatch_ConnectionSourceType>>(
                "source_type",
                |m: &FilterChainMatch| { &m.source_type },
                |m: &mut FilterChainMatch| { &mut m.source_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::address::CidrRange>>(
                "source_prefix_ranges",
                |m: &FilterChainMatch| { &m.source_prefix_ranges },
                |m: &mut FilterChainMatch| { &mut m.source_prefix_ranges },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "source_ports",
                |m: &FilterChainMatch| { &m.source_ports },
                |m: &mut FilterChainMatch| { &mut m.source_ports },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "server_names",
                |m: &FilterChainMatch| { &m.server_names },
                |m: &mut FilterChainMatch| { &mut m.server_names },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "transport_protocol",
                |m: &FilterChainMatch| { &m.transport_protocol },
                |m: &mut FilterChainMatch| { &mut m.transport_protocol },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "application_protocols",
                |m: &FilterChainMatch| { &m.application_protocols },
                |m: &mut FilterChainMatch| { &mut m.application_protocols },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FilterChainMatch>(
                "FilterChainMatch",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FilterChainMatch {
        static instance: ::protobuf::rt::LazyV2<FilterChainMatch> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FilterChainMatch::new)
    }
}

impl ::protobuf::Clear for FilterChainMatch {
    fn clear(&mut self) {
        self.destination_port.clear();
        self.prefix_ranges.clear();
        self.address_suffix.clear();
        self.suffix_len.clear();
        self.source_type = FilterChainMatch_ConnectionSourceType::ANY;
        self.source_prefix_ranges.clear();
        self.source_ports.clear();
        self.server_names.clear();
        self.transport_protocol.clear();
        self.application_protocols.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FilterChainMatch {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FilterChainMatch {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum FilterChainMatch_ConnectionSourceType {
    ANY = 0,
    LOCAL = 1,
    EXTERNAL = 2,
}

impl ::protobuf::ProtobufEnum for FilterChainMatch_ConnectionSourceType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<FilterChainMatch_ConnectionSourceType> {
        match value {
            0 => ::std::option::Option::Some(FilterChainMatch_ConnectionSourceType::ANY),
            1 => ::std::option::Option::Some(FilterChainMatch_ConnectionSourceType::LOCAL),
            2 => ::std::option::Option::Some(FilterChainMatch_ConnectionSourceType::EXTERNAL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [FilterChainMatch_ConnectionSourceType] = &[
            FilterChainMatch_ConnectionSourceType::ANY,
            FilterChainMatch_ConnectionSourceType::LOCAL,
            FilterChainMatch_ConnectionSourceType::EXTERNAL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<FilterChainMatch_ConnectionSourceType>("FilterChainMatch.ConnectionSourceType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for FilterChainMatch_ConnectionSourceType {
}

impl ::std::default::Default for FilterChainMatch_ConnectionSourceType {
    fn default() -> Self {
        FilterChainMatch_ConnectionSourceType::ANY
    }
}

impl ::protobuf::reflect::ProtobufValue for FilterChainMatch_ConnectionSourceType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FilterChain {
    // message fields
    pub filter_chain_match: ::protobuf::SingularPtrField<FilterChainMatch>,
    pub tls_context: ::protobuf::SingularPtrField<super::tls::DownstreamTlsContext>,
    pub filters: ::protobuf::RepeatedField<Filter>,
    pub use_proxy_proto: ::protobuf::SingularPtrField<::protobuf::well_known_types::BoolValue>,
    pub metadata: ::protobuf::SingularPtrField<super::base::Metadata>,
    pub transport_socket: ::protobuf::SingularPtrField<super::base::TransportSocket>,
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FilterChain {
    fn default() -> &'a FilterChain {
        <FilterChain as ::protobuf::Message>::default_instance()
    }
}

impl FilterChain {
    pub fn new() -> FilterChain {
        ::std::default::Default::default()
    }

    // .envoy.api.v2.listener.FilterChainMatch filter_chain_match = 1;


    pub fn get_filter_chain_match(&self) -> &FilterChainMatch {
        self.filter_chain_match.as_ref().unwrap_or_else(|| <FilterChainMatch as ::protobuf::Message>::default_instance())
    }
    pub fn clear_filter_chain_match(&mut self) {
        self.filter_chain_match.clear();
    }

    pub fn has_filter_chain_match(&self) -> bool {
        self.filter_chain_match.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filter_chain_match(&mut self, v: FilterChainMatch) {
        self.filter_chain_match = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter_chain_match(&mut self) -> &mut FilterChainMatch {
        if self.filter_chain_match.is_none() {
            self.filter_chain_match.set_default();
        }
        self.filter_chain_match.as_mut().unwrap()
    }

    // Take field
    pub fn take_filter_chain_match(&mut self) -> FilterChainMatch {
        self.filter_chain_match.take().unwrap_or_else(|| FilterChainMatch::new())
    }

    // .envoy.api.v2.auth.DownstreamTlsContext tls_context = 2;


    pub fn get_tls_context(&self) -> &super::tls::DownstreamTlsContext {
        self.tls_context.as_ref().unwrap_or_else(|| <super::tls::DownstreamTlsContext as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tls_context(&mut self) {
        self.tls_context.clear();
    }

    pub fn has_tls_context(&self) -> bool {
        self.tls_context.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tls_context(&mut self, v: super::tls::DownstreamTlsContext) {
        self.tls_context = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tls_context(&mut self) -> &mut super::tls::DownstreamTlsContext {
        if self.tls_context.is_none() {
            self.tls_context.set_default();
        }
        self.tls_context.as_mut().unwrap()
    }

    // Take field
    pub fn take_tls_context(&mut self) -> super::tls::DownstreamTlsContext {
        self.tls_context.take().unwrap_or_else(|| super::tls::DownstreamTlsContext::new())
    }

    // repeated .envoy.api.v2.listener.Filter filters = 3;


    pub fn get_filters(&self) -> &[Filter] {
        &self.filters
    }
    pub fn clear_filters(&mut self) {
        self.filters.clear();
    }

    // Param is passed by value, moved
    pub fn set_filters(&mut self, v: ::protobuf::RepeatedField<Filter>) {
        self.filters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_filters(&mut self) -> &mut ::protobuf::RepeatedField<Filter> {
        &mut self.filters
    }

    // Take field
    pub fn take_filters(&mut self) -> ::protobuf::RepeatedField<Filter> {
        ::std::mem::replace(&mut self.filters, ::protobuf::RepeatedField::new())
    }

    // .google.protobuf.BoolValue use_proxy_proto = 4;


    pub fn get_use_proxy_proto(&self) -> &::protobuf::well_known_types::BoolValue {
        self.use_proxy_proto.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::BoolValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_use_proxy_proto(&mut self) {
        self.use_proxy_proto.clear();
    }

    pub fn has_use_proxy_proto(&self) -> bool {
        self.use_proxy_proto.is_some()
    }

    // Param is passed by value, moved
    pub fn set_use_proxy_proto(&mut self, v: ::protobuf::well_known_types::BoolValue) {
        self.use_proxy_proto = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_use_proxy_proto(&mut self) -> &mut ::protobuf::well_known_types::BoolValue {
        if self.use_proxy_proto.is_none() {
            self.use_proxy_proto.set_default();
        }
        self.use_proxy_proto.as_mut().unwrap()
    }

    // Take field
    pub fn take_use_proxy_proto(&mut self) -> ::protobuf::well_known_types::BoolValue {
        self.use_proxy_proto.take().unwrap_or_else(|| ::protobuf::well_known_types::BoolValue::new())
    }

    // .envoy.api.v2.core.Metadata metadata = 5;


    pub fn get_metadata(&self) -> &super::base::Metadata {
        self.metadata.as_ref().unwrap_or_else(|| <super::base::Metadata as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: super::base::Metadata) {
        self.metadata = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut super::base::Metadata {
        if self.metadata.is_none() {
            self.metadata.set_default();
        }
        self.metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata(&mut self) -> super::base::Metadata {
        self.metadata.take().unwrap_or_else(|| super::base::Metadata::new())
    }

    // .envoy.api.v2.core.TransportSocket transport_socket = 6;


    pub fn get_transport_socket(&self) -> &super::base::TransportSocket {
        self.transport_socket.as_ref().unwrap_or_else(|| <super::base::TransportSocket as ::protobuf::Message>::default_instance())
    }
    pub fn clear_transport_socket(&mut self) {
        self.transport_socket.clear();
    }

    pub fn has_transport_socket(&self) -> bool {
        self.transport_socket.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transport_socket(&mut self, v: super::base::TransportSocket) {
        self.transport_socket = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transport_socket(&mut self) -> &mut super::base::TransportSocket {
        if self.transport_socket.is_none() {
            self.transport_socket.set_default();
        }
        self.transport_socket.as_mut().unwrap()
    }

    // Take field
    pub fn take_transport_socket(&mut self) -> super::base::TransportSocket {
        self.transport_socket.take().unwrap_or_else(|| super::base::TransportSocket::new())
    }

    // string name = 7;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for FilterChain {
    fn is_initialized(&self) -> bool {
        for v in &self.filter_chain_match {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tls_context {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.filters {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.use_proxy_proto {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.transport_socket {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.filter_chain_match)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tls_context)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.filters)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.use_proxy_proto)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transport_socket)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.filter_chain_match.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.tls_context.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.filters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.use_proxy_proto.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.transport_socket.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.filter_chain_match.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.tls_context.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.filters {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.use_proxy_proto.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.metadata.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.transport_socket.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.name.is_empty() {
            os.write_string(7, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FilterChain {
        FilterChain::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FilterChainMatch>>(
                "filter_chain_match",
                |m: &FilterChain| { &m.filter_chain_match },
                |m: &mut FilterChain| { &mut m.filter_chain_match },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::tls::DownstreamTlsContext>>(
                "tls_context",
                |m: &FilterChain| { &m.tls_context },
                |m: &mut FilterChain| { &mut m.tls_context },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Filter>>(
                "filters",
                |m: &FilterChain| { &m.filters },
                |m: &mut FilterChain| { &mut m.filters },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::BoolValue>>(
                "use_proxy_proto",
                |m: &FilterChain| { &m.use_proxy_proto },
                |m: &mut FilterChain| { &mut m.use_proxy_proto },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Metadata>>(
                "metadata",
                |m: &FilterChain| { &m.metadata },
                |m: &mut FilterChain| { &mut m.metadata },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::TransportSocket>>(
                "transport_socket",
                |m: &FilterChain| { &m.transport_socket },
                |m: &mut FilterChain| { &mut m.transport_socket },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &FilterChain| { &m.name },
                |m: &mut FilterChain| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FilterChain>(
                "FilterChain",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FilterChain {
        static instance: ::protobuf::rt::LazyV2<FilterChain> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FilterChain::new)
    }
}

impl ::protobuf::Clear for FilterChain {
    fn clear(&mut self) {
        self.filter_chain_match.clear();
        self.tls_context.clear();
        self.filters.clear();
        self.use_proxy_proto.clear();
        self.metadata.clear();
        self.transport_socket.clear();
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FilterChain {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FilterChain {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListenerFilterChainMatchPredicate {
    // message oneof groups
    pub rule: ::std::option::Option<ListenerFilterChainMatchPredicate_oneof_rule>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListenerFilterChainMatchPredicate {
    fn default() -> &'a ListenerFilterChainMatchPredicate {
        <ListenerFilterChainMatchPredicate as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ListenerFilterChainMatchPredicate_oneof_rule {
    or_match(ListenerFilterChainMatchPredicate_MatchSet),
    and_match(ListenerFilterChainMatchPredicate_MatchSet),
    not_match(::std::boxed::Box<ListenerFilterChainMatchPredicate>),
    any_match(bool),
    destination_port_range(super::range::Int32Range),
}

impl ListenerFilterChainMatchPredicate {
    pub fn new() -> ListenerFilterChainMatchPredicate {
        ::std::default::Default::default()
    }

    // .envoy.api.v2.listener.ListenerFilterChainMatchPredicate.MatchSet or_match = 1;


    pub fn get_or_match(&self) -> &ListenerFilterChainMatchPredicate_MatchSet {
        match self.rule {
            ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::or_match(ref v)) => v,
            _ => <ListenerFilterChainMatchPredicate_MatchSet as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_or_match(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_or_match(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::or_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_or_match(&mut self, v: ListenerFilterChainMatchPredicate_MatchSet) {
        self.rule = ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::or_match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_or_match(&mut self) -> &mut ListenerFilterChainMatchPredicate_MatchSet {
        if let ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::or_match(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::or_match(ListenerFilterChainMatchPredicate_MatchSet::new()));
        }
        match self.rule {
            ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::or_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_or_match(&mut self) -> ListenerFilterChainMatchPredicate_MatchSet {
        if self.has_or_match() {
            match self.rule.take() {
                ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::or_match(v)) => v,
                _ => panic!(),
            }
        } else {
            ListenerFilterChainMatchPredicate_MatchSet::new()
        }
    }

    // .envoy.api.v2.listener.ListenerFilterChainMatchPredicate.MatchSet and_match = 2;


    pub fn get_and_match(&self) -> &ListenerFilterChainMatchPredicate_MatchSet {
        match self.rule {
            ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::and_match(ref v)) => v,
            _ => <ListenerFilterChainMatchPredicate_MatchSet as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_and_match(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_and_match(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::and_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_and_match(&mut self, v: ListenerFilterChainMatchPredicate_MatchSet) {
        self.rule = ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::and_match(v))
    }

    // Mutable pointer to the field.
    pub fn mut_and_match(&mut self) -> &mut ListenerFilterChainMatchPredicate_MatchSet {
        if let ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::and_match(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::and_match(ListenerFilterChainMatchPredicate_MatchSet::new()));
        }
        match self.rule {
            ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::and_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_and_match(&mut self) -> ListenerFilterChainMatchPredicate_MatchSet {
        if self.has_and_match() {
            match self.rule.take() {
                ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::and_match(v)) => v,
                _ => panic!(),
            }
        } else {
            ListenerFilterChainMatchPredicate_MatchSet::new()
        }
    }

    // .envoy.api.v2.listener.ListenerFilterChainMatchPredicate not_match = 3;


    pub fn get_not_match(&self) -> &ListenerFilterChainMatchPredicate {
        match self.rule {
            ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::not_match(ref v)) => v,
            _ => <ListenerFilterChainMatchPredicate as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_not_match(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_not_match(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::not_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_not_match(&mut self, v: ListenerFilterChainMatchPredicate) {
        self.rule = ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::not_match(::std::boxed::Box::new(v)))
    }

    // Mutable pointer to the field.
    pub fn mut_not_match(&mut self) -> &mut ListenerFilterChainMatchPredicate {
        if let ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::not_match(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::not_match(::std::boxed::Box::new(ListenerFilterChainMatchPredicate::new())));
        }
        match self.rule {
            ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::not_match(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_not_match(&mut self) -> ListenerFilterChainMatchPredicate {
        if self.has_not_match() {
            match self.rule.take() {
                ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::not_match(v)) => *v,
                _ => panic!(),
            }
        } else {
            ListenerFilterChainMatchPredicate::new()
        }
    }

    // bool any_match = 4;


    pub fn get_any_match(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::any_match(v)) => v,
            _ => false,
        }
    }
    pub fn clear_any_match(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_any_match(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::any_match(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_any_match(&mut self, v: bool) {
        self.rule = ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::any_match(v))
    }

    // .envoy.type.Int32Range destination_port_range = 5;


    pub fn get_destination_port_range(&self) -> &super::range::Int32Range {
        match self.rule {
            ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::destination_port_range(ref v)) => v,
            _ => <super::range::Int32Range as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_destination_port_range(&mut self) {
        self.rule = ::std::option::Option::None;
    }

    pub fn has_destination_port_range(&self) -> bool {
        match self.rule {
            ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::destination_port_range(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_destination_port_range(&mut self, v: super::range::Int32Range) {
        self.rule = ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::destination_port_range(v))
    }

    // Mutable pointer to the field.
    pub fn mut_destination_port_range(&mut self) -> &mut super::range::Int32Range {
        if let ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::destination_port_range(_)) = self.rule {
        } else {
            self.rule = ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::destination_port_range(super::range::Int32Range::new()));
        }
        match self.rule {
            ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::destination_port_range(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_destination_port_range(&mut self) -> super::range::Int32Range {
        if self.has_destination_port_range() {
            match self.rule.take() {
                ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::destination_port_range(v)) => v,
                _ => panic!(),
            }
        } else {
            super::range::Int32Range::new()
        }
    }
}

impl ::protobuf::Message for ListenerFilterChainMatchPredicate {
    fn is_initialized(&self) -> bool {
        if let Some(ListenerFilterChainMatchPredicate_oneof_rule::or_match(ref v)) = self.rule {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ListenerFilterChainMatchPredicate_oneof_rule::and_match(ref v)) = self.rule {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ListenerFilterChainMatchPredicate_oneof_rule::not_match(ref v)) = self.rule {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ListenerFilterChainMatchPredicate_oneof_rule::destination_port_range(ref v)) = self.rule {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::or_match(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::and_match(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::not_match(::std::boxed::Box::new(is.read_message()?)));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::any_match(is.read_bool()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.rule = ::std::option::Option::Some(ListenerFilterChainMatchPredicate_oneof_rule::destination_port_range(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.rule {
            match v {
                &ListenerFilterChainMatchPredicate_oneof_rule::or_match(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ListenerFilterChainMatchPredicate_oneof_rule::and_match(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ListenerFilterChainMatchPredicate_oneof_rule::not_match(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ListenerFilterChainMatchPredicate_oneof_rule::any_match(v) => {
                    my_size += 2;
                },
                &ListenerFilterChainMatchPredicate_oneof_rule::destination_port_range(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.rule {
            match v {
                &ListenerFilterChainMatchPredicate_oneof_rule::or_match(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ListenerFilterChainMatchPredicate_oneof_rule::and_match(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ListenerFilterChainMatchPredicate_oneof_rule::not_match(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ListenerFilterChainMatchPredicate_oneof_rule::any_match(v) => {
                    os.write_bool(4, v)?;
                },
                &ListenerFilterChainMatchPredicate_oneof_rule::destination_port_range(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListenerFilterChainMatchPredicate {
        ListenerFilterChainMatchPredicate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ListenerFilterChainMatchPredicate_MatchSet>(
                "or_match",
                ListenerFilterChainMatchPredicate::has_or_match,
                ListenerFilterChainMatchPredicate::get_or_match,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ListenerFilterChainMatchPredicate_MatchSet>(
                "and_match",
                ListenerFilterChainMatchPredicate::has_and_match,
                ListenerFilterChainMatchPredicate::get_and_match,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ListenerFilterChainMatchPredicate>(
                "not_match",
                ListenerFilterChainMatchPredicate::has_not_match,
                ListenerFilterChainMatchPredicate::get_not_match,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "any_match",
                ListenerFilterChainMatchPredicate::has_any_match,
                ListenerFilterChainMatchPredicate::get_any_match,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::range::Int32Range>(
                "destination_port_range",
                ListenerFilterChainMatchPredicate::has_destination_port_range,
                ListenerFilterChainMatchPredicate::get_destination_port_range,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListenerFilterChainMatchPredicate>(
                "ListenerFilterChainMatchPredicate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListenerFilterChainMatchPredicate {
        static instance: ::protobuf::rt::LazyV2<ListenerFilterChainMatchPredicate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListenerFilterChainMatchPredicate::new)
    }
}

impl ::protobuf::Clear for ListenerFilterChainMatchPredicate {
    fn clear(&mut self) {
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.rule = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListenerFilterChainMatchPredicate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListenerFilterChainMatchPredicate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListenerFilterChainMatchPredicate_MatchSet {
    // message fields
    pub rules: ::protobuf::RepeatedField<ListenerFilterChainMatchPredicate>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListenerFilterChainMatchPredicate_MatchSet {
    fn default() -> &'a ListenerFilterChainMatchPredicate_MatchSet {
        <ListenerFilterChainMatchPredicate_MatchSet as ::protobuf::Message>::default_instance()
    }
}

impl ListenerFilterChainMatchPredicate_MatchSet {
    pub fn new() -> ListenerFilterChainMatchPredicate_MatchSet {
        ::std::default::Default::default()
    }

    // repeated .envoy.api.v2.listener.ListenerFilterChainMatchPredicate rules = 1;


    pub fn get_rules(&self) -> &[ListenerFilterChainMatchPredicate] {
        &self.rules
    }
    pub fn clear_rules(&mut self) {
        self.rules.clear();
    }

    // Param is passed by value, moved
    pub fn set_rules(&mut self, v: ::protobuf::RepeatedField<ListenerFilterChainMatchPredicate>) {
        self.rules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rules(&mut self) -> &mut ::protobuf::RepeatedField<ListenerFilterChainMatchPredicate> {
        &mut self.rules
    }

    // Take field
    pub fn take_rules(&mut self) -> ::protobuf::RepeatedField<ListenerFilterChainMatchPredicate> {
        ::std::mem::replace(&mut self.rules, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ListenerFilterChainMatchPredicate_MatchSet {
    fn is_initialized(&self) -> bool {
        for v in &self.rules {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rules)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.rules {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListenerFilterChainMatchPredicate_MatchSet {
        ListenerFilterChainMatchPredicate_MatchSet::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ListenerFilterChainMatchPredicate>>(
                "rules",
                |m: &ListenerFilterChainMatchPredicate_MatchSet| { &m.rules },
                |m: &mut ListenerFilterChainMatchPredicate_MatchSet| { &mut m.rules },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListenerFilterChainMatchPredicate_MatchSet>(
                "ListenerFilterChainMatchPredicate.MatchSet",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListenerFilterChainMatchPredicate_MatchSet {
        static instance: ::protobuf::rt::LazyV2<ListenerFilterChainMatchPredicate_MatchSet> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListenerFilterChainMatchPredicate_MatchSet::new)
    }
}

impl ::protobuf::Clear for ListenerFilterChainMatchPredicate_MatchSet {
    fn clear(&mut self) {
        self.rules.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListenerFilterChainMatchPredicate_MatchSet {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListenerFilterChainMatchPredicate_MatchSet {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListenerFilter {
    // message fields
    pub name: ::std::string::String,
    pub filter_disabled: ::protobuf::SingularPtrField<ListenerFilterChainMatchPredicate>,
    // message oneof groups
    pub config_type: ::std::option::Option<ListenerFilter_oneof_config_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListenerFilter {
    fn default() -> &'a ListenerFilter {
        <ListenerFilter as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum ListenerFilter_oneof_config_type {
    config(::protobuf::well_known_types::Struct),
    typed_config(::protobuf::well_known_types::Any),
}

impl ListenerFilter {
    pub fn new() -> ListenerFilter {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .google.protobuf.Struct config = 2;


    pub fn get_config(&self) -> &::protobuf::well_known_types::Struct {
        match self.config_type {
            ::std::option::Option::Some(ListenerFilter_oneof_config_type::config(ref v)) => v,
            _ => <::protobuf::well_known_types::Struct as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_config(&mut self) {
        self.config_type = ::std::option::Option::None;
    }

    pub fn has_config(&self) -> bool {
        match self.config_type {
            ::std::option::Option::Some(ListenerFilter_oneof_config_type::config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_config(&mut self, v: ::protobuf::well_known_types::Struct) {
        self.config_type = ::std::option::Option::Some(ListenerFilter_oneof_config_type::config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_config(&mut self) -> &mut ::protobuf::well_known_types::Struct {
        if let ::std::option::Option::Some(ListenerFilter_oneof_config_type::config(_)) = self.config_type {
        } else {
            self.config_type = ::std::option::Option::Some(ListenerFilter_oneof_config_type::config(::protobuf::well_known_types::Struct::new()));
        }
        match self.config_type {
            ::std::option::Option::Some(ListenerFilter_oneof_config_type::config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_config(&mut self) -> ::protobuf::well_known_types::Struct {
        if self.has_config() {
            match self.config_type.take() {
                ::std::option::Option::Some(ListenerFilter_oneof_config_type::config(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Struct::new()
        }
    }

    // .google.protobuf.Any typed_config = 3;


    pub fn get_typed_config(&self) -> &::protobuf::well_known_types::Any {
        match self.config_type {
            ::std::option::Option::Some(ListenerFilter_oneof_config_type::typed_config(ref v)) => v,
            _ => <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_typed_config(&mut self) {
        self.config_type = ::std::option::Option::None;
    }

    pub fn has_typed_config(&self) -> bool {
        match self.config_type {
            ::std::option::Option::Some(ListenerFilter_oneof_config_type::typed_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_typed_config(&mut self, v: ::protobuf::well_known_types::Any) {
        self.config_type = ::std::option::Option::Some(ListenerFilter_oneof_config_type::typed_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_typed_config(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if let ::std::option::Option::Some(ListenerFilter_oneof_config_type::typed_config(_)) = self.config_type {
        } else {
            self.config_type = ::std::option::Option::Some(ListenerFilter_oneof_config_type::typed_config(::protobuf::well_known_types::Any::new()));
        }
        match self.config_type {
            ::std::option::Option::Some(ListenerFilter_oneof_config_type::typed_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_typed_config(&mut self) -> ::protobuf::well_known_types::Any {
        if self.has_typed_config() {
            match self.config_type.take() {
                ::std::option::Option::Some(ListenerFilter_oneof_config_type::typed_config(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Any::new()
        }
    }

    // .envoy.api.v2.listener.ListenerFilterChainMatchPredicate filter_disabled = 4;


    pub fn get_filter_disabled(&self) -> &ListenerFilterChainMatchPredicate {
        self.filter_disabled.as_ref().unwrap_or_else(|| <ListenerFilterChainMatchPredicate as ::protobuf::Message>::default_instance())
    }
    pub fn clear_filter_disabled(&mut self) {
        self.filter_disabled.clear();
    }

    pub fn has_filter_disabled(&self) -> bool {
        self.filter_disabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_filter_disabled(&mut self, v: ListenerFilterChainMatchPredicate) {
        self.filter_disabled = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_filter_disabled(&mut self) -> &mut ListenerFilterChainMatchPredicate {
        if self.filter_disabled.is_none() {
            self.filter_disabled.set_default();
        }
        self.filter_disabled.as_mut().unwrap()
    }

    // Take field
    pub fn take_filter_disabled(&mut self) -> ListenerFilterChainMatchPredicate {
        self.filter_disabled.take().unwrap_or_else(|| ListenerFilterChainMatchPredicate::new())
    }
}

impl ::protobuf::Message for ListenerFilter {
    fn is_initialized(&self) -> bool {
        if let Some(ListenerFilter_oneof_config_type::config(ref v)) = self.config_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(ListenerFilter_oneof_config_type::typed_config(ref v)) = self.config_type {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.filter_disabled {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config_type = ::std::option::Option::Some(ListenerFilter_oneof_config_type::config(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config_type = ::std::option::Option::Some(ListenerFilter_oneof_config_type::typed_config(is.read_message()?));
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.filter_disabled)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(ref v) = self.filter_disabled.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.config_type {
            match v {
                &ListenerFilter_oneof_config_type::config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &ListenerFilter_oneof_config_type::typed_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(ref v) = self.filter_disabled.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.config_type {
            match v {
                &ListenerFilter_oneof_config_type::config(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &ListenerFilter_oneof_config_type::typed_config(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListenerFilter {
        ListenerFilter::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &ListenerFilter| { &m.name },
                |m: &mut ListenerFilter| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Struct>(
                "config",
                ListenerFilter::has_config,
                ListenerFilter::get_config,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Any>(
                "typed_config",
                ListenerFilter::has_typed_config,
                ListenerFilter::get_typed_config,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ListenerFilterChainMatchPredicate>>(
                "filter_disabled",
                |m: &ListenerFilter| { &m.filter_disabled },
                |m: &mut ListenerFilter| { &mut m.filter_disabled },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListenerFilter>(
                "ListenerFilter",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListenerFilter {
        static instance: ::protobuf::rt::LazyV2<ListenerFilter> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListenerFilter::new)
    }
}

impl ::protobuf::Clear for ListenerFilter {
    fn clear(&mut self) {
        self.name.clear();
        self.config_type = ::std::option::Option::None;
        self.config_type = ::std::option::Option::None;
        self.filter_disabled.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListenerFilter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListenerFilter {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n/envoy/api/v2/listener/listener_components.proto\x12\x15envoy.api.v2.l\
    istener\x1a\x1benvoy/api/v2/auth/tls.proto\x1a\x1fenvoy/api/v2/core/addr\
    ess.proto\x1a\x1cenvoy/api/v2/core/base.proto\x1a\x16envoy/type/range.pr\
    oto\x1a\x19google/protobuf/any.proto\x1a\x1cgoogle/protobuf/struct.proto\
    \x1a\x1egoogle/protobuf/wrappers.proto\x1a\x1eudpa/annotations/migrate.p\
    roto\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/validate.proto\
    \"\xac\x01\n\x06Filter\x12\x1b\n\x04name\x18\x01\x20\x01(\tR\x04nameB\
    \x07\xfaB\x04r\x02\x20\x01\x125\n\x06config\x18\x02\x20\x01(\x0b2\x17.go\
    ogle.protobuf.StructH\0R\x06configB\x02\x18\x01\x129\n\x0ctyped_config\
    \x18\x04\x20\x01(\x0b2\x14.google.protobuf.AnyH\0R\x0btypedConfigB\r\n\
    \x0bconfig_typeJ\x04\x08\x03\x10\x04\"\xe1\x05\n\x10FilterChainMatch\x12\
    T\n\x10destination_port\x18\x08\x20\x01(\x0b2\x1c.google.protobuf.UInt32\
    ValueR\x0fdestinationPortB\x0b\xfaB\x08*\x06\x18\xff\xff\x03(\x01\x12A\n\
    \rprefix_ranges\x18\x03\x20\x03(\x0b2\x1c.envoy.api.v2.core.CidrRangeR\
    \x0cprefixRanges\x12%\n\x0eaddress_suffix\x18\x04\x20\x01(\tR\raddressSu\
    ffix\x12;\n\nsuffix_len\x18\x05\x20\x01(\x0b2\x1c.google.protobuf.UInt32\
    ValueR\tsuffixLen\x12g\n\x0bsource_type\x18\x0c\x20\x01(\x0e2<.envoy.api\
    .v2.listener.FilterChainMatch.ConnectionSourceTypeR\nsourceTypeB\x08\xfa\
    B\x05\x82\x01\x02\x10\x01\x12N\n\x14source_prefix_ranges\x18\x06\x20\x03\
    (\x0b2\x1c.envoy.api.v2.core.CidrRangeR\x12sourcePrefixRanges\x123\n\x0c\
    source_ports\x18\x07\x20\x03(\rR\x0bsourcePortsB\x10\xfaB\r\x92\x01\n\"\
    \x08*\x06\x18\xff\xff\x03(\x01\x12!\n\x0cserver_names\x18\x0b\x20\x03(\t\
    R\x0bserverNames\x12-\n\x12transport_protocol\x18\t\x20\x01(\tR\x11trans\
    portProtocol\x123\n\x15application_protocols\x18\n\x20\x03(\tR\x14applic\
    ationProtocols\"U\n\x14ConnectionSourceType\x12\x07\n\x03ANY\x10\0\x12&\
    \n\x05LOCAL\x10\x01\x1a\x1b\xf2\x98\xfe\x8f\x05\x15\n\x13SAME_IP_OR_LOOP\
    BACK\x12\x0c\n\x08EXTERNAL\x10\x02J\x04\x08\x01\x10\x02\"\xcb\x03\n\x0bF\
    ilterChain\x12U\n\x12filter_chain_match\x18\x01\x20\x01(\x0b2'.envoy.api\
    .v2.listener.FilterChainMatchR\x10filterChainMatch\x12L\n\x0btls_context\
    \x18\x02\x20\x01(\x0b2'.envoy.api.v2.auth.DownstreamTlsContextR\ntlsCont\
    extB\x02\x18\x01\x127\n\x07filters\x18\x03\x20\x03(\x0b2\x1d.envoy.api.v\
    2.listener.FilterR\x07filters\x12B\n\x0fuse_proxy_proto\x18\x04\x20\x01(\
    \x0b2\x1a.google.protobuf.BoolValueR\ruseProxyProto\x127\n\x08metadata\
    \x18\x05\x20\x01(\x0b2\x1b.envoy.api.v2.core.MetadataR\x08metadata\x12M\
    \n\x10transport_socket\x18\x06\x20\x01(\x0b2\".envoy.api.v2.core.Transpo\
    rtSocketR\x0ftransportSocket\x12\x12\n\x04name\x18\x07\x20\x01(\tR\x04na\
    me\"\xa9\x04\n!ListenerFilterChainMatchPredicate\x12^\n\x08or_match\x18\
    \x01\x20\x01(\x0b2A.envoy.api.v2.listener.ListenerFilterChainMatchPredic\
    ate.MatchSetH\0R\x07orMatch\x12`\n\tand_match\x18\x02\x20\x01(\x0b2A.env\
    oy.api.v2.listener.ListenerFilterChainMatchPredicate.MatchSetH\0R\x08and\
    Match\x12W\n\tnot_match\x18\x03\x20\x01(\x0b28.envoy.api.v2.listener.Lis\
    tenerFilterChainMatchPredicateH\0R\x08notMatch\x12&\n\tany_match\x18\x04\
    \x20\x01(\x08H\0R\x08anyMatchB\x07\xfaB\x04j\x02\x08\x01\x12N\n\x16desti\
    nation_port_range\x18\x05\x20\x01(\x0b2\x16.envoy.type.Int32RangeH\0R\
    \x14destinationPortRange\x1ad\n\x08MatchSet\x12X\n\x05rules\x18\x01\x20\
    \x03(\x0b28.envoy.api.v2.listener.ListenerFilterChainMatchPredicateR\x05\
    rulesB\x08\xfaB\x05\x92\x01\x02\x08\x02B\x0b\n\x04rule\x12\x03\xf8B\x01\
    \"\x91\x02\n\x0eListenerFilter\x12\x1b\n\x04name\x18\x01\x20\x01(\tR\x04\
    nameB\x07\xfaB\x04r\x02\x20\x01\x125\n\x06config\x18\x02\x20\x01(\x0b2\
    \x17.google.protobuf.StructH\0R\x06configB\x02\x18\x01\x129\n\x0ctyped_c\
    onfig\x18\x03\x20\x01(\x0b2\x14.google.protobuf.AnyH\0R\x0btypedConfig\
    \x12a\n\x0ffilter_disabled\x18\x04\x20\x01(\x0b28.envoy.api.v2.listener.\
    ListenerFilterChainMatchPredicateR\x0efilterDisabledB\r\n\x0bconfig_type\
    B\x9c\x01\n#io.envoyproxy.envoy.api.v2.listenerB\x17ListenerComponentsPr\
    otoP\x01\xaa\x02\x17Envoy.Api.V2.ListenerNS\xea\x02\x17Envoy.Api.V2.List\
    enerNS\xf2\x98\xfe\x8f\x05\x1a\x12\x18envoy.config.listener.v3\xba\x80\
    \xc8\xd1\x06\x02\x10\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
