// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/api/v2/core/grpc_service.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct GrpcService {
    // message fields
    pub timeout: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub initial_metadata: ::protobuf::RepeatedField<super::base::HeaderValue>,
    // message oneof groups
    pub target_specifier: ::std::option::Option<GrpcService_oneof_target_specifier>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GrpcService {
    fn default() -> &'a GrpcService {
        <GrpcService as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum GrpcService_oneof_target_specifier {
    envoy_grpc(GrpcService_EnvoyGrpc),
    google_grpc(GrpcService_GoogleGrpc),
}

impl GrpcService {
    pub fn new() -> GrpcService {
        ::std::default::Default::default()
    }

    // .envoy.api.v2.core.GrpcService.EnvoyGrpc envoy_grpc = 1;


    pub fn get_envoy_grpc(&self) -> &GrpcService_EnvoyGrpc {
        match self.target_specifier {
            ::std::option::Option::Some(GrpcService_oneof_target_specifier::envoy_grpc(ref v)) => v,
            _ => <GrpcService_EnvoyGrpc as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_envoy_grpc(&mut self) {
        self.target_specifier = ::std::option::Option::None;
    }

    pub fn has_envoy_grpc(&self) -> bool {
        match self.target_specifier {
            ::std::option::Option::Some(GrpcService_oneof_target_specifier::envoy_grpc(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_envoy_grpc(&mut self, v: GrpcService_EnvoyGrpc) {
        self.target_specifier = ::std::option::Option::Some(GrpcService_oneof_target_specifier::envoy_grpc(v))
    }

    // Mutable pointer to the field.
    pub fn mut_envoy_grpc(&mut self) -> &mut GrpcService_EnvoyGrpc {
        if let ::std::option::Option::Some(GrpcService_oneof_target_specifier::envoy_grpc(_)) = self.target_specifier {
        } else {
            self.target_specifier = ::std::option::Option::Some(GrpcService_oneof_target_specifier::envoy_grpc(GrpcService_EnvoyGrpc::new()));
        }
        match self.target_specifier {
            ::std::option::Option::Some(GrpcService_oneof_target_specifier::envoy_grpc(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_envoy_grpc(&mut self) -> GrpcService_EnvoyGrpc {
        if self.has_envoy_grpc() {
            match self.target_specifier.take() {
                ::std::option::Option::Some(GrpcService_oneof_target_specifier::envoy_grpc(v)) => v,
                _ => panic!(),
            }
        } else {
            GrpcService_EnvoyGrpc::new()
        }
    }

    // .envoy.api.v2.core.GrpcService.GoogleGrpc google_grpc = 2;


    pub fn get_google_grpc(&self) -> &GrpcService_GoogleGrpc {
        match self.target_specifier {
            ::std::option::Option::Some(GrpcService_oneof_target_specifier::google_grpc(ref v)) => v,
            _ => <GrpcService_GoogleGrpc as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_google_grpc(&mut self) {
        self.target_specifier = ::std::option::Option::None;
    }

    pub fn has_google_grpc(&self) -> bool {
        match self.target_specifier {
            ::std::option::Option::Some(GrpcService_oneof_target_specifier::google_grpc(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_google_grpc(&mut self, v: GrpcService_GoogleGrpc) {
        self.target_specifier = ::std::option::Option::Some(GrpcService_oneof_target_specifier::google_grpc(v))
    }

    // Mutable pointer to the field.
    pub fn mut_google_grpc(&mut self) -> &mut GrpcService_GoogleGrpc {
        if let ::std::option::Option::Some(GrpcService_oneof_target_specifier::google_grpc(_)) = self.target_specifier {
        } else {
            self.target_specifier = ::std::option::Option::Some(GrpcService_oneof_target_specifier::google_grpc(GrpcService_GoogleGrpc::new()));
        }
        match self.target_specifier {
            ::std::option::Option::Some(GrpcService_oneof_target_specifier::google_grpc(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_google_grpc(&mut self) -> GrpcService_GoogleGrpc {
        if self.has_google_grpc() {
            match self.target_specifier.take() {
                ::std::option::Option::Some(GrpcService_oneof_target_specifier::google_grpc(v)) => v,
                _ => panic!(),
            }
        } else {
            GrpcService_GoogleGrpc::new()
        }
    }

    // .google.protobuf.Duration timeout = 3;


    pub fn get_timeout(&self) -> &::protobuf::well_known_types::Duration {
        self.timeout.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_timeout(&mut self) {
        self.timeout.clear();
    }

    pub fn has_timeout(&self) -> bool {
        self.timeout.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timeout(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.timeout = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timeout(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.timeout.is_none() {
            self.timeout.set_default();
        }
        self.timeout.as_mut().unwrap()
    }

    // Take field
    pub fn take_timeout(&mut self) -> ::protobuf::well_known_types::Duration {
        self.timeout.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // repeated .envoy.api.v2.core.HeaderValue initial_metadata = 5;


    pub fn get_initial_metadata(&self) -> &[super::base::HeaderValue] {
        &self.initial_metadata
    }
    pub fn clear_initial_metadata(&mut self) {
        self.initial_metadata.clear();
    }

    // Param is passed by value, moved
    pub fn set_initial_metadata(&mut self, v: ::protobuf::RepeatedField<super::base::HeaderValue>) {
        self.initial_metadata = v;
    }

    // Mutable pointer to the field.
    pub fn mut_initial_metadata(&mut self) -> &mut ::protobuf::RepeatedField<super::base::HeaderValue> {
        &mut self.initial_metadata
    }

    // Take field
    pub fn take_initial_metadata(&mut self) -> ::protobuf::RepeatedField<super::base::HeaderValue> {
        ::std::mem::replace(&mut self.initial_metadata, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GrpcService {
    fn is_initialized(&self) -> bool {
        if let Some(GrpcService_oneof_target_specifier::envoy_grpc(ref v)) = self.target_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(GrpcService_oneof_target_specifier::google_grpc(ref v)) = self.target_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.timeout {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.initial_metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.target_specifier = ::std::option::Option::Some(GrpcService_oneof_target_specifier::envoy_grpc(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.target_specifier = ::std::option::Option::Some(GrpcService_oneof_target_specifier::google_grpc(is.read_message()?));
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.timeout)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.initial_metadata)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.timeout.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.initial_metadata {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let ::std::option::Option::Some(ref v) = self.target_specifier {
            match v {
                &GrpcService_oneof_target_specifier::envoy_grpc(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &GrpcService_oneof_target_specifier::google_grpc(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.timeout.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.initial_metadata {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let ::std::option::Option::Some(ref v) = self.target_specifier {
            match v {
                &GrpcService_oneof_target_specifier::envoy_grpc(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &GrpcService_oneof_target_specifier::google_grpc(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GrpcService {
        GrpcService::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, GrpcService_EnvoyGrpc>(
                "envoy_grpc",
                GrpcService::has_envoy_grpc,
                GrpcService::get_envoy_grpc,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, GrpcService_GoogleGrpc>(
                "google_grpc",
                GrpcService::has_google_grpc,
                GrpcService::get_google_grpc,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "timeout",
                |m: &GrpcService| { &m.timeout },
                |m: &mut GrpcService| { &mut m.timeout },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::HeaderValue>>(
                "initial_metadata",
                |m: &GrpcService| { &m.initial_metadata },
                |m: &mut GrpcService| { &mut m.initial_metadata },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GrpcService>(
                "GrpcService",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GrpcService {
        static instance: ::protobuf::rt::LazyV2<GrpcService> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GrpcService::new)
    }
}

impl ::protobuf::Clear for GrpcService {
    fn clear(&mut self) {
        self.target_specifier = ::std::option::Option::None;
        self.target_specifier = ::std::option::Option::None;
        self.timeout.clear();
        self.initial_metadata.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GrpcService {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GrpcService {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GrpcService_EnvoyGrpc {
    // message fields
    pub cluster_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GrpcService_EnvoyGrpc {
    fn default() -> &'a GrpcService_EnvoyGrpc {
        <GrpcService_EnvoyGrpc as ::protobuf::Message>::default_instance()
    }
}

impl GrpcService_EnvoyGrpc {
    pub fn new() -> GrpcService_EnvoyGrpc {
        ::std::default::Default::default()
    }

    // string cluster_name = 1;


    pub fn get_cluster_name(&self) -> &str {
        &self.cluster_name
    }
    pub fn clear_cluster_name(&mut self) {
        self.cluster_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cluster_name(&mut self, v: ::std::string::String) {
        self.cluster_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cluster_name(&mut self) -> &mut ::std::string::String {
        &mut self.cluster_name
    }

    // Take field
    pub fn take_cluster_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cluster_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GrpcService_EnvoyGrpc {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cluster_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.cluster_name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.cluster_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.cluster_name.is_empty() {
            os.write_string(1, &self.cluster_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GrpcService_EnvoyGrpc {
        GrpcService_EnvoyGrpc::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cluster_name",
                |m: &GrpcService_EnvoyGrpc| { &m.cluster_name },
                |m: &mut GrpcService_EnvoyGrpc| { &mut m.cluster_name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GrpcService_EnvoyGrpc>(
                "GrpcService.EnvoyGrpc",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GrpcService_EnvoyGrpc {
        static instance: ::protobuf::rt::LazyV2<GrpcService_EnvoyGrpc> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GrpcService_EnvoyGrpc::new)
    }
}

impl ::protobuf::Clear for GrpcService_EnvoyGrpc {
    fn clear(&mut self) {
        self.cluster_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GrpcService_EnvoyGrpc {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GrpcService_EnvoyGrpc {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GrpcService_GoogleGrpc {
    // message fields
    pub target_uri: ::std::string::String,
    pub channel_credentials: ::protobuf::SingularPtrField<GrpcService_GoogleGrpc_ChannelCredentials>,
    pub call_credentials: ::protobuf::RepeatedField<GrpcService_GoogleGrpc_CallCredentials>,
    pub stat_prefix: ::std::string::String,
    pub credentials_factory_name: ::std::string::String,
    pub config: ::protobuf::SingularPtrField<::protobuf::well_known_types::Struct>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GrpcService_GoogleGrpc {
    fn default() -> &'a GrpcService_GoogleGrpc {
        <GrpcService_GoogleGrpc as ::protobuf::Message>::default_instance()
    }
}

impl GrpcService_GoogleGrpc {
    pub fn new() -> GrpcService_GoogleGrpc {
        ::std::default::Default::default()
    }

    // string target_uri = 1;


    pub fn get_target_uri(&self) -> &str {
        &self.target_uri
    }
    pub fn clear_target_uri(&mut self) {
        self.target_uri.clear();
    }

    // Param is passed by value, moved
    pub fn set_target_uri(&mut self, v: ::std::string::String) {
        self.target_uri = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_target_uri(&mut self) -> &mut ::std::string::String {
        &mut self.target_uri
    }

    // Take field
    pub fn take_target_uri(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.target_uri, ::std::string::String::new())
    }

    // .envoy.api.v2.core.GrpcService.GoogleGrpc.ChannelCredentials channel_credentials = 2;


    pub fn get_channel_credentials(&self) -> &GrpcService_GoogleGrpc_ChannelCredentials {
        self.channel_credentials.as_ref().unwrap_or_else(|| <GrpcService_GoogleGrpc_ChannelCredentials as ::protobuf::Message>::default_instance())
    }
    pub fn clear_channel_credentials(&mut self) {
        self.channel_credentials.clear();
    }

    pub fn has_channel_credentials(&self) -> bool {
        self.channel_credentials.is_some()
    }

    // Param is passed by value, moved
    pub fn set_channel_credentials(&mut self, v: GrpcService_GoogleGrpc_ChannelCredentials) {
        self.channel_credentials = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_channel_credentials(&mut self) -> &mut GrpcService_GoogleGrpc_ChannelCredentials {
        if self.channel_credentials.is_none() {
            self.channel_credentials.set_default();
        }
        self.channel_credentials.as_mut().unwrap()
    }

    // Take field
    pub fn take_channel_credentials(&mut self) -> GrpcService_GoogleGrpc_ChannelCredentials {
        self.channel_credentials.take().unwrap_or_else(|| GrpcService_GoogleGrpc_ChannelCredentials::new())
    }

    // repeated .envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials call_credentials = 3;


    pub fn get_call_credentials(&self) -> &[GrpcService_GoogleGrpc_CallCredentials] {
        &self.call_credentials
    }
    pub fn clear_call_credentials(&mut self) {
        self.call_credentials.clear();
    }

    // Param is passed by value, moved
    pub fn set_call_credentials(&mut self, v: ::protobuf::RepeatedField<GrpcService_GoogleGrpc_CallCredentials>) {
        self.call_credentials = v;
    }

    // Mutable pointer to the field.
    pub fn mut_call_credentials(&mut self) -> &mut ::protobuf::RepeatedField<GrpcService_GoogleGrpc_CallCredentials> {
        &mut self.call_credentials
    }

    // Take field
    pub fn take_call_credentials(&mut self) -> ::protobuf::RepeatedField<GrpcService_GoogleGrpc_CallCredentials> {
        ::std::mem::replace(&mut self.call_credentials, ::protobuf::RepeatedField::new())
    }

    // string stat_prefix = 4;


    pub fn get_stat_prefix(&self) -> &str {
        &self.stat_prefix
    }
    pub fn clear_stat_prefix(&mut self) {
        self.stat_prefix.clear();
    }

    // Param is passed by value, moved
    pub fn set_stat_prefix(&mut self, v: ::std::string::String) {
        self.stat_prefix = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stat_prefix(&mut self) -> &mut ::std::string::String {
        &mut self.stat_prefix
    }

    // Take field
    pub fn take_stat_prefix(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.stat_prefix, ::std::string::String::new())
    }

    // string credentials_factory_name = 5;


    pub fn get_credentials_factory_name(&self) -> &str {
        &self.credentials_factory_name
    }
    pub fn clear_credentials_factory_name(&mut self) {
        self.credentials_factory_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_credentials_factory_name(&mut self, v: ::std::string::String) {
        self.credentials_factory_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_credentials_factory_name(&mut self) -> &mut ::std::string::String {
        &mut self.credentials_factory_name
    }

    // Take field
    pub fn take_credentials_factory_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.credentials_factory_name, ::std::string::String::new())
    }

    // .google.protobuf.Struct config = 6;


    pub fn get_config(&self) -> &::protobuf::well_known_types::Struct {
        self.config.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Struct as ::protobuf::Message>::default_instance())
    }
    pub fn clear_config(&mut self) {
        self.config.clear();
    }

    pub fn has_config(&self) -> bool {
        self.config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_config(&mut self, v: ::protobuf::well_known_types::Struct) {
        self.config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_config(&mut self) -> &mut ::protobuf::well_known_types::Struct {
        if self.config.is_none() {
            self.config.set_default();
        }
        self.config.as_mut().unwrap()
    }

    // Take field
    pub fn take_config(&mut self) -> ::protobuf::well_known_types::Struct {
        self.config.take().unwrap_or_else(|| ::protobuf::well_known_types::Struct::new())
    }
}

impl ::protobuf::Message for GrpcService_GoogleGrpc {
    fn is_initialized(&self) -> bool {
        for v in &self.channel_credentials {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.call_credentials {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.target_uri)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.channel_credentials)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.call_credentials)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.stat_prefix)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.credentials_factory_name)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.config)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.target_uri.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.target_uri);
        }
        if let Some(ref v) = self.channel_credentials.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.call_credentials {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if !self.stat_prefix.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.stat_prefix);
        }
        if !self.credentials_factory_name.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.credentials_factory_name);
        }
        if let Some(ref v) = self.config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.target_uri.is_empty() {
            os.write_string(1, &self.target_uri)?;
        }
        if let Some(ref v) = self.channel_credentials.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.call_credentials {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if !self.stat_prefix.is_empty() {
            os.write_string(4, &self.stat_prefix)?;
        }
        if !self.credentials_factory_name.is_empty() {
            os.write_string(5, &self.credentials_factory_name)?;
        }
        if let Some(ref v) = self.config.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GrpcService_GoogleGrpc {
        GrpcService_GoogleGrpc::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "target_uri",
                |m: &GrpcService_GoogleGrpc| { &m.target_uri },
                |m: &mut GrpcService_GoogleGrpc| { &mut m.target_uri },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GrpcService_GoogleGrpc_ChannelCredentials>>(
                "channel_credentials",
                |m: &GrpcService_GoogleGrpc| { &m.channel_credentials },
                |m: &mut GrpcService_GoogleGrpc| { &mut m.channel_credentials },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GrpcService_GoogleGrpc_CallCredentials>>(
                "call_credentials",
                |m: &GrpcService_GoogleGrpc| { &m.call_credentials },
                |m: &mut GrpcService_GoogleGrpc| { &mut m.call_credentials },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "stat_prefix",
                |m: &GrpcService_GoogleGrpc| { &m.stat_prefix },
                |m: &mut GrpcService_GoogleGrpc| { &mut m.stat_prefix },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "credentials_factory_name",
                |m: &GrpcService_GoogleGrpc| { &m.credentials_factory_name },
                |m: &mut GrpcService_GoogleGrpc| { &mut m.credentials_factory_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Struct>>(
                "config",
                |m: &GrpcService_GoogleGrpc| { &m.config },
                |m: &mut GrpcService_GoogleGrpc| { &mut m.config },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GrpcService_GoogleGrpc>(
                "GrpcService.GoogleGrpc",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GrpcService_GoogleGrpc {
        static instance: ::protobuf::rt::LazyV2<GrpcService_GoogleGrpc> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GrpcService_GoogleGrpc::new)
    }
}

impl ::protobuf::Clear for GrpcService_GoogleGrpc {
    fn clear(&mut self) {
        self.target_uri.clear();
        self.channel_credentials.clear();
        self.call_credentials.clear();
        self.stat_prefix.clear();
        self.credentials_factory_name.clear();
        self.config.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GrpcService_GoogleGrpc {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GrpcService_GoogleGrpc {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GrpcService_GoogleGrpc_SslCredentials {
    // message fields
    pub root_certs: ::protobuf::SingularPtrField<super::base::DataSource>,
    pub private_key: ::protobuf::SingularPtrField<super::base::DataSource>,
    pub cert_chain: ::protobuf::SingularPtrField<super::base::DataSource>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GrpcService_GoogleGrpc_SslCredentials {
    fn default() -> &'a GrpcService_GoogleGrpc_SslCredentials {
        <GrpcService_GoogleGrpc_SslCredentials as ::protobuf::Message>::default_instance()
    }
}

impl GrpcService_GoogleGrpc_SslCredentials {
    pub fn new() -> GrpcService_GoogleGrpc_SslCredentials {
        ::std::default::Default::default()
    }

    // .envoy.api.v2.core.DataSource root_certs = 1;


    pub fn get_root_certs(&self) -> &super::base::DataSource {
        self.root_certs.as_ref().unwrap_or_else(|| <super::base::DataSource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_root_certs(&mut self) {
        self.root_certs.clear();
    }

    pub fn has_root_certs(&self) -> bool {
        self.root_certs.is_some()
    }

    // Param is passed by value, moved
    pub fn set_root_certs(&mut self, v: super::base::DataSource) {
        self.root_certs = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_root_certs(&mut self) -> &mut super::base::DataSource {
        if self.root_certs.is_none() {
            self.root_certs.set_default();
        }
        self.root_certs.as_mut().unwrap()
    }

    // Take field
    pub fn take_root_certs(&mut self) -> super::base::DataSource {
        self.root_certs.take().unwrap_or_else(|| super::base::DataSource::new())
    }

    // .envoy.api.v2.core.DataSource private_key = 2;


    pub fn get_private_key(&self) -> &super::base::DataSource {
        self.private_key.as_ref().unwrap_or_else(|| <super::base::DataSource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_private_key(&mut self) {
        self.private_key.clear();
    }

    pub fn has_private_key(&self) -> bool {
        self.private_key.is_some()
    }

    // Param is passed by value, moved
    pub fn set_private_key(&mut self, v: super::base::DataSource) {
        self.private_key = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_private_key(&mut self) -> &mut super::base::DataSource {
        if self.private_key.is_none() {
            self.private_key.set_default();
        }
        self.private_key.as_mut().unwrap()
    }

    // Take field
    pub fn take_private_key(&mut self) -> super::base::DataSource {
        self.private_key.take().unwrap_or_else(|| super::base::DataSource::new())
    }

    // .envoy.api.v2.core.DataSource cert_chain = 3;


    pub fn get_cert_chain(&self) -> &super::base::DataSource {
        self.cert_chain.as_ref().unwrap_or_else(|| <super::base::DataSource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cert_chain(&mut self) {
        self.cert_chain.clear();
    }

    pub fn has_cert_chain(&self) -> bool {
        self.cert_chain.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cert_chain(&mut self, v: super::base::DataSource) {
        self.cert_chain = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cert_chain(&mut self) -> &mut super::base::DataSource {
        if self.cert_chain.is_none() {
            self.cert_chain.set_default();
        }
        self.cert_chain.as_mut().unwrap()
    }

    // Take field
    pub fn take_cert_chain(&mut self) -> super::base::DataSource {
        self.cert_chain.take().unwrap_or_else(|| super::base::DataSource::new())
    }
}

impl ::protobuf::Message for GrpcService_GoogleGrpc_SslCredentials {
    fn is_initialized(&self) -> bool {
        for v in &self.root_certs {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.private_key {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.cert_chain {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.root_certs)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.private_key)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cert_chain)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.root_certs.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.private_key.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.cert_chain.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.root_certs.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.private_key.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.cert_chain.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GrpcService_GoogleGrpc_SslCredentials {
        GrpcService_GoogleGrpc_SslCredentials::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::DataSource>>(
                "root_certs",
                |m: &GrpcService_GoogleGrpc_SslCredentials| { &m.root_certs },
                |m: &mut GrpcService_GoogleGrpc_SslCredentials| { &mut m.root_certs },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::DataSource>>(
                "private_key",
                |m: &GrpcService_GoogleGrpc_SslCredentials| { &m.private_key },
                |m: &mut GrpcService_GoogleGrpc_SslCredentials| { &mut m.private_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::DataSource>>(
                "cert_chain",
                |m: &GrpcService_GoogleGrpc_SslCredentials| { &m.cert_chain },
                |m: &mut GrpcService_GoogleGrpc_SslCredentials| { &mut m.cert_chain },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GrpcService_GoogleGrpc_SslCredentials>(
                "GrpcService.GoogleGrpc.SslCredentials",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GrpcService_GoogleGrpc_SslCredentials {
        static instance: ::protobuf::rt::LazyV2<GrpcService_GoogleGrpc_SslCredentials> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GrpcService_GoogleGrpc_SslCredentials::new)
    }
}

impl ::protobuf::Clear for GrpcService_GoogleGrpc_SslCredentials {
    fn clear(&mut self) {
        self.root_certs.clear();
        self.private_key.clear();
        self.cert_chain.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GrpcService_GoogleGrpc_SslCredentials {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GrpcService_GoogleGrpc_SslCredentials {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GrpcService_GoogleGrpc_GoogleLocalCredentials {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GrpcService_GoogleGrpc_GoogleLocalCredentials {
    fn default() -> &'a GrpcService_GoogleGrpc_GoogleLocalCredentials {
        <GrpcService_GoogleGrpc_GoogleLocalCredentials as ::protobuf::Message>::default_instance()
    }
}

impl GrpcService_GoogleGrpc_GoogleLocalCredentials {
    pub fn new() -> GrpcService_GoogleGrpc_GoogleLocalCredentials {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GrpcService_GoogleGrpc_GoogleLocalCredentials {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GrpcService_GoogleGrpc_GoogleLocalCredentials {
        GrpcService_GoogleGrpc_GoogleLocalCredentials::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GrpcService_GoogleGrpc_GoogleLocalCredentials>(
                "GrpcService.GoogleGrpc.GoogleLocalCredentials",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GrpcService_GoogleGrpc_GoogleLocalCredentials {
        static instance: ::protobuf::rt::LazyV2<GrpcService_GoogleGrpc_GoogleLocalCredentials> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GrpcService_GoogleGrpc_GoogleLocalCredentials::new)
    }
}

impl ::protobuf::Clear for GrpcService_GoogleGrpc_GoogleLocalCredentials {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GrpcService_GoogleGrpc_GoogleLocalCredentials {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GrpcService_GoogleGrpc_GoogleLocalCredentials {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GrpcService_GoogleGrpc_ChannelCredentials {
    // message oneof groups
    pub credential_specifier: ::std::option::Option<GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GrpcService_GoogleGrpc_ChannelCredentials {
    fn default() -> &'a GrpcService_GoogleGrpc_ChannelCredentials {
        <GrpcService_GoogleGrpc_ChannelCredentials as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier {
    ssl_credentials(GrpcService_GoogleGrpc_SslCredentials),
    google_default(::protobuf::well_known_types::Empty),
    local_credentials(GrpcService_GoogleGrpc_GoogleLocalCredentials),
}

impl GrpcService_GoogleGrpc_ChannelCredentials {
    pub fn new() -> GrpcService_GoogleGrpc_ChannelCredentials {
        ::std::default::Default::default()
    }

    // .envoy.api.v2.core.GrpcService.GoogleGrpc.SslCredentials ssl_credentials = 1;


    pub fn get_ssl_credentials(&self) -> &GrpcService_GoogleGrpc_SslCredentials {
        match self.credential_specifier {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::ssl_credentials(ref v)) => v,
            _ => <GrpcService_GoogleGrpc_SslCredentials as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_ssl_credentials(&mut self) {
        self.credential_specifier = ::std::option::Option::None;
    }

    pub fn has_ssl_credentials(&self) -> bool {
        match self.credential_specifier {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::ssl_credentials(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ssl_credentials(&mut self, v: GrpcService_GoogleGrpc_SslCredentials) {
        self.credential_specifier = ::std::option::Option::Some(GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::ssl_credentials(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ssl_credentials(&mut self) -> &mut GrpcService_GoogleGrpc_SslCredentials {
        if let ::std::option::Option::Some(GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::ssl_credentials(_)) = self.credential_specifier {
        } else {
            self.credential_specifier = ::std::option::Option::Some(GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::ssl_credentials(GrpcService_GoogleGrpc_SslCredentials::new()));
        }
        match self.credential_specifier {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::ssl_credentials(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ssl_credentials(&mut self) -> GrpcService_GoogleGrpc_SslCredentials {
        if self.has_ssl_credentials() {
            match self.credential_specifier.take() {
                ::std::option::Option::Some(GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::ssl_credentials(v)) => v,
                _ => panic!(),
            }
        } else {
            GrpcService_GoogleGrpc_SslCredentials::new()
        }
    }

    // .google.protobuf.Empty google_default = 2;


    pub fn get_google_default(&self) -> &::protobuf::well_known_types::Empty {
        match self.credential_specifier {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::google_default(ref v)) => v,
            _ => <::protobuf::well_known_types::Empty as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_google_default(&mut self) {
        self.credential_specifier = ::std::option::Option::None;
    }

    pub fn has_google_default(&self) -> bool {
        match self.credential_specifier {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::google_default(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_google_default(&mut self, v: ::protobuf::well_known_types::Empty) {
        self.credential_specifier = ::std::option::Option::Some(GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::google_default(v))
    }

    // Mutable pointer to the field.
    pub fn mut_google_default(&mut self) -> &mut ::protobuf::well_known_types::Empty {
        if let ::std::option::Option::Some(GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::google_default(_)) = self.credential_specifier {
        } else {
            self.credential_specifier = ::std::option::Option::Some(GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::google_default(::protobuf::well_known_types::Empty::new()));
        }
        match self.credential_specifier {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::google_default(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_google_default(&mut self) -> ::protobuf::well_known_types::Empty {
        if self.has_google_default() {
            match self.credential_specifier.take() {
                ::std::option::Option::Some(GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::google_default(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Empty::new()
        }
    }

    // .envoy.api.v2.core.GrpcService.GoogleGrpc.GoogleLocalCredentials local_credentials = 3;


    pub fn get_local_credentials(&self) -> &GrpcService_GoogleGrpc_GoogleLocalCredentials {
        match self.credential_specifier {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::local_credentials(ref v)) => v,
            _ => <GrpcService_GoogleGrpc_GoogleLocalCredentials as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_local_credentials(&mut self) {
        self.credential_specifier = ::std::option::Option::None;
    }

    pub fn has_local_credentials(&self) -> bool {
        match self.credential_specifier {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::local_credentials(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_local_credentials(&mut self, v: GrpcService_GoogleGrpc_GoogleLocalCredentials) {
        self.credential_specifier = ::std::option::Option::Some(GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::local_credentials(v))
    }

    // Mutable pointer to the field.
    pub fn mut_local_credentials(&mut self) -> &mut GrpcService_GoogleGrpc_GoogleLocalCredentials {
        if let ::std::option::Option::Some(GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::local_credentials(_)) = self.credential_specifier {
        } else {
            self.credential_specifier = ::std::option::Option::Some(GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::local_credentials(GrpcService_GoogleGrpc_GoogleLocalCredentials::new()));
        }
        match self.credential_specifier {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::local_credentials(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_local_credentials(&mut self) -> GrpcService_GoogleGrpc_GoogleLocalCredentials {
        if self.has_local_credentials() {
            match self.credential_specifier.take() {
                ::std::option::Option::Some(GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::local_credentials(v)) => v,
                _ => panic!(),
            }
        } else {
            GrpcService_GoogleGrpc_GoogleLocalCredentials::new()
        }
    }
}

impl ::protobuf::Message for GrpcService_GoogleGrpc_ChannelCredentials {
    fn is_initialized(&self) -> bool {
        if let Some(GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::ssl_credentials(ref v)) = self.credential_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::google_default(ref v)) = self.credential_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::local_credentials(ref v)) = self.credential_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.credential_specifier = ::std::option::Option::Some(GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::ssl_credentials(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.credential_specifier = ::std::option::Option::Some(GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::google_default(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.credential_specifier = ::std::option::Option::Some(GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::local_credentials(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.credential_specifier {
            match v {
                &GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::ssl_credentials(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::google_default(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::local_credentials(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.credential_specifier {
            match v {
                &GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::ssl_credentials(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::google_default(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &GrpcService_GoogleGrpc_ChannelCredentials_oneof_credential_specifier::local_credentials(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GrpcService_GoogleGrpc_ChannelCredentials {
        GrpcService_GoogleGrpc_ChannelCredentials::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, GrpcService_GoogleGrpc_SslCredentials>(
                "ssl_credentials",
                GrpcService_GoogleGrpc_ChannelCredentials::has_ssl_credentials,
                GrpcService_GoogleGrpc_ChannelCredentials::get_ssl_credentials,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Empty>(
                "google_default",
                GrpcService_GoogleGrpc_ChannelCredentials::has_google_default,
                GrpcService_GoogleGrpc_ChannelCredentials::get_google_default,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, GrpcService_GoogleGrpc_GoogleLocalCredentials>(
                "local_credentials",
                GrpcService_GoogleGrpc_ChannelCredentials::has_local_credentials,
                GrpcService_GoogleGrpc_ChannelCredentials::get_local_credentials,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GrpcService_GoogleGrpc_ChannelCredentials>(
                "GrpcService.GoogleGrpc.ChannelCredentials",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GrpcService_GoogleGrpc_ChannelCredentials {
        static instance: ::protobuf::rt::LazyV2<GrpcService_GoogleGrpc_ChannelCredentials> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GrpcService_GoogleGrpc_ChannelCredentials::new)
    }
}

impl ::protobuf::Clear for GrpcService_GoogleGrpc_ChannelCredentials {
    fn clear(&mut self) {
        self.credential_specifier = ::std::option::Option::None;
        self.credential_specifier = ::std::option::Option::None;
        self.credential_specifier = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GrpcService_GoogleGrpc_ChannelCredentials {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GrpcService_GoogleGrpc_ChannelCredentials {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GrpcService_GoogleGrpc_CallCredentials {
    // message oneof groups
    pub credential_specifier: ::std::option::Option<GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GrpcService_GoogleGrpc_CallCredentials {
    fn default() -> &'a GrpcService_GoogleGrpc_CallCredentials {
        <GrpcService_GoogleGrpc_CallCredentials as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier {
    access_token(::std::string::String),
    google_compute_engine(::protobuf::well_known_types::Empty),
    google_refresh_token(::std::string::String),
    service_account_jwt_access(GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials),
    google_iam(GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials),
    from_plugin(GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin),
    sts_service(GrpcService_GoogleGrpc_CallCredentials_StsService),
}

impl GrpcService_GoogleGrpc_CallCredentials {
    pub fn new() -> GrpcService_GoogleGrpc_CallCredentials {
        ::std::default::Default::default()
    }

    // string access_token = 1;


    pub fn get_access_token(&self) -> &str {
        match self.credential_specifier {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::access_token(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_access_token(&mut self) {
        self.credential_specifier = ::std::option::Option::None;
    }

    pub fn has_access_token(&self) -> bool {
        match self.credential_specifier {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::access_token(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_access_token(&mut self, v: ::std::string::String) {
        self.credential_specifier = ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::access_token(v))
    }

    // Mutable pointer to the field.
    pub fn mut_access_token(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::access_token(_)) = self.credential_specifier {
        } else {
            self.credential_specifier = ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::access_token(::std::string::String::new()));
        }
        match self.credential_specifier {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::access_token(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_access_token(&mut self) -> ::std::string::String {
        if self.has_access_token() {
            match self.credential_specifier.take() {
                ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::access_token(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .google.protobuf.Empty google_compute_engine = 2;


    pub fn get_google_compute_engine(&self) -> &::protobuf::well_known_types::Empty {
        match self.credential_specifier {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_compute_engine(ref v)) => v,
            _ => <::protobuf::well_known_types::Empty as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_google_compute_engine(&mut self) {
        self.credential_specifier = ::std::option::Option::None;
    }

    pub fn has_google_compute_engine(&self) -> bool {
        match self.credential_specifier {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_compute_engine(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_google_compute_engine(&mut self, v: ::protobuf::well_known_types::Empty) {
        self.credential_specifier = ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_compute_engine(v))
    }

    // Mutable pointer to the field.
    pub fn mut_google_compute_engine(&mut self) -> &mut ::protobuf::well_known_types::Empty {
        if let ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_compute_engine(_)) = self.credential_specifier {
        } else {
            self.credential_specifier = ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_compute_engine(::protobuf::well_known_types::Empty::new()));
        }
        match self.credential_specifier {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_compute_engine(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_google_compute_engine(&mut self) -> ::protobuf::well_known_types::Empty {
        if self.has_google_compute_engine() {
            match self.credential_specifier.take() {
                ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_compute_engine(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Empty::new()
        }
    }

    // string google_refresh_token = 3;


    pub fn get_google_refresh_token(&self) -> &str {
        match self.credential_specifier {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_refresh_token(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_google_refresh_token(&mut self) {
        self.credential_specifier = ::std::option::Option::None;
    }

    pub fn has_google_refresh_token(&self) -> bool {
        match self.credential_specifier {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_refresh_token(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_google_refresh_token(&mut self, v: ::std::string::String) {
        self.credential_specifier = ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_refresh_token(v))
    }

    // Mutable pointer to the field.
    pub fn mut_google_refresh_token(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_refresh_token(_)) = self.credential_specifier {
        } else {
            self.credential_specifier = ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_refresh_token(::std::string::String::new()));
        }
        match self.credential_specifier {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_refresh_token(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_google_refresh_token(&mut self) -> ::std::string::String {
        if self.has_google_refresh_token() {
            match self.credential_specifier.take() {
                ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_refresh_token(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.ServiceAccountJWTAccessCredentials service_account_jwt_access = 4;


    pub fn get_service_account_jwt_access(&self) -> &GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials {
        match self.credential_specifier {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::service_account_jwt_access(ref v)) => v,
            _ => <GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_service_account_jwt_access(&mut self) {
        self.credential_specifier = ::std::option::Option::None;
    }

    pub fn has_service_account_jwt_access(&self) -> bool {
        match self.credential_specifier {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::service_account_jwt_access(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_service_account_jwt_access(&mut self, v: GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials) {
        self.credential_specifier = ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::service_account_jwt_access(v))
    }

    // Mutable pointer to the field.
    pub fn mut_service_account_jwt_access(&mut self) -> &mut GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials {
        if let ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::service_account_jwt_access(_)) = self.credential_specifier {
        } else {
            self.credential_specifier = ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::service_account_jwt_access(GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials::new()));
        }
        match self.credential_specifier {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::service_account_jwt_access(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_service_account_jwt_access(&mut self) -> GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials {
        if self.has_service_account_jwt_access() {
            match self.credential_specifier.take() {
                ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::service_account_jwt_access(v)) => v,
                _ => panic!(),
            }
        } else {
            GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials::new()
        }
    }

    // .envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.GoogleIAMCredentials google_iam = 5;


    pub fn get_google_iam(&self) -> &GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials {
        match self.credential_specifier {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_iam(ref v)) => v,
            _ => <GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_google_iam(&mut self) {
        self.credential_specifier = ::std::option::Option::None;
    }

    pub fn has_google_iam(&self) -> bool {
        match self.credential_specifier {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_iam(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_google_iam(&mut self, v: GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials) {
        self.credential_specifier = ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_iam(v))
    }

    // Mutable pointer to the field.
    pub fn mut_google_iam(&mut self) -> &mut GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials {
        if let ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_iam(_)) = self.credential_specifier {
        } else {
            self.credential_specifier = ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_iam(GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials::new()));
        }
        match self.credential_specifier {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_iam(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_google_iam(&mut self) -> GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials {
        if self.has_google_iam() {
            match self.credential_specifier.take() {
                ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_iam(v)) => v,
                _ => panic!(),
            }
        } else {
            GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials::new()
        }
    }

    // .envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.MetadataCredentialsFromPlugin from_plugin = 6;


    pub fn get_from_plugin(&self) -> &GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin {
        match self.credential_specifier {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::from_plugin(ref v)) => v,
            _ => <GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_from_plugin(&mut self) {
        self.credential_specifier = ::std::option::Option::None;
    }

    pub fn has_from_plugin(&self) -> bool {
        match self.credential_specifier {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::from_plugin(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_from_plugin(&mut self, v: GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin) {
        self.credential_specifier = ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::from_plugin(v))
    }

    // Mutable pointer to the field.
    pub fn mut_from_plugin(&mut self) -> &mut GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin {
        if let ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::from_plugin(_)) = self.credential_specifier {
        } else {
            self.credential_specifier = ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::from_plugin(GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin::new()));
        }
        match self.credential_specifier {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::from_plugin(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_from_plugin(&mut self) -> GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin {
        if self.has_from_plugin() {
            match self.credential_specifier.take() {
                ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::from_plugin(v)) => v,
                _ => panic!(),
            }
        } else {
            GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin::new()
        }
    }

    // .envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.StsService sts_service = 7;


    pub fn get_sts_service(&self) -> &GrpcService_GoogleGrpc_CallCredentials_StsService {
        match self.credential_specifier {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::sts_service(ref v)) => v,
            _ => <GrpcService_GoogleGrpc_CallCredentials_StsService as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_sts_service(&mut self) {
        self.credential_specifier = ::std::option::Option::None;
    }

    pub fn has_sts_service(&self) -> bool {
        match self.credential_specifier {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::sts_service(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_sts_service(&mut self, v: GrpcService_GoogleGrpc_CallCredentials_StsService) {
        self.credential_specifier = ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::sts_service(v))
    }

    // Mutable pointer to the field.
    pub fn mut_sts_service(&mut self) -> &mut GrpcService_GoogleGrpc_CallCredentials_StsService {
        if let ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::sts_service(_)) = self.credential_specifier {
        } else {
            self.credential_specifier = ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::sts_service(GrpcService_GoogleGrpc_CallCredentials_StsService::new()));
        }
        match self.credential_specifier {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::sts_service(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_sts_service(&mut self) -> GrpcService_GoogleGrpc_CallCredentials_StsService {
        if self.has_sts_service() {
            match self.credential_specifier.take() {
                ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::sts_service(v)) => v,
                _ => panic!(),
            }
        } else {
            GrpcService_GoogleGrpc_CallCredentials_StsService::new()
        }
    }
}

impl ::protobuf::Message for GrpcService_GoogleGrpc_CallCredentials {
    fn is_initialized(&self) -> bool {
        if let Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_compute_engine(ref v)) = self.credential_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::service_account_jwt_access(ref v)) = self.credential_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_iam(ref v)) = self.credential_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::from_plugin(ref v)) = self.credential_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::sts_service(ref v)) = self.credential_specifier {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.credential_specifier = ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::access_token(is.read_string()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.credential_specifier = ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_compute_engine(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.credential_specifier = ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_refresh_token(is.read_string()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.credential_specifier = ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::service_account_jwt_access(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.credential_specifier = ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_iam(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.credential_specifier = ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::from_plugin(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.credential_specifier = ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::sts_service(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.credential_specifier {
            match v {
                &GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::access_token(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
                &GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_compute_engine(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_refresh_token(ref v) => {
                    my_size += ::protobuf::rt::string_size(3, &v);
                },
                &GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::service_account_jwt_access(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_iam(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::from_plugin(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::sts_service(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.credential_specifier {
            match v {
                &GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::access_token(ref v) => {
                    os.write_string(1, v)?;
                },
                &GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_compute_engine(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_refresh_token(ref v) => {
                    os.write_string(3, v)?;
                },
                &GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::service_account_jwt_access(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::google_iam(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::from_plugin(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &GrpcService_GoogleGrpc_CallCredentials_oneof_credential_specifier::sts_service(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GrpcService_GoogleGrpc_CallCredentials {
        GrpcService_GoogleGrpc_CallCredentials::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "access_token",
                GrpcService_GoogleGrpc_CallCredentials::has_access_token,
                GrpcService_GoogleGrpc_CallCredentials::get_access_token,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Empty>(
                "google_compute_engine",
                GrpcService_GoogleGrpc_CallCredentials::has_google_compute_engine,
                GrpcService_GoogleGrpc_CallCredentials::get_google_compute_engine,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "google_refresh_token",
                GrpcService_GoogleGrpc_CallCredentials::has_google_refresh_token,
                GrpcService_GoogleGrpc_CallCredentials::get_google_refresh_token,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials>(
                "service_account_jwt_access",
                GrpcService_GoogleGrpc_CallCredentials::has_service_account_jwt_access,
                GrpcService_GoogleGrpc_CallCredentials::get_service_account_jwt_access,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials>(
                "google_iam",
                GrpcService_GoogleGrpc_CallCredentials::has_google_iam,
                GrpcService_GoogleGrpc_CallCredentials::get_google_iam,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin>(
                "from_plugin",
                GrpcService_GoogleGrpc_CallCredentials::has_from_plugin,
                GrpcService_GoogleGrpc_CallCredentials::get_from_plugin,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, GrpcService_GoogleGrpc_CallCredentials_StsService>(
                "sts_service",
                GrpcService_GoogleGrpc_CallCredentials::has_sts_service,
                GrpcService_GoogleGrpc_CallCredentials::get_sts_service,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GrpcService_GoogleGrpc_CallCredentials>(
                "GrpcService.GoogleGrpc.CallCredentials",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GrpcService_GoogleGrpc_CallCredentials {
        static instance: ::protobuf::rt::LazyV2<GrpcService_GoogleGrpc_CallCredentials> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GrpcService_GoogleGrpc_CallCredentials::new)
    }
}

impl ::protobuf::Clear for GrpcService_GoogleGrpc_CallCredentials {
    fn clear(&mut self) {
        self.credential_specifier = ::std::option::Option::None;
        self.credential_specifier = ::std::option::Option::None;
        self.credential_specifier = ::std::option::Option::None;
        self.credential_specifier = ::std::option::Option::None;
        self.credential_specifier = ::std::option::Option::None;
        self.credential_specifier = ::std::option::Option::None;
        self.credential_specifier = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GrpcService_GoogleGrpc_CallCredentials {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GrpcService_GoogleGrpc_CallCredentials {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials {
    // message fields
    pub json_key: ::std::string::String,
    pub token_lifetime_seconds: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials {
    fn default() -> &'a GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials {
        <GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials as ::protobuf::Message>::default_instance()
    }
}

impl GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials {
    pub fn new() -> GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials {
        ::std::default::Default::default()
    }

    // string json_key = 1;


    pub fn get_json_key(&self) -> &str {
        &self.json_key
    }
    pub fn clear_json_key(&mut self) {
        self.json_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_json_key(&mut self, v: ::std::string::String) {
        self.json_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_json_key(&mut self) -> &mut ::std::string::String {
        &mut self.json_key
    }

    // Take field
    pub fn take_json_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.json_key, ::std::string::String::new())
    }

    // uint64 token_lifetime_seconds = 2;


    pub fn get_token_lifetime_seconds(&self) -> u64 {
        self.token_lifetime_seconds
    }
    pub fn clear_token_lifetime_seconds(&mut self) {
        self.token_lifetime_seconds = 0;
    }

    // Param is passed by value, moved
    pub fn set_token_lifetime_seconds(&mut self, v: u64) {
        self.token_lifetime_seconds = v;
    }
}

impl ::protobuf::Message for GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.json_key)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.token_lifetime_seconds = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.json_key.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.json_key);
        }
        if self.token_lifetime_seconds != 0 {
            my_size += ::protobuf::rt::value_size(2, self.token_lifetime_seconds, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.json_key.is_empty() {
            os.write_string(1, &self.json_key)?;
        }
        if self.token_lifetime_seconds != 0 {
            os.write_uint64(2, self.token_lifetime_seconds)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials {
        GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "json_key",
                |m: &GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials| { &m.json_key },
                |m: &mut GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials| { &mut m.json_key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "token_lifetime_seconds",
                |m: &GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials| { &m.token_lifetime_seconds },
                |m: &mut GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials| { &mut m.token_lifetime_seconds },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials>(
                "GrpcService.GoogleGrpc.CallCredentials.ServiceAccountJWTAccessCredentials",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials {
        static instance: ::protobuf::rt::LazyV2<GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials::new)
    }
}

impl ::protobuf::Clear for GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials {
    fn clear(&mut self) {
        self.json_key.clear();
        self.token_lifetime_seconds = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GrpcService_GoogleGrpc_CallCredentials_ServiceAccountJWTAccessCredentials {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials {
    // message fields
    pub authorization_token: ::std::string::String,
    pub authority_selector: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials {
    fn default() -> &'a GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials {
        <GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials as ::protobuf::Message>::default_instance()
    }
}

impl GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials {
    pub fn new() -> GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials {
        ::std::default::Default::default()
    }

    // string authorization_token = 1;


    pub fn get_authorization_token(&self) -> &str {
        &self.authorization_token
    }
    pub fn clear_authorization_token(&mut self) {
        self.authorization_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_authorization_token(&mut self, v: ::std::string::String) {
        self.authorization_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_authorization_token(&mut self) -> &mut ::std::string::String {
        &mut self.authorization_token
    }

    // Take field
    pub fn take_authorization_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.authorization_token, ::std::string::String::new())
    }

    // string authority_selector = 2;


    pub fn get_authority_selector(&self) -> &str {
        &self.authority_selector
    }
    pub fn clear_authority_selector(&mut self) {
        self.authority_selector.clear();
    }

    // Param is passed by value, moved
    pub fn set_authority_selector(&mut self, v: ::std::string::String) {
        self.authority_selector = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_authority_selector(&mut self) -> &mut ::std::string::String {
        &mut self.authority_selector
    }

    // Take field
    pub fn take_authority_selector(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.authority_selector, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.authorization_token)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.authority_selector)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.authorization_token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.authorization_token);
        }
        if !self.authority_selector.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.authority_selector);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.authorization_token.is_empty() {
            os.write_string(1, &self.authorization_token)?;
        }
        if !self.authority_selector.is_empty() {
            os.write_string(2, &self.authority_selector)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials {
        GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "authorization_token",
                |m: &GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials| { &m.authorization_token },
                |m: &mut GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials| { &mut m.authorization_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "authority_selector",
                |m: &GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials| { &m.authority_selector },
                |m: &mut GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials| { &mut m.authority_selector },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials>(
                "GrpcService.GoogleGrpc.CallCredentials.GoogleIAMCredentials",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials {
        static instance: ::protobuf::rt::LazyV2<GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials::new)
    }
}

impl ::protobuf::Clear for GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials {
    fn clear(&mut self) {
        self.authorization_token.clear();
        self.authority_selector.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GrpcService_GoogleGrpc_CallCredentials_GoogleIAMCredentials {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin {
    // message fields
    pub name: ::std::string::String,
    // message oneof groups
    pub config_type: ::std::option::Option<GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin_oneof_config_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin {
    fn default() -> &'a GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin {
        <GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin_oneof_config_type {
    config(::protobuf::well_known_types::Struct),
    typed_config(::protobuf::well_known_types::Any),
}

impl GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin {
    pub fn new() -> GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // .google.protobuf.Struct config = 2;


    pub fn get_config(&self) -> &::protobuf::well_known_types::Struct {
        match self.config_type {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin_oneof_config_type::config(ref v)) => v,
            _ => <::protobuf::well_known_types::Struct as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_config(&mut self) {
        self.config_type = ::std::option::Option::None;
    }

    pub fn has_config(&self) -> bool {
        match self.config_type {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin_oneof_config_type::config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_config(&mut self, v: ::protobuf::well_known_types::Struct) {
        self.config_type = ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin_oneof_config_type::config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_config(&mut self) -> &mut ::protobuf::well_known_types::Struct {
        if let ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin_oneof_config_type::config(_)) = self.config_type {
        } else {
            self.config_type = ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin_oneof_config_type::config(::protobuf::well_known_types::Struct::new()));
        }
        match self.config_type {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin_oneof_config_type::config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_config(&mut self) -> ::protobuf::well_known_types::Struct {
        if self.has_config() {
            match self.config_type.take() {
                ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin_oneof_config_type::config(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Struct::new()
        }
    }

    // .google.protobuf.Any typed_config = 3;


    pub fn get_typed_config(&self) -> &::protobuf::well_known_types::Any {
        match self.config_type {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin_oneof_config_type::typed_config(ref v)) => v,
            _ => <::protobuf::well_known_types::Any as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_typed_config(&mut self) {
        self.config_type = ::std::option::Option::None;
    }

    pub fn has_typed_config(&self) -> bool {
        match self.config_type {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin_oneof_config_type::typed_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_typed_config(&mut self, v: ::protobuf::well_known_types::Any) {
        self.config_type = ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin_oneof_config_type::typed_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_typed_config(&mut self) -> &mut ::protobuf::well_known_types::Any {
        if let ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin_oneof_config_type::typed_config(_)) = self.config_type {
        } else {
            self.config_type = ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin_oneof_config_type::typed_config(::protobuf::well_known_types::Any::new()));
        }
        match self.config_type {
            ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin_oneof_config_type::typed_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_typed_config(&mut self) -> ::protobuf::well_known_types::Any {
        if self.has_typed_config() {
            match self.config_type.take() {
                ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin_oneof_config_type::typed_config(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Any::new()
        }
    }
}

impl ::protobuf::Message for GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin {
    fn is_initialized(&self) -> bool {
        if let Some(GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin_oneof_config_type::config(ref v)) = self.config_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin_oneof_config_type::typed_config(ref v)) = self.config_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config_type = ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin_oneof_config_type::config(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.config_type = ::std::option::Option::Some(GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin_oneof_config_type::typed_config(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let ::std::option::Option::Some(ref v) = self.config_type {
            match v {
                &GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin_oneof_config_type::config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin_oneof_config_type::typed_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let ::std::option::Option::Some(ref v) = self.config_type {
            match v {
                &GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin_oneof_config_type::config(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin_oneof_config_type::typed_config(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin {
        GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin| { &m.name },
                |m: &mut GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Struct>(
                "config",
                GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin::has_config,
                GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin::get_config,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Any>(
                "typed_config",
                GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin::has_typed_config,
                GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin::get_typed_config,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin>(
                "GrpcService.GoogleGrpc.CallCredentials.MetadataCredentialsFromPlugin",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin {
        static instance: ::protobuf::rt::LazyV2<GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin::new)
    }
}

impl ::protobuf::Clear for GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin {
    fn clear(&mut self) {
        self.name.clear();
        self.config_type = ::std::option::Option::None;
        self.config_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GrpcService_GoogleGrpc_CallCredentials_MetadataCredentialsFromPlugin {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GrpcService_GoogleGrpc_CallCredentials_StsService {
    // message fields
    pub token_exchange_service_uri: ::std::string::String,
    pub resource: ::std::string::String,
    pub audience: ::std::string::String,
    pub scope: ::std::string::String,
    pub requested_token_type: ::std::string::String,
    pub subject_token_path: ::std::string::String,
    pub subject_token_type: ::std::string::String,
    pub actor_token_path: ::std::string::String,
    pub actor_token_type: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GrpcService_GoogleGrpc_CallCredentials_StsService {
    fn default() -> &'a GrpcService_GoogleGrpc_CallCredentials_StsService {
        <GrpcService_GoogleGrpc_CallCredentials_StsService as ::protobuf::Message>::default_instance()
    }
}

impl GrpcService_GoogleGrpc_CallCredentials_StsService {
    pub fn new() -> GrpcService_GoogleGrpc_CallCredentials_StsService {
        ::std::default::Default::default()
    }

    // string token_exchange_service_uri = 1;


    pub fn get_token_exchange_service_uri(&self) -> &str {
        &self.token_exchange_service_uri
    }
    pub fn clear_token_exchange_service_uri(&mut self) {
        self.token_exchange_service_uri.clear();
    }

    // Param is passed by value, moved
    pub fn set_token_exchange_service_uri(&mut self, v: ::std::string::String) {
        self.token_exchange_service_uri = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token_exchange_service_uri(&mut self) -> &mut ::std::string::String {
        &mut self.token_exchange_service_uri
    }

    // Take field
    pub fn take_token_exchange_service_uri(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token_exchange_service_uri, ::std::string::String::new())
    }

    // string resource = 2;


    pub fn get_resource(&self) -> &str {
        &self.resource
    }
    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: ::std::string::String) {
        self.resource = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut ::std::string::String {
        &mut self.resource
    }

    // Take field
    pub fn take_resource(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.resource, ::std::string::String::new())
    }

    // string audience = 3;


    pub fn get_audience(&self) -> &str {
        &self.audience
    }
    pub fn clear_audience(&mut self) {
        self.audience.clear();
    }

    // Param is passed by value, moved
    pub fn set_audience(&mut self, v: ::std::string::String) {
        self.audience = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_audience(&mut self) -> &mut ::std::string::String {
        &mut self.audience
    }

    // Take field
    pub fn take_audience(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.audience, ::std::string::String::new())
    }

    // string scope = 4;


    pub fn get_scope(&self) -> &str {
        &self.scope
    }
    pub fn clear_scope(&mut self) {
        self.scope.clear();
    }

    // Param is passed by value, moved
    pub fn set_scope(&mut self, v: ::std::string::String) {
        self.scope = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scope(&mut self) -> &mut ::std::string::String {
        &mut self.scope
    }

    // Take field
    pub fn take_scope(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.scope, ::std::string::String::new())
    }

    // string requested_token_type = 5;


    pub fn get_requested_token_type(&self) -> &str {
        &self.requested_token_type
    }
    pub fn clear_requested_token_type(&mut self) {
        self.requested_token_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_requested_token_type(&mut self, v: ::std::string::String) {
        self.requested_token_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_requested_token_type(&mut self) -> &mut ::std::string::String {
        &mut self.requested_token_type
    }

    // Take field
    pub fn take_requested_token_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.requested_token_type, ::std::string::String::new())
    }

    // string subject_token_path = 6;


    pub fn get_subject_token_path(&self) -> &str {
        &self.subject_token_path
    }
    pub fn clear_subject_token_path(&mut self) {
        self.subject_token_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_subject_token_path(&mut self, v: ::std::string::String) {
        self.subject_token_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subject_token_path(&mut self) -> &mut ::std::string::String {
        &mut self.subject_token_path
    }

    // Take field
    pub fn take_subject_token_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subject_token_path, ::std::string::String::new())
    }

    // string subject_token_type = 7;


    pub fn get_subject_token_type(&self) -> &str {
        &self.subject_token_type
    }
    pub fn clear_subject_token_type(&mut self) {
        self.subject_token_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_subject_token_type(&mut self, v: ::std::string::String) {
        self.subject_token_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_subject_token_type(&mut self) -> &mut ::std::string::String {
        &mut self.subject_token_type
    }

    // Take field
    pub fn take_subject_token_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.subject_token_type, ::std::string::String::new())
    }

    // string actor_token_path = 8;


    pub fn get_actor_token_path(&self) -> &str {
        &self.actor_token_path
    }
    pub fn clear_actor_token_path(&mut self) {
        self.actor_token_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_actor_token_path(&mut self, v: ::std::string::String) {
        self.actor_token_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_actor_token_path(&mut self) -> &mut ::std::string::String {
        &mut self.actor_token_path
    }

    // Take field
    pub fn take_actor_token_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.actor_token_path, ::std::string::String::new())
    }

    // string actor_token_type = 9;


    pub fn get_actor_token_type(&self) -> &str {
        &self.actor_token_type
    }
    pub fn clear_actor_token_type(&mut self) {
        self.actor_token_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_actor_token_type(&mut self, v: ::std::string::String) {
        self.actor_token_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_actor_token_type(&mut self) -> &mut ::std::string::String {
        &mut self.actor_token_type
    }

    // Take field
    pub fn take_actor_token_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.actor_token_type, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GrpcService_GoogleGrpc_CallCredentials_StsService {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token_exchange_service_uri)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.resource)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.audience)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.scope)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.requested_token_type)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subject_token_path)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.subject_token_type)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.actor_token_path)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.actor_token_type)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.token_exchange_service_uri.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.token_exchange_service_uri);
        }
        if !self.resource.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.resource);
        }
        if !self.audience.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.audience);
        }
        if !self.scope.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.scope);
        }
        if !self.requested_token_type.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.requested_token_type);
        }
        if !self.subject_token_path.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.subject_token_path);
        }
        if !self.subject_token_type.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.subject_token_type);
        }
        if !self.actor_token_path.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.actor_token_path);
        }
        if !self.actor_token_type.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.actor_token_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.token_exchange_service_uri.is_empty() {
            os.write_string(1, &self.token_exchange_service_uri)?;
        }
        if !self.resource.is_empty() {
            os.write_string(2, &self.resource)?;
        }
        if !self.audience.is_empty() {
            os.write_string(3, &self.audience)?;
        }
        if !self.scope.is_empty() {
            os.write_string(4, &self.scope)?;
        }
        if !self.requested_token_type.is_empty() {
            os.write_string(5, &self.requested_token_type)?;
        }
        if !self.subject_token_path.is_empty() {
            os.write_string(6, &self.subject_token_path)?;
        }
        if !self.subject_token_type.is_empty() {
            os.write_string(7, &self.subject_token_type)?;
        }
        if !self.actor_token_path.is_empty() {
            os.write_string(8, &self.actor_token_path)?;
        }
        if !self.actor_token_type.is_empty() {
            os.write_string(9, &self.actor_token_type)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GrpcService_GoogleGrpc_CallCredentials_StsService {
        GrpcService_GoogleGrpc_CallCredentials_StsService::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "token_exchange_service_uri",
                |m: &GrpcService_GoogleGrpc_CallCredentials_StsService| { &m.token_exchange_service_uri },
                |m: &mut GrpcService_GoogleGrpc_CallCredentials_StsService| { &mut m.token_exchange_service_uri },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "resource",
                |m: &GrpcService_GoogleGrpc_CallCredentials_StsService| { &m.resource },
                |m: &mut GrpcService_GoogleGrpc_CallCredentials_StsService| { &mut m.resource },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "audience",
                |m: &GrpcService_GoogleGrpc_CallCredentials_StsService| { &m.audience },
                |m: &mut GrpcService_GoogleGrpc_CallCredentials_StsService| { &mut m.audience },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "scope",
                |m: &GrpcService_GoogleGrpc_CallCredentials_StsService| { &m.scope },
                |m: &mut GrpcService_GoogleGrpc_CallCredentials_StsService| { &mut m.scope },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "requested_token_type",
                |m: &GrpcService_GoogleGrpc_CallCredentials_StsService| { &m.requested_token_type },
                |m: &mut GrpcService_GoogleGrpc_CallCredentials_StsService| { &mut m.requested_token_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "subject_token_path",
                |m: &GrpcService_GoogleGrpc_CallCredentials_StsService| { &m.subject_token_path },
                |m: &mut GrpcService_GoogleGrpc_CallCredentials_StsService| { &mut m.subject_token_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "subject_token_type",
                |m: &GrpcService_GoogleGrpc_CallCredentials_StsService| { &m.subject_token_type },
                |m: &mut GrpcService_GoogleGrpc_CallCredentials_StsService| { &mut m.subject_token_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "actor_token_path",
                |m: &GrpcService_GoogleGrpc_CallCredentials_StsService| { &m.actor_token_path },
                |m: &mut GrpcService_GoogleGrpc_CallCredentials_StsService| { &mut m.actor_token_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "actor_token_type",
                |m: &GrpcService_GoogleGrpc_CallCredentials_StsService| { &m.actor_token_type },
                |m: &mut GrpcService_GoogleGrpc_CallCredentials_StsService| { &mut m.actor_token_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GrpcService_GoogleGrpc_CallCredentials_StsService>(
                "GrpcService.GoogleGrpc.CallCredentials.StsService",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GrpcService_GoogleGrpc_CallCredentials_StsService {
        static instance: ::protobuf::rt::LazyV2<GrpcService_GoogleGrpc_CallCredentials_StsService> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GrpcService_GoogleGrpc_CallCredentials_StsService::new)
    }
}

impl ::protobuf::Clear for GrpcService_GoogleGrpc_CallCredentials_StsService {
    fn clear(&mut self) {
        self.token_exchange_service_uri.clear();
        self.resource.clear();
        self.audience.clear();
        self.scope.clear();
        self.requested_token_type.clear();
        self.subject_token_path.clear();
        self.subject_token_type.clear();
        self.actor_token_path.clear();
        self.actor_token_type.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GrpcService_GoogleGrpc_CallCredentials_StsService {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GrpcService_GoogleGrpc_CallCredentials_StsService {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n$envoy/api/v2/core/grpc_service.proto\x12\x11envoy.api.v2.core\x1a\x1c\
    envoy/api/v2/core/base.proto\x1a\x19google/protobuf/any.proto\x1a\x1egoo\
    gle/protobuf/duration.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1cgo\
    ogle/protobuf/struct.proto\x1a\x1eudpa/annotations/migrate.proto\x1a\x20\
    udpa/annotations/sensitive.proto\x1a\x1dudpa/annotations/status.proto\
    \x1a\x17validate/validate.proto\"\xdb\x16\n\x0bGrpcService\x12I\n\nenvoy\
    _grpc\x18\x01\x20\x01(\x0b2(.envoy.api.v2.core.GrpcService.EnvoyGrpcH\0R\
    \tenvoyGrpc\x12L\n\x0bgoogle_grpc\x18\x02\x20\x01(\x0b2).envoy.api.v2.co\
    re.GrpcService.GoogleGrpcH\0R\ngoogleGrpc\x123\n\x07timeout\x18\x03\x20\
    \x01(\x0b2\x19.google.protobuf.DurationR\x07timeout\x12I\n\x10initial_me\
    tadata\x18\x05\x20\x03(\x0b2\x1e.envoy.api.v2.core.HeaderValueR\x0finiti\
    alMetadata\x1a7\n\tEnvoyGrpc\x12*\n\x0ccluster_name\x18\x01\x20\x01(\tR\
    \x0bclusterNameB\x07\xfaB\x04r\x02\x20\x01\x1a\xda\x13\n\nGoogleGrpc\x12\
    &\n\ntarget_uri\x18\x01\x20\x01(\tR\ttargetUriB\x07\xfaB\x04r\x02\x20\
    \x01\x12m\n\x13channel_credentials\x18\x02\x20\x01(\x0b2<.envoy.api.v2.c\
    ore.GrpcService.GoogleGrpc.ChannelCredentialsR\x12channelCredentials\x12\
    d\n\x10call_credentials\x18\x03\x20\x03(\x0b29.envoy.api.v2.core.GrpcSer\
    vice.GoogleGrpc.CallCredentialsR\x0fcallCredentials\x12(\n\x0bstat_prefi\
    x\x18\x04\x20\x01(\tR\nstatPrefixB\x07\xfaB\x04r\x02\x20\x01\x128\n\x18c\
    redentials_factory_name\x18\x05\x20\x01(\tR\x16credentialsFactoryName\
    \x12/\n\x06config\x18\x06\x20\x01(\x0b2\x17.google.protobuf.StructR\x06c\
    onfig\x1a\xd4\x01\n\x0eSslCredentials\x12<\n\nroot_certs\x18\x01\x20\x01\
    (\x0b2\x1d.envoy.api.v2.core.DataSourceR\trootCerts\x12F\n\x0bprivate_ke\
    y\x18\x02\x20\x01(\x0b2\x1d.envoy.api.v2.core.DataSourceR\nprivateKeyB\
    \x06\xb8\xb7\x8b\xa4\x02\x01\x12<\n\ncert_chain\x18\x03\x20\x01(\x0b2\
    \x1d.envoy.api.v2.core.DataSourceR\tcertChain\x1a\x18\n\x16GoogleLocalCr\
    edentials\x1a\xc8\x02\n\x12ChannelCredentials\x12c\n\x0fssl_credentials\
    \x18\x01\x20\x01(\x0b28.envoy.api.v2.core.GrpcService.GoogleGrpc.SslCred\
    entialsH\0R\x0esslCredentials\x12?\n\x0egoogle_default\x18\x02\x20\x01(\
    \x0b2\x16.google.protobuf.EmptyH\0R\rgoogleDefault\x12o\n\x11local_crede\
    ntials\x18\x03\x20\x01(\x0b2@.envoy.api.v2.core.GrpcService.GoogleGrpc.G\
    oogleLocalCredentialsH\0R\x10localCredentialsB\x1b\n\x14credential_speci\
    fier\x12\x03\xf8B\x01\x1a\xfd\x0b\n\x0fCallCredentials\x12#\n\x0caccess_\
    token\x18\x01\x20\x01(\tH\0R\x0baccessToken\x12L\n\x15google_compute_eng\
    ine\x18\x02\x20\x01(\x0b2\x16.google.protobuf.EmptyH\0R\x13googleCompute\
    Engine\x122\n\x14google_refresh_token\x18\x03\x20\x01(\tH\0R\x12googleRe\
    freshToken\x12\x9b\x01\n\x1aservice_account_jwt_access\x18\x04\x20\x01(\
    \x0b2\\.envoy.api.v2.core.GrpcService.GoogleGrpc.CallCredentials.Service\
    AccountJWTAccessCredentialsH\0R\x17serviceAccountJwtAccess\x12o\n\ngoogl\
    e_iam\x18\x05\x20\x01(\x0b2N.envoy.api.v2.core.GrpcService.GoogleGrpc.Ca\
    llCredentials.GoogleIAMCredentialsH\0R\tgoogleIam\x12z\n\x0bfrom_plugin\
    \x18\x06\x20\x01(\x0b2W.envoy.api.v2.core.GrpcService.GoogleGrpc.CallCre\
    dentials.MetadataCredentialsFromPluginH\0R\nfromPlugin\x12g\n\x0bsts_ser\
    vice\x18\x07\x20\x01(\x0b2D.envoy.api.v2.core.GrpcService.GoogleGrpc.Cal\
    lCredentials.StsServiceH\0R\nstsService\x1au\n\"ServiceAccountJWTAccessC\
    redentials\x12\x19\n\x08json_key\x18\x01\x20\x01(\tR\x07jsonKey\x124\n\
    \x16token_lifetime_seconds\x18\x02\x20\x01(\x04R\x14tokenLifetimeSeconds\
    \x1av\n\x14GoogleIAMCredentials\x12/\n\x13authorization_token\x18\x01\
    \x20\x01(\tR\x12authorizationToken\x12-\n\x12authority_selector\x18\x02\
    \x20\x01(\tR\x11authoritySelector\x1a\xb4\x01\n\x1dMetadataCredentialsFr\
    omPlugin\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x125\n\x06config\
    \x18\x02\x20\x01(\x0b2\x17.google.protobuf.StructH\0R\x06configB\x02\x18\
    \x01\x129\n\x0ctyped_config\x18\x03\x20\x01(\x0b2\x14.google.protobuf.An\
    yH\0R\x0btypedConfigB\r\n\x0bconfig_type\x1a\x8b\x03\n\nStsService\x12;\
    \n\x1atoken_exchange_service_uri\x18\x01\x20\x01(\tR\x17tokenExchangeSer\
    viceUri\x12\x1a\n\x08resource\x18\x02\x20\x01(\tR\x08resource\x12\x1a\n\
    \x08audience\x18\x03\x20\x01(\tR\x08audience\x12\x14\n\x05scope\x18\x04\
    \x20\x01(\tR\x05scope\x120\n\x14requested_token_type\x18\x05\x20\x01(\tR\
    \x12requestedTokenType\x125\n\x12subject_token_path\x18\x06\x20\x01(\tR\
    \x10subjectTokenPathB\x07\xfaB\x04r\x02\x20\x01\x125\n\x12subject_token_\
    type\x18\x07\x20\x01(\tR\x10subjectTokenTypeB\x07\xfaB\x04r\x02\x20\x01\
    \x12(\n\x10actor_token_path\x18\x08\x20\x01(\tR\x0eactorTokenPath\x12(\n\
    \x10actor_token_type\x18\t\x20\x01(\tR\x0eactorTokenTypeB\x1b\n\x14crede\
    ntial_specifier\x12\x03\xf8B\x01B\x17\n\x10target_specifier\x12\x03\xf8B\
    \x01J\x04\x08\x04\x10\x05BY\n\x1fio.envoyproxy.envoy.api.v2.coreB\x10Grp\
    cServiceProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\x01\xf2\x98\xfe\x8f\x05\
    \x16\x12\x14envoy.config.core.v3b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
