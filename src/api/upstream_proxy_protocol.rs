// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/extensions/transport_sockets/proxy_protocol/v3/upstream_proxy_protocol.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct ProxyProtocolUpstreamTransport {
    // message fields
    pub config: ::protobuf::SingularPtrField<super::proxy_protocol::ProxyProtocolConfig>,
    pub transport_socket: ::protobuf::SingularPtrField<super::base::TransportSocket>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProxyProtocolUpstreamTransport {
    fn default() -> &'a ProxyProtocolUpstreamTransport {
        <ProxyProtocolUpstreamTransport as ::protobuf::Message>::default_instance()
    }
}

impl ProxyProtocolUpstreamTransport {
    pub fn new() -> ProxyProtocolUpstreamTransport {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.ProxyProtocolConfig config = 1;


    pub fn get_config(&self) -> &super::proxy_protocol::ProxyProtocolConfig {
        self.config.as_ref().unwrap_or_else(|| <super::proxy_protocol::ProxyProtocolConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_config(&mut self) {
        self.config.clear();
    }

    pub fn has_config(&self) -> bool {
        self.config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_config(&mut self, v: super::proxy_protocol::ProxyProtocolConfig) {
        self.config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_config(&mut self) -> &mut super::proxy_protocol::ProxyProtocolConfig {
        if self.config.is_none() {
            self.config.set_default();
        }
        self.config.as_mut().unwrap()
    }

    // Take field
    pub fn take_config(&mut self) -> super::proxy_protocol::ProxyProtocolConfig {
        self.config.take().unwrap_or_else(|| super::proxy_protocol::ProxyProtocolConfig::new())
    }

    // .envoy.config.core.v3.TransportSocket transport_socket = 2;


    pub fn get_transport_socket(&self) -> &super::base::TransportSocket {
        self.transport_socket.as_ref().unwrap_or_else(|| <super::base::TransportSocket as ::protobuf::Message>::default_instance())
    }
    pub fn clear_transport_socket(&mut self) {
        self.transport_socket.clear();
    }

    pub fn has_transport_socket(&self) -> bool {
        self.transport_socket.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transport_socket(&mut self, v: super::base::TransportSocket) {
        self.transport_socket = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transport_socket(&mut self) -> &mut super::base::TransportSocket {
        if self.transport_socket.is_none() {
            self.transport_socket.set_default();
        }
        self.transport_socket.as_mut().unwrap()
    }

    // Take field
    pub fn take_transport_socket(&mut self) -> super::base::TransportSocket {
        self.transport_socket.take().unwrap_or_else(|| super::base::TransportSocket::new())
    }
}

impl ::protobuf::Message for ProxyProtocolUpstreamTransport {
    fn is_initialized(&self) -> bool {
        for v in &self.config {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.transport_socket {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.config)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transport_socket)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.transport_socket.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.config.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.transport_socket.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProxyProtocolUpstreamTransport {
        ProxyProtocolUpstreamTransport::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::proxy_protocol::ProxyProtocolConfig>>(
                "config",
                |m: &ProxyProtocolUpstreamTransport| { &m.config },
                |m: &mut ProxyProtocolUpstreamTransport| { &mut m.config },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::TransportSocket>>(
                "transport_socket",
                |m: &ProxyProtocolUpstreamTransport| { &m.transport_socket },
                |m: &mut ProxyProtocolUpstreamTransport| { &mut m.transport_socket },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ProxyProtocolUpstreamTransport>(
                "ProxyProtocolUpstreamTransport",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ProxyProtocolUpstreamTransport {
        static instance: ::protobuf::rt::LazyV2<ProxyProtocolUpstreamTransport> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ProxyProtocolUpstreamTransport::new)
    }
}

impl ::protobuf::Clear for ProxyProtocolUpstreamTransport {
    fn clear(&mut self) {
        self.config.clear();
        self.transport_socket.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProxyProtocolUpstreamTransport {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProxyProtocolUpstreamTransport {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \nRenvoy/extensions/transport_sockets/proxy_protocol/v3/upstream_proxy_p\
    rotocol.proto\x124envoy.extensions.transport_sockets.proxy_protocol.v3\
    \x1a\x1fenvoy/config/core/v3/base.proto\x1a)envoy/config/core/v3/proxy_p\
    rotocol.proto\x1a\x1dudpa/annotations/status.proto\x1a\x17validate/valid\
    ate.proto\"\xbf\x01\n\x1eProxyProtocolUpstreamTransport\x12A\n\x06config\
    \x18\x01\x20\x01(\x0b2).envoy.config.core.v3.ProxyProtocolConfigR\x06con\
    fig\x12Z\n\x10transport_socket\x18\x02\x20\x01(\x0b2%.envoy.config.core.\
    v3.TransportSocketR\x0ftransportSocketB\x08\xfaB\x05\x8a\x01\x02\x10\x01\
    Bj\nBio.envoyproxy.envoy.extensions.transport_sockets.proxy_protocol.v3B\
    \x1aUpstreamProxyProtocolProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\x02b\x06\
    proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
