// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/extensions/filters/http/adaptive_concurrency/v3/adaptive_concurrency.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct GradientControllerConfig {
    // message fields
    pub sample_aggregate_percentile: ::protobuf::SingularPtrField<super::percent::Percent>,
    pub concurrency_limit_params: ::protobuf::SingularPtrField<GradientControllerConfig_ConcurrencyLimitCalculationParams>,
    pub min_rtt_calc_params: ::protobuf::SingularPtrField<GradientControllerConfig_MinimumRTTCalculationParams>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GradientControllerConfig {
    fn default() -> &'a GradientControllerConfig {
        <GradientControllerConfig as ::protobuf::Message>::default_instance()
    }
}

impl GradientControllerConfig {
    pub fn new() -> GradientControllerConfig {
        ::std::default::Default::default()
    }

    // .envoy.type.v3.Percent sample_aggregate_percentile = 1;


    pub fn get_sample_aggregate_percentile(&self) -> &super::percent::Percent {
        self.sample_aggregate_percentile.as_ref().unwrap_or_else(|| <super::percent::Percent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_sample_aggregate_percentile(&mut self) {
        self.sample_aggregate_percentile.clear();
    }

    pub fn has_sample_aggregate_percentile(&self) -> bool {
        self.sample_aggregate_percentile.is_some()
    }

    // Param is passed by value, moved
    pub fn set_sample_aggregate_percentile(&mut self, v: super::percent::Percent) {
        self.sample_aggregate_percentile = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sample_aggregate_percentile(&mut self) -> &mut super::percent::Percent {
        if self.sample_aggregate_percentile.is_none() {
            self.sample_aggregate_percentile.set_default();
        }
        self.sample_aggregate_percentile.as_mut().unwrap()
    }

    // Take field
    pub fn take_sample_aggregate_percentile(&mut self) -> super::percent::Percent {
        self.sample_aggregate_percentile.take().unwrap_or_else(|| super::percent::Percent::new())
    }

    // .envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.ConcurrencyLimitCalculationParams concurrency_limit_params = 2;


    pub fn get_concurrency_limit_params(&self) -> &GradientControllerConfig_ConcurrencyLimitCalculationParams {
        self.concurrency_limit_params.as_ref().unwrap_or_else(|| <GradientControllerConfig_ConcurrencyLimitCalculationParams as ::protobuf::Message>::default_instance())
    }
    pub fn clear_concurrency_limit_params(&mut self) {
        self.concurrency_limit_params.clear();
    }

    pub fn has_concurrency_limit_params(&self) -> bool {
        self.concurrency_limit_params.is_some()
    }

    // Param is passed by value, moved
    pub fn set_concurrency_limit_params(&mut self, v: GradientControllerConfig_ConcurrencyLimitCalculationParams) {
        self.concurrency_limit_params = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_concurrency_limit_params(&mut self) -> &mut GradientControllerConfig_ConcurrencyLimitCalculationParams {
        if self.concurrency_limit_params.is_none() {
            self.concurrency_limit_params.set_default();
        }
        self.concurrency_limit_params.as_mut().unwrap()
    }

    // Take field
    pub fn take_concurrency_limit_params(&mut self) -> GradientControllerConfig_ConcurrencyLimitCalculationParams {
        self.concurrency_limit_params.take().unwrap_or_else(|| GradientControllerConfig_ConcurrencyLimitCalculationParams::new())
    }

    // .envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.MinimumRTTCalculationParams min_rtt_calc_params = 3;


    pub fn get_min_rtt_calc_params(&self) -> &GradientControllerConfig_MinimumRTTCalculationParams {
        self.min_rtt_calc_params.as_ref().unwrap_or_else(|| <GradientControllerConfig_MinimumRTTCalculationParams as ::protobuf::Message>::default_instance())
    }
    pub fn clear_min_rtt_calc_params(&mut self) {
        self.min_rtt_calc_params.clear();
    }

    pub fn has_min_rtt_calc_params(&self) -> bool {
        self.min_rtt_calc_params.is_some()
    }

    // Param is passed by value, moved
    pub fn set_min_rtt_calc_params(&mut self, v: GradientControllerConfig_MinimumRTTCalculationParams) {
        self.min_rtt_calc_params = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_min_rtt_calc_params(&mut self) -> &mut GradientControllerConfig_MinimumRTTCalculationParams {
        if self.min_rtt_calc_params.is_none() {
            self.min_rtt_calc_params.set_default();
        }
        self.min_rtt_calc_params.as_mut().unwrap()
    }

    // Take field
    pub fn take_min_rtt_calc_params(&mut self) -> GradientControllerConfig_MinimumRTTCalculationParams {
        self.min_rtt_calc_params.take().unwrap_or_else(|| GradientControllerConfig_MinimumRTTCalculationParams::new())
    }
}

impl ::protobuf::Message for GradientControllerConfig {
    fn is_initialized(&self) -> bool {
        for v in &self.sample_aggregate_percentile {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.concurrency_limit_params {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.min_rtt_calc_params {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.sample_aggregate_percentile)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.concurrency_limit_params)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.min_rtt_calc_params)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.sample_aggregate_percentile.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.concurrency_limit_params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.min_rtt_calc_params.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.sample_aggregate_percentile.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.concurrency_limit_params.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.min_rtt_calc_params.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GradientControllerConfig {
        GradientControllerConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::percent::Percent>>(
                "sample_aggregate_percentile",
                |m: &GradientControllerConfig| { &m.sample_aggregate_percentile },
                |m: &mut GradientControllerConfig| { &mut m.sample_aggregate_percentile },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GradientControllerConfig_ConcurrencyLimitCalculationParams>>(
                "concurrency_limit_params",
                |m: &GradientControllerConfig| { &m.concurrency_limit_params },
                |m: &mut GradientControllerConfig| { &mut m.concurrency_limit_params },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GradientControllerConfig_MinimumRTTCalculationParams>>(
                "min_rtt_calc_params",
                |m: &GradientControllerConfig| { &m.min_rtt_calc_params },
                |m: &mut GradientControllerConfig| { &mut m.min_rtt_calc_params },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GradientControllerConfig>(
                "GradientControllerConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GradientControllerConfig {
        static instance: ::protobuf::rt::LazyV2<GradientControllerConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GradientControllerConfig::new)
    }
}

impl ::protobuf::Clear for GradientControllerConfig {
    fn clear(&mut self) {
        self.sample_aggregate_percentile.clear();
        self.concurrency_limit_params.clear();
        self.min_rtt_calc_params.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GradientControllerConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GradientControllerConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GradientControllerConfig_ConcurrencyLimitCalculationParams {
    // message fields
    pub max_concurrency_limit: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub concurrency_update_interval: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GradientControllerConfig_ConcurrencyLimitCalculationParams {
    fn default() -> &'a GradientControllerConfig_ConcurrencyLimitCalculationParams {
        <GradientControllerConfig_ConcurrencyLimitCalculationParams as ::protobuf::Message>::default_instance()
    }
}

impl GradientControllerConfig_ConcurrencyLimitCalculationParams {
    pub fn new() -> GradientControllerConfig_ConcurrencyLimitCalculationParams {
        ::std::default::Default::default()
    }

    // .google.protobuf.UInt32Value max_concurrency_limit = 2;


    pub fn get_max_concurrency_limit(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.max_concurrency_limit.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_max_concurrency_limit(&mut self) {
        self.max_concurrency_limit.clear();
    }

    pub fn has_max_concurrency_limit(&self) -> bool {
        self.max_concurrency_limit.is_some()
    }

    // Param is passed by value, moved
    pub fn set_max_concurrency_limit(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.max_concurrency_limit = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_max_concurrency_limit(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.max_concurrency_limit.is_none() {
            self.max_concurrency_limit.set_default();
        }
        self.max_concurrency_limit.as_mut().unwrap()
    }

    // Take field
    pub fn take_max_concurrency_limit(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.max_concurrency_limit.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .google.protobuf.Duration concurrency_update_interval = 3;


    pub fn get_concurrency_update_interval(&self) -> &::protobuf::well_known_types::Duration {
        self.concurrency_update_interval.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_concurrency_update_interval(&mut self) {
        self.concurrency_update_interval.clear();
    }

    pub fn has_concurrency_update_interval(&self) -> bool {
        self.concurrency_update_interval.is_some()
    }

    // Param is passed by value, moved
    pub fn set_concurrency_update_interval(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.concurrency_update_interval = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_concurrency_update_interval(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.concurrency_update_interval.is_none() {
            self.concurrency_update_interval.set_default();
        }
        self.concurrency_update_interval.as_mut().unwrap()
    }

    // Take field
    pub fn take_concurrency_update_interval(&mut self) -> ::protobuf::well_known_types::Duration {
        self.concurrency_update_interval.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }
}

impl ::protobuf::Message for GradientControllerConfig_ConcurrencyLimitCalculationParams {
    fn is_initialized(&self) -> bool {
        for v in &self.max_concurrency_limit {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.concurrency_update_interval {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.max_concurrency_limit)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.concurrency_update_interval)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.max_concurrency_limit.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.concurrency_update_interval.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.max_concurrency_limit.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.concurrency_update_interval.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GradientControllerConfig_ConcurrencyLimitCalculationParams {
        GradientControllerConfig_ConcurrencyLimitCalculationParams::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "max_concurrency_limit",
                |m: &GradientControllerConfig_ConcurrencyLimitCalculationParams| { &m.max_concurrency_limit },
                |m: &mut GradientControllerConfig_ConcurrencyLimitCalculationParams| { &mut m.max_concurrency_limit },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "concurrency_update_interval",
                |m: &GradientControllerConfig_ConcurrencyLimitCalculationParams| { &m.concurrency_update_interval },
                |m: &mut GradientControllerConfig_ConcurrencyLimitCalculationParams| { &mut m.concurrency_update_interval },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GradientControllerConfig_ConcurrencyLimitCalculationParams>(
                "GradientControllerConfig.ConcurrencyLimitCalculationParams",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GradientControllerConfig_ConcurrencyLimitCalculationParams {
        static instance: ::protobuf::rt::LazyV2<GradientControllerConfig_ConcurrencyLimitCalculationParams> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GradientControllerConfig_ConcurrencyLimitCalculationParams::new)
    }
}

impl ::protobuf::Clear for GradientControllerConfig_ConcurrencyLimitCalculationParams {
    fn clear(&mut self) {
        self.max_concurrency_limit.clear();
        self.concurrency_update_interval.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GradientControllerConfig_ConcurrencyLimitCalculationParams {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GradientControllerConfig_ConcurrencyLimitCalculationParams {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GradientControllerConfig_MinimumRTTCalculationParams {
    // message fields
    pub interval: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub request_count: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub jitter: ::protobuf::SingularPtrField<super::percent::Percent>,
    pub min_concurrency: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub buffer: ::protobuf::SingularPtrField<super::percent::Percent>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GradientControllerConfig_MinimumRTTCalculationParams {
    fn default() -> &'a GradientControllerConfig_MinimumRTTCalculationParams {
        <GradientControllerConfig_MinimumRTTCalculationParams as ::protobuf::Message>::default_instance()
    }
}

impl GradientControllerConfig_MinimumRTTCalculationParams {
    pub fn new() -> GradientControllerConfig_MinimumRTTCalculationParams {
        ::std::default::Default::default()
    }

    // .google.protobuf.Duration interval = 1;


    pub fn get_interval(&self) -> &::protobuf::well_known_types::Duration {
        self.interval.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_interval(&mut self) {
        self.interval.clear();
    }

    pub fn has_interval(&self) -> bool {
        self.interval.is_some()
    }

    // Param is passed by value, moved
    pub fn set_interval(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.interval = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_interval(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.interval.is_none() {
            self.interval.set_default();
        }
        self.interval.as_mut().unwrap()
    }

    // Take field
    pub fn take_interval(&mut self) -> ::protobuf::well_known_types::Duration {
        self.interval.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // .google.protobuf.UInt32Value request_count = 2;


    pub fn get_request_count(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.request_count.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_request_count(&mut self) {
        self.request_count.clear();
    }

    pub fn has_request_count(&self) -> bool {
        self.request_count.is_some()
    }

    // Param is passed by value, moved
    pub fn set_request_count(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.request_count = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_request_count(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.request_count.is_none() {
            self.request_count.set_default();
        }
        self.request_count.as_mut().unwrap()
    }

    // Take field
    pub fn take_request_count(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.request_count.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .envoy.type.v3.Percent jitter = 3;


    pub fn get_jitter(&self) -> &super::percent::Percent {
        self.jitter.as_ref().unwrap_or_else(|| <super::percent::Percent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_jitter(&mut self) {
        self.jitter.clear();
    }

    pub fn has_jitter(&self) -> bool {
        self.jitter.is_some()
    }

    // Param is passed by value, moved
    pub fn set_jitter(&mut self, v: super::percent::Percent) {
        self.jitter = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_jitter(&mut self) -> &mut super::percent::Percent {
        if self.jitter.is_none() {
            self.jitter.set_default();
        }
        self.jitter.as_mut().unwrap()
    }

    // Take field
    pub fn take_jitter(&mut self) -> super::percent::Percent {
        self.jitter.take().unwrap_or_else(|| super::percent::Percent::new())
    }

    // .google.protobuf.UInt32Value min_concurrency = 4;


    pub fn get_min_concurrency(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.min_concurrency.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_min_concurrency(&mut self) {
        self.min_concurrency.clear();
    }

    pub fn has_min_concurrency(&self) -> bool {
        self.min_concurrency.is_some()
    }

    // Param is passed by value, moved
    pub fn set_min_concurrency(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.min_concurrency = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_min_concurrency(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.min_concurrency.is_none() {
            self.min_concurrency.set_default();
        }
        self.min_concurrency.as_mut().unwrap()
    }

    // Take field
    pub fn take_min_concurrency(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.min_concurrency.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // .envoy.type.v3.Percent buffer = 5;


    pub fn get_buffer(&self) -> &super::percent::Percent {
        self.buffer.as_ref().unwrap_or_else(|| <super::percent::Percent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_buffer(&mut self) {
        self.buffer.clear();
    }

    pub fn has_buffer(&self) -> bool {
        self.buffer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_buffer(&mut self, v: super::percent::Percent) {
        self.buffer = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_buffer(&mut self) -> &mut super::percent::Percent {
        if self.buffer.is_none() {
            self.buffer.set_default();
        }
        self.buffer.as_mut().unwrap()
    }

    // Take field
    pub fn take_buffer(&mut self) -> super::percent::Percent {
        self.buffer.take().unwrap_or_else(|| super::percent::Percent::new())
    }
}

impl ::protobuf::Message for GradientControllerConfig_MinimumRTTCalculationParams {
    fn is_initialized(&self) -> bool {
        for v in &self.interval {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.request_count {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.jitter {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.min_concurrency {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.buffer {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.interval)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.request_count)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.jitter)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.min_concurrency)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.buffer)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.interval.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.request_count.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.jitter.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.min_concurrency.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.buffer.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.interval.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.request_count.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.jitter.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.min_concurrency.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.buffer.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GradientControllerConfig_MinimumRTTCalculationParams {
        GradientControllerConfig_MinimumRTTCalculationParams::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "interval",
                |m: &GradientControllerConfig_MinimumRTTCalculationParams| { &m.interval },
                |m: &mut GradientControllerConfig_MinimumRTTCalculationParams| { &mut m.interval },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "request_count",
                |m: &GradientControllerConfig_MinimumRTTCalculationParams| { &m.request_count },
                |m: &mut GradientControllerConfig_MinimumRTTCalculationParams| { &mut m.request_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::percent::Percent>>(
                "jitter",
                |m: &GradientControllerConfig_MinimumRTTCalculationParams| { &m.jitter },
                |m: &mut GradientControllerConfig_MinimumRTTCalculationParams| { &mut m.jitter },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "min_concurrency",
                |m: &GradientControllerConfig_MinimumRTTCalculationParams| { &m.min_concurrency },
                |m: &mut GradientControllerConfig_MinimumRTTCalculationParams| { &mut m.min_concurrency },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::percent::Percent>>(
                "buffer",
                |m: &GradientControllerConfig_MinimumRTTCalculationParams| { &m.buffer },
                |m: &mut GradientControllerConfig_MinimumRTTCalculationParams| { &mut m.buffer },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GradientControllerConfig_MinimumRTTCalculationParams>(
                "GradientControllerConfig.MinimumRTTCalculationParams",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GradientControllerConfig_MinimumRTTCalculationParams {
        static instance: ::protobuf::rt::LazyV2<GradientControllerConfig_MinimumRTTCalculationParams> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GradientControllerConfig_MinimumRTTCalculationParams::new)
    }
}

impl ::protobuf::Clear for GradientControllerConfig_MinimumRTTCalculationParams {
    fn clear(&mut self) {
        self.interval.clear();
        self.request_count.clear();
        self.jitter.clear();
        self.min_concurrency.clear();
        self.buffer.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GradientControllerConfig_MinimumRTTCalculationParams {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GradientControllerConfig_MinimumRTTCalculationParams {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AdaptiveConcurrency {
    // message fields
    pub enabled: ::protobuf::SingularPtrField<super::base::RuntimeFeatureFlag>,
    // message oneof groups
    pub concurrency_controller_config: ::std::option::Option<AdaptiveConcurrency_oneof_concurrency_controller_config>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AdaptiveConcurrency {
    fn default() -> &'a AdaptiveConcurrency {
        <AdaptiveConcurrency as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum AdaptiveConcurrency_oneof_concurrency_controller_config {
    gradient_controller_config(GradientControllerConfig),
}

impl AdaptiveConcurrency {
    pub fn new() -> AdaptiveConcurrency {
        ::std::default::Default::default()
    }

    // .envoy.extensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig gradient_controller_config = 1;


    pub fn get_gradient_controller_config(&self) -> &GradientControllerConfig {
        match self.concurrency_controller_config {
            ::std::option::Option::Some(AdaptiveConcurrency_oneof_concurrency_controller_config::gradient_controller_config(ref v)) => v,
            _ => <GradientControllerConfig as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_gradient_controller_config(&mut self) {
        self.concurrency_controller_config = ::std::option::Option::None;
    }

    pub fn has_gradient_controller_config(&self) -> bool {
        match self.concurrency_controller_config {
            ::std::option::Option::Some(AdaptiveConcurrency_oneof_concurrency_controller_config::gradient_controller_config(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_gradient_controller_config(&mut self, v: GradientControllerConfig) {
        self.concurrency_controller_config = ::std::option::Option::Some(AdaptiveConcurrency_oneof_concurrency_controller_config::gradient_controller_config(v))
    }

    // Mutable pointer to the field.
    pub fn mut_gradient_controller_config(&mut self) -> &mut GradientControllerConfig {
        if let ::std::option::Option::Some(AdaptiveConcurrency_oneof_concurrency_controller_config::gradient_controller_config(_)) = self.concurrency_controller_config {
        } else {
            self.concurrency_controller_config = ::std::option::Option::Some(AdaptiveConcurrency_oneof_concurrency_controller_config::gradient_controller_config(GradientControllerConfig::new()));
        }
        match self.concurrency_controller_config {
            ::std::option::Option::Some(AdaptiveConcurrency_oneof_concurrency_controller_config::gradient_controller_config(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_gradient_controller_config(&mut self) -> GradientControllerConfig {
        if self.has_gradient_controller_config() {
            match self.concurrency_controller_config.take() {
                ::std::option::Option::Some(AdaptiveConcurrency_oneof_concurrency_controller_config::gradient_controller_config(v)) => v,
                _ => panic!(),
            }
        } else {
            GradientControllerConfig::new()
        }
    }

    // .envoy.config.core.v3.RuntimeFeatureFlag enabled = 2;


    pub fn get_enabled(&self) -> &super::base::RuntimeFeatureFlag {
        self.enabled.as_ref().unwrap_or_else(|| <super::base::RuntimeFeatureFlag as ::protobuf::Message>::default_instance())
    }
    pub fn clear_enabled(&mut self) {
        self.enabled.clear();
    }

    pub fn has_enabled(&self) -> bool {
        self.enabled.is_some()
    }

    // Param is passed by value, moved
    pub fn set_enabled(&mut self, v: super::base::RuntimeFeatureFlag) {
        self.enabled = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_enabled(&mut self) -> &mut super::base::RuntimeFeatureFlag {
        if self.enabled.is_none() {
            self.enabled.set_default();
        }
        self.enabled.as_mut().unwrap()
    }

    // Take field
    pub fn take_enabled(&mut self) -> super::base::RuntimeFeatureFlag {
        self.enabled.take().unwrap_or_else(|| super::base::RuntimeFeatureFlag::new())
    }
}

impl ::protobuf::Message for AdaptiveConcurrency {
    fn is_initialized(&self) -> bool {
        if let Some(AdaptiveConcurrency_oneof_concurrency_controller_config::gradient_controller_config(ref v)) = self.concurrency_controller_config {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.enabled {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.concurrency_controller_config = ::std::option::Option::Some(AdaptiveConcurrency_oneof_concurrency_controller_config::gradient_controller_config(is.read_message()?));
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.enabled)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.enabled.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.concurrency_controller_config {
            match v {
                &AdaptiveConcurrency_oneof_concurrency_controller_config::gradient_controller_config(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.enabled.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.concurrency_controller_config {
            match v {
                &AdaptiveConcurrency_oneof_concurrency_controller_config::gradient_controller_config(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AdaptiveConcurrency {
        AdaptiveConcurrency::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, GradientControllerConfig>(
                "gradient_controller_config",
                AdaptiveConcurrency::has_gradient_controller_config,
                AdaptiveConcurrency::get_gradient_controller_config,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::RuntimeFeatureFlag>>(
                "enabled",
                |m: &AdaptiveConcurrency| { &m.enabled },
                |m: &mut AdaptiveConcurrency| { &mut m.enabled },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AdaptiveConcurrency>(
                "AdaptiveConcurrency",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AdaptiveConcurrency {
        static instance: ::protobuf::rt::LazyV2<AdaptiveConcurrency> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AdaptiveConcurrency::new)
    }
}

impl ::protobuf::Clear for AdaptiveConcurrency {
    fn clear(&mut self) {
        self.concurrency_controller_config = ::std::option::Option::None;
        self.enabled.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AdaptiveConcurrency {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AdaptiveConcurrency {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \nPenvoy/extensions/filters/http/adaptive_concurrency/v3/adaptive_concur\
    rency.proto\x125envoy.extensions.filters.http.adaptive_concurrency.v3\
    \x1a\x1fenvoy/config/core/v3/base.proto\x1a\x1benvoy/type/v3/percent.pro\
    to\x1a\x1egoogle/protobuf/duration.proto\x1a\x1egoogle/protobuf/wrappers\
    .proto\x1a\x1dudpa/annotations/status.proto\x1a!udpa/annotations/version\
    ing.proto\x1a\x17validate/validate.proto\"\xdf\n\n\x18GradientController\
    Config\x12V\n\x1bsample_aggregate_percentile\x18\x01\x20\x01(\x0b2\x16.e\
    nvoy.type.v3.PercentR\x19sampleAggregatePercentile\x12\xb5\x01\n\x18conc\
    urrency_limit_params\x18\x02\x20\x01(\x0b2q.envoy.extensions.filters.htt\
    p.adaptive_concurrency.v3.GradientControllerConfig.ConcurrencyLimitCalcu\
    lationParamsR\x16concurrencyLimitParamsB\x08\xfaB\x05\x8a\x01\x02\x10\
    \x01\x12\xa4\x01\n\x13min_rtt_calc_params\x18\x03\x20\x01(\x0b2k.envoy.e\
    xtensions.filters.http.adaptive_concurrency.v3.GradientControllerConfig.\
    MinimumRTTCalculationParamsR\x10minRttCalcParamsB\x08\xfaB\x05\x8a\x01\
    \x02\x10\x01\x1a\xde\x02\n!ConcurrencyLimitCalculationParams\x12Y\n\x15m\
    ax_concurrency_limit\x18\x02\x20\x01(\x0b2\x1c.google.protobuf.UInt32Val\
    ueR\x13maxConcurrencyLimitB\x07\xfaB\x04*\x02\x20\0\x12e\n\x1bconcurrenc\
    y_update_interval\x18\x03\x20\x01(\x0b2\x19.google.protobuf.DurationR\
    \x19concurrencyUpdateIntervalB\n\xfaB\x07\xaa\x01\x04\x08\x01*\0:w\x9a\
    \xc5\x88\x1er\npenvoy.config.filter.http.adaptive_concurrency.v2alpha.Gr\
    adientControllerConfig.ConcurrencyLimitCalculationParams\x1a\xd3\x03\n\
    \x1bMinimumRTTCalculationParams\x12E\n\x08interval\x18\x01\x20\x01(\x0b2\
    \x19.google.protobuf.DurationR\x08intervalB\x0e\xfaB\x0b\xaa\x01\x08\x08\
    \x012\x04\x10\xc0\x84=\x12J\n\rrequest_count\x18\x02\x20\x01(\x0b2\x1c.g\
    oogle.protobuf.UInt32ValueR\x0crequestCountB\x07\xfaB\x04*\x02\x20\0\x12\
    .\n\x06jitter\x18\x03\x20\x01(\x0b2\x16.envoy.type.v3.PercentR\x06jitter\
    \x12N\n\x0fmin_concurrency\x18\x04\x20\x01(\x0b2\x1c.google.protobuf.UIn\
    t32ValueR\x0eminConcurrencyB\x07\xfaB\x04*\x02\x20\0\x12.\n\x06buffer\
    \x18\x05\x20\x01(\x0b2\x16.envoy.type.v3.PercentR\x06buffer:q\x9a\xc5\
    \x88\x1el\njenvoy.config.filter.http.adaptive_concurrency.v2alpha.Gradie\
    ntControllerConfig.MinimumRTTCalculationParams:U\x9a\xc5\x88\x1eP\nNenvo\
    y.config.filter.http.adaptive_concurrency.v2alpha.GradientControllerConf\
    ig\"\xed\x02\n\x13AdaptiveConcurrency\x12\x99\x01\n\x1agradient_controll\
    er_config\x18\x01\x20\x01(\x0b2O.envoy.extensions.filters.http.adaptive_\
    concurrency.v3.GradientControllerConfigH\0R\x18gradientControllerConfigB\
    \x08\xfaB\x05\x8a\x01\x02\x10\x01\x12B\n\x07enabled\x18\x02\x20\x01(\x0b\
    2(.envoy.config.core.v3.RuntimeFeatureFlagR\x07enabledB$\n\x1dconcurrenc\
    y_controller_config\x12\x03\xf8B\x01:P\x9a\xc5\x88\x1eK\nIenvoy.config.f\
    ilter.http.adaptive_concurrency.v2alpha.AdaptiveConcurrencyBi\nCio.envoy\
    proxy.envoy.extensions.filters.http.adaptive_concurrency.v3B\x18Adaptive\
    ConcurrencyProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
