// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/data/cluster/v3/outlier_detection_event.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct OutlierDetectionEvent {
    // message fields
    pub field_type: OutlierEjectionType,
    pub timestamp: ::protobuf::SingularPtrField<::protobuf::well_known_types::Timestamp>,
    pub secs_since_last_action: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt64Value>,
    pub cluster_name: ::std::string::String,
    pub upstream_url: ::std::string::String,
    pub action: Action,
    pub num_ejections: u32,
    pub enforced: bool,
    // message oneof groups
    pub event: ::std::option::Option<OutlierDetectionEvent_oneof_event>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OutlierDetectionEvent {
    fn default() -> &'a OutlierDetectionEvent {
        <OutlierDetectionEvent as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum OutlierDetectionEvent_oneof_event {
    eject_success_rate_event(OutlierEjectSuccessRate),
    eject_consecutive_event(OutlierEjectConsecutive),
    eject_failure_percentage_event(OutlierEjectFailurePercentage),
}

impl OutlierDetectionEvent {
    pub fn new() -> OutlierDetectionEvent {
        ::std::default::Default::default()
    }

    // .envoy.data.cluster.v3.OutlierEjectionType type = 1;


    pub fn get_field_type(&self) -> OutlierEjectionType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = OutlierEjectionType::CONSECUTIVE_5XX;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: OutlierEjectionType) {
        self.field_type = v;
    }

    // .google.protobuf.Timestamp timestamp = 2;


    pub fn get_timestamp(&self) -> &::protobuf::well_known_types::Timestamp {
        self.timestamp.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance())
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp.clear();
    }

    pub fn has_timestamp(&self) -> bool {
        self.timestamp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.timestamp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_timestamp(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if self.timestamp.is_none() {
            self.timestamp.set_default();
        }
        self.timestamp.as_mut().unwrap()
    }

    // Take field
    pub fn take_timestamp(&mut self) -> ::protobuf::well_known_types::Timestamp {
        self.timestamp.take().unwrap_or_else(|| ::protobuf::well_known_types::Timestamp::new())
    }

    // .google.protobuf.UInt64Value secs_since_last_action = 3;


    pub fn get_secs_since_last_action(&self) -> &::protobuf::well_known_types::UInt64Value {
        self.secs_since_last_action.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt64Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_secs_since_last_action(&mut self) {
        self.secs_since_last_action.clear();
    }

    pub fn has_secs_since_last_action(&self) -> bool {
        self.secs_since_last_action.is_some()
    }

    // Param is passed by value, moved
    pub fn set_secs_since_last_action(&mut self, v: ::protobuf::well_known_types::UInt64Value) {
        self.secs_since_last_action = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_secs_since_last_action(&mut self) -> &mut ::protobuf::well_known_types::UInt64Value {
        if self.secs_since_last_action.is_none() {
            self.secs_since_last_action.set_default();
        }
        self.secs_since_last_action.as_mut().unwrap()
    }

    // Take field
    pub fn take_secs_since_last_action(&mut self) -> ::protobuf::well_known_types::UInt64Value {
        self.secs_since_last_action.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt64Value::new())
    }

    // string cluster_name = 4;


    pub fn get_cluster_name(&self) -> &str {
        &self.cluster_name
    }
    pub fn clear_cluster_name(&mut self) {
        self.cluster_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_cluster_name(&mut self, v: ::std::string::String) {
        self.cluster_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cluster_name(&mut self) -> &mut ::std::string::String {
        &mut self.cluster_name
    }

    // Take field
    pub fn take_cluster_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.cluster_name, ::std::string::String::new())
    }

    // string upstream_url = 5;


    pub fn get_upstream_url(&self) -> &str {
        &self.upstream_url
    }
    pub fn clear_upstream_url(&mut self) {
        self.upstream_url.clear();
    }

    // Param is passed by value, moved
    pub fn set_upstream_url(&mut self, v: ::std::string::String) {
        self.upstream_url = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_upstream_url(&mut self) -> &mut ::std::string::String {
        &mut self.upstream_url
    }

    // Take field
    pub fn take_upstream_url(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.upstream_url, ::std::string::String::new())
    }

    // .envoy.data.cluster.v3.Action action = 6;


    pub fn get_action(&self) -> Action {
        self.action
    }
    pub fn clear_action(&mut self) {
        self.action = Action::EJECT;
    }

    // Param is passed by value, moved
    pub fn set_action(&mut self, v: Action) {
        self.action = v;
    }

    // uint32 num_ejections = 7;


    pub fn get_num_ejections(&self) -> u32 {
        self.num_ejections
    }
    pub fn clear_num_ejections(&mut self) {
        self.num_ejections = 0;
    }

    // Param is passed by value, moved
    pub fn set_num_ejections(&mut self, v: u32) {
        self.num_ejections = v;
    }

    // bool enforced = 8;


    pub fn get_enforced(&self) -> bool {
        self.enforced
    }
    pub fn clear_enforced(&mut self) {
        self.enforced = false;
    }

    // Param is passed by value, moved
    pub fn set_enforced(&mut self, v: bool) {
        self.enforced = v;
    }

    // .envoy.data.cluster.v3.OutlierEjectSuccessRate eject_success_rate_event = 9;


    pub fn get_eject_success_rate_event(&self) -> &OutlierEjectSuccessRate {
        match self.event {
            ::std::option::Option::Some(OutlierDetectionEvent_oneof_event::eject_success_rate_event(ref v)) => v,
            _ => <OutlierEjectSuccessRate as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_eject_success_rate_event(&mut self) {
        self.event = ::std::option::Option::None;
    }

    pub fn has_eject_success_rate_event(&self) -> bool {
        match self.event {
            ::std::option::Option::Some(OutlierDetectionEvent_oneof_event::eject_success_rate_event(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_eject_success_rate_event(&mut self, v: OutlierEjectSuccessRate) {
        self.event = ::std::option::Option::Some(OutlierDetectionEvent_oneof_event::eject_success_rate_event(v))
    }

    // Mutable pointer to the field.
    pub fn mut_eject_success_rate_event(&mut self) -> &mut OutlierEjectSuccessRate {
        if let ::std::option::Option::Some(OutlierDetectionEvent_oneof_event::eject_success_rate_event(_)) = self.event {
        } else {
            self.event = ::std::option::Option::Some(OutlierDetectionEvent_oneof_event::eject_success_rate_event(OutlierEjectSuccessRate::new()));
        }
        match self.event {
            ::std::option::Option::Some(OutlierDetectionEvent_oneof_event::eject_success_rate_event(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_eject_success_rate_event(&mut self) -> OutlierEjectSuccessRate {
        if self.has_eject_success_rate_event() {
            match self.event.take() {
                ::std::option::Option::Some(OutlierDetectionEvent_oneof_event::eject_success_rate_event(v)) => v,
                _ => panic!(),
            }
        } else {
            OutlierEjectSuccessRate::new()
        }
    }

    // .envoy.data.cluster.v3.OutlierEjectConsecutive eject_consecutive_event = 10;


    pub fn get_eject_consecutive_event(&self) -> &OutlierEjectConsecutive {
        match self.event {
            ::std::option::Option::Some(OutlierDetectionEvent_oneof_event::eject_consecutive_event(ref v)) => v,
            _ => <OutlierEjectConsecutive as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_eject_consecutive_event(&mut self) {
        self.event = ::std::option::Option::None;
    }

    pub fn has_eject_consecutive_event(&self) -> bool {
        match self.event {
            ::std::option::Option::Some(OutlierDetectionEvent_oneof_event::eject_consecutive_event(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_eject_consecutive_event(&mut self, v: OutlierEjectConsecutive) {
        self.event = ::std::option::Option::Some(OutlierDetectionEvent_oneof_event::eject_consecutive_event(v))
    }

    // Mutable pointer to the field.
    pub fn mut_eject_consecutive_event(&mut self) -> &mut OutlierEjectConsecutive {
        if let ::std::option::Option::Some(OutlierDetectionEvent_oneof_event::eject_consecutive_event(_)) = self.event {
        } else {
            self.event = ::std::option::Option::Some(OutlierDetectionEvent_oneof_event::eject_consecutive_event(OutlierEjectConsecutive::new()));
        }
        match self.event {
            ::std::option::Option::Some(OutlierDetectionEvent_oneof_event::eject_consecutive_event(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_eject_consecutive_event(&mut self) -> OutlierEjectConsecutive {
        if self.has_eject_consecutive_event() {
            match self.event.take() {
                ::std::option::Option::Some(OutlierDetectionEvent_oneof_event::eject_consecutive_event(v)) => v,
                _ => panic!(),
            }
        } else {
            OutlierEjectConsecutive::new()
        }
    }

    // .envoy.data.cluster.v3.OutlierEjectFailurePercentage eject_failure_percentage_event = 11;


    pub fn get_eject_failure_percentage_event(&self) -> &OutlierEjectFailurePercentage {
        match self.event {
            ::std::option::Option::Some(OutlierDetectionEvent_oneof_event::eject_failure_percentage_event(ref v)) => v,
            _ => <OutlierEjectFailurePercentage as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_eject_failure_percentage_event(&mut self) {
        self.event = ::std::option::Option::None;
    }

    pub fn has_eject_failure_percentage_event(&self) -> bool {
        match self.event {
            ::std::option::Option::Some(OutlierDetectionEvent_oneof_event::eject_failure_percentage_event(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_eject_failure_percentage_event(&mut self, v: OutlierEjectFailurePercentage) {
        self.event = ::std::option::Option::Some(OutlierDetectionEvent_oneof_event::eject_failure_percentage_event(v))
    }

    // Mutable pointer to the field.
    pub fn mut_eject_failure_percentage_event(&mut self) -> &mut OutlierEjectFailurePercentage {
        if let ::std::option::Option::Some(OutlierDetectionEvent_oneof_event::eject_failure_percentage_event(_)) = self.event {
        } else {
            self.event = ::std::option::Option::Some(OutlierDetectionEvent_oneof_event::eject_failure_percentage_event(OutlierEjectFailurePercentage::new()));
        }
        match self.event {
            ::std::option::Option::Some(OutlierDetectionEvent_oneof_event::eject_failure_percentage_event(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_eject_failure_percentage_event(&mut self) -> OutlierEjectFailurePercentage {
        if self.has_eject_failure_percentage_event() {
            match self.event.take() {
                ::std::option::Option::Some(OutlierDetectionEvent_oneof_event::eject_failure_percentage_event(v)) => v,
                _ => panic!(),
            }
        } else {
            OutlierEjectFailurePercentage::new()
        }
    }
}

impl ::protobuf::Message for OutlierDetectionEvent {
    fn is_initialized(&self) -> bool {
        for v in &self.timestamp {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.secs_since_last_action {
            if !v.is_initialized() {
                return false;
            }
        };
        if let Some(OutlierDetectionEvent_oneof_event::eject_success_rate_event(ref v)) = self.event {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(OutlierDetectionEvent_oneof_event::eject_consecutive_event(ref v)) = self.event {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(OutlierDetectionEvent_oneof_event::eject_failure_percentage_event(ref v)) = self.event {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.timestamp)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.secs_since_last_action)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.cluster_name)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.upstream_url)?;
                },
                6 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.action, 6, &mut self.unknown_fields)?
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.num_ejections = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.enforced = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.event = ::std::option::Option::Some(OutlierDetectionEvent_oneof_event::eject_success_rate_event(is.read_message()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.event = ::std::option::Option::Some(OutlierDetectionEvent_oneof_event::eject_consecutive_event(is.read_message()?));
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.event = ::std::option::Option::Some(OutlierDetectionEvent_oneof_event::eject_failure_percentage_event(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != OutlierEjectionType::CONSECUTIVE_5XX {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if let Some(ref v) = self.timestamp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.secs_since_last_action.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.cluster_name.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.cluster_name);
        }
        if !self.upstream_url.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.upstream_url);
        }
        if self.action != Action::EJECT {
            my_size += ::protobuf::rt::enum_size(6, self.action);
        }
        if self.num_ejections != 0 {
            my_size += ::protobuf::rt::value_size(7, self.num_ejections, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.enforced != false {
            my_size += 2;
        }
        if let ::std::option::Option::Some(ref v) = self.event {
            match v {
                &OutlierDetectionEvent_oneof_event::eject_success_rate_event(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &OutlierDetectionEvent_oneof_event::eject_consecutive_event(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &OutlierDetectionEvent_oneof_event::eject_failure_percentage_event(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != OutlierEjectionType::CONSECUTIVE_5XX {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if let Some(ref v) = self.timestamp.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.secs_since_last_action.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.cluster_name.is_empty() {
            os.write_string(4, &self.cluster_name)?;
        }
        if !self.upstream_url.is_empty() {
            os.write_string(5, &self.upstream_url)?;
        }
        if self.action != Action::EJECT {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(&self.action))?;
        }
        if self.num_ejections != 0 {
            os.write_uint32(7, self.num_ejections)?;
        }
        if self.enforced != false {
            os.write_bool(8, self.enforced)?;
        }
        if let ::std::option::Option::Some(ref v) = self.event {
            match v {
                &OutlierDetectionEvent_oneof_event::eject_success_rate_event(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &OutlierDetectionEvent_oneof_event::eject_consecutive_event(ref v) => {
                    os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &OutlierDetectionEvent_oneof_event::eject_failure_percentage_event(ref v) => {
                    os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OutlierDetectionEvent {
        OutlierDetectionEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<OutlierEjectionType>>(
                "type",
                |m: &OutlierDetectionEvent| { &m.field_type },
                |m: &mut OutlierDetectionEvent| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Timestamp>>(
                "timestamp",
                |m: &OutlierDetectionEvent| { &m.timestamp },
                |m: &mut OutlierDetectionEvent| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt64Value>>(
                "secs_since_last_action",
                |m: &OutlierDetectionEvent| { &m.secs_since_last_action },
                |m: &mut OutlierDetectionEvent| { &mut m.secs_since_last_action },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "cluster_name",
                |m: &OutlierDetectionEvent| { &m.cluster_name },
                |m: &mut OutlierDetectionEvent| { &mut m.cluster_name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "upstream_url",
                |m: &OutlierDetectionEvent| { &m.upstream_url },
                |m: &mut OutlierDetectionEvent| { &mut m.upstream_url },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Action>>(
                "action",
                |m: &OutlierDetectionEvent| { &m.action },
                |m: &mut OutlierDetectionEvent| { &mut m.action },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "num_ejections",
                |m: &OutlierDetectionEvent| { &m.num_ejections },
                |m: &mut OutlierDetectionEvent| { &mut m.num_ejections },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "enforced",
                |m: &OutlierDetectionEvent| { &m.enforced },
                |m: &mut OutlierDetectionEvent| { &mut m.enforced },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, OutlierEjectSuccessRate>(
                "eject_success_rate_event",
                OutlierDetectionEvent::has_eject_success_rate_event,
                OutlierDetectionEvent::get_eject_success_rate_event,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, OutlierEjectConsecutive>(
                "eject_consecutive_event",
                OutlierDetectionEvent::has_eject_consecutive_event,
                OutlierDetectionEvent::get_eject_consecutive_event,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, OutlierEjectFailurePercentage>(
                "eject_failure_percentage_event",
                OutlierDetectionEvent::has_eject_failure_percentage_event,
                OutlierDetectionEvent::get_eject_failure_percentage_event,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OutlierDetectionEvent>(
                "OutlierDetectionEvent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OutlierDetectionEvent {
        static instance: ::protobuf::rt::LazyV2<OutlierDetectionEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OutlierDetectionEvent::new)
    }
}

impl ::protobuf::Clear for OutlierDetectionEvent {
    fn clear(&mut self) {
        self.field_type = OutlierEjectionType::CONSECUTIVE_5XX;
        self.timestamp.clear();
        self.secs_since_last_action.clear();
        self.cluster_name.clear();
        self.upstream_url.clear();
        self.action = Action::EJECT;
        self.num_ejections = 0;
        self.enforced = false;
        self.event = ::std::option::Option::None;
        self.event = ::std::option::Option::None;
        self.event = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OutlierDetectionEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OutlierDetectionEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OutlierEjectSuccessRate {
    // message fields
    pub host_success_rate: u32,
    pub cluster_average_success_rate: u32,
    pub cluster_success_rate_ejection_threshold: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OutlierEjectSuccessRate {
    fn default() -> &'a OutlierEjectSuccessRate {
        <OutlierEjectSuccessRate as ::protobuf::Message>::default_instance()
    }
}

impl OutlierEjectSuccessRate {
    pub fn new() -> OutlierEjectSuccessRate {
        ::std::default::Default::default()
    }

    // uint32 host_success_rate = 1;


    pub fn get_host_success_rate(&self) -> u32 {
        self.host_success_rate
    }
    pub fn clear_host_success_rate(&mut self) {
        self.host_success_rate = 0;
    }

    // Param is passed by value, moved
    pub fn set_host_success_rate(&mut self, v: u32) {
        self.host_success_rate = v;
    }

    // uint32 cluster_average_success_rate = 2;


    pub fn get_cluster_average_success_rate(&self) -> u32 {
        self.cluster_average_success_rate
    }
    pub fn clear_cluster_average_success_rate(&mut self) {
        self.cluster_average_success_rate = 0;
    }

    // Param is passed by value, moved
    pub fn set_cluster_average_success_rate(&mut self, v: u32) {
        self.cluster_average_success_rate = v;
    }

    // uint32 cluster_success_rate_ejection_threshold = 3;


    pub fn get_cluster_success_rate_ejection_threshold(&self) -> u32 {
        self.cluster_success_rate_ejection_threshold
    }
    pub fn clear_cluster_success_rate_ejection_threshold(&mut self) {
        self.cluster_success_rate_ejection_threshold = 0;
    }

    // Param is passed by value, moved
    pub fn set_cluster_success_rate_ejection_threshold(&mut self, v: u32) {
        self.cluster_success_rate_ejection_threshold = v;
    }
}

impl ::protobuf::Message for OutlierEjectSuccessRate {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.host_success_rate = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.cluster_average_success_rate = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.cluster_success_rate_ejection_threshold = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.host_success_rate != 0 {
            my_size += ::protobuf::rt::value_size(1, self.host_success_rate, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cluster_average_success_rate != 0 {
            my_size += ::protobuf::rt::value_size(2, self.cluster_average_success_rate, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.cluster_success_rate_ejection_threshold != 0 {
            my_size += ::protobuf::rt::value_size(3, self.cluster_success_rate_ejection_threshold, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.host_success_rate != 0 {
            os.write_uint32(1, self.host_success_rate)?;
        }
        if self.cluster_average_success_rate != 0 {
            os.write_uint32(2, self.cluster_average_success_rate)?;
        }
        if self.cluster_success_rate_ejection_threshold != 0 {
            os.write_uint32(3, self.cluster_success_rate_ejection_threshold)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OutlierEjectSuccessRate {
        OutlierEjectSuccessRate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "host_success_rate",
                |m: &OutlierEjectSuccessRate| { &m.host_success_rate },
                |m: &mut OutlierEjectSuccessRate| { &mut m.host_success_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "cluster_average_success_rate",
                |m: &OutlierEjectSuccessRate| { &m.cluster_average_success_rate },
                |m: &mut OutlierEjectSuccessRate| { &mut m.cluster_average_success_rate },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "cluster_success_rate_ejection_threshold",
                |m: &OutlierEjectSuccessRate| { &m.cluster_success_rate_ejection_threshold },
                |m: &mut OutlierEjectSuccessRate| { &mut m.cluster_success_rate_ejection_threshold },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OutlierEjectSuccessRate>(
                "OutlierEjectSuccessRate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OutlierEjectSuccessRate {
        static instance: ::protobuf::rt::LazyV2<OutlierEjectSuccessRate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OutlierEjectSuccessRate::new)
    }
}

impl ::protobuf::Clear for OutlierEjectSuccessRate {
    fn clear(&mut self) {
        self.host_success_rate = 0;
        self.cluster_average_success_rate = 0;
        self.cluster_success_rate_ejection_threshold = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OutlierEjectSuccessRate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OutlierEjectSuccessRate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OutlierEjectConsecutive {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OutlierEjectConsecutive {
    fn default() -> &'a OutlierEjectConsecutive {
        <OutlierEjectConsecutive as ::protobuf::Message>::default_instance()
    }
}

impl OutlierEjectConsecutive {
    pub fn new() -> OutlierEjectConsecutive {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for OutlierEjectConsecutive {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OutlierEjectConsecutive {
        OutlierEjectConsecutive::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OutlierEjectConsecutive>(
                "OutlierEjectConsecutive",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OutlierEjectConsecutive {
        static instance: ::protobuf::rt::LazyV2<OutlierEjectConsecutive> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OutlierEjectConsecutive::new)
    }
}

impl ::protobuf::Clear for OutlierEjectConsecutive {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OutlierEjectConsecutive {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OutlierEjectConsecutive {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OutlierEjectFailurePercentage {
    // message fields
    pub host_success_rate: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OutlierEjectFailurePercentage {
    fn default() -> &'a OutlierEjectFailurePercentage {
        <OutlierEjectFailurePercentage as ::protobuf::Message>::default_instance()
    }
}

impl OutlierEjectFailurePercentage {
    pub fn new() -> OutlierEjectFailurePercentage {
        ::std::default::Default::default()
    }

    // uint32 host_success_rate = 1;


    pub fn get_host_success_rate(&self) -> u32 {
        self.host_success_rate
    }
    pub fn clear_host_success_rate(&mut self) {
        self.host_success_rate = 0;
    }

    // Param is passed by value, moved
    pub fn set_host_success_rate(&mut self, v: u32) {
        self.host_success_rate = v;
    }
}

impl ::protobuf::Message for OutlierEjectFailurePercentage {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.host_success_rate = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.host_success_rate != 0 {
            my_size += ::protobuf::rt::value_size(1, self.host_success_rate, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.host_success_rate != 0 {
            os.write_uint32(1, self.host_success_rate)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OutlierEjectFailurePercentage {
        OutlierEjectFailurePercentage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "host_success_rate",
                |m: &OutlierEjectFailurePercentage| { &m.host_success_rate },
                |m: &mut OutlierEjectFailurePercentage| { &mut m.host_success_rate },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OutlierEjectFailurePercentage>(
                "OutlierEjectFailurePercentage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OutlierEjectFailurePercentage {
        static instance: ::protobuf::rt::LazyV2<OutlierEjectFailurePercentage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OutlierEjectFailurePercentage::new)
    }
}

impl ::protobuf::Clear for OutlierEjectFailurePercentage {
    fn clear(&mut self) {
        self.host_success_rate = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OutlierEjectFailurePercentage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OutlierEjectFailurePercentage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum OutlierEjectionType {
    CONSECUTIVE_5XX = 0,
    CONSECUTIVE_GATEWAY_FAILURE = 1,
    SUCCESS_RATE = 2,
    CONSECUTIVE_LOCAL_ORIGIN_FAILURE = 3,
    SUCCESS_RATE_LOCAL_ORIGIN = 4,
    FAILURE_PERCENTAGE = 5,
    FAILURE_PERCENTAGE_LOCAL_ORIGIN = 6,
}

impl ::protobuf::ProtobufEnum for OutlierEjectionType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<OutlierEjectionType> {
        match value {
            0 => ::std::option::Option::Some(OutlierEjectionType::CONSECUTIVE_5XX),
            1 => ::std::option::Option::Some(OutlierEjectionType::CONSECUTIVE_GATEWAY_FAILURE),
            2 => ::std::option::Option::Some(OutlierEjectionType::SUCCESS_RATE),
            3 => ::std::option::Option::Some(OutlierEjectionType::CONSECUTIVE_LOCAL_ORIGIN_FAILURE),
            4 => ::std::option::Option::Some(OutlierEjectionType::SUCCESS_RATE_LOCAL_ORIGIN),
            5 => ::std::option::Option::Some(OutlierEjectionType::FAILURE_PERCENTAGE),
            6 => ::std::option::Option::Some(OutlierEjectionType::FAILURE_PERCENTAGE_LOCAL_ORIGIN),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [OutlierEjectionType] = &[
            OutlierEjectionType::CONSECUTIVE_5XX,
            OutlierEjectionType::CONSECUTIVE_GATEWAY_FAILURE,
            OutlierEjectionType::SUCCESS_RATE,
            OutlierEjectionType::CONSECUTIVE_LOCAL_ORIGIN_FAILURE,
            OutlierEjectionType::SUCCESS_RATE_LOCAL_ORIGIN,
            OutlierEjectionType::FAILURE_PERCENTAGE,
            OutlierEjectionType::FAILURE_PERCENTAGE_LOCAL_ORIGIN,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<OutlierEjectionType>("OutlierEjectionType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for OutlierEjectionType {
}

impl ::std::default::Default for OutlierEjectionType {
    fn default() -> Self {
        OutlierEjectionType::CONSECUTIVE_5XX
    }
}

impl ::protobuf::reflect::ProtobufValue for OutlierEjectionType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Action {
    EJECT = 0,
    UNEJECT = 1,
}

impl ::protobuf::ProtobufEnum for Action {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Action> {
        match value {
            0 => ::std::option::Option::Some(Action::EJECT),
            1 => ::std::option::Option::Some(Action::UNEJECT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Action] = &[
            Action::EJECT,
            Action::UNEJECT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Action>("Action", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Action {
}

impl ::std::default::Default for Action {
    fn default() -> Self {
        Action::EJECT
    }
}

impl ::protobuf::reflect::ProtobufValue for Action {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n3envoy/data/cluster/v3/outlier_detection_event.proto\x12\x15envoy.data\
    .cluster.v3\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobu\
    f/wrappers.proto\x1a\x1dudpa/annotations/status.proto\x1a!udpa/annotatio\
    ns/versioning.proto\x1a\x17validate/validate.proto\"\xe1\x06\n\x15Outlie\
    rDetectionEvent\x12H\n\x04type\x18\x01\x20\x01(\x0e2*.envoy.data.cluster\
    .v3.OutlierEjectionTypeR\x04typeB\x08\xfaB\x05\x82\x01\x02\x10\x01\x128\
    \n\ttimestamp\x18\x02\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\ttime\
    stamp\x12Q\n\x16secs_since_last_action\x18\x03\x20\x01(\x0b2\x1c.google.\
    protobuf.UInt64ValueR\x13secsSinceLastAction\x12*\n\x0ccluster_name\x18\
    \x04\x20\x01(\tR\x0bclusterNameB\x07\xfaB\x04r\x02\x10\x01\x12*\n\x0cups\
    tream_url\x18\x05\x20\x01(\tR\x0bupstreamUrlB\x07\xfaB\x04r\x02\x10\x01\
    \x12?\n\x06action\x18\x06\x20\x01(\x0e2\x1d.envoy.data.cluster.v3.Action\
    R\x06actionB\x08\xfaB\x05\x82\x01\x02\x10\x01\x12#\n\rnum_ejections\x18\
    \x07\x20\x01(\rR\x0cnumEjections\x12\x1a\n\x08enforced\x18\x08\x20\x01(\
    \x08R\x08enforced\x12i\n\x18eject_success_rate_event\x18\t\x20\x01(\x0b2\
    ..envoy.data.cluster.v3.OutlierEjectSuccessRateH\0R\x15ejectSuccessRateE\
    vent\x12h\n\x17eject_consecutive_event\x18\n\x20\x01(\x0b2..envoy.data.c\
    luster.v3.OutlierEjectConsecutiveH\0R\x15ejectConsecutiveEvent\x12{\n\
    \x1eeject_failure_percentage_event\x18\x0b\x20\x01(\x0b24.envoy.data.clu\
    ster.v3.OutlierEjectFailurePercentageH\0R\x1bejectFailurePercentageEvent\
    B\x0c\n\x05event\x12\x03\xf8B\x01:7\x9a\xc5\x88\x1e2\n0envoy.data.cluste\
    r.v2alpha.OutlierDetectionEvent\"\xb2\x02\n\x17OutlierEjectSuccessRate\
    \x123\n\x11host_success_rate\x18\x01\x20\x01(\rR\x0fhostSuccessRateB\x07\
    \xfaB\x04*\x02\x18d\x12H\n\x1ccluster_average_success_rate\x18\x02\x20\
    \x01(\rR\x19clusterAverageSuccessRateB\x07\xfaB\x04*\x02\x18d\x12]\n'clu\
    ster_success_rate_ejection_threshold\x18\x03\x20\x01(\rR#clusterSuccessR\
    ateEjectionThresholdB\x07\xfaB\x04*\x02\x18d:9\x9a\xc5\x88\x1e4\n2envoy.\
    data.cluster.v2alpha.OutlierEjectSuccessRate\"T\n\x17OutlierEjectConsecu\
    tive:9\x9a\xc5\x88\x1e4\n2envoy.data.cluster.v2alpha.OutlierEjectConsecu\
    tive\"\x95\x01\n\x1dOutlierEjectFailurePercentage\x123\n\x11host_success\
    _rate\x18\x01\x20\x01(\rR\x0fhostSuccessRateB\x07\xfaB\x04*\x02\x18d:?\
    \x9a\xc5\x88\x1e:\n8envoy.data.cluster.v2alpha.OutlierEjectFailurePercen\
    tage*\xdf\x01\n\x13OutlierEjectionType\x12\x13\n\x0fCONSECUTIVE_5XX\x10\
    \0\x12\x1f\n\x1bCONSECUTIVE_GATEWAY_FAILURE\x10\x01\x12\x10\n\x0cSUCCESS\
    _RATE\x10\x02\x12$\n\x20CONSECUTIVE_LOCAL_ORIGIN_FAILURE\x10\x03\x12\x1d\
    \n\x19SUCCESS_RATE_LOCAL_ORIGIN\x10\x04\x12\x16\n\x12FAILURE_PERCENTAGE\
    \x10\x05\x12#\n\x1fFAILURE_PERCENTAGE_LOCAL_ORIGIN\x10\x06*\x20\n\x06Act\
    ion\x12\t\n\x05EJECT\x10\0\x12\x0b\n\x07UNEJECT\x10\x01BK\n#io.envoyprox\
    y.envoy.data.cluster.v3B\x1aOutlierDetectionEventProtoP\x01\xba\x80\xc8\
    \xd1\x06\x02\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
