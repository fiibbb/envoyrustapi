// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/config/endpoint/v3/endpoint_components.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct Endpoint {
    // message fields
    pub address: ::protobuf::SingularPtrField<super::address::Address>,
    pub health_check_config: ::protobuf::SingularPtrField<Endpoint_HealthCheckConfig>,
    pub hostname: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Endpoint {
    fn default() -> &'a Endpoint {
        <Endpoint as ::protobuf::Message>::default_instance()
    }
}

impl Endpoint {
    pub fn new() -> Endpoint {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.Address address = 1;


    pub fn get_address(&self) -> &super::address::Address {
        self.address.as_ref().unwrap_or_else(|| <super::address::Address as ::protobuf::Message>::default_instance())
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    pub fn has_address(&self) -> bool {
        self.address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: super::address::Address) {
        self.address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut super::address::Address {
        if self.address.is_none() {
            self.address.set_default();
        }
        self.address.as_mut().unwrap()
    }

    // Take field
    pub fn take_address(&mut self) -> super::address::Address {
        self.address.take().unwrap_or_else(|| super::address::Address::new())
    }

    // .envoy.config.endpoint.v3.Endpoint.HealthCheckConfig health_check_config = 2;


    pub fn get_health_check_config(&self) -> &Endpoint_HealthCheckConfig {
        self.health_check_config.as_ref().unwrap_or_else(|| <Endpoint_HealthCheckConfig as ::protobuf::Message>::default_instance())
    }
    pub fn clear_health_check_config(&mut self) {
        self.health_check_config.clear();
    }

    pub fn has_health_check_config(&self) -> bool {
        self.health_check_config.is_some()
    }

    // Param is passed by value, moved
    pub fn set_health_check_config(&mut self, v: Endpoint_HealthCheckConfig) {
        self.health_check_config = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_health_check_config(&mut self) -> &mut Endpoint_HealthCheckConfig {
        if self.health_check_config.is_none() {
            self.health_check_config.set_default();
        }
        self.health_check_config.as_mut().unwrap()
    }

    // Take field
    pub fn take_health_check_config(&mut self) -> Endpoint_HealthCheckConfig {
        self.health_check_config.take().unwrap_or_else(|| Endpoint_HealthCheckConfig::new())
    }

    // string hostname = 3;


    pub fn get_hostname(&self) -> &str {
        &self.hostname
    }
    pub fn clear_hostname(&mut self) {
        self.hostname.clear();
    }

    // Param is passed by value, moved
    pub fn set_hostname(&mut self, v: ::std::string::String) {
        self.hostname = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hostname(&mut self) -> &mut ::std::string::String {
        &mut self.hostname
    }

    // Take field
    pub fn take_hostname(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hostname, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Endpoint {
    fn is_initialized(&self) -> bool {
        for v in &self.address {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.health_check_config {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.health_check_config)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hostname)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.health_check_config.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.hostname.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.hostname);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.address.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.health_check_config.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.hostname.is_empty() {
            os.write_string(3, &self.hostname)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Endpoint {
        Endpoint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::address::Address>>(
                "address",
                |m: &Endpoint| { &m.address },
                |m: &mut Endpoint| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Endpoint_HealthCheckConfig>>(
                "health_check_config",
                |m: &Endpoint| { &m.health_check_config },
                |m: &mut Endpoint| { &mut m.health_check_config },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "hostname",
                |m: &Endpoint| { &m.hostname },
                |m: &mut Endpoint| { &mut m.hostname },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Endpoint>(
                "Endpoint",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Endpoint {
        static instance: ::protobuf::rt::LazyV2<Endpoint> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Endpoint::new)
    }
}

impl ::protobuf::Clear for Endpoint {
    fn clear(&mut self) {
        self.address.clear();
        self.health_check_config.clear();
        self.hostname.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Endpoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Endpoint {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Endpoint_HealthCheckConfig {
    // message fields
    pub port_value: u32,
    pub hostname: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Endpoint_HealthCheckConfig {
    fn default() -> &'a Endpoint_HealthCheckConfig {
        <Endpoint_HealthCheckConfig as ::protobuf::Message>::default_instance()
    }
}

impl Endpoint_HealthCheckConfig {
    pub fn new() -> Endpoint_HealthCheckConfig {
        ::std::default::Default::default()
    }

    // uint32 port_value = 1;


    pub fn get_port_value(&self) -> u32 {
        self.port_value
    }
    pub fn clear_port_value(&mut self) {
        self.port_value = 0;
    }

    // Param is passed by value, moved
    pub fn set_port_value(&mut self, v: u32) {
        self.port_value = v;
    }

    // string hostname = 2;


    pub fn get_hostname(&self) -> &str {
        &self.hostname
    }
    pub fn clear_hostname(&mut self) {
        self.hostname.clear();
    }

    // Param is passed by value, moved
    pub fn set_hostname(&mut self, v: ::std::string::String) {
        self.hostname = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hostname(&mut self) -> &mut ::std::string::String {
        &mut self.hostname
    }

    // Take field
    pub fn take_hostname(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hostname, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Endpoint_HealthCheckConfig {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.port_value = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hostname)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.port_value != 0 {
            my_size += ::protobuf::rt::value_size(1, self.port_value, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.hostname.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.hostname);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.port_value != 0 {
            os.write_uint32(1, self.port_value)?;
        }
        if !self.hostname.is_empty() {
            os.write_string(2, &self.hostname)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Endpoint_HealthCheckConfig {
        Endpoint_HealthCheckConfig::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "port_value",
                |m: &Endpoint_HealthCheckConfig| { &m.port_value },
                |m: &mut Endpoint_HealthCheckConfig| { &mut m.port_value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "hostname",
                |m: &Endpoint_HealthCheckConfig| { &m.hostname },
                |m: &mut Endpoint_HealthCheckConfig| { &mut m.hostname },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Endpoint_HealthCheckConfig>(
                "Endpoint.HealthCheckConfig",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Endpoint_HealthCheckConfig {
        static instance: ::protobuf::rt::LazyV2<Endpoint_HealthCheckConfig> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Endpoint_HealthCheckConfig::new)
    }
}

impl ::protobuf::Clear for Endpoint_HealthCheckConfig {
    fn clear(&mut self) {
        self.port_value = 0;
        self.hostname.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Endpoint_HealthCheckConfig {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Endpoint_HealthCheckConfig {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LbEndpoint {
    // message fields
    pub health_status: super::health_check::HealthStatus,
    pub metadata: ::protobuf::SingularPtrField<super::base::Metadata>,
    pub load_balancing_weight: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    // message oneof groups
    pub host_identifier: ::std::option::Option<LbEndpoint_oneof_host_identifier>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LbEndpoint {
    fn default() -> &'a LbEndpoint {
        <LbEndpoint as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum LbEndpoint_oneof_host_identifier {
    endpoint(Endpoint),
    endpoint_name(::std::string::String),
}

impl LbEndpoint {
    pub fn new() -> LbEndpoint {
        ::std::default::Default::default()
    }

    // .envoy.config.endpoint.v3.Endpoint endpoint = 1;


    pub fn get_endpoint(&self) -> &Endpoint {
        match self.host_identifier {
            ::std::option::Option::Some(LbEndpoint_oneof_host_identifier::endpoint(ref v)) => v,
            _ => <Endpoint as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_endpoint(&mut self) {
        self.host_identifier = ::std::option::Option::None;
    }

    pub fn has_endpoint(&self) -> bool {
        match self.host_identifier {
            ::std::option::Option::Some(LbEndpoint_oneof_host_identifier::endpoint(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_endpoint(&mut self, v: Endpoint) {
        self.host_identifier = ::std::option::Option::Some(LbEndpoint_oneof_host_identifier::endpoint(v))
    }

    // Mutable pointer to the field.
    pub fn mut_endpoint(&mut self) -> &mut Endpoint {
        if let ::std::option::Option::Some(LbEndpoint_oneof_host_identifier::endpoint(_)) = self.host_identifier {
        } else {
            self.host_identifier = ::std::option::Option::Some(LbEndpoint_oneof_host_identifier::endpoint(Endpoint::new()));
        }
        match self.host_identifier {
            ::std::option::Option::Some(LbEndpoint_oneof_host_identifier::endpoint(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_endpoint(&mut self) -> Endpoint {
        if self.has_endpoint() {
            match self.host_identifier.take() {
                ::std::option::Option::Some(LbEndpoint_oneof_host_identifier::endpoint(v)) => v,
                _ => panic!(),
            }
        } else {
            Endpoint::new()
        }
    }

    // string endpoint_name = 5;


    pub fn get_endpoint_name(&self) -> &str {
        match self.host_identifier {
            ::std::option::Option::Some(LbEndpoint_oneof_host_identifier::endpoint_name(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_endpoint_name(&mut self) {
        self.host_identifier = ::std::option::Option::None;
    }

    pub fn has_endpoint_name(&self) -> bool {
        match self.host_identifier {
            ::std::option::Option::Some(LbEndpoint_oneof_host_identifier::endpoint_name(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_endpoint_name(&mut self, v: ::std::string::String) {
        self.host_identifier = ::std::option::Option::Some(LbEndpoint_oneof_host_identifier::endpoint_name(v))
    }

    // Mutable pointer to the field.
    pub fn mut_endpoint_name(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(LbEndpoint_oneof_host_identifier::endpoint_name(_)) = self.host_identifier {
        } else {
            self.host_identifier = ::std::option::Option::Some(LbEndpoint_oneof_host_identifier::endpoint_name(::std::string::String::new()));
        }
        match self.host_identifier {
            ::std::option::Option::Some(LbEndpoint_oneof_host_identifier::endpoint_name(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_endpoint_name(&mut self) -> ::std::string::String {
        if self.has_endpoint_name() {
            match self.host_identifier.take() {
                ::std::option::Option::Some(LbEndpoint_oneof_host_identifier::endpoint_name(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // .envoy.config.core.v3.HealthStatus health_status = 2;


    pub fn get_health_status(&self) -> super::health_check::HealthStatus {
        self.health_status
    }
    pub fn clear_health_status(&mut self) {
        self.health_status = super::health_check::HealthStatus::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_health_status(&mut self, v: super::health_check::HealthStatus) {
        self.health_status = v;
    }

    // .envoy.config.core.v3.Metadata metadata = 3;


    pub fn get_metadata(&self) -> &super::base::Metadata {
        self.metadata.as_ref().unwrap_or_else(|| <super::base::Metadata as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: super::base::Metadata) {
        self.metadata = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut super::base::Metadata {
        if self.metadata.is_none() {
            self.metadata.set_default();
        }
        self.metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata(&mut self) -> super::base::Metadata {
        self.metadata.take().unwrap_or_else(|| super::base::Metadata::new())
    }

    // .google.protobuf.UInt32Value load_balancing_weight = 4;


    pub fn get_load_balancing_weight(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.load_balancing_weight.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_load_balancing_weight(&mut self) {
        self.load_balancing_weight.clear();
    }

    pub fn has_load_balancing_weight(&self) -> bool {
        self.load_balancing_weight.is_some()
    }

    // Param is passed by value, moved
    pub fn set_load_balancing_weight(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.load_balancing_weight = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_load_balancing_weight(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.load_balancing_weight.is_none() {
            self.load_balancing_weight.set_default();
        }
        self.load_balancing_weight.as_mut().unwrap()
    }

    // Take field
    pub fn take_load_balancing_weight(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.load_balancing_weight.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }
}

impl ::protobuf::Message for LbEndpoint {
    fn is_initialized(&self) -> bool {
        if let Some(LbEndpoint_oneof_host_identifier::endpoint(ref v)) = self.host_identifier {
            if !v.is_initialized() {
                return false;
            }
        }
        for v in &self.metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.load_balancing_weight {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.host_identifier = ::std::option::Option::Some(LbEndpoint_oneof_host_identifier::endpoint(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.host_identifier = ::std::option::Option::Some(LbEndpoint_oneof_host_identifier::endpoint_name(is.read_string()?));
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.health_status, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.load_balancing_weight)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.health_status != super::health_check::HealthStatus::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(2, self.health_status);
        }
        if let Some(ref v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.load_balancing_weight.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let ::std::option::Option::Some(ref v) = self.host_identifier {
            match v {
                &LbEndpoint_oneof_host_identifier::endpoint(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &LbEndpoint_oneof_host_identifier::endpoint_name(ref v) => {
                    my_size += ::protobuf::rt::string_size(5, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.health_status != super::health_check::HealthStatus::UNKNOWN {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.health_status))?;
        }
        if let Some(ref v) = self.metadata.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.load_balancing_weight.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let ::std::option::Option::Some(ref v) = self.host_identifier {
            match v {
                &LbEndpoint_oneof_host_identifier::endpoint(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &LbEndpoint_oneof_host_identifier::endpoint_name(ref v) => {
                    os.write_string(5, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LbEndpoint {
        LbEndpoint::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Endpoint>(
                "endpoint",
                LbEndpoint::has_endpoint,
                LbEndpoint::get_endpoint,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "endpoint_name",
                LbEndpoint::has_endpoint_name,
                LbEndpoint::get_endpoint_name,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::health_check::HealthStatus>>(
                "health_status",
                |m: &LbEndpoint| { &m.health_status },
                |m: &mut LbEndpoint| { &mut m.health_status },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Metadata>>(
                "metadata",
                |m: &LbEndpoint| { &m.metadata },
                |m: &mut LbEndpoint| { &mut m.metadata },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "load_balancing_weight",
                |m: &LbEndpoint| { &m.load_balancing_weight },
                |m: &mut LbEndpoint| { &mut m.load_balancing_weight },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LbEndpoint>(
                "LbEndpoint",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LbEndpoint {
        static instance: ::protobuf::rt::LazyV2<LbEndpoint> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LbEndpoint::new)
    }
}

impl ::protobuf::Clear for LbEndpoint {
    fn clear(&mut self) {
        self.host_identifier = ::std::option::Option::None;
        self.host_identifier = ::std::option::Option::None;
        self.health_status = super::health_check::HealthStatus::UNKNOWN;
        self.metadata.clear();
        self.load_balancing_weight.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LbEndpoint {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LbEndpoint {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LocalityLbEndpoints {
    // message fields
    pub locality: ::protobuf::SingularPtrField<super::base::Locality>,
    pub lb_endpoints: ::protobuf::RepeatedField<LbEndpoint>,
    pub load_balancing_weight: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    pub priority: u32,
    pub proximity: ::protobuf::SingularPtrField<::protobuf::well_known_types::UInt32Value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LocalityLbEndpoints {
    fn default() -> &'a LocalityLbEndpoints {
        <LocalityLbEndpoints as ::protobuf::Message>::default_instance()
    }
}

impl LocalityLbEndpoints {
    pub fn new() -> LocalityLbEndpoints {
        ::std::default::Default::default()
    }

    // .envoy.config.core.v3.Locality locality = 1;


    pub fn get_locality(&self) -> &super::base::Locality {
        self.locality.as_ref().unwrap_or_else(|| <super::base::Locality as ::protobuf::Message>::default_instance())
    }
    pub fn clear_locality(&mut self) {
        self.locality.clear();
    }

    pub fn has_locality(&self) -> bool {
        self.locality.is_some()
    }

    // Param is passed by value, moved
    pub fn set_locality(&mut self, v: super::base::Locality) {
        self.locality = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_locality(&mut self) -> &mut super::base::Locality {
        if self.locality.is_none() {
            self.locality.set_default();
        }
        self.locality.as_mut().unwrap()
    }

    // Take field
    pub fn take_locality(&mut self) -> super::base::Locality {
        self.locality.take().unwrap_or_else(|| super::base::Locality::new())
    }

    // repeated .envoy.config.endpoint.v3.LbEndpoint lb_endpoints = 2;


    pub fn get_lb_endpoints(&self) -> &[LbEndpoint] {
        &self.lb_endpoints
    }
    pub fn clear_lb_endpoints(&mut self) {
        self.lb_endpoints.clear();
    }

    // Param is passed by value, moved
    pub fn set_lb_endpoints(&mut self, v: ::protobuf::RepeatedField<LbEndpoint>) {
        self.lb_endpoints = v;
    }

    // Mutable pointer to the field.
    pub fn mut_lb_endpoints(&mut self) -> &mut ::protobuf::RepeatedField<LbEndpoint> {
        &mut self.lb_endpoints
    }

    // Take field
    pub fn take_lb_endpoints(&mut self) -> ::protobuf::RepeatedField<LbEndpoint> {
        ::std::mem::replace(&mut self.lb_endpoints, ::protobuf::RepeatedField::new())
    }

    // .google.protobuf.UInt32Value load_balancing_weight = 3;


    pub fn get_load_balancing_weight(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.load_balancing_weight.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_load_balancing_weight(&mut self) {
        self.load_balancing_weight.clear();
    }

    pub fn has_load_balancing_weight(&self) -> bool {
        self.load_balancing_weight.is_some()
    }

    // Param is passed by value, moved
    pub fn set_load_balancing_weight(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.load_balancing_weight = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_load_balancing_weight(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.load_balancing_weight.is_none() {
            self.load_balancing_weight.set_default();
        }
        self.load_balancing_weight.as_mut().unwrap()
    }

    // Take field
    pub fn take_load_balancing_weight(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.load_balancing_weight.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }

    // uint32 priority = 5;


    pub fn get_priority(&self) -> u32 {
        self.priority
    }
    pub fn clear_priority(&mut self) {
        self.priority = 0;
    }

    // Param is passed by value, moved
    pub fn set_priority(&mut self, v: u32) {
        self.priority = v;
    }

    // .google.protobuf.UInt32Value proximity = 6;


    pub fn get_proximity(&self) -> &::protobuf::well_known_types::UInt32Value {
        self.proximity.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::UInt32Value as ::protobuf::Message>::default_instance())
    }
    pub fn clear_proximity(&mut self) {
        self.proximity.clear();
    }

    pub fn has_proximity(&self) -> bool {
        self.proximity.is_some()
    }

    // Param is passed by value, moved
    pub fn set_proximity(&mut self, v: ::protobuf::well_known_types::UInt32Value) {
        self.proximity = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proximity(&mut self) -> &mut ::protobuf::well_known_types::UInt32Value {
        if self.proximity.is_none() {
            self.proximity.set_default();
        }
        self.proximity.as_mut().unwrap()
    }

    // Take field
    pub fn take_proximity(&mut self) -> ::protobuf::well_known_types::UInt32Value {
        self.proximity.take().unwrap_or_else(|| ::protobuf::well_known_types::UInt32Value::new())
    }
}

impl ::protobuf::Message for LocalityLbEndpoints {
    fn is_initialized(&self) -> bool {
        for v in &self.locality {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.lb_endpoints {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.load_balancing_weight {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.proximity {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.locality)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.lb_endpoints)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.load_balancing_weight)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.priority = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.proximity)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.locality.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.lb_endpoints {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.load_balancing_weight.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.priority != 0 {
            my_size += ::protobuf::rt::value_size(5, self.priority, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.proximity.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.locality.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.lb_endpoints {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.load_balancing_weight.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.priority != 0 {
            os.write_uint32(5, self.priority)?;
        }
        if let Some(ref v) = self.proximity.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LocalityLbEndpoints {
        LocalityLbEndpoints::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::base::Locality>>(
                "locality",
                |m: &LocalityLbEndpoints| { &m.locality },
                |m: &mut LocalityLbEndpoints| { &mut m.locality },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LbEndpoint>>(
                "lb_endpoints",
                |m: &LocalityLbEndpoints| { &m.lb_endpoints },
                |m: &mut LocalityLbEndpoints| { &mut m.lb_endpoints },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "load_balancing_weight",
                |m: &LocalityLbEndpoints| { &m.load_balancing_weight },
                |m: &mut LocalityLbEndpoints| { &mut m.load_balancing_weight },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "priority",
                |m: &LocalityLbEndpoints| { &m.priority },
                |m: &mut LocalityLbEndpoints| { &mut m.priority },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::UInt32Value>>(
                "proximity",
                |m: &LocalityLbEndpoints| { &m.proximity },
                |m: &mut LocalityLbEndpoints| { &mut m.proximity },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LocalityLbEndpoints>(
                "LocalityLbEndpoints",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LocalityLbEndpoints {
        static instance: ::protobuf::rt::LazyV2<LocalityLbEndpoints> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LocalityLbEndpoints::new)
    }
}

impl ::protobuf::Clear for LocalityLbEndpoints {
    fn clear(&mut self) {
        self.locality.clear();
        self.lb_endpoints.clear();
        self.load_balancing_weight.clear();
        self.priority = 0;
        self.proximity.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LocalityLbEndpoints {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LocalityLbEndpoints {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n2envoy/config/endpoint/v3/endpoint_components.proto\x12\x18envoy.confi\
    g.endpoint.v3\x1a\"envoy/config/core/v3/address.proto\x1a\x1fenvoy/confi\
    g/core/v3/base.proto\x1a'envoy/config/core/v3/health_check.proto\x1a\x1e\
    google/protobuf/wrappers.proto\x1a\x1dudpa/annotations/status.proto\x1a!\
    udpa/annotations/versioning.proto\x1a\x17validate/validate.proto\"\x81\
    \x03\n\x08Endpoint\x127\n\x07address\x18\x01\x20\x01(\x0b2\x1d.envoy.con\
    fig.core.v3.AddressR\x07address\x12d\n\x13health_check_config\x18\x02\
    \x20\x01(\x0b24.envoy.config.endpoint.v3.Endpoint.HealthCheckConfigR\x11\
    healthCheckConfig\x12\x1a\n\x08hostname\x18\x03\x20\x01(\tR\x08hostname\
    \x1a\x92\x01\n\x11HealthCheckConfig\x12(\n\nport_value\x18\x01\x20\x01(\
    \rR\tportValueB\t\xfaB\x06*\x04\x18\xff\xff\x03\x12\x1a\n\x08hostname\
    \x18\x02\x20\x01(\tR\x08hostname:7\x9a\xc5\x88\x1e2\n0envoy.api.v2.endpo\
    int.Endpoint.HealthCheckConfig:%\x9a\xc5\x88\x1e\x20\n\x1eenvoy.api.v2.e\
    ndpoint.Endpoint\"\x91\x03\n\nLbEndpoint\x12@\n\x08endpoint\x18\x01\x20\
    \x01(\x0b2\".envoy.config.endpoint.v3.EndpointH\0R\x08endpoint\x12%\n\re\
    ndpoint_name\x18\x05\x20\x01(\tH\0R\x0cendpointName\x12G\n\rhealth_statu\
    s\x18\x02\x20\x01(\x0e2\".envoy.config.core.v3.HealthStatusR\x0chealthSt\
    atus\x12:\n\x08metadata\x18\x03\x20\x01(\x0b2\x1e.envoy.config.core.v3.M\
    etadataR\x08metadata\x12Y\n\x15load_balancing_weight\x18\x04\x20\x01(\
    \x0b2\x1c.google.protobuf.UInt32ValueR\x13loadBalancingWeightB\x07\xfaB\
    \x04*\x02(\x01B\x11\n\x0fhost_identifier:'\x9a\xc5\x88\x1e\"\n\x20envoy.\
    api.v2.endpoint.LbEndpoint\"\x89\x03\n\x13LocalityLbEndpoints\x12:\n\x08\
    locality\x18\x01\x20\x01(\x0b2\x1e.envoy.config.core.v3.LocalityR\x08loc\
    ality\x12G\n\x0clb_endpoints\x18\x02\x20\x03(\x0b2$.envoy.config.endpoin\
    t.v3.LbEndpointR\x0blbEndpoints\x12Y\n\x15load_balancing_weight\x18\x03\
    \x20\x01(\x0b2\x1c.google.protobuf.UInt32ValueR\x13loadBalancingWeightB\
    \x07\xfaB\x04*\x02(\x01\x12$\n\x08priority\x18\x05\x20\x01(\rR\x08priori\
    tyB\x08\xfaB\x05*\x03\x18\x80\x01\x12:\n\tproximity\x18\x06\x20\x01(\x0b\
    2\x1c.google.protobuf.UInt32ValueR\tproximity:0\x9a\xc5\x88\x1e+\n)envoy\
    .api.v2.endpoint.LocalityLbEndpointsBK\n&io.envoyproxy.envoy.config.endp\
    oint.v3B\x17EndpointComponentsProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\x02\
    b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
