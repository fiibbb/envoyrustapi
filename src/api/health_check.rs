// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `envoy/extensions/filters/http/health_check/v4alpha/health_check.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct HealthCheck {
    // message fields
    pub pass_through_mode: ::protobuf::SingularPtrField<::protobuf::well_known_types::BoolValue>,
    pub cache_time: ::protobuf::SingularPtrField<::protobuf::well_known_types::Duration>,
    pub cluster_min_healthy_percentages: ::std::collections::HashMap<::std::string::String, super::percent::Percent>,
    pub headers: ::protobuf::RepeatedField<super::route_components::HeaderMatcher>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HealthCheck {
    fn default() -> &'a HealthCheck {
        <HealthCheck as ::protobuf::Message>::default_instance()
    }
}

impl HealthCheck {
    pub fn new() -> HealthCheck {
        ::std::default::Default::default()
    }

    // .google.protobuf.BoolValue pass_through_mode = 1;


    pub fn get_pass_through_mode(&self) -> &::protobuf::well_known_types::BoolValue {
        self.pass_through_mode.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::BoolValue as ::protobuf::Message>::default_instance())
    }
    pub fn clear_pass_through_mode(&mut self) {
        self.pass_through_mode.clear();
    }

    pub fn has_pass_through_mode(&self) -> bool {
        self.pass_through_mode.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pass_through_mode(&mut self, v: ::protobuf::well_known_types::BoolValue) {
        self.pass_through_mode = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pass_through_mode(&mut self) -> &mut ::protobuf::well_known_types::BoolValue {
        if self.pass_through_mode.is_none() {
            self.pass_through_mode.set_default();
        }
        self.pass_through_mode.as_mut().unwrap()
    }

    // Take field
    pub fn take_pass_through_mode(&mut self) -> ::protobuf::well_known_types::BoolValue {
        self.pass_through_mode.take().unwrap_or_else(|| ::protobuf::well_known_types::BoolValue::new())
    }

    // .google.protobuf.Duration cache_time = 3;


    pub fn get_cache_time(&self) -> &::protobuf::well_known_types::Duration {
        self.cache_time.as_ref().unwrap_or_else(|| <::protobuf::well_known_types::Duration as ::protobuf::Message>::default_instance())
    }
    pub fn clear_cache_time(&mut self) {
        self.cache_time.clear();
    }

    pub fn has_cache_time(&self) -> bool {
        self.cache_time.is_some()
    }

    // Param is passed by value, moved
    pub fn set_cache_time(&mut self, v: ::protobuf::well_known_types::Duration) {
        self.cache_time = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_cache_time(&mut self) -> &mut ::protobuf::well_known_types::Duration {
        if self.cache_time.is_none() {
            self.cache_time.set_default();
        }
        self.cache_time.as_mut().unwrap()
    }

    // Take field
    pub fn take_cache_time(&mut self) -> ::protobuf::well_known_types::Duration {
        self.cache_time.take().unwrap_or_else(|| ::protobuf::well_known_types::Duration::new())
    }

    // repeated .envoy.extensions.filters.http.health_check.v4alpha.HealthCheck.ClusterMinHealthyPercentagesEntry cluster_min_healthy_percentages = 4;


    pub fn get_cluster_min_healthy_percentages(&self) -> &::std::collections::HashMap<::std::string::String, super::percent::Percent> {
        &self.cluster_min_healthy_percentages
    }
    pub fn clear_cluster_min_healthy_percentages(&mut self) {
        self.cluster_min_healthy_percentages.clear();
    }

    // Param is passed by value, moved
    pub fn set_cluster_min_healthy_percentages(&mut self, v: ::std::collections::HashMap<::std::string::String, super::percent::Percent>) {
        self.cluster_min_healthy_percentages = v;
    }

    // Mutable pointer to the field.
    pub fn mut_cluster_min_healthy_percentages(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, super::percent::Percent> {
        &mut self.cluster_min_healthy_percentages
    }

    // Take field
    pub fn take_cluster_min_healthy_percentages(&mut self) -> ::std::collections::HashMap<::std::string::String, super::percent::Percent> {
        ::std::mem::replace(&mut self.cluster_min_healthy_percentages, ::std::collections::HashMap::new())
    }

    // repeated .envoy.config.route.v4alpha.HeaderMatcher headers = 5;


    pub fn get_headers(&self) -> &[super::route_components::HeaderMatcher] {
        &self.headers
    }
    pub fn clear_headers(&mut self) {
        self.headers.clear();
    }

    // Param is passed by value, moved
    pub fn set_headers(&mut self, v: ::protobuf::RepeatedField<super::route_components::HeaderMatcher>) {
        self.headers = v;
    }

    // Mutable pointer to the field.
    pub fn mut_headers(&mut self) -> &mut ::protobuf::RepeatedField<super::route_components::HeaderMatcher> {
        &mut self.headers
    }

    // Take field
    pub fn take_headers(&mut self) -> ::protobuf::RepeatedField<super::route_components::HeaderMatcher> {
        ::std::mem::replace(&mut self.headers, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for HealthCheck {
    fn is_initialized(&self) -> bool {
        for v in &self.pass_through_mode {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.cache_time {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.headers {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pass_through_mode)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.cache_time)?;
                },
                4 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::percent::Percent>>(wire_type, is, &mut self.cluster_min_healthy_percentages)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.headers)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.pass_through_mode.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.cache_time.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::percent::Percent>>(4, &self.cluster_min_healthy_percentages);
        for value in &self.headers {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.pass_through_mode.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.cache_time.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::percent::Percent>>(4, &self.cluster_min_healthy_percentages, os)?;
        for v in &self.headers {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HealthCheck {
        HealthCheck::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::BoolValue>>(
                "pass_through_mode",
                |m: &HealthCheck| { &m.pass_through_mode },
                |m: &mut HealthCheck| { &mut m.pass_through_mode },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<::protobuf::well_known_types::Duration>>(
                "cache_time",
                |m: &HealthCheck| { &m.cache_time },
                |m: &mut HealthCheck| { &mut m.cache_time },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<super::percent::Percent>>(
                "cluster_min_healthy_percentages",
                |m: &HealthCheck| { &m.cluster_min_healthy_percentages },
                |m: &mut HealthCheck| { &mut m.cluster_min_healthy_percentages },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::route_components::HeaderMatcher>>(
                "headers",
                |m: &HealthCheck| { &m.headers },
                |m: &mut HealthCheck| { &mut m.headers },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HealthCheck>(
                "HealthCheck",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HealthCheck {
        static instance: ::protobuf::rt::LazyV2<HealthCheck> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HealthCheck::new)
    }
}

impl ::protobuf::Clear for HealthCheck {
    fn clear(&mut self) {
        self.pass_through_mode.clear();
        self.cache_time.clear();
        self.cluster_min_healthy_percentages.clear();
        self.headers.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HealthCheck {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HealthCheck {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \nEenvoy/extensions/filters/http/health_check/v4alpha/health_check.proto\
    \x122envoy.extensions.filters.http.health_check.v4alpha\x1a1envoy/config\
    /route/v4alpha/route_components.proto\x1a\x1benvoy/type/v3/percent.proto\
    \x1a\x1egoogle/protobuf/duration.proto\x1a\x1egoogle/protobuf/wrappers.p\
    roto\x1a\x1dudpa/annotations/status.proto\x1a!udpa/annotations/versionin\
    g.proto\x1a\x17validate/validate.proto\"\xba\x04\n\x0bHealthCheck\x12P\n\
    \x11pass_through_mode\x18\x01\x20\x01(\x0b2\x1a.google.protobuf.BoolValu\
    eR\x0fpassThroughModeB\x08\xfaB\x05\x8a\x01\x02\x10\x01\x128\n\ncache_ti\
    me\x18\x03\x20\x01(\x0b2\x19.google.protobuf.DurationR\tcacheTime\x12\
    \xa8\x01\n\x1fcluster_min_healthy_percentages\x18\x04\x20\x03(\x0b2a.env\
    oy.extensions.filters.http.health_check.v4alpha.HealthCheck.ClusterMinHe\
    althyPercentagesEntryR\x1cclusterMinHealthyPercentages\x12C\n\x07headers\
    \x18\x05\x20\x03(\x0b2).envoy.config.route.v4alpha.HeaderMatcherR\x07hea\
    ders\x1ag\n!ClusterMinHealthyPercentagesEntry\x12\x10\n\x03key\x18\x01\
    \x20\x01(\tR\x03key\x12,\n\x05value\x18\x02\x20\x01(\x0b2\x16.envoy.type\
    .v3.PercentR\x05value:\x028\x01:@\x9a\xc5\x88\x1e;\n9envoy.extensions.fi\
    lters.http.health_check.v3.HealthCheckJ\x04\x08\x02\x10\x03B^\n@io.envoy\
    proxy.envoy.extensions.filters.http.health_check.v4alphaB\x10HealthCheck\
    ProtoP\x01\xba\x80\xc8\xd1\x06\x02\x10\x03b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
