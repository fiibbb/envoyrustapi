// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `udpa/annotations/security.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct FieldSecurityAnnotation {
    // message fields
    pub configure_for_untrusted_downstream: bool,
    pub configure_for_untrusted_upstream: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FieldSecurityAnnotation {
    fn default() -> &'a FieldSecurityAnnotation {
        <FieldSecurityAnnotation as ::protobuf::Message>::default_instance()
    }
}

impl FieldSecurityAnnotation {
    pub fn new() -> FieldSecurityAnnotation {
        ::std::default::Default::default()
    }

    // bool configure_for_untrusted_downstream = 1;


    pub fn get_configure_for_untrusted_downstream(&self) -> bool {
        self.configure_for_untrusted_downstream
    }
    pub fn clear_configure_for_untrusted_downstream(&mut self) {
        self.configure_for_untrusted_downstream = false;
    }

    // Param is passed by value, moved
    pub fn set_configure_for_untrusted_downstream(&mut self, v: bool) {
        self.configure_for_untrusted_downstream = v;
    }

    // bool configure_for_untrusted_upstream = 2;


    pub fn get_configure_for_untrusted_upstream(&self) -> bool {
        self.configure_for_untrusted_upstream
    }
    pub fn clear_configure_for_untrusted_upstream(&mut self) {
        self.configure_for_untrusted_upstream = false;
    }

    // Param is passed by value, moved
    pub fn set_configure_for_untrusted_upstream(&mut self, v: bool) {
        self.configure_for_untrusted_upstream = v;
    }
}

impl ::protobuf::Message for FieldSecurityAnnotation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.configure_for_untrusted_downstream = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.configure_for_untrusted_upstream = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.configure_for_untrusted_downstream != false {
            my_size += 2;
        }
        if self.configure_for_untrusted_upstream != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.configure_for_untrusted_downstream != false {
            os.write_bool(1, self.configure_for_untrusted_downstream)?;
        }
        if self.configure_for_untrusted_upstream != false {
            os.write_bool(2, self.configure_for_untrusted_upstream)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FieldSecurityAnnotation {
        FieldSecurityAnnotation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "configure_for_untrusted_downstream",
                |m: &FieldSecurityAnnotation| { &m.configure_for_untrusted_downstream },
                |m: &mut FieldSecurityAnnotation| { &mut m.configure_for_untrusted_downstream },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "configure_for_untrusted_upstream",
                |m: &FieldSecurityAnnotation| { &m.configure_for_untrusted_upstream },
                |m: &mut FieldSecurityAnnotation| { &mut m.configure_for_untrusted_upstream },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FieldSecurityAnnotation>(
                "FieldSecurityAnnotation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FieldSecurityAnnotation {
        static instance: ::protobuf::rt::LazyV2<FieldSecurityAnnotation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FieldSecurityAnnotation::new)
    }
}

impl ::protobuf::Clear for FieldSecurityAnnotation {
    fn clear(&mut self) {
        self.configure_for_untrusted_downstream = false;
        self.configure_for_untrusted_upstream = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FieldSecurityAnnotation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FieldSecurityAnnotation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

/// Extension fields
pub mod exts {

    pub const security: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, ::protobuf::types::ProtobufTypeMessage<super::FieldSecurityAnnotation>> = ::protobuf::ext::ExtFieldOptional { field_number: 11122993, phantom: ::std::marker::PhantomData };
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1fudpa/annotations/security.proto\x12\x10udpa.annotations\x1a\x1dudp\
    a/annotations/status.proto\x1a\x19google/protobuf/any.proto\x1a\x20googl\
    e/protobuf/descriptor.proto\x1a\x17validate/validate.proto\"\xaf\x01\n\
    \x17FieldSecurityAnnotation\x12K\n\"configure_for_untrusted_downstream\
    \x18\x01\x20\x01(\x08R\x1fconfigureForUntrustedDownstream\x12G\n\x20conf\
    igure_for_untrusted_upstream\x18\x02\x20\x01(\x08R\x1dconfigureForUntrus\
    tedUpstream:g\n\x08security\x18\xb1\xf2\xa6\x05\x20\x01(\x0b2).udpa.anno\
    tations.FieldSecurityAnnotation\x12\x1d.google.protobuf.FieldOptionsR\
    \x08securityB\x08\xba\x80\xc8\xd1\x06\x02\x08\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
