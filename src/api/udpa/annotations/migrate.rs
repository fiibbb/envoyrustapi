// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `udpa/annotations/migrate.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct MigrateAnnotation {
    // message fields
    pub rename: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MigrateAnnotation {
    fn default() -> &'a MigrateAnnotation {
        <MigrateAnnotation as ::protobuf::Message>::default_instance()
    }
}

impl MigrateAnnotation {
    pub fn new() -> MigrateAnnotation {
        ::std::default::Default::default()
    }

    // string rename = 1;


    pub fn get_rename(&self) -> &str {
        &self.rename
    }
    pub fn clear_rename(&mut self) {
        self.rename.clear();
    }

    // Param is passed by value, moved
    pub fn set_rename(&mut self, v: ::std::string::String) {
        self.rename = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rename(&mut self) -> &mut ::std::string::String {
        &mut self.rename
    }

    // Take field
    pub fn take_rename(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rename, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MigrateAnnotation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rename)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.rename.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.rename);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.rename.is_empty() {
            os.write_string(1, &self.rename)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MigrateAnnotation {
        MigrateAnnotation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rename",
                |m: &MigrateAnnotation| { &m.rename },
                |m: &mut MigrateAnnotation| { &mut m.rename },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MigrateAnnotation>(
                "MigrateAnnotation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MigrateAnnotation {
        static instance: ::protobuf::rt::LazyV2<MigrateAnnotation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MigrateAnnotation::new)
    }
}

impl ::protobuf::Clear for MigrateAnnotation {
    fn clear(&mut self) {
        self.rename.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MigrateAnnotation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MigrateAnnotation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FieldMigrateAnnotation {
    // message fields
    pub rename: ::std::string::String,
    pub oneof_promotion: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FieldMigrateAnnotation {
    fn default() -> &'a FieldMigrateAnnotation {
        <FieldMigrateAnnotation as ::protobuf::Message>::default_instance()
    }
}

impl FieldMigrateAnnotation {
    pub fn new() -> FieldMigrateAnnotation {
        ::std::default::Default::default()
    }

    // string rename = 1;


    pub fn get_rename(&self) -> &str {
        &self.rename
    }
    pub fn clear_rename(&mut self) {
        self.rename.clear();
    }

    // Param is passed by value, moved
    pub fn set_rename(&mut self, v: ::std::string::String) {
        self.rename = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rename(&mut self) -> &mut ::std::string::String {
        &mut self.rename
    }

    // Take field
    pub fn take_rename(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rename, ::std::string::String::new())
    }

    // string oneof_promotion = 2;


    pub fn get_oneof_promotion(&self) -> &str {
        &self.oneof_promotion
    }
    pub fn clear_oneof_promotion(&mut self) {
        self.oneof_promotion.clear();
    }

    // Param is passed by value, moved
    pub fn set_oneof_promotion(&mut self, v: ::std::string::String) {
        self.oneof_promotion = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_oneof_promotion(&mut self) -> &mut ::std::string::String {
        &mut self.oneof_promotion
    }

    // Take field
    pub fn take_oneof_promotion(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.oneof_promotion, ::std::string::String::new())
    }
}

impl ::protobuf::Message for FieldMigrateAnnotation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rename)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.oneof_promotion)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.rename.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.rename);
        }
        if !self.oneof_promotion.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.oneof_promotion);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.rename.is_empty() {
            os.write_string(1, &self.rename)?;
        }
        if !self.oneof_promotion.is_empty() {
            os.write_string(2, &self.oneof_promotion)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FieldMigrateAnnotation {
        FieldMigrateAnnotation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rename",
                |m: &FieldMigrateAnnotation| { &m.rename },
                |m: &mut FieldMigrateAnnotation| { &mut m.rename },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "oneof_promotion",
                |m: &FieldMigrateAnnotation| { &m.oneof_promotion },
                |m: &mut FieldMigrateAnnotation| { &mut m.oneof_promotion },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FieldMigrateAnnotation>(
                "FieldMigrateAnnotation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FieldMigrateAnnotation {
        static instance: ::protobuf::rt::LazyV2<FieldMigrateAnnotation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FieldMigrateAnnotation::new)
    }
}

impl ::protobuf::Clear for FieldMigrateAnnotation {
    fn clear(&mut self) {
        self.rename.clear();
        self.oneof_promotion.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FieldMigrateAnnotation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FieldMigrateAnnotation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FileMigrateAnnotation {
    // message fields
    pub move_to_package: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FileMigrateAnnotation {
    fn default() -> &'a FileMigrateAnnotation {
        <FileMigrateAnnotation as ::protobuf::Message>::default_instance()
    }
}

impl FileMigrateAnnotation {
    pub fn new() -> FileMigrateAnnotation {
        ::std::default::Default::default()
    }

    // string move_to_package = 2;


    pub fn get_move_to_package(&self) -> &str {
        &self.move_to_package
    }
    pub fn clear_move_to_package(&mut self) {
        self.move_to_package.clear();
    }

    // Param is passed by value, moved
    pub fn set_move_to_package(&mut self, v: ::std::string::String) {
        self.move_to_package = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_move_to_package(&mut self) -> &mut ::std::string::String {
        &mut self.move_to_package
    }

    // Take field
    pub fn take_move_to_package(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.move_to_package, ::std::string::String::new())
    }
}

impl ::protobuf::Message for FileMigrateAnnotation {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.move_to_package)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.move_to_package.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.move_to_package);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.move_to_package.is_empty() {
            os.write_string(2, &self.move_to_package)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FileMigrateAnnotation {
        FileMigrateAnnotation::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "move_to_package",
                |m: &FileMigrateAnnotation| { &m.move_to_package },
                |m: &mut FileMigrateAnnotation| { &mut m.move_to_package },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FileMigrateAnnotation>(
                "FileMigrateAnnotation",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FileMigrateAnnotation {
        static instance: ::protobuf::rt::LazyV2<FileMigrateAnnotation> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FileMigrateAnnotation::new)
    }
}

impl ::protobuf::Clear for FileMigrateAnnotation {
    fn clear(&mut self) {
        self.move_to_package.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FileMigrateAnnotation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FileMigrateAnnotation {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

/// Extension fields
pub mod exts {

    pub const message_migrate: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::MessageOptions, ::protobuf::types::ProtobufTypeMessage<super::MigrateAnnotation>> = ::protobuf::ext::ExtFieldOptional { field_number: 171962766, phantom: ::std::marker::PhantomData };

    pub const field_migrate: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FieldOptions, ::protobuf::types::ProtobufTypeMessage<super::FieldMigrateAnnotation>> = ::protobuf::ext::ExtFieldOptional { field_number: 171962766, phantom: ::std::marker::PhantomData };

    pub const enum_migrate: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::EnumOptions, ::protobuf::types::ProtobufTypeMessage<super::MigrateAnnotation>> = ::protobuf::ext::ExtFieldOptional { field_number: 171962766, phantom: ::std::marker::PhantomData };

    pub const enum_value_migrate: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::EnumValueOptions, ::protobuf::types::ProtobufTypeMessage<super::MigrateAnnotation>> = ::protobuf::ext::ExtFieldOptional { field_number: 171962766, phantom: ::std::marker::PhantomData };

    pub const file_migrate: ::protobuf::ext::ExtFieldOptional<::protobuf::descriptor::FileOptions, ::protobuf::types::ProtobufTypeMessage<super::FileMigrateAnnotation>> = ::protobuf::ext::ExtFieldOptional { field_number: 171962766, phantom: ::std::marker::PhantomData };
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1eudpa/annotations/migrate.proto\x12\x10udpa.annotations\x1a\x20goog\
    le/protobuf/descriptor.proto\"+\n\x11MigrateAnnotation\x12\x16\n\x06rena\
    me\x18\x01\x20\x01(\tR\x06rename\"Y\n\x16FieldMigrateAnnotation\x12\x16\
    \n\x06rename\x18\x01\x20\x01(\tR\x06rename\x12'\n\x0foneof_promotion\x18\
    \x02\x20\x01(\tR\x0eoneofPromotion\"?\n\x15FileMigrateAnnotation\x12&\n\
    \x0fmove_to_package\x18\x02\x20\x01(\tR\rmoveToPackage:p\n\x0fmessage_mi\
    grate\x18\x8e\xe3\xffQ\x20\x01(\x0b2#.udpa.annotations.MigrateAnnotation\
    \x12\x1f.google.protobuf.MessageOptionsR\x0emessageMigrate:o\n\rfield_mi\
    grate\x18\x8e\xe3\xffQ\x20\x01(\x0b2(.udpa.annotations.FieldMigrateAnnot\
    ation\x12\x1d.google.protobuf.FieldOptionsR\x0cfieldMigrate:g\n\x0cenum_\
    migrate\x18\x8e\xe3\xffQ\x20\x01(\x0b2#.udpa.annotations.MigrateAnnotati\
    on\x12\x1c.google.protobuf.EnumOptionsR\x0benumMigrate:w\n\x12enum_value\
    _migrate\x18\x8e\xe3\xffQ\x20\x01(\x0b2#.udpa.annotations.MigrateAnnotat\
    ion\x12!.google.protobuf.EnumValueOptionsR\x10enumValueMigrate:k\n\x0cfi\
    le_migrate\x18\x8e\xe3\xffQ\x20\x01(\x0b2'.udpa.annotations.FileMigrateA\
    nnotation\x12\x1c.google.protobuf.FileOptionsR\x0bfileMigrateb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
