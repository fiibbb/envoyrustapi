// This file is generated by rust-protobuf 2.18.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `udpa/data/orca/v1/orca_load_report.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_1;

#[derive(PartialEq,Clone,Default)]
pub struct OrcaLoadReport {
    // message fields
    pub cpu_utilization: f64,
    pub mem_utilization: f64,
    pub rps: u64,
    pub request_cost: ::std::collections::HashMap<::std::string::String, f64>,
    pub utilization: ::std::collections::HashMap<::std::string::String, f64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OrcaLoadReport {
    fn default() -> &'a OrcaLoadReport {
        <OrcaLoadReport as ::protobuf::Message>::default_instance()
    }
}

impl OrcaLoadReport {
    pub fn new() -> OrcaLoadReport {
        ::std::default::Default::default()
    }

    // double cpu_utilization = 1;


    pub fn get_cpu_utilization(&self) -> f64 {
        self.cpu_utilization
    }
    pub fn clear_cpu_utilization(&mut self) {
        self.cpu_utilization = 0.;
    }

    // Param is passed by value, moved
    pub fn set_cpu_utilization(&mut self, v: f64) {
        self.cpu_utilization = v;
    }

    // double mem_utilization = 2;


    pub fn get_mem_utilization(&self) -> f64 {
        self.mem_utilization
    }
    pub fn clear_mem_utilization(&mut self) {
        self.mem_utilization = 0.;
    }

    // Param is passed by value, moved
    pub fn set_mem_utilization(&mut self, v: f64) {
        self.mem_utilization = v;
    }

    // uint64 rps = 3;


    pub fn get_rps(&self) -> u64 {
        self.rps
    }
    pub fn clear_rps(&mut self) {
        self.rps = 0;
    }

    // Param is passed by value, moved
    pub fn set_rps(&mut self, v: u64) {
        self.rps = v;
    }

    // repeated .udpa.data.orca.v1.OrcaLoadReport.RequestCostEntry request_cost = 4;


    pub fn get_request_cost(&self) -> &::std::collections::HashMap<::std::string::String, f64> {
        &self.request_cost
    }
    pub fn clear_request_cost(&mut self) {
        self.request_cost.clear();
    }

    // Param is passed by value, moved
    pub fn set_request_cost(&mut self, v: ::std::collections::HashMap<::std::string::String, f64>) {
        self.request_cost = v;
    }

    // Mutable pointer to the field.
    pub fn mut_request_cost(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, f64> {
        &mut self.request_cost
    }

    // Take field
    pub fn take_request_cost(&mut self) -> ::std::collections::HashMap<::std::string::String, f64> {
        ::std::mem::replace(&mut self.request_cost, ::std::collections::HashMap::new())
    }

    // repeated .udpa.data.orca.v1.OrcaLoadReport.UtilizationEntry utilization = 5;


    pub fn get_utilization(&self) -> &::std::collections::HashMap<::std::string::String, f64> {
        &self.utilization
    }
    pub fn clear_utilization(&mut self) {
        self.utilization.clear();
    }

    // Param is passed by value, moved
    pub fn set_utilization(&mut self, v: ::std::collections::HashMap<::std::string::String, f64>) {
        self.utilization = v;
    }

    // Mutable pointer to the field.
    pub fn mut_utilization(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, f64> {
        &mut self.utilization
    }

    // Take field
    pub fn take_utilization(&mut self) -> ::std::collections::HashMap<::std::string::String, f64> {
        ::std::mem::replace(&mut self.utilization, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for OrcaLoadReport {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.cpu_utilization = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.mem_utilization = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.rps = tmp;
                },
                4 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeDouble>(wire_type, is, &mut self.request_cost)?;
                },
                5 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeDouble>(wire_type, is, &mut self.utilization)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.cpu_utilization != 0. {
            my_size += 9;
        }
        if self.mem_utilization != 0. {
            my_size += 9;
        }
        if self.rps != 0 {
            my_size += ::protobuf::rt::value_size(3, self.rps, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeDouble>(4, &self.request_cost);
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeDouble>(5, &self.utilization);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.cpu_utilization != 0. {
            os.write_double(1, self.cpu_utilization)?;
        }
        if self.mem_utilization != 0. {
            os.write_double(2, self.mem_utilization)?;
        }
        if self.rps != 0 {
            os.write_uint64(3, self.rps)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeDouble>(4, &self.request_cost, os)?;
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeDouble>(5, &self.utilization, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OrcaLoadReport {
        OrcaLoadReport::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "cpu_utilization",
                |m: &OrcaLoadReport| { &m.cpu_utilization },
                |m: &mut OrcaLoadReport| { &mut m.cpu_utilization },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                "mem_utilization",
                |m: &OrcaLoadReport| { &m.mem_utilization },
                |m: &mut OrcaLoadReport| { &mut m.mem_utilization },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "rps",
                |m: &OrcaLoadReport| { &m.rps },
                |m: &mut OrcaLoadReport| { &mut m.rps },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeDouble>(
                "request_cost",
                |m: &OrcaLoadReport| { &m.request_cost },
                |m: &mut OrcaLoadReport| { &mut m.request_cost },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeDouble>(
                "utilization",
                |m: &OrcaLoadReport| { &m.utilization },
                |m: &mut OrcaLoadReport| { &mut m.utilization },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OrcaLoadReport>(
                "OrcaLoadReport",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OrcaLoadReport {
        static instance: ::protobuf::rt::LazyV2<OrcaLoadReport> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OrcaLoadReport::new)
    }
}

impl ::protobuf::Clear for OrcaLoadReport {
    fn clear(&mut self) {
        self.cpu_utilization = 0.;
        self.mem_utilization = 0.;
        self.rps = 0;
        self.request_cost.clear();
        self.utilization.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OrcaLoadReport {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OrcaLoadReport {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n(udpa/data/orca/v1/orca_load_report.proto\x12\x11udpa.data.orca.v1\x1a\
    \x17validate/validate.proto\"\x85\x04\n\x0eOrcaLoadReport\x12E\n\x0fcpu_\
    utilization\x18\x01\x20\x01(\x01R\x0ecpuUtilizationB\x1c\xfaB\x0b\x12\t)\
    \0\0\0\0\0\0\0\0\xfaB\x0b\x12\t\x19\0\0\0\0\0\0\xf0?\x12E\n\x0fmem_utili\
    zation\x18\x02\x20\x01(\x01R\x0ememUtilizationB\x1c\xfaB\x0b\x12\t)\0\0\
    \0\0\0\0\0\0\xfaB\x0b\x12\t\x19\0\0\0\0\0\0\xf0?\x12\x10\n\x03rps\x18\
    \x03\x20\x01(\x04R\x03rps\x12U\n\x0crequest_cost\x18\x04\x20\x03(\x0b22.\
    udpa.data.orca.v1.OrcaLoadReport.RequestCostEntryR\x0brequestCost\x12|\n\
    \x0butilization\x18\x05\x20\x03(\x0b22.udpa.data.orca.v1.OrcaLoadReport.\
    UtilizationEntryR\x0butilizationB&\xfaB\x10\x9a\x01\r*\x0b\x12\t)\0\0\0\
    \0\0\0\0\0\xfaB\x10\x9a\x01\r*\x0b\x12\t\x19\0\0\0\0\0\0\xf0?\x1a>\n\x10\
    RequestCostEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\
    \x05value\x18\x02\x20\x01(\x01R\x05value:\x028\x01\x1a>\n\x10Utilization\
    Entry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\
    \x02\x20\x01(\x01R\x05value:\x028\x01B:\n!com.github.udpa.udpa.data.orca\
    .v1B\x13OrcaLoadReportProtoP\x01b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
